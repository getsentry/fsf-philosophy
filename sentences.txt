15 years of free software. 
it is now just over 15 years since the beginning of the free software movement and the gnu project. 
we have come a long way. 
in 1984, it was impossible to use a modern computer without installing a proprietary operating system, which you would have to obtain under a restrictive license. 
no one was allowed to share software freely with fellow computer users, and hardly anyone could change software to fit his or her own needs. 
the owners of software had erected walls to divide us from each other. 
the gnu project was founded to change all that. 
its first goal: to develop a unix-compatible portable operating system that would be 100% free software. 
not 95% free, not 99.5%, but 100%—so that users would be free to redistribute the whole system, and free to change and contribute to any part of it. 
the name of the system, gnu, is a recursive acronym meaning "gnu's not unix"—a way of paying tribute to the technical ideas of unix, while at the same time saying that gnu is something different. 
technically, gnu is like unix. 
but unlike unix, gnu gives its users freedom. 
it took many years of work, by hundreds of programmers, to develop this operating system. 
some were paid by the free software foundation and by free software companies; most were volunteers. 
a few have become famous; most are known mainly within their profession, by other hackers who use or work on their code. 
all together have helped to liberate the potential of the computer network for all humanity. 
in 1991, the last major essential component of a unix-like system was developed: linux, the free kernel written by linus torvalds. 
today, the combination of gnu and linux is used by millions of people around the world, and its popularity is growing. 
this month, we announced release 1.0 of gnome, the gnu graphical desktop, which we hope will make the gnu/linux system as easy to use as any other operating system. 
but our freedom is not permanently assured. 
the world does not stand still, and we cannot count on having freedom five years from now, just because we have it today. 
free software faces difficult challenges and dangers. 
it will take determined efforts to preserve our freedom, just as it took to obtain freedom in the first place. 
meanwhile, the operating system is just the beginning—now we need to add free applications to handle the whole range of jobs that users want to do. 
in future columns, i will be writing about the specific challenges facing the free software community, and other issues affecting freedom for computer users, as well as developments affecting the gnu/linux operating system. 
shaping collaborative ict development and initiatives for global prosperity. 
from a presentation given at the second global knowledge conference in kuala lumpur, malaysia, on 7 march 2000. 
the title of this presentation is "shaping collaborative ict development and initiatives for global prosperity" and the themes of this conference are "access," "empowerment" and "governance."
 what i want to do today is take one specific technology and talk about the way we have shaped that technology to make it accessible and empowering, how we have placed it in an economic and institutional framework that encourages people to work collaboratively, and how to use the technology for better governance. 
the technology is software. 
the shaping has to do with copyright licensing terms—its legal and institutional framework. 
as a founder of the free software foundation, i have been working for 16 years with the legal and institutional framework in which we use and develop software. 
gnu/linux, a complete software system, is the outcome of these efforts. 
ict, the information and communications technologies, are made up of hardware and software components. 
i am speaking here only of software. 
however, i hope we can extend our experience from this to other technologies. 
when i speak of software, i am speaking both about the programs that run the computer, that is to say, the operating system, and about applications, such as electronic mail and other communications, spreadsheets, electronic commerce, writing tools, sending and receiving faxes, web site creation, engineering, research, mathematical computations, modeling, image manipulation, and networking. 
over the last few years, the prices of computer and telecommunications hardware have dropped to the point that many more people are using them. 
indeed, our conference organizers estimate that as many as one out of every thirty people in the world have computer-based, online telecommunications access. 
while one out of thirty is still a small portion of the world's population, this technology is popular, growing, and becoming more important in our daily lives. 
in addition, we expect that computer and telecommunications prices will continue to drop for at least another generation, so many who currently lack resources will eventually benefit. 
as with any technology, software can be employed well or badly. 
at the moment we see both. 
on the bad side, we see machines that crash unnecessarily, email messages that waste their recipients money, systems that are vulnerable to simple viruses, and programs that do only part of what you want. 
the key to good use of software is to ensure freedom. 
in software, this leads to collaboration, lower prices, reliability, efficiency, security, and fewer barriers to entry and use. 
for a good use of software technology, people must have the legal right to copy, study, modify, and redistribute it. 
all else flows from this. 
gnu/linux software gives people these rights. 
programmers benefit, and more importantly, people who are not programmers benefit. 
for example, people in an area with lousy or no telephone service can use a rugged package called uucp for communications. 
i recently read of an oxfam group that did this. 
people with older machines, even with the very old 80386 chips, can run efficient programs that do as much as programs that require a modern pentium chip and expensive memory. 
and they can use these machines as servers for web pages and as routers—for communications' infrastructure. 
people with just one computer can attach one or two additional terminals to it, and provide two or three seats in place of one, for very little extra cost. 
i have done this: a friend visited and we both wanted to work on my computer at the same time. 
email, web browsing, writing, remote system administration: we did all these at the same time. 
a community group, or business, can set up its own mailing lists or news groups, private or public. 
the groupware is there. 
two or more people can work on the same document at the same time, even if they are in different countries. 
the last time i did that, i was working with a fellow on the other side of the atlantic ocean. 
what script do you want to write in? 
hindi, chinese, thai? 
all these are possible, and in the same window as english or cyrillic. 
individuals or groups can set up their own web sites. 
a publisher can typeset his own books. 
an accountant can analyze a budget. 
blind people can listen to text read out loud to them by the computer. 
you can enjoy choosing among several graphic user interfaces, a fancy one, another that looks and behaves rather like microsoft windows, or a third, that is simple and practical. 
except for the blind person's speech generation, which requires audio that i never installed in my machine, every application i have just mentioned runs on my home computer. 
and people i know have installed audio and listen to it. 
all these applications came on a cd-rom that was, as it happens, given me at no charge. 
i have also paid for cds with a different version of the software—sometimes it is more convenient just to buy. 
and if you have a fast internet connection, you can readily download the software, paying only your connection costs. 
this wealth of software is available and can be used anywhere in the world. 
to return to the question of how this technology was shaped: the key, as i said, is freedom, the legal right to copy, study, modify, and redistribute the software. 
the specific legal tool we used to create these freedoms and the resulting benefits is a specially drafted copyright license, the gnu general public license. 
this license gives you more rights than plain copyright does, and more rights than many other kinds of software license. 
in essence, it forbids you to forbid. 
it permits you to do everything else. 
let me go through this list of rights: copy, study, modify, and redistribute. 
first, the right to copy. 
not many people own a factory that would enable them to copy a car. 
indeed, to copy a car is so difficult that we use a different word, we speak of "manufacturing" a car. 
and there are not many car manufacturers in the world. 
far fewer than one in thirty people own or have ready access to a car factory. 
but everyone with a computer owns a software factory, a device for manufacturing software, that is to say, for making new copies. 
because copying software is so easy, we don't use the word "manufacturing"; we usually do not even think of it as a kind of manufacturing, but it is. 
the right to copy software is the right to use your own means of production (if you will pardon my use of an expression that has gone out of fashion). 
millions of people, a few percent of the world's population, own this means of production. 
naturally, there have been efforts to take away your rights to use your own property as a factory that you own. 
second, the right to study. 
this right is of little direct interest to people who are not programmers. 
it is like the right of a lawyer to read legal text books. 
unless you are a lawyer, you probably wish to avoid such books. 
however, this right to study has several implications, both for those who program and for everyone else. 
the right to study means that people in places like mexico, or india, or malaysia can study the same code that people in europe or the united states use. 
it means that these people are not kept from learning how others succeeded. 
bear in mind that many programmers work under restrictions that forbid them from seeing others' code. 
rather than sit on the shoulders of those who went before, which is the best way to see ahead and to advance, they are thrown into the mud. 
the right to study is the right to look ahead, to advance, by sitting on the shoulders of giants. 
moreover, the right to study means that the software itself must be made available in a manner that humans can read. 
software comes in two forms, one readable only by computers and the other readable by people. 
the form that a computer can read is what the computer runs. 
this form is called a binary or executable. 
the form that a human can read is called source code. 
it is what a human programmer creates, and is translated by another computer program into the binary or executable form. 
the next right, the right to modify, is the right to fix a problem or enhance a program. 
for most people, this means your right or your organization's right to hire someone to do the job for you, in much the same way you hire an auto mechanic to fix your car or a carpenter to extend your home. 
modification is helpful. 
application developers cannot think of all the ways others will use their software. 
developers cannot foresee the new burdens that will be put on their code. 
they cannot anticipate all the local conditions, whether someone in malaysia will use a program first written in finland. 
finally, of these legal rights, comes the right to redistribute. 
this means that you, who own a computer, a software factory, have the right to make copies of a program and redistribute it. 
you can charge for these copies, or give them away. 
others may do the same. 
of course, several existing, large software manufacturers want to forbid you from using your own property. 
they cannot win in a free market, so they attack in other ways. 
in the united states, for example, we see newly proposed laws to take away your freedom. 
the right to redistribute, so long as it is defended and upheld, means that software is sold in a competitive, free market. 
this has several consequences. 
low price is a consequence. 
this helps consumers. 
but first and foremost, these legal and economic rights lead to collaboration, one of themes of this conference. 
this outcome is contrary to many people's expectations. 
few expect that in a competitive, free market, every producer will become more collaborative and that there will be no visible or felt competition among competing businessmen. 
the more competitive a market, the more cooperation you see. 
this apparently counter-intuitive implication is both observed and inferred. 
this is because people are not harmed by doing what they want to do. 
people like to help their neighbors. 
consider a small farmer, one among a million. 
my friend george, back in the united states, is one such. 
his harvest is so small, that there is nothing he can do to effect the world price. 
his neighbor is in a similar situation. 
consequently, if george helps his neighbor, his neighbor benefits, and george himself loses nothing on the price he receives for his harvest. 
since george will not hurt himself, he has every other reason to help his neighbor. 
not only is george kindly, he also recognizes that when he helps his neighbor, his neighbor is likely to return the favor. 
this is what you see in a competitive free market: cooperation. 
visible competition indicates that the market is not fully free and competitive. 
visible competition means that at most you have a semi-free market. 
moreover, and this benefits people who are not programmers, if software is sold in a free market, competition among vendors will lead to a lower price. 
put another way, the price of software is determined primarily by legal considerations: by the degree to which customers enjoy freedom. 
if customers are forbidden to buy a product except at a high price, and that prohibition is successfully enforced, the product will be expensive. 
this is what occurs with much proprietary software today. 
on the other hand, if software is sold in a free market, competition among vendors will lead to a lower price. 
indeed, in some circumstances the cost will be so low that companies or other organizations will give away cd-roms containing the software; others will make copies for their friends; and yet others will provide downloads over the internet at no charge. 
this means that software itself, a necessary supporting part of a business or community project, will be both inexpensive and legal. 
think of this from the point of view of a small business or community supported group. 
the organization can use restricted-distribution, proprietary software, and either pay a lot of money it does not have, or break the law and steal it. 
on the other hand, free software is inexpensive and legal. 
it is more accessible. 
it is also customizable in ways that restricted software often is not. 
this is empowering. 
we shape the development of this technology, we create collaboration, through the use of a legal tool, a license, that gives you more rights than you would have otherwise, that forbids you to forbid, that in this case, gives you the right to copy, study, modify, and redistribute the software. 
because of the freedoms associated with it, this software is called "free software."
 while i am speaking of this phrase, let me clear up a verbal issue that sometimes confuses english speakers. 
the low price of free software leads some english speakers to think that the word "free" in the phrase "free software" means they can obtain it without cost. 
this is not the definition, which is about freedom, but it is an easy misunderstanding. 
after all, i have been talking of frugal use of resources, software that is inexpensive. 
the english word "free" has several meanings. 
as a mexican friend of mine—and leader, by the way, of a major free software project—once said to me, english is broken; it does not distinguish between "free beer" and "free speech."
 spanish, on the other hand, distinguishes between "gratis" and "libre."
 free software is "libre" software. 
likewise, the language of our hosts, bahasa melayu, distinguishes between "pecuma" and "kebebasa."
 free software is "kebebasa" software. 
incidentally, eric raymond and bruce perens invented the phrase "open source" a few years ago as a synonym "free software."
 they wanted to work around the dislike many companies have of free markets. 
the phrase is popular; eric and bruce succeeded in their purpose. 
however, i prefer the term "free software" since it better conveys the goal of freedom; the proposition that every man and woman, even a person who lives in a third world country, has the right to do first rate work, and must not be forbidden from doing so. 
i mentioned that a business or community can use software that is inexpensive and legal. 
now let me turn to the software industry itself. 
because competition in a competitive market forces down the price of free software, no one enters the software industry to sell software as such. 
instead, and this is often not understood, a business enters the industry to make money in other ways. 
companies and people in the "software industry" do not sell software itself, but services associated with software or hardware or other solutions. 
this is what happens in the medical and legal professions. 
both medical knowledge and law are freely redistributable. 
physicians and lawyers sell their services to solve problems. 
what services do i mean? 
most directly, help in using a computer, or, to take more specific examples, help in setting up a packet radio network where there is no telephone, or help in creating and nurturing a warehouse data base. 
less directly, and increasingly, hardware companies that sell telephones or desalinization plants, add software to their products to make them more attractive to buyers. 
incidentally, programmers themselves write software for four main reasons: first, because they are hired to solve a problem, just as a lawyer is hired to draw up a contract. 
second, as part of another project. 
third, because it enhances their reputation. 
and fourth, because they want to. 
i have spoken about shaping this technology for collaboration. 
the key is freedom, and creating the legal framework that supports freedom. 
now let me talk about initiatives that lead to prosperity. 
one issue with development is resources, or rather, the lack thereof. 
as i said earlier, free software reduces barriers to entry, both in the software industry itself and in other industries and activities. 
free software, and the culture and ways people tend to think when they collaborate, reduces operational costs. 
let me take an example that comes directly from this conference. 
first i should tell you that i have correspondents all over the world. 
they are not all in rich countries. 
they or their supporting institutions are not always rich. 
the first messages about this conference that i received took up more than four and a half times the resources needed to convey the information. 
the messages were sent in a bloated form. 
next time you budget for a project, consider paying four and a half times its cost. 
then consider whether you would fund it. 
next time you pay at a restaurant, take out four and a half times the money… for me the resource use was not an issue because i don't pay by the minute for telecommunications, as many do. 
but i know that my correspondents around the world prefer that i take care in my communications that i do not waste their money or that of their supporting institutions. 
a notable feature of free software is that many applications run well on older, less capable machines, as i mentioned earlier. 
for example, a couple of months ago i ran a window manager, graphical web browser, and an image manipulation program on my sister's old 486 machine. 
these worked fine. 
text editors, electronic mail, and spreadsheets require even fewer resources. 
this frugality means that people can use older equipment that has been tossed out by first world companies. 
such equipment is inexpensive and often donated. 
the computers need to be transported. 
sometimes you need to start a local project to refurbish the hardware and load it with inexpensive, customized, free software. 
these machines cost the end user less than new machines. 
at the same time, manufacturers are building modern, low end computers that do as much as the older ones, and are not too expensive. 
there is no need to acquire expensive, new hardware to run your software. 
in conclusion— i was asked to speak on "shaping collaborative ict development and initiatives for global prosperity" over the past 16 years, i have worked with people who shaped software through a legal tool that gives you many freedoms: the freedoms to copy, study, modify, and redistribute the software. 
this tool shapes software technology to make it more accessible and more empowering; it encourages people to work collaboratively, and provides a technology for better governance. 
this legal tool means that companies in the ict industry compete not to sell software itself, but to sell services associated with it, or to sell hardware, or other solutions. 
this legal framework means that companies will provide more reliable and efficient services. 
freedom, ensured by a proper license, means that people who use computers and telecommunications as tools can enter their industry more easily. 
it means that all users can reduce their entry and operational costs. 
it means that people in poorer countries are not shipping off their money to a rich country, but are keeping their money in the local economy. 
moreover, as i said above, restricted-distribution software licenses often force people to choose between violating the law and paying money they may not have. 
as a matter of good governance, a country should not force people who are trying to do a decent job into making such decisions. 
too often an otherwise law-abiding person who lacks resources will choose to violate the law. 
instead, a country should arrange matters such that acting in a law abiding manner is without doubt the best action, for legal, moral, and practical reasons. 
people always hope their neighbors will be law abiding and honest; free software encourages that. 
free software empowers people who previously were kept out. 
(formerly) boycott amazon!. 
the fsf decided to end its boycott of amazon in september 2002. 
(we forgot to edit this page at the time.) we could not tell the precise result of the lawsuit against barnes & noble, but it did not seem to be very harmful to the defendant. 
and amazon had not attacked anyone else. 
amazon has got a number of other menacing patents since then, but has not as yet used them for aggression. 
perhaps it will not do so. 
if it does, we will take a look at how to denounce it. 
the rest of this page is as it was in 2001 while the boycott was active. 
if you support the boycott, please make links to this page http://www.gnu.org/philosophy/amazon.html !!!! 
why we boycott amazon. 
amazon has obtained a us patent (5,960,411) on an important and obvious idea for e-commerce: an idea sometimes known as one-click purchasing. 
the idea is that your command in a web browser to buy a certain item can carry along information about your identity. 
(it works by sending the server a "cookie," a kind of id code that your browser received previously from the same server.) amazon has sued to block the use of this simple idea, showing that they truly intend to monopolize it. 
this is an attack against the world wide web and against e-commerce in general. 
the idea patented here is just that a company can give you something which you can subsequently show them to identify yourself for credit. 
this is nothing new: a physical credit card does the same job, after all. 
but the us patent office issues patents on obvious and well-known ideas every day. 
sometimes the result is a disaster. 
today amazon is suing one large company. 
if this were just a dispute between two companies, it would not be an important public issue. 
but the patent gives amazon the power over anyone who runs a web site in the us (and any other countries that give them similar patents)—power to control all use of this technique. 
although only one company is being sued today, the issue affects the whole internet. 
amazon is not alone at fault in what is happening. 
the us patent office is to blame for having very low standards, and us courts are to blame for endorsing them. 
and us patent law is to blame for authorizing patents on information-manipulating techniques and patterns of communication—a policy that is harmful in general. 
foolish government policies gave amazon the opportunity—but an opportunity is not an excuse. 
amazon made the choice to obtain this patent, and the choice to use it in court for aggression. 
the ultimate moral responsibility for amazon's actions lies with amazon's executives. 
we can hope that the court will find this patent is legally invalid. 
whether they do so will depend on detailed facts and obscure technicalities. 
the patent uses piles of semi-relevant detail to make this "invention" look like something subtle. 
but we do not have to wait passively for the court to decide the freedom of e-commerce. 
there is something we can do right now: we can refuse to do business with amazon. 
please do not buy anything from amazon until they promise to stop using this patent to threaten or restrict other web sites. 
if you are the author of a book sold by amazon, you can provide powerful help to this campaign by putting this text into the "author comment" about your book, on amazon's web site. 
(alas, it appears they are refusing to post these comments for authors.) if you have suggestions, or if you simply support the boycott, please send mail to <amazon@gnu.org> to let us know. 
amazon's response to people who write about the patent contains a subtle misdirection which is worth analyzing: the patent system is designed to encourage innovation, and we spent thousands of hours developing our 1-clickr shopping feature. 
if they did spend thousands of hours, they surely did not spend it thinking of the general technique that the patent covers. 
so if they are telling the truth, what did they spend those hours doing? 
perhaps they spent some of the time writing the patent application. 
that task was surely harder than thinking of the technique. 
or perhaps they are talking about the time it took designing, writing, testing, and perfecting the scripts and the web pages to handle one-click shopping. 
that was surely a substantial job. 
looking carefully at their words, it seems the "thousands of hours developing" could include either of these two jobs. 
but the issue here is not about the details in their particular scripts (which they do not release to us) and web pages (which are copyrighted anyway). 
the issue here is the general idea, and whether amazon should have a monopoly on that idea. 
are you, or i, free to spend the necessary hours writing our own scripts, our own web pages, to provide one-click shopping? 
even if we are selling something other than books, are we free to do this? 
that is the question. 
amazon seeks to deny us that freedom, with the eager help of a misguided us government. 
when amazon sends out cleverly misleading statements like the one quoted above, it demonstrates something important: they do care what the public thinks of their actions. 
they must care—they are a retailer. 
public disgust can affect their profits. 
people have pointed out that the problem of software patents is much bigger than amazon, that other companies might have acted just the same, and that boycotting amazon won't directly change patent law. 
of course, these are all true. 
but that is no argument against this boycott! 
if we mount the boycott strongly and lastingly, amazon may eventually make a concession to end it. 
and even if they do not, the next company which has an outrageous software patent and considers suing someone will realize there can be a price to pay. 
they may have second thoughts. 
the boycott can also indirectly help change patent law—by calling attention to the issue and spreading demand for change. 
and it is so easy to participate that there is no need to be deterred on that account. 
if you agree about the issue, why not boycott amazon? 
to help spread the word, please put a note about the boycott on your own personal web page, and on institutional pages as well if you can. 
make a link to this page; updated information will be placed here. 
why the boycott continues given that the suit has settled. 
amazon.com reported in march 2002 that it had settled its long-running patent-infringement suit against barnes & noble over its 1-click checkout system. 
the details of the settlement were not disclosed. 
since the terms were not disclosed, we have no way of knowing whether this represents a defeat for amazon such as would justify ending the boycott. 
thus, we encourage everyone to continue the boycott. 
updates and links. 
in this section, we list updates and links about issues related to amazon.com, their business practices, and stories related to the boycott. 
new information is added to the bottom of this section. 
tim o'reilly has sent amazon an open letter disapproving of the use of this patent, stating the position about as forcefully as possible given an unwillingness to stop doing business with them. 
richard m. stallman has written a letter to tim o'reilly in regard to the statement by jeff bezos, ceo of amazon, which called for software patents to last just 3 or 5 years. 
paul barton-davis <pbd@op.net>, one of the founding programmers at amazon, writes about the amazon boycott. 
nat friedman wrote in with an amazon boycott success story. 
on the side, amazon is doing other obnoxious things in another courtroom, too. 
see endsoftpatents.org for more information about the broader issue of software patents. 
computer professionals for social responsibility have dropped their affiliation with amazon. 
amazon letter from nat. 
this is a letter from nat friedman regarding the amazon boycott. 
please read more about this boycott and support us by making a link from your own home page! 
date: thu, 23 dec 1999 17:26:30 -0500 (est) from: nat friedman <nat@nat.org> to: richard stallman <rms@gnu.org> subject: amazon boycott success! 
content-type: text/plain; charset=us-ascii content-length: 658 hello richard, it seems that your efforts to build resistance to amazon's ludicrous one-click patent are really paying off! 
my father is a stock broker, and tonight he showed me a news item which came over his company's internal wire service describing (fairly accurately) the boycott and your roll in it. 
apparently it has been widely distributed among the brokerage firms, and amzn was down 7 points today on the news (at least, there was no other readily-apparent reason for the downturn). 
perhaps now that amazon is getting hit in the pocketbook, they'll pay more attention. 
congratulations! 
keep it up. 
as always, best wishes, nat 
letter from rms to tim o'reilly. 
here's a message that richard m. stallman sent to tim o'reilly on march 11, 2000, in regard to the statement by jeff bezos, ceo of amazon, which called for software patents to last just 3 or 5 years. 
please read more about this boycott. 
please also support us by making a link from your own home page and sites to http://www.gnu.org/philosophy/amazon.html! 
the idea that software patents should last 3 or 5 years has been proposed for a decade now, as a compromise that would eliminate most of the harm that software patents now do. 
support for this idea from jeff bezos is a good thing, since it may bring us a step closer to action by congress. 
congratulations for helping to bring this about. 
but such a law is far from imminent, and in the mean time, amazon is still responsible for its actions. 
we singled out amazon for a boycott, among the thousands of companies that have obtained software patents, because amazon is among the few that have gone so far as to actually sue someone. 
that makes them an egregious offender. 
most software patent holders say they have software patents "for defensive purposes."
 to press for cross-licensing in case they are threatened with patent lawsuits. 
since this is a real strategy for self-defense, many of these patent holders could mean what they say. 
but this excuse is not available for amazon, because they fired the first shot. 
bezos's letter reaffirms amazon's continuing intention to engage in unrestricted patent warfare, saying that the decision of when and where to attack will be decided by "business reasons."
 i would gladly join bezos in supporting a bill to limit software patents to 3 or 5 years, but i believe we must continue to criticize and boycott amazon until such a bill is actually adopted—or until amazon makes some other suitable change in its own conduct to justify a change in ours. 
this does not mean insisting that amazon must go so far as to terminate its own patents. 
deterrence with patents is an inadequate defense against aggressors armed with patents, but it is the only defense, so i would not ask amazon (or anyone) to refrain from using patents for self-defense or for collective security. 
rather, amazon and other software patent holders should abjure the use of patents for aggression, and adopt a no-first-use policy. 
if amazon does this, in an irrevocable and binding way, i would have no further criticism of amazon. 
android and users' freedom. 
to what extent does android respect the freedom of its users? 
for a computer user that values freedom, that is the most important question to ask about any software system. 
in the free/libre software movement, we develop software that respects users' freedom, so we and you can escape from software that doesn't. 
by contrast, the idea of "open source" focuses on how to develop code; it is a different current of thought whose principal value is code quality rather than freedom. 
thus, the concern here is not whether android is "open," but whether it allows users to be free. 
android is an operating system primarily for mobile phones and other devices, which consists of linux (torvalds' kernel), some libraries, a java platform and some applications. 
linux aside, the software of android versions 1 and 2 was mostly developed by google; google released it under the apache 2.0 license, which is a lax free software license without copyleft. 
the version of linux included in android is not entirely free software, since it contains nonfree "binary blobs" (just like torvalds' version of linux), some of which are really used in some android devices. 
android platforms use other nonfree firmware, too, and nonfree libraries. 
aside from those, the source code of android versions 1 and 2, as released by google, is free software—but this code is insufficient to run the device. 
some of the applications that generally come with android are nonfree, too. 
support the free your android campaign. 
android is very different from the gnu/linux operating system because it contains very little of gnu. 
indeed, just about the only component in common between android and gnu/linux is linux, the kernel. 
people who erroneously think "linux" refers to the entire gnu/linux combination get tied in knots by these facts, and make paradoxical statements such as "android contains linux, but it isn't linux."
(1) absent this confusion, the situation is simple: android contains linux, but not gnu; thus, android and gnu/linux are mostly different, because all they have in common is linux. 
within android, linux the kernel remains a separate program, with its source code under gnu gpl version 2. to combine linux with code under the apache 2.0 license would be copyright infringement, since gpl version 2 and apache 2.0 are incompatible. 
rumors that google has somehow converted linux to the apache license are erroneous; google has no power to change the license on the code of linux, and did not try. 
if the authors of linux allowed its use under gpl version 3, then that code could be combined with apache-licensed code, and the combination could be released under gpl version 3. but linux has not been released that way. 
google has complied with the requirements of the gnu general public license for linux, but the apache license on the rest of android does not require source release. 
google said it would never publish the source code of android 3.0 (aside from linux). 
android 3.1 source code was also withheld, making android 3, apart from linux, nonfree software pure and simple. 
google said it withheld the 3.0 source code because it was buggy, and that people should wait for the next release. 
that may be good advice for people who simply want to run the android system, but the users should be the ones to decide this. 
anyway, developers and tinkerers who want to include some of the changes in their own versions could use that code just fine. 
fortunately, google later released the source code for android 3.* when it released version 4 (also with source code). 
the problem above turned out to be a temporary aberration rather than a policy shift. 
however, what happens once may happen again. 
in any case, most of the source code of various versions of android has been released as free software. 
does that mean that products using those android versions respect users' freedom? 
no, for several reasons. 
first of all, most of them contain nonfree google applications for talking to services such as youtube and google maps. 
these are officially not part of android, but that doesn't make the product ok. 
many of the free applications available for earlier versions of android have been replaced by nonfree applications; in 2013 android devices appeared which provided no way to view photos except through a nonfree google+ app. 
in 2014 google announced that android versions for tvs, watches and cars would be largely nonfree. 
most android devices come with the nonfree google play software (formerly "android market"). 
this software invites users with a google account to install nonfree apps. 
it also has a back door with which google can forcibly install or deinstall apps. 
(this probably makes it a universal back door, though that is not proved.) google play is officially not part of android, but that doesn't make it any less bad. 
google has moved many basic general facilities into the nonfree google play services library. 
if an app's own code is free software but it depends on google play services, that app as a whole is effectively nonfree; it can't run on a free version of android, such as replicant. 
if you value freedom, you don't want the nonfree apps that google play offers. 
to install free android apps, you don't need google play, because you can get them from f-droid.org. 
android products also come with nonfree libraries. 
these are officially not part of android, but since various android functionalities depend on them, they are part of any real android installation. 
even the programs that are officially part of android may not correspond to the source code google releases. 
manufacturers may change this code, and often they don't release the source code for their versions. 
the gnu gpl requires them to distribute the code for their versions of linux, assuming they comply. 
the rest of the code, under the lax apache license, does not require them to release the source version that they really use. 
one user discovered that many of the programs in the android system that came with his phone were modified to send personal data to motorola. 
some manufacturers add a hidden general surveillance package such as carrier iq. 
replicant is the free version of android. 
the replicant developers have replaced many nonfree libraries, for certain device models. 
the nonfree apps are excluded, but you certainly don't want to use those. 
by contrast, cyanogenmod (another modified version of android) is nonfree, as it contains some nonfree programs. 
many android devices are "tyrants": they are designed so users cannot install and run their own modified software, only the versions approved by some company. 
in that situation, the executables are not free even if they were made from sources that are free and available to you. 
however, some android devices can be "rooted" so users can install different software. 
important firmware or drivers are generally proprietary also. 
these handle the phone network radio, wifi, bluetooth, gps, 3d graphics, the camera, the speaker, and in some cases the microphone too. 
on some models, a few of these drivers are free, and there are some that you can do without—but you can't do without the microphone or the phone network radio. 
the phone network firmware comes preinstalled. 
if all it did was sit there and talk to the phone network when you wish, we could regard it as equivalent to a circuit. 
when we insist that the software in a computing device must be free, we can overlook preinstalled firmware that will never be upgraded, because it makes no difference to the user that it's a program rather than a circuit. 
unfortunately, in this case it would be a malicious circuit. 
malicious features are unacceptable no matter how they are implemented. 
on most android devices, this firmware has so much control that it could turn the product into a listening device. 
on some, it controls the microphone. 
on some, it can take full control of the main computer, through shared memory, and can thus override or replace whatever free software you have installed. 
with some, perhaps all, models it is possible to exercise remote control of this firmware to overwrite the rest of the software in the device. 
the point of free software is that we have control of our software and our computing; a system with a back door doesn't qualify. 
while any computing system might have bugs, these devices can be bugs. 
(craig murray, in murder in samarkand, relates his involvement in an intelligence operation that remotely converted an unsuspecting target's non-android portable phone into a listening device.) in any case, the phone network firmware in an android phone is not equivalent to a circuit, because the hardware allows installation of new versions and this is actually done. 
since it is proprietary firmware, in practice only the manufacturer can make new versions—users can't. 
putting these points together, we can tolerate nonfree phone network firmware provided new versions of it won't be loaded, it can't take control of the main computer, and it can only communicate when and as the free operating system chooses to let it communicate. 
in other words, it has to be equivalent to circuitry, and that circuitry must not be malicious. 
there is no technical obstacle to building an android phone which has these characteristics, but we don't know of any. 
android is not a self-hosting system; development for android needs to be done on some other system. 
the tools in google's "software development kit" (sdk) appear to be free, but it is hard work to check this. 
the definition files for certain google apis are nonfree. 
installing the sdk requires signing a proprietary software license, which you should refuse to sign. 
replicant's sdk is a free replacement. 
recent press coverage of android focuses on the patent wars. 
during 20 years of campaigning for the abolition of software patents, we have warned such wars could happen. 
software patents could force elimination of features from android, or even make it unavailable. 
see endsoftpatents.org for more information about why software patents must be abolished. 
however, the patent attacks and google's responses are not directly relevant to the topic of this article: how android products partly approach an ethically system of distribution, and how they fall short. 
this issue merits the attention of the press too. 
android is a major step towards an ethical, user-controlled, free software portable phone, but there is a long way to go, and google is taking it in the wrong direction. 
hackers are working on replicant, but it's a big job to support a new device model, and there remains the problem of the firmware. 
even though the android phones of today are considerably less bad than apple or windows phones, they cannot be said to respect your freedom. 
footnote. 
the extreme example of this confusion appears in the site linuxonandroid.com, which offers help to "install linux [sic] on your android devices."
 this is entirely false: what they are installing is a version of the gnu system, excluding linux, which is already present as part of android. 
since that site supports only nonfree gnu/linux distros, we do not recommend it. 
first published in the guardian. 
a response to word attachments. 
this letter recommends openoffice; libreoffice did not exist then. 
libreoffice is what we recommend. 
i'm sorry, but i was unable to read the microsoft word document you sent me. 
microsoft has been steadily changing the .doc format over the releases of microsoft word (4.0, 95, 97, 2000, and now xp). 
microsoft has also intentionally refused to release the specification of the .doc format to the community, making microsoft word the only application that can reliably open this format. 
there is the microsoft word viewer application, but it only runs on microsoft windows operating systems and does not allow one to edit the document. 
the development team that designed the software i choose to use (openoffice.org), has tried hard to figure out how the .doc format is created and interpreted, in order to make it available to more people. 
they believe that all people should be able to exchange information electronically, and .doc is one of the most common formats. 
so, they tried to make openoffice.org, the main competitor to microsoft's own office suite, as compatible as possible with microsoft's own formats. 
but microsoft did not like this, because it would mean that people that have not bought microsoft windows and microsoft office would be able to read and write .doc documents. 
unfortunately, it seems that microsoft is sometimes successful. 
my non-microsoft application was unable to open the .doc document you sent me. 
as a result, we cannot exchange information, until one of the following happens: [0] the information intended to be read/processed by me is converted to an open format that people who don't use microsoft windows and microsoft office are able to process. 
[1] i purchase and install microsoft windows, microsoft word, and by deduction all other microsoft applications necessary to do my work. 
because it will be a cold day in hell before i do the latter, i would suggest we find a different way of exchanging information electronically. 
--a ps: i hope you realize that i have nothing against you as a person. 
i just can't use the document you sent me, and i tried to explain why the implicit assumption that i would be able to read it, was mistaken. 
pps: when i tried to open the document you sent to me, my word processor crashed, obviously unable to properly interpret the .doc format. 
my word processor was handling 4 other documents at the time. 
two of them were assignments, and all changes i had not saved were lost. 
on aggregate, about two hours of my work were lost because the openoffice.org developers were unable to overcome the barriers microsoft put in place, and render the document properly. 
i believe they are the last to blame for this failure. 
ppps: for further reasons why .doc should not be the format of choice when exchanging information electronically, i invite you to read gnu.org/philosophy/no-word-attachments.html. 
it may be long, but it certainly exposes the compromises both you, as the sender, and i, as the receiver, are making by exchanging microsoft word documents. 
applying the free software criteria. 
the four essential freedoms provide the criteria for whether a particular piece of code is free/libre (i.e., respects its users' freedom). 
how should we apply them to judge whether a software package, an operating system, a computer, or a web page is fit to recommend? 
whether a program is free affects first of all our decisions about our private activities: to maintain our freedom, we need to reject the programs that would take it away. 
however, it also affects what we should say to others and do with others. 
a nonfree program is an injustice. 
to distribute a nonfree program, to recommend a nonfree program to other people, or more generally steer them into a course that leads to using nonfree software, means leading them to give up their freedom. 
to be sure, leading people to use nonfree software is not the same as installing nonfree software in their computers, but we should not lead people in the wrong direction. 
at a deeper level, we must not present a nonfree program as a solution because that would grant it legitimacy. 
nonfree software is a problem; to present it as a solution denies the existence of the problem. 
this article explains how we apply the basic free software criteria to judging various kinds of things, so we can decide whether to recommend them or not. 
software packages. 
for a software package to be free, all the code in it must be free. 
but not only the code. 
since documentation files including manuals, readme, change log, and so on are essential technical parts of a software package, they must be free as well. 
a software package is typically used alongside many other packages, and interacts with some of them. 
which kinds of interaction with nonfree programs are ethically acceptable? 
we developed gnu so that there would be a free operating system, because in 1983 none existed. 
as we developed the initial components of gnu, in the 1980s, it was inevitable that each component depended on nonfree software. 
for instance, no c program could run without a nonfree c compiler until gcc was working, and none could run without unix libc until glibc was working. 
each component could run only on nonfree systems, because all systems were nonfree. 
after we released a component that could run on some nonfree systems, users ported it to other nonfree systems; those ports were no worse, ethically, than the platform-specific code we needed to develop these components, so we incorporated their patches. 
when the kernel, linux, was freed in 1992, it filled the last gap in the gnu system. 
(initially, in 1991, linux had been distributed under a nonfree license.) the combination of gnu and linux made a complete free operating system—gnu/linux. 
at that point, we could have deleted the support for nonfree platforms, but we decided not to. 
a nonfree system is an injustice, but it's not our fault a user runs one. 
supporting a free program on that system does not compound the injustice. 
and it's useful, not only for users of those systems, but also for attracting more people to contribute to developing the free program. 
however, a nonfree program that runs on top of a free program is a completely different issue, because it leads users to take a step away from freedom. 
in some cases we disallow this: for instance, gcc prohibits nonfree plug-ins. 
when a program permits nonfree add-ons, it should at least not steer people towards using them. 
for instance, we choose libreoffice over openoffice because openoffice suggests use of nonfree add-ons, while libreoffice shuns them. 
we developed icecat initially to avoid proposing the nonfree add-ons suggested by firefox. 
in practice, if the icecat package explains how to run icecat on macos, that will not lead people to run macos. 
but if it talked about some nonfree add-on, that would encourage icecat users to install the add-on. 
therefore, the icecat package, including manuals and web site, shouldn't talk about such things. 
sometimes a free program and a nonfree program interoperate but neither is based on the other. 
our rule for such cases is that if the nonfree program is very well known, we should tell people how to use our free program with it; but if the proprietary program is obscure, we should not hint that it exists. 
sometimes we support interoperation with the nonfree program if that is installed, but avoid telling users about the possibility of doing so. 
we reject "enhancements" that would work only on a nonfree system. 
those would encourage people to use the nonfree system instead of gnu, scoring an own-goal. 
gnu/linux distros. 
after the liberation of linux in 1992, people began developing gnu/linux distributions ("distros"). 
only a few distros are entirely free software. 
the rules for a software package apply to a distro too: an ethical distro must contain only free software and steer users only towards free software. 
but what does it mean for a distro to "contain" a particular software package? 
some distros install programs from binary packages that are part of the distro; others build each program from upstream source, and literally contain only the recipes to download and build it. 
for issues of freedom, how a distro installs a given package is not significant; if it presents that package as an option, or its web site does, we say it "contains" that package. 
the users of a free system have control over it, so they can install whatever they wish. 
free distros provide general facilities with which users can install their own programs and their modified versions of free programs; they can also install nonfree programs. 
providing these general facilities is not an ethical flaw in the distro, because the distro's developers are not responsible for what users get and install on their own initiative. 
the developers become responsible for installation of nonfree software when they steer the users toward a nonfree program—for instance, by putting it in the distro's list of packages, or distributing it from their server, or presenting it as a solution rather than a problem. 
this is the point where most gnu/linux distros have an ethical flaw. 
people who install software packages on their own have a certain level of sophistication: if we tell them "baby contains nonfree code, but gbaby is free," we can expect them to take care to remember which is which. 
but distros are recommended to ordinary users who would forget such details. 
they would think, "what name did they say i should use? 
i think it was baby."
 therefore, to recommend a distro to the general public, we insist that its name not be similar to a distro we reject, so our message recommending only the free distro can be reliably transmitted. 
another difference between a distro and a software package is how likely it is for nonfree code to be added. 
the developers of a program carefully check the code they add. 
if they have decided to make the program free, they are unlikely to add nonfree code. 
there have been exceptions, including the very harmful case of the "binary blobs" that were added to linux, but they are a small fraction of the free programs that exist. 
by contrast, a gnu/linux distro typically contains thousands of packages, and the distro's developers may add hundreds of packages a year. 
without a careful effort to avoid packages that contain some nonfree software, some will surely creep in. 
since the free distros are few in number, we ask the developers of each free distro to make a commitment to keep the distro free software by removing any nonfree code or malware, as a condition for listing that distro. 
see the gnu free system distribution guidelines. 
we don't ask for such promises for free software packages: it's not feasible, and fortunately not necessary. 
to get promises from the developers of 30,000 free programs to keep them free would avoid a few problems, at the cost of much work for the fsf staff; in addition, most of those developers have no relationship with the gnu project and might have no interest in making us any promises. 
so we deal with the rare cases that change from free to nonfree, when we find out about them. 
peripherals. 
a computer peripheral needs software in the computer—perhaps a driver, perhaps firmware to be loaded by the system into the peripheral to make it run. 
thus, a peripheral is acceptable to use and recommend if it can be used from a computer that has no nonfree software installed—the peripheral's driver, and any firmware that the system needs to load into it, are free. 
it is simple to check this: connect the peripheral to a computer running a totally free gnu/linux distro and see if it works. 
but most users would like to know before they buy the peripheral, so we list information about many peripherals in h-node.org, a hardware database for fully free operating systems. 
computers. 
a computer contains software at various levels. 
on what criterion should we certify that a computer "respects your freedom"? 
obviously the operating system and everything above it must be free. 
in the 90s, the startup software (bios, then) became replaceable, and since it runs on the cpu, it is the same sort of issue as the operating system. 
thus, programs such as firmware and drivers that are installed in or with the system or the startup software must be free. 
if a computer has hardware features that require nonfree drivers or firmware installed with the system, we may be able to endorse it. 
if it is usable without those features, and if we think most people won't be led to install the nonfree software to make them function, then we can endorse it. 
otherwise, we can't. 
this will be a judgment call. 
a computer can have modifiable preinstalled firmware and microcode at lower levels. 
it can also have code in true read-only memory. 
we decided to ignore these programs in our certification criteria today, because otherwise no computer could comply, and because firmware that is not normally changed is ethically equivalent to circuits. 
so our certification criteria cover only the code that runs on the computer's main processor and is not in true read-only memory. 
when and as free software becomes possible for other levels of processing, we will require free software at those levels too. 
since certifying a product is active promotion of it, we insist that the seller support us in return, by talking about free software rather than open source and referring to the combination of gnu and linux as "gnu/linux". 
we have no obligation to actively promote projects that won't recognize our work and support our movement. 
see our certification criteria. 
web pages. 
nowadays many web pages contain complex javascript programs and won't work without them. 
this is a harmful practice since it hampers users' control over their computing. 
furthermore, most of these programs are nonfree, an injustice. 
often the javascript code spies on the user. 
javascript has morphed into a attack on users' freedom. 
to address this problem, we have developed librejs, an add-on for firefox that blocks nontrivial nonfree javascript code. 
(there is no need to block the simple scripts that implement minor user interface hacks.) we ask sites to please free their javascript programs and mark their licenses for librejs to recognize. 
meanwhile, is it ethical to link to a web page that contains a nonfree javascript program? 
if we were totally unyielding, we would link only to free javascript code. 
however, many pages do work even when their javascript code is not run. 
also, you will most often encounter nonfree javascript in other ways besides following our links; to avoid it, you must use librejs or disable javascript. 
so we have decided to go ahead and link to pages that work without nonfree javascript, while urging users to protect themselves from nonfree javascript in general. 
however, if a page can't do its job without running the nonfree javascript code, linking to it undeniably asks people to run that nonfree code. 
on principle, we do not link to such pages. 
conclusion. 
applying the basic idea that software should be free to different situations leads to different practical policies. 
as new situations arise, the gnu project and the free software foundation will adapt our freedom criteria so as to lead computer users towards freedom, in practice and in principle. 
by recommending only freedom-respecting programs, distros, and hardware products, and stating your policy, you can give much-needed support to the free software movement. 
fsf's opinion of the apple public source license (apsl) 2.0. 
the apple public source license (apsl) version 2.0 qualifies as a free software license. 
apple's lawyers worked with the fsf to produce a license that would qualify. 
the problems previously described on this page are still potential issues for other possible licenses, but they do not apply to version 2.0 of the apsl. 
we encourage everyone who uses any version of apple software under the apsl to use the terms of version 2.0 rather than that of any earlier license. 
in version 2.0 of the apsl, the definition of "externally deployed" has been narrowed in a way that is appropriate for the respect of users' freedoms. 
it has always been the position of fsf that the freedom of free software is primarily for the users of that software. 
technologies, like web applications, are changing the way that users interact with software. 
the apsl 2.0, like the gnu affero gpl, seeks to defend the freedom of those who use software in these novel ways, without unduly hindering the users' privacy nor freedom to use the software. 
the fsf now considers the apsl to be a free software license with two major practical problems, reminiscent of the npl: it is not a true copyleft, because it allows linking with other files which may be entirely proprietary. 
it is incompatible with the gpl. 
for this reason, we recommend you do not release new software using this license; but it is ok to use and improve software which other people release under this license. 
aside from this, we must remember that only part of mac os x is being released under the apsl. 
even though the fatal flaws of the apsl were fixed, and even if the practical problems were addressed, that does no good for the other parts of mac os x whose source code is not being released at all. 
we must not judge all of a company by just part of what it does. 
gnu-darwin is a combination of gnu and darwin that is supposed to include only free software. 
when a company asks for your copyright. 
companies that develop free software and release it under the gnu gpl sometimes distribute some copies of the code in other ways. 
if they distribute the exact same code under a different license to certain users that pay for this, typically permitting including the code in proprietary programs, we call it "selling exceptions."
 if they distribute some version of the code solely in a proprietary manner, we call that releasing a purely proprietary version of the program. 
"selling exceptions to the gnu gpl" explains why selling exceptions is acceptable, though only barely. 
by contrast, releasing a purely proprietary version is outright wrong, like any other proprietary software. 
companies normally do these things using code they developed. 
since they hold the copyright on that code, they can legally distribute it in any manner, even in multiple manners in parallel. 
but what happens when you publish a modified version of that free program, and the company wants to include your changes in its version? 
since you got the program under the gpl, when you distribute a modified version you have to license it under the gpl. 
if the company receives a copy, it will be able to use those changes under the gpl; it won't be allowed to include your changes in that program and sell exceptions for it. 
it also won't be able to release purely proprietary versions containing your code. 
if this is the outcome you want, you get it by default. 
however, if the company intends to sell exceptions, it will probably decide not to use your changes. 
suppose, though, that you're not opposed to selling exceptions and you're willing to let the company do so while including your changes in the program. 
you can agree to this, but you need to be careful about what you sign, or you may be surprised by the results. 
the company will probably invite you to assign or license your copyright to the company, by signing a copyright assignment contract or a contributor license agreement. 
that in itself is not inherently bad; for instance, many gnu software developers have assigned copyrights to the fsf. 
however, the fsf never sells exceptions, and its assignment contracts include a commitment to distribute the contributor's code only with source and only permitting redistribution. 
the company's proposed contract may not include such a commitment. 
it might instead let the company use your changes any way it likes. 
if you sign that, the company could do various things with your code. 
it could keep selling exceptions for a program including your code. 
it could release purely proprietary modified or extended versions including your code. 
it could even include your code only in proprietary versions. 
your contribution of code could turn out to be, in effect, a donation to proprietary software. 
it is up to you which of these activities to permit, but here are the fsf's recommendations. 
if you plan to make major contributions to the project, insist that the contribution agreement require that software versions including your contributions be available to the public under a free software license. 
this will allow the developer to sell exceptions, but prevent it from using your contributions in software that is only available under a proprietary license. 
if your contributions are smaller, you could accept a weaker condition, that the company make your contributions available in a free software release as well as possibly in nonfree programs. 
this would allow the company to use your contributions in modified software that's only available under a proprietary license. 
releasing proprietary software is never a good thing, but if your changes are smaller, it might be more important to improve the free version than resist the nonfree versions. 
you can control these outcomes by insisting on the proper conditions in the contract. 
to allow selling exceptions for the program that contains your code, but refuse to let the company release purely proprietary versions containing your code, you can insist on a condition more or less like this: any program based on (as defined in gnu general public license version 3) hacker's code that foo distributes shall be made available by foo under (a) the "gnu general public license (gpl), version 2 or later," or (b) the licensing in (a), above, but with "2" replaced by any higher existing gpl version number. 
provided foo makes the program available as source code gratis to the public in this way, it may also distribute the identical program to some of its users under terms permitting them to link the program's code with nonfree code and release the combination in binary form under a license of their own choosing. 
or, if what you object to is that some variant of your code might be released solely in a proprietary version, you can insist on a condition more or less like this: any program based on (as defined in gnu general public license version 3) hacker's code that foo distributes shall be made available by foo under (a) the "gnu general public license (gpl), version 2 or later," or (b) the licensing in (a), above, but with "2" replaced by any higher existing gpl version number. 
provided foo makes the program available as source code gratis to the public in this way, it may also distribute the same version of hacker's code in other programs released under other licenses of its own choosing. 
if the program is released under the gnu affero gpl, then add "affero" before "general," change "gpl" to "agpl," change "2 or" to "3 or," and it could make sense to replace "that foo distributes" with "that foo distributes, or deploys on a server accessible to users other than foo."
 the fsf has had these texts reviewed by a lawyer, but you should get your own legal advice before using them. 
when a company says which of these conditions it will accept, that will show you how far it plans to depart from the principles of free software. 
then you can respond to ensure your work will contribute to the free software community and not be diverted into proprietary software. 
freedom of speech, press, and association on the internet. 
the free software foundation supports the freedoms of speech, press, and association on the internet. 
please check out: the citizens internet empowerment coalition at the wayback machine (archived april 24, 1999) came together to oppose congress' first attempt to regulate material published on the internet, the communications decency act, which the u.s. 
supreme court found unconstitutional on june 26, 1997. 
their site is being preserved as a resource on the landmark cda case. 
the voters telecommunications watch at the wayback machine (archived july 09, 1998) and their excellent announcement electronic mailing list. 
censoring gnu emacs describes how the communications decency act required the gnu project to censor gnu emacs—and how this paradoxically had the opposite of the effect that the censors wanted. 
f.a.c.t.net inc. 
is a non-profit internet digest, news service, library, dialogue center, and archive dedicated to the promotion and defense of international free thought, free speech, and privacy rights. 
the blue ribbon campaign for online freedom of speech, press and association. 
you can read the june 1996 appeals court decision at the wayback machine (archived december 01, 2001) rejecting censorship of the internet. 
but remember, this decision is not final! 
first, the supreme court will agree or disagree; then congress gets a chance to look for another method of censorship. 
saving europe from software patents organizations that work for freedom in computer development and electronic communications. 
www.gnu.org/philosophy/bdk.html
bill gates and other communists. 
bill gates discussed patents with cnet under the heading of "intellectual property," a term that covers many disparate laws. 
he said anyone who won't give blanket support to all these laws is a communist. 
since i'm not a communist but i have criticized software patents, i got to thinking this calumny might be aimed at me. 
the term "intellectual property" is too broad to have one opinion about. 
it lumps together copyright law, patent law, and various other laws, whose requirements and effects are entirely different. 
so anyone using the term "intellectual property" is typically either confused himself, or trying to confuse you. 
why does mr. 
gates lump these issues together? 
let's study the differences he sets aside. 
software developers are not up in arms against copyright law, because the developer of a program holds the copyright on the program; as long as the programmers wrote the code themselves, no one else has a copyright on their code. 
there is no danger that strangers could have a valid case of copyright infringement against them. 
patents are a different story. 
software patents don't cover programs or code; they cover ideas (methods, techniques, features, algorithms, etc.). 
developing a large program entails combining thousands of ideas, and even if a few of them are new, the rest must necessarily have come from other sources, such as programs the developer has seen. 
if each of these ideas could be patented by someone, every large program is likely to infringe hundreds of patents. 
developing a large program means laying oneself open to hundreds of potential lawsuits. 
software patents are a menace to software developers, and to the users. 
since patent law covers execution of the program, the users can also be sued. 
a few fortunate software developers avoid most of the danger. 
these are the megacorporations, which typically have thousands of patents each, and cross-license with each other. 
this gives them an advantage over smaller rivals not in a position to do likewise. 
that's why it is generally the megacorporations that lobby for software patents. 
today's microsoft is a megacorporation with thousands of patents. 
microsoft said in court that the main competition for ms windows is "linux," meaning the free software gnu/linux operating system. 
leaked internal documents say that microsoft aims to use software patents to stop the development of gnu/linux. 
when mr. 
gates started hyping his solution to the problem of spam, i suspected this was a plan to use patents to grab control of the net. 
sure enough, in 2004 microsoft asked the ietf to approve a mail protocol that microsoft was trying to patent. 
the patent license policy for this protocol was written to forbid free software entirely. 
no program supporting this mail protocol could be released as free software—not under the gnu gpl, or the mpl, or the apache license, or any other. 
the ietf rejected microsoft's protocol, but microsoft said it would try to convince major isps to use it anyway. 
thanks to mr. 
gates, we now know that an open internet with protocols anyone can implement is communism; it was set up by that famous communist agent, the us department of defense. 
with microsoft's market clout, it can impose its choice of programming system as a de-facto standard. 
microsoft has already patented some .net implementation methods, raising the concern that millions of users have been shifted to a government-issued microsoft monopoly. 
but capitalism means monopoly; at least, gates-style capitalism does. 
people who think that everyone should be free to program, free to write complex software, they are communists, says mr. 
gates. 
but these communists have infiltrated even the microsoft boardroom. 
here's what bill gates told microsoft employees in 1991: if people had understood how patents would be granted when most of today's ideas were invented and had taken out patents, the industry would be at a complete stand-still today. 
… a future start-up with no patents of its own will be forced to pay whatever price the giants choose to impose. 
mr. 
gates' secret is out now—he too was a "communist," he too recognized that software patents were harmful, until microsoft became one of these giants. 
now microsoft aims to use software patents to impose whatever price it chooses on you and me. 
and if we object, mr. 
gates will call us "communists."
 if you're not afraid of name calling, visit the foundation for a free information infrastructure, and join the fight against software patents in europe. 
we persuaded the european parliament once—we even got support from right-wing meps—and with your help we will do it again. 
originally published in 2005 in cnet.com. 
review: boldrin and levine, "the case against intellectual property". 
stallman the case against intellectual property, by boldrin and levine, argues on economic grounds that authors can make money by selling their work even in a world where everyone can copy. 
you've probably heard the superficial argument that "if the program is free, you will only sell one copy."
 the obvious response is that today there are companies that sell thousands of copies a month. 
but this paper provides another response: it shows why people who are fully aware of the economic consequences of the freedom to copy would pay a high price for "the first copy."
 the term "intellectual property" is biased and spreads confusion. 
the bias is easy to see—by calling copyright and patents and trademarks "property," it leads people to think that criticizing them is "opposing property rights."
 the confusion is less evident: by lumping copyright and patents and trademarks together, it leads people to treat them as one thing, to ignore their large differences and consider them as a single issue in terms of their meager similarities. 
this usually means ignoring social and ethical aspects of copyrights, and the different social and ethical aspects of patents, and considering both copyrights and patents as a single issue in narrow economic terms. 
the proponents of harshly restrictive copyrights and patents then present an economic argument that is so simple that it gives an appearance of being irrefutable. 
i normally respond by showing the aspects of the situation that have been ignored by treating the issue as a purely economic one. 
boldrin and levine's paper takes on that simple economic argument on its own terms, and shows the gaps in it, gaps that the apparent simplicity tends to hide. 
i believe we should continue to reject the term "intellectual property."
 we need to call attention to the non-economic aspects of copyrights and the different non-economic aspects of patents. 
however, boldrin and levine's arguments will be useful for responding to people who insist on narrowing their values to economics. 
the paper is addressed to economists and somewhat mathematical. 
popularization of its ideas would be useful. 
the bsd license problem. 
the two major categories of free software license are copyleft and non-copyleft. 
copyleft licenses such as the gnu gpl insist that modified versions of the program must be free software as well. 
non-copyleft licenses do not insist on this. 
we recommend copyleft, because it protects freedom for all users, but non-copylefted software can still be free software, and useful to the free software community. 
see "how to choose a license for your own work" for general recommendations about choosing a license for your work. 
there are many variants of simple non-copyleft free software licenses, such as the expat license, freebsd license, x10 license, the x11 license, and the two bsd (berkeley software distribution) licenses. 
most of them are equivalent except for details of wording, but the license used for bsd until 1999 had a special problem: the "obnoxious bsd advertising clause."
 it said that every advertisement mentioning the software must include a particular sentence: 3. all advertising materials mentioning features or use of this software must display the following acknowledgement: this product includes software developed by the university of california, berkeley and its contributors. 
initially the obnoxious bsd advertising clause was used only in the berkeley software distribution. 
that did not cause any particular problem, because including one sentence in an ad is not a great practical difficulty. 
if other developers who used bsd-like licenses had copied the bsd advertising clause verbatim—including the sentence that refers to the university of california—then they would not have made the problem any bigger. 
but, as you might expect, other developers did not copy the clause verbatim. 
they changed it, replacing "university of california" with their own institution or their own names. 
the result is a plethora of licenses, requiring a plethora of different sentences. 
when people put many such programs together in an operating system, the result is a serious problem. 
imagine if a software system required 75 different sentences, each one naming a different author or group of authors. 
to advertise that, you would need a full-page ad. 
this might seem like extrapolation ad absurdum, but it is actual fact. 
in a 1997 version of netbsd, i counted 75 of these sentences. 
(fortunately netbsd has decided to stop adding them, and to remove those it could.) to address this problem, in my "spare time" i talk with developers who have used bsd-style licenses, asking them if they would please remove the advertising clause. 
around 1996 i spoke with the developers of freebsd about this, and they decided to remove the advertising clause from all of their own code. 
in may 1998 the developers of flick, at the university of utah, removed this clause. 
dean hal varian at the university of california took up the cause, and championed it with the administration. 
in june 1999, after two years of discussions, the university of california removed this clause from the license of bsd. 
thus, there is now a new bsd license which does not contain the advertising clause. 
unfortunately, this does not eliminate the legacy of the advertising clause: similar clauses are still present in the licenses of many packages which are not part of bsd. 
the change in license for bsd has no effect on the other packages which imitated the old bsd license; only the developers who made them can change them. 
but if they followed berkeley's lead before, maybe berkeley's change in policy will convince some of them to change. 
it's worth asking. 
so if you have a favorite package which still uses the bsd license with the advertising clause, please ask the maintainer to look at this web page, and consider making the change. 
and if you want to release a program as non-copylefted free software, please don't use the advertising clause. 
thus, instead of copying the bsd license from some released package—which might still have the old version of the license in it—please use one of the other permissive licenses, such as expat or freebsd. 
you can also help spread awareness of the issue by not using the term "bsd-style," and not saying "the bsd license" which implies there is only one. 
you see, when people refer to all non-copyleft free software licenses as "bsd-style licenses," some new free software developer who wants to use a non-copyleft free software license might take for granted that the place to get it is from bsd. 
he or she might copy the license with the advertising clause, not by specific intention, just by chance. 
if you would like to cite one specific example of a non-copyleft license, and you have no particular preference, please pick an example which has no particular problem. 
for instance, if you talk about "x11-style licenses," you will encourage people to copy the license from x11, which avoids the advertising clause for certain, rather than take a risk by randomly choosing one of the bsd licenses. 
or you could mention the non-copyleft license which we recommend over the other non-copyleft licenses: the apache 2.0 license, which has a clause to prevent treachery with patents. 
when you want to refer specifically to one of the bsd licenses, please always state which one: the "original bsd license" or the "modified bsd license."
 later a third bsd license variant was introduced, with only the first two of the original bsd license's four clauses. 
we call it the "freebsd license."
 it is a lax, noncopyleft free license, compatible with the gnu gpl, much like the modified bsd license. 
the bug nobody is allowed to understand. 
stallman in the 1980s, proprietary software users discovered the problem of the bug that nobody is allowed to understand. 
when a problem occurs in the interaction of multiple proprietary software packages with different developers, none of them is allowed to study the source code of all the pertinent programs. 
as a result, none of them can understand the bad interaction between them, and the bug is never fixed except by accident. 
according to this article, a similar problem now occurs between multiple instances of service as a software substitute. 
can you trust your computer?. 
stallman who should your computer take its orders from? 
most people think their computers should obey them, not obey someone else. 
with a plan they call "trusted computing," large media corporations (including the movie companies and record companies), together with computer companies such as microsoft and intel, are planning to make your computer obey them instead of you. 
(microsoft's version of this scheme is called palladium.) proprietary programs have included malicious features before, but this plan would make it universal. 
proprietary software means, fundamentally, that you don't control what it does; you can't study the source code, or change it. 
it's not surprising that clever businessmen find ways to use their control to put you at a disadvantage. 
microsoft has done this several times: one version of windows was designed to report to microsoft all the software on your hard disk; a recent "security" upgrade in windows media player required users to agree to new restrictions. 
but microsoft is not alone: the kazaa music-sharing software is designed so that kazaa's business partner can rent out the use of your computer to its clients. 
these malicious features are often secret, but even once you know about them it is hard to remove them, since you don't have the source code. 
in the past, these were isolated incidents. 
"trusted computing" would make the practice pervasive. 
"treacherous computing" is a more appropriate name, because the plan is designed to make sure your computer will systematically disobey you. 
in fact, it is designed to stop your computer from functioning as a general-purpose computer. 
every operation may require explicit permission. 
the technical idea underlying treacherous computing is that the computer includes a digital encryption and signature device, and the keys are kept secret from you. 
proprietary programs will use this device to control which other programs you can run, which documents or data you can access, and what programs you can pass them to. 
these programs will continually download new authorization rules through the internet, and impose those rules automatically on your work. 
if you don't allow your computer to obtain the new rules periodically from the internet, some capabilities will automatically cease to function. 
of course, hollywood and the record companies plan to use treacherous computing for digital restrictions management (drm), so that downloaded videos and music can be played only on one specified computer. 
sharing will be entirely impossible, at least using the authorized files that you would get from those companies. 
you, the public, ought to have both the freedom and the ability to share these things. 
(i expect that someone will find a way to produce unencrypted versions, and to upload and share them, so drm will not entirely succeed, but that is no excuse for the system.) making sharing impossible is bad enough, but it gets worse. 
there are plans to use the same facility for email and documents—resulting in email that disappears in two weeks, or documents that can only be read on the computers in one company. 
imagine if you get an email from your boss telling you to do something that you think is risky; a month later, when it backfires, you can't use the email to show that the decision was not yours. 
"getting it in writing" doesn't protect you when the order is written in disappearing ink. 
imagine if you get an email from your boss stating a policy that is illegal or morally outrageous, such as to shred your company's audit documents, or to allow a dangerous threat to your country to move forward unchecked. 
today you can send this to a reporter and expose the activity. 
with treacherous computing, the reporter won't be able to read the document; her computer will refuse to obey her. 
treacherous computing becomes a paradise for corruption. 
word processors such as microsoft word could use treacherous computing when they save your documents, to make sure no competing word processors can read them. 
today we must figure out the secrets of word format by laborious experiments in order to make free word processors read word documents. 
if word encrypts documents using treacherous computing when saving them, the free software community won't have a chance of developing software to read them—and if we could, such programs might even be forbidden by the digital millennium copyright act. 
programs that use treacherous computing will continually download new authorization rules through the internet, and impose those rules automatically on your work. 
if microsoft, or the us government, does not like what you said in a document you wrote, they could post new instructions telling all computers to refuse to let anyone read that document. 
each computer would obey when it downloads the new instructions. 
your writing would be subject to 1984-style retroactive erasure. 
you might be unable to read it yourself. 
you might think you can find out what nasty things a treacherous-computing application does, study how painful they are, and decide whether to accept them. 
even if you can find this out, it would be foolish to accept the deal, but you can't even expect the deal to stand still. 
once you come to depend on using the program, you are hooked and they know it; then they can change the deal. 
some applications will automatically download upgrades that will do something different—and they won't give you a choice about whether to upgrade. 
today you can avoid being restricted by proprietary software by not using it. 
if you run gnu/linux or another free operating system, and if you avoid installing proprietary applications on it, then you are in charge of what your computer does. 
if a free program has a malicious feature, other developers in the community will take it out, and you can use the corrected version. 
you can also run free application programs and tools on nonfree operating systems; this falls short of fully giving you freedom, but many users do it. 
treacherous computing puts the existence of free operating systems and free applications at risk, because you may not be able to run them at all. 
some versions of treacherous computing would require the operating system to be specifically authorized by a particular company. 
free operating systems could not be installed. 
some versions of treacherous computing would require every program to be specifically authorized by the operating system developer. 
you could not run free applications on such a system. 
if you did figure out how, and told someone, that could be a crime. 
there are proposals already for us laws that would require all computers to support treacherous computing, and to prohibit connecting old computers to the internet. 
the cbdtpa (we call it the consume but don't try programming act) is one of them. 
but even if they don't legally force you to switch to treacherous computing, the pressure to accept it may be enormous. 
today people often use word format for communication, although this causes several sorts of problems (see "we can put an end to word attachments"). 
if only a treacherous-computing machine can read the latest word documents, many people will switch to it, if they view the situation only in terms of individual action (take it or leave it). 
to oppose treacherous computing, we must join together and confront the situation as a collective choice. 
for further information about treacherous computing, see the "trusted computing" frequently asked questions. 
to block treacherous computing will require large numbers of citizens to organize. 
we need your help! 
please support defective by design, the fsf's campaign against digital restrictions management. 
postscripts. 
the computer security field uses the term "trusted computing" in a different way—beware of confusion between the two meanings. 
the gnu project distributes the gnu privacy guard, a program that implements public-key encryption and digital signatures, which you can use to send secure and private email. 
it is useful to explore how gpg differs from treacherous computing, and see what makes one helpful and the other so dangerous. 
when someone uses gpg to send you an encrypted document, and you use gpg to decode it, the result is an unencrypted document that you can read, forward, copy, and even reencrypt to send it securely to someone else. 
a treacherous-computing application would let you read the words on the screen, but would not let you produce an unencrypted document that you could use in other ways. 
gpg, a free software package, makes security features available to the users; they use it. 
treacherous computing is designed to impose restrictions on the users; it uses them. 
the supporters of treacherous computing focus their discourse on its beneficial uses. 
what they say is often correct, just not important. 
like most hardware, treacherous-computing hardware can be used for purposes which are not harmful. 
but these features can be implemented in other ways, without treacherous-computing hardware. 
the principal difference that treacherous computing makes for users is the nasty consequence: rigging your computer to work against you. 
what they say is true, and what i say is true. 
put them together and what do you get? 
treacherous computing is a plan to take away our freedom, while offering minor benefits to distract us from what we would lose. 
microsoft presents palladium as a security measure, and claims that it will protect against viruses, but this claim is evidently false. 
a presentation by microsoft research in october 2002 stated that one of the specifications of palladium is that existing operating systems and applications will continue to run; therefore, viruses will continue to be able to do all the things that they can do today. 
when microsoft employees speak of "security" in connection with palladium, they do not mean what we normally mean by that word: protecting your machine from things you do not want. 
they mean protecting your copies of data on your machine from access by you in ways others do not want. 
a slide in the presentation listed several types of secrets palladium could be used to keep, including "third party secrets" and "user secrets"—but it put "user secrets" in quotation marks, recognizing that this is somewhat of an absurdity in the context of palladium. 
the presentation made frequent use of other terms that we frequently associate with the context of security, such as "attack," "malicious code," "spoofing," as well as "trusted."
 none of them means what it normally means. 
"attack" doesn't mean someone trying to hurt you, it means you trying to copy music. 
"malicious code" means code installed by you to do what someone else doesn't want your machine to do. 
"spoofing" doesn't mean someone's fooling you, it means you're fooling palladium. 
and so on. 
a previous statement by the palladium developers stated the basic premise that whoever developed or collected information should have total control of how you use it. 
this would represent a revolutionary overturn of past ideas of ethics and of the legal system, and create an unprecedented system of control. 
the specific problems of these systems are no accident; they result from the basic goal. 
it is the goal we must reject. 
as of 2015, the main method of distributing copies of anything is over the internet, and specifically over the web. 
nowadays, the companies that want to impose drm on the world want it to be enforced by programs that talk to web servers to get copies. 
this means that they are determined to control your browser as well as your operating system. 
the way they do this is through "remote attestation"—a facility with which your computer can "attest" to the web server precisely what software it is running, such that there is no way you can disguise it. 
the software it would attest to would include the web browser (to prove it implements drm and gives you no way to extract the unencrypted data), the kernel (to prove it gives no way to patch the running browser), the boot software (to prove it gives no way to patch the kernel when starting it), and anything else relating to the security of the drm companies' dominion over you. 
under an evil empire, the only crack by which you can reduce its effective power over you is to have a way to hide or disguise what you are doing. 
in other words, you need a way to lie to the empire's secret police. 
"remote attestation" is a plan to force your computer to tell the truth to a company when its web server asks the computer whether you have liberated it. 
as of 2015, treacherous computing has been implemented for pcs in the form of the "trusted platform module"; however, for practical reasons, the tpm has proved a total failure for the goal of providing a platform for remote attestation to verify digital restrictions management. 
thus, companies implement drm using other methods. 
at present, "trusted platform modules" are not being used for drm at all, and there are reasons to think that it will not be feasible to use them for drm. 
ironically, this means that the only current uses of the "trusted platform modules" are the innocent secondary uses—for instance, to verify that no one has surreptitiously changed the system in a computer. 
therefore, we conclude that the "trusted platform modules" available for pcs as of 2015 are not dangerous, and there is no immediate reason not to include one in a computer or support it in system software. 
this does not mean that everything is rosy. 
other hardware systems for blocking the owner of a computer from changing the software in it are in use in some arm pcs as well as processors in portable phones, cars, tvs and other devices, and these are fully as bad as we expected. 
this also does not mean that remote attestation is not a threat. 
if ever a device succeeds in implementing that, it will be a grave threat to users' freedom. 
the current "trusted platform module" is harmless only because it failed in the attempt to make remote attestation feasible. 
we must not presume that all future attempts will fail too. 
as of 2022, the tpm2, a new "trusted platform module", really does support remote attestation and can support drm. 
the threat i warned about in 2002 has become terrifyingly real. 
this essay is published in free software, free society: the selected essays of richard m. stallman. 
categories of free and nonfree software. 
this diagram explains the different categories of software. 
it is available as svg and png images, under the terms of the creative commons attribution-sharealike 4.0 international license. 
note: the diagram is clickable if your browser completely supports the svg format. 
also see confusing words which you might want to avoid. 
free software. 
free software is software that comes with permission for anyone to use, copy, and/or distribute, either verbatim or with modifications, either gratis or for a fee. 
in particular, this means that source code must be available. 
"if it's not source, it's not software."
 this is a simplified description; see also the full definition. 
if a program is free, then it can potentially be included in a free operating system such as gnu, or free versions of the gnu/linux system. 
there are many different ways to make a program free—many questions of detail, which could be decided in more than one way and still make the program free. 
some of the possible variations are described below. 
for information on specific free software licenses, see the license list page. 
free software is a matter of freedom, not price. 
but proprietary software companies typically use the term "free software" to refer to price. 
sometimes they mean that you can obtain a binary copy at no charge; sometimes they mean that a copy is bundled with a computer that you are buying, and the price includes both. 
either way, it has nothing to do with what we mean by free software in the gnu project. 
because of this potential confusion, when a software company says its product is free software, always check the actual distribution terms to see whether users really have all the freedoms that free software implies. 
sometimes it really is free software; sometimes it isn't. 
many languages have two separate words for "free" as in freedom and "free" as in zero price. 
for example, french has "libre" and "gratuit."
 not so english; there is a word "gratis" that refers unambiguously to price, but no common adjective that refers unambiguously to freedom. 
so if you are speaking another language, we suggest you translate "free" into your language to make it clearer. 
see our list of translations of the term "free software" into various other languages. 
free software is often more reliable than nonfree software. 
open source software. 
the term "open source" software is used by some people to mean more or less the same category as free software. 
it is not exactly the same class of software: they accept some licenses that we consider too restrictive, and there are free software licenses they have not accepted. 
however, the differences in extension of the category are small: we know of only a few cases of source code that is open source but not free. 
in principle it could happen that some free programs are rejected as open source, but we don't know if that has ever happened. 
we prefer the term "free software" because it refers to freedom—something that the term "open source" does not do. 
public domain software. 
public domain software is software that is not copyrighted. 
if the source code is in the public domain, that is a special case of noncopylefted free software, which means that some copies or modified versions may not be free at all. 
in some cases, an executable program can be in the public domain but the source code is not available. 
this is not free software, because free software requires accessibility of source code. 
meanwhile, most free software is not in the public domain; it is copyrighted, and the copyright holders have legally given permission for everyone to use it in freedom, using a free software license. 
sometimes people use the term "public domain" in a loose fashion to mean "free" or "available gratis."
 however, "public domain" is a legal term and means, precisely, "not copyrighted."
 for clarity, we recommend using "public domain" for that meaning only, and using other terms to convey the other meanings. 
under the berne convention, which most countries have signed, anything written down is automatically copyrighted. 
this includes programs. 
therefore, if you want a program you have written to be in the public domain, you must take some legal steps to disclaim the copyright on it; otherwise, the program is copyrighted. 
copylefted software. 
copylefted software is free software whose distribution terms ensure that all copies of all versions carry more or less the same distribution terms. 
this means, for instance, that copyleft licenses generally disallow others to add additional requirements to the software (though a limited set of safe added requirements can be allowed) and require making source code available. 
this shields the program, and its modified versions, from some of the common ways of making a program proprietary. 
some copyleft licenses, such as gpl version 3, block other means of turning software proprietary, such as tivoization. 
in the gnu project, we copyleft almost all the software we write, because our goal is to give every user the freedoms implied by the term "free software."
 see our copyleft article for more explanation of how copyleft works and why we use it. 
copyleft is a general concept; to copyleft an actual program, you need to use a specific set of distribution terms. 
there are many possible ways to write copyleft distribution terms, so in principle there can be many copyleft free software licenses. 
however, in actual practice nearly all copylefted software uses the gnu general public license. 
two different copyleft licenses are usually "incompatible," which means it is illegal to merge the code using one license with the code using the other license; therefore, it is good for the community if people use a single copyleft license. 
noncopylefted free software. 
noncopylefted free software comes from the author with permission to redistribute and modify, and also to add additional restrictions to it. 
if a program is free but not copylefted, then some copies or modified versions may not be free at all. 
a software company can compile the program, with or without modifications, and distribute the executable file as a proprietary software product. 
the x window system illustrates this. 
the x consortium released x11 with distribution terms that made it noncopylefted free software, and subsequent developers have mostly followed the same practice. 
a copy which has those distribution terms is free software. 
however, there are nonfree versions as well, and there are (or at least were) popular workstations and pc graphics boards for which nonfree versions are the only ones that work. 
if you are using this hardware, x11 is not free software for you. 
the developers of x11 even made x11 nonfree for a while; they were able to do this because others had contributed their code under the same noncopyleft license. 
lax permissive licensed software. 
lax permissive licenses include the x11 license and the two bsd licenses. 
these licenses permit almost any use of the code, including distributing proprietary binaries with or without changing the source code. 
gpl-covered software. 
the gnu gpl (general public license) is one specific set of distribution terms for copylefting a program. 
the gnu project uses it as the distribution terms for most gnu software. 
to equate free software with gpl-covered software is therefore an error. 
the gnu operating system. 
the gnu operating system is the unix-like operating system, which is entirely free software, that we in the gnu project have developed since 1984. 
a unix-like operating system consists of many programs. 
the gnu system includes all of the official gnu packages. 
it also includes many other packages, such as the x window system and tex, which are not gnu software. 
the first test release of the complete gnu system was in 1996. 
this includes the gnu hurd, our kernel, developed since 1990. 
in 2001 the gnu system (including the gnu hurd) began working fairly reliably, but the hurd still lacks some important features, so it is not widely used. 
meanwhile, the gnu/linux system, an offshoot of the gnu operating system which uses linux as the kernel instead of the gnu hurd, has been a great success since the 90s. 
as this shows, the gnu system is not a single static set of programs; users and distributors may select different packages according to their needs and desires. 
the result is still a variant of the gnu system. 
since the purpose of gnu is to be free, every single component in the gnu operating system is free software. 
they don't all have to be copylefted, however; any kind of free software is legally suitable to include if it helps meet technical goals. 
gnu programs. 
"gnu programs" is equivalent to gnu software. 
a program foo is a gnu program if it is gnu software. 
we also sometimes say it is a "gnu package."
 gnu software. 
gnu software is software that is released under the auspices of the gnu project. 
if a program is gnu software, we also say that it is a gnu program or a gnu package. 
the readme or manual of a gnu package should say it is one; also, the free software directory identifies all gnu packages. 
most gnu software is copylefted, but not all; however, all gnu software must be free software. 
some gnu software was written by staff of the free software foundation, but most gnu software comes from many volunteers. 
(some of these volunteers are paid by companies or universities, but they are volunteers for us.) some contributed software is copyrighted by the free software foundation; some is copyrighted by the contributors who wrote it. 
fsf-copyrighted gnu software. 
the developers of gnu packages can transfer the copyright to the fsf, or they can keep it. 
the choice is theirs. 
if they have transferred the copyright to the fsf, the program is fsf-copyrighted gnu software, and the fsf can enforce its license. 
if they have kept the copyright, enforcing the license is their responsibility. 
the fsf does not accept copyright assignments of software that is not an official gnu package, as a rule. 
nonfree software. 
nonfree software is any software that is not free. 
its use, redistribution or modification is prohibited, or requires you to ask for permission, or is restricted so much that you effectively can't do it freely. 
proprietary software. 
proprietary software is another name for nonfree software. 
in the past we subdivided nonfree software into "semifree software," which could be modified and redistributed noncommercially, and "proprietary software," which could not be. 
but we have dropped that distinction and now use "proprietary software" as synonymous with nonfree software. 
the free software foundation follows the rule that we cannot install any proprietary program on our computers except temporarily for the specific purpose of writing a free replacement for that very program. 
aside from that, we feel there is no possible excuse for installing a proprietary program. 
for example, we felt justified in installing unix on our computer in the 1980s, because we were using it to write a free replacement for unix. 
nowadays, since free operating systems are available, the excuse is no longer applicable; we do not use any nonfree operating systems, and any new computer we install must run a completely free operating system. 
we don't insist that users of gnu, or contributors to gnu, have to live by this rule. 
it is a rule we made for ourselves. 
but we hope you will follow it too, for your freedom's sake. 
freeware. 
the term "freeware" has no clear accepted definition, but it is commonly used for packages which permit redistribution but not modification (and their source code is not available). 
these packages are not free software, so please don't use "freeware" to refer to free software. 
shareware. 
shareware is software which comes with permission for people to redistribute copies, but says that anyone who continues to use a copy is required to pay a license fee. 
shareware is not free software, or even semifree. 
there are two reasons it is not: for most shareware, source code is not available; thus, you cannot modify the program at all. 
shareware does not come with permission to make a copy and install it without paying a license fee, not even for individuals engaging in nonprofit activity. 
(in practice, people often disregard the distribution terms and do this anyway, but the terms don't permit it.) private software. 
private or custom software is software developed for one user (typically an organization or company). 
that user keeps it and uses it, and does not release it to the public either as source code or as binaries. 
a private program is free software (in a somewhat trivial sense) if its sole user has the four freedoms. 
in particular, if the user has full rights to the private program, the program is free. 
however, if the user distributes copies to others and does not provide the four freedoms with those copies, those copies are not free software. 
free software is a matter of freedom, not access. 
in general we do not believe it is wrong to develop a program and not release it. 
there are occasions when a program is so important that one might argue that withholding it from the public is doing wrong to humanity. 
however, such cases are rare. 
most programs are not that important, and declining to release them is not particularly wrong. 
thus, there is no conflict between the development of private or custom software and the principles of the free software movement. 
nearly all employment for programmers is in development of custom software; therefore most programming jobs are, or could be, done in a way compatible with the free software movement. 
commercial software. 
"commercial" and "proprietary" are not the same! 
commercial software is software developed by a business as part of its business. 
most commercial software is proprietary, but there is commercial free software, and there is noncommercial nonfree software. 
for example, gnu ada is developed by a company. 
it is always distributed under the terms of the gnu gpl, and every copy is free software; but its developers sell support contracts. 
when their salesmen speak to prospective customers, sometimes the customers say, "we would feel safer with a commercial compiler."
 the salesmen reply, "gnu ada is a commercial compiler; it happens to be free software."
 for the gnu project, the priorities are in the other order: the important thing is that gnu ada is free software; that it is commercial is just a detail. 
however, the additional development of gnu ada that results from its being commercial is definitely beneficial. 
please help spread the awareness that free commercial software is possible. 
you can do this by making an effort not to say "commercial" when you mean "proprietary."
censoring my software. 
stallman last summer, a few clever legislators proposed a bill to "prohibit pornography" on the internet. 
last fall, the right-wing christians made this cause their own. 
last week, president clinton signed the bill. 
this week, i'm censoring gnu emacs. 
no, gnu emacs does not contain pornography. 
it's a software package, an award-winning extensible and programmable text editor. 
but the law that was passed applies to far more than pornography. 
it prohibits "indecent" speech, which can include anything from famous poems, to masterpieces hanging in the louvre, to advice about safe sex … to software. 
naturally, there was a lot of opposition to this bill. 
not only from people who use the internet and people who appreciate erotica, but from everyone who cares about freedom of the press. 
but every time we tried to tell the public what was at stake, the forces of censorship responded with a lie: they told the public that the issue was simply pornography. 
by embedding this lie as a presupposition in their other statements about the issue, they succeeded in misinforming the public. 
so now i am censoring my software. 
you see, emacs contains a version of the famous "doctor program," a.k.a. 
eliza, originally developed by professor weizenbaum at mit. 
this is the program that imitates a rogerian psychotherapist. 
the user talks to the program, and the program responds—by playing back the user's own statements, and by recognizing a long list of particular words. 
the emacs doctor program was set up to recognize many common curse words and respond with an appropriately cute message such as, "would you please watch your tongue?"
 or "let's not be vulgar."
 in order to do this, it had to have a list of curse words. 
that means the source code for the program was indecent. 
so this week i removed that feature. 
the new version of the doctor doesn't recognize the indecent words; if you curse at it, it replays the curse back to you—for lack of knowing better. 
(when the new version starts up, it announces that it has been censored for your protection.) now that americans face the threat of two years in prison for indecent network postings, it would be helpful if they could access precise rules for avoiding imprisonment via the internet. 
however, this is impossible. 
the rules would have to mention the forbidden words, so posting them on the internet would violate those same rules. 
of course, i'm making an assumption about just what "indecent" means. 
i have to do this, because nobody knows for sure. 
the most obvious possible meaning is the meaning it has for television, so i'm using that as a tentative assumption. 
however, there is a good chance that our courts will reject that interpretation of the law as unconstitutional. 
we can hope that the courts will recognize the internet as a medium of publication like books and magazines. 
if they do, they will entirely reject any law prohibiting "indecent" publications on the internet. 
what really worries me is that the courts might choose a muddled half-measure—by approving an interpretation of "indecent" that permits the doctor program or a statement of the decency rules, but prohibits some of the books that any child can browse through in the public library. 
over the years, as the internet replaces the public library, some of our freedom of speech will be lost. 
just a few weeks ago, another country imposed censorship on the internet. 
that was china. 
we don't think well of china in this country—its government doesn't respect basic freedoms. 
but how well does our government respect them? 
and do you care enough to preserve them here? 
[this paragraph is obsolete:] if you care, stay in touch with the voters telecommunications watch. 
look in their web site http://www.vtw.org/ for background information and political action recommendations. 
censorship won in february, but we can beat it in november. 
from datamation, march 1 1996 
avoiding ruinous compromises. 
twenty-five years ago on september 27, 1983, i announced a plan to create a completely free operating system called gnu—for "gnu's not unix."
 as part of the 25th anniversary of the gnu system, i have written this article on how our community can avoid ruinous compromises. 
in addition to avoiding such compromises, there are many ways you can help gnu and free software. 
one way is to say no to the use of a nonfree program or an online disservice as often as you can or even once. 
the free software movement aims for a social change: to make all software free so that all software users are free and can be part of a community of cooperation. 
every nonfree program gives its developer unjust power over the users. 
our goal is to put an end to that injustice. 
the road to freedom is a long road. 
it will take many steps and many years to reach a world in which it is normal for software users to have freedom. 
some of these steps are hard, and require sacrifice. 
some of them become easier if we make compromises with people that have different goals. 
thus, the free software foundation makes compromises—even major ones. 
for instance, we made compromises in the patent provisions of version 3 of the gnu general public license (gnu gpl) so that major companies would contribute to and distribute gplv3-covered software and thus bring some patents under the effect of these provisions. 
the lesser gpl's purpose is a compromise: we use it on certain chosen free libraries to permit their use in nonfree programs because we think that legally prohibiting this would only drive developers to proprietary libraries instead. 
we accept and install code in gnu programs to make them work together with common nonfree programs, and we document and publicize this in ways that encourage users of the latter to install the former, but not vice versa. 
we support specific campaigns we agree with, even when we don't fully agree with the groups behind them. 
but we reject certain compromises even though many others in our community are willing to make them. 
for instance, we endorse only the gnu/linux distributions that have policies not to include nonfree software or lead users to install it. 
to endorse nonfree distributions would be a ruinous compromise. 
compromises are ruinous if they would work against our aims in the long term. 
that can occur either at the level of ideas or at the level of actions. 
at the level of ideas, ruinous compromises are those that reinforce the premises we seek to change. 
our goal is a world in which software users are free, but as yet most computer users do not even recognize freedom as an issue. 
they have taken up "consumer" values, which means they judge any program only on practical characteristics such as price and convenience. 
dale carnegie's classic self-help book, how to win friends and influence people, advises that the most effective way to persuade someone to do something is to present arguments that appeal to per values. 
there are ways we can appeal to the consumer values typical in our society. 
for instance, free software obtained gratis can save the user money. 
many free programs are convenient and reliable, too. 
citing those practical benefits has succeeded in persuading many users to adopt various free programs, some of which are now quite successful. 
if getting more people to use some free programs is as far as you aim to go, you might decide to keep quiet about the concept of freedom, and focus only on the practical advantages that make sense in terms of consumer values. 
that's what the term "open source" and its associated rhetoric do. 
that approach can get us only part way to the goal of freedom. 
people who use free software only because it is convenient will stick with it only as long as it is more convenient. 
and they will see no reason not to use convenient proprietary programs along with it. 
the philosophy of open source presupposes and appeals to consumer values, and this affirms and reinforces them. 
that's why we do not advocate open source. 
to establish a free community fully and lastingly, we need to do more than get people to use some free software. 
we need to spread the idea of judging software (and other things) on "citizen values," based on whether it respects users' freedom and community, not just in terms of convenience. 
then people will not fall into the trap of a proprietary program baited by an attractive, convenient feature. 
to promote citizen values, we have to talk about them and show how they are the basis of our actions. 
we must reject the dale carnegie compromise that would influence their actions by endorsing their consumer values. 
this is not to say we cannot cite practical advantage at all—we can and we do. 
it becomes a problem only when the practical advantage steals the scene and pushes freedom into the background. 
therefore, when we cite the practical advantages of free software, we reiterate frequently that those are just additional, secondary reasons to prefer it. 
it's not enough to make our words accord with our ideals; our actions have to accord with them too. 
so we must also avoid compromises that involve doing or legitimizing the things we aim to stamp out. 
for instance, experience shows that you can attract some users to gnu/linux if you include some nonfree programs. 
this could mean a cute nonfree application that will catch some user's eye, or a nonfree programming platform such as java (formerly) or the flash runtime (still), or a nonfree device driver that enables support for certain hardware models. 
these compromises are tempting, but they undermine the goal. 
if you distribute nonfree software, or steer people towards it, you will find it hard to say, "nonfree software is an injustice, a social problem, and we must put an end to it."
 and even if you do continue to say those words, your actions will undermine them. 
the issue here is not whether people should be able or allowed to install nonfree software; a general-purpose system enables and allows users to do whatever they wish. 
the issue is whether we guide users towards nonfree software. 
what they do on their own is their responsibility; what we do for them, and what we direct them towards, is ours. 
we must not direct the users towards proprietary software as if it were a solution, because proprietary software is the problem. 
a ruinous compromise is not just a bad influence on others. 
it can distort your own values, too, through cognitive dissonance. 
if you have certain values, but your actions imply other, conflicting values, you are likely to change your values or your actions so as to resolve the contradiction. 
thus, projects that argue only from practical advantages, or direct people toward some nonfree software, nearly always shy away from even suggesting that nonfree software is unethical. 
for their participants, as well as for the public, they reinforce consumer values. 
we must reject these compromises if we wish to keep our values straight. 
if you want to move to free software without compromising the goal of freedom, look at the fsf's resources area. 
it lists hardware and machine configurations that work with free software, totally free gnu/linux distros to install, and thousands of free software packages that work in a 100 percent free software environment. 
if you want to help the community stay on the road to freedom, one important way is to publicly uphold citizen values. 
when people are discussing what is good or bad, or what to do, cite the values of freedom and community and argue from them. 
a road that lets you go faster is not better if it leads to the wrong place. 
compromise is essential to achieve an ambitious goal, but beware of compromises that lead away from the goal. 
for a similar point in a different area of life, see "nudge" is not enough. 
computing "progress": good and bad. 
stallman the bbc invited me to write an article for their column series, the tech lab, and this is what i sent them. 
(it refers to a couple of other articles published in that series.) the bbc was ultimately unwilling to publish it with a copying-permission notice, so i have published it here. 
bradley horowitz of yahoo proposed here that every object in our world have a unique number so that your cell phone could record everything you do—even which cans you picked up while in the supermarket. 
if the phone is like today's phones, it will use proprietary software: software controlled by the companies that developed it, not by its users. 
those companies will ensure that your phone makes the information it collects about you available to the phone company's database (let's call it big brother) and probably to other companies. 
in the uk of the future, as new labour would have it, those companies will surely turn this information over to the police. 
if your phone reports you bought a wooden stick and a piece of poster board, the phone company's system will deduce that you may be planning a protest, and report you automatically to the police so they can accuse you of "terrorism."
 in the uk, it is literally an offense to be suspect—more precisely, to possess any object in circumstances that create a "reasonable suspicion" that you might use it in certain criminal ways. 
your phone will give the police plenty of opportunities to suspect you so they can charge you with having been suspected by them. 
similar things will happen in china, where yahoo has already given the government all the information it needed to imprison a dissident; it subsequently asked for our understanding on the excuse that it was "just following orders."
 horowitz would like cell phones to tag information automatically, based on knowing when you participate in an event or meeting. 
that means the phone company will also know precisely whom you meet. 
that information will also be interesting to governments, such as those of the uk and china, that cut corners on human rights. 
i do not much like horowitz's vision of total surveillance. 
rather, i envision a world in which our computers never collect, or release, any information about us except when we want them to. 
nonfree software does other nasty things besides spying; it often implements digital handcuffs—features designed to restrict the users (also called drm, for digital restrictions management). 
these features control how you can access, copy, or move the files in your own computer. 
drm is a common practice: microsoft does it, apple does it, google does it, even the bbc's iplayer does it. 
many governments, taking the side of these companies against the public, have made it illegal to tell others how to escape from the digital handcuffs. 
as a result, competition does nothing to check the practice: no matter how many proprietary alternatives you might have to choose from, they will all handcuff you just the same. 
if the computer knows where you are located, it can make drm even worse: there are companies that would like to restrict what you can access based on your present location. 
my vision of the world is different. 
i would like to see a world in which all the software in our computers—in our desktop pcs, our laptops, our handhelds, our phones—is under our control and respects our freedom. 
in other words, a world where all software is free software. 
free software, freedom-respecting software, means that every user of the program is free to get the program's source code and change the program to do what she wants, and also free to give away or sell copies, either exact or modified. 
this means the users are in control. 
with the users in control of the software, nobody has power to impose nasty features on others. 
even if you don't exercise this control yourself, you are part of a society where others do. 
if you are not a programmer, other users of the program are. 
they will probably find and remove any nasty features, which might spy on or restrict you, and publish safe versions. 
you will have only to select to use them—and since all other users will prefer them, that will usually happen with no effort on your part. 
charles stross envisioned computers that permanently record everything that we see and hear. 
those records could be very useful, as long as big brother doesn't see and hear all of them. 
today's cell phones are already capable of listening to their users without informing them, at the request of the police, the phone company, or anyone that knows the requisite commands. 
as long as phones use nonfree software, controlled by its developers and not by the users, we must expect this to get worse. 
only free software enables computer-using citizens to resist totalitarian surveillance. 
dave winer's article suggested that mr. 
gates should send a copy of windows vista to alpha centauri. 
i understand the feeling, but sending just one won't solve our problem here on earth. 
windows is designed to spy on users and restrict them. 
we should collect all the copies of windows, and of macos and iplayer for the same reason, and send them to alpha centauri at the slowest possible speed. 
or just erase them. 
beware of contradictory "support". 
there are organizations that proclaim support for free software or the gnu project, and teach classes in use of nonfree software. 
it's possible that they do some other things that really support free software, but those classes certainly don't. 
on the contrary, they work directly against the free software movement by promoting the use of the nonfree software. 
that increases the magnitude of the practical problem it is our mission to correct. 
even worse, that grants nonfree software legitimacy. 
the basic point of the free software movement is that nonfree software is unjust and should not exist. 
that's why we need a movement to replace and eliminate it. 
teaching how to use it asserts that it isn't a problem; that opposes the free software movement at the deepest level. 
of course, people have the right to state that view, but they shouldn't pretend that it constitutes support for our cause. 
even more outrageously, some of those organizations claim that their courses in using nonfree software are connected with or even certified by the gnu project or the free software foundation. 
needless to say, we would never certify such a course, nor recommend it, nor have anything to do with it, nor even talk about it except with condemnation. 
teaching use of nonfree programs works against free software; teaching it in association with the name gnu or the term "free software" causes confusion about what we stand for. 
if you encounter such an organization, please explain these points to the people who work on it: that such courses go directly against the principles of the free software movement. 
explain to them why, if they want to help the free software cause, they need to teach people to choose free software, not legitimize nonfree software. 
if they ask you to participate in those courses, as a student or teacher, that gives you an opportunity to say no for a change. 
copyright and globalization in the age of computer networks. 
the following is an edited transcript from a speech given at mit in the communications forum on thursday, april 19, 2001. 
david thorburn, moderator: our speaker today, richard stallman, is a legendary figure in the computing world, and my experience in trying to find a respondent to share the podium with him was instructive. 
one distinguished mit professor told me that stallman needs to be understood as a charismatic figure in a biblical parable—a kind of old testament anecdote-lesson. 
"imagine," he said, "a moses or a jeremiah—better a jeremiah."
 and i said, "well, that's very admirable. 
that sounds wonderful. 
it confirms my sense of the kind of contribution he has made to the world. 
then why are you reluctant to share the podium with him?"
 his answer: "like jeremiah or moses, he would simply overwhelm me. 
i won't appear on the same panel him, but if you asked me to name five people alive in the world who have truly helped us all, richard stallman would be one of them."
 richard stallman: i should [begin by explaining why i have refused to allow this forum to be web cast], in case it wasn't clear fully what the issue is: the software they use for web broadcasting requires the user to download certain software in order to receive the broadcast. 
that software is not free software. 
it's available at zero price but only as an executable, which is a mysterious bunch of numbers. 
what it does is secret. 
you can't study it; you can't change it; and you certainly can't publish it in your own modified version. 
and those are among the freedoms that are essential in the definition of "free software."
 so if i am to be an honest advocate for free software, i can hardly go around giving speeches, then put pressure on people to use nonfree software. 
i'd be undermining my own cause. 
and if i don't show that i take my principles seriously, i can't expect anybody else to take them seriously. 
however, this speech is not about free software. 
after i'd been working on the free software movement for several years and people started using some of the pieces of the gnu operating system, i began getting invited to give speeches [at which] … people started asking me: "well, how do the ideas about freedom for software users generalize to other kinds of things?"
 and, of course, people asked silly questions like, "well, should hardware be free?"
 "should this microphone be free?"
 well, what does that mean? 
should you be free to copy it and change it? 
well, as for changing it, if you buy the microphone, nobody is going to stop you from changing it. 
and as for copying it, nobody has a microphone copier. 
outside of star trek, those things don't exist. 
maybe some day there'll be nanotechnological analyzers and assemblers, and it really will be possible to copy a physical object, and then these issues of whether you're free to do that will start being really important. 
we'll see agribusiness companies trying to stop people from copying food, and that will become a major political issue, if that technological capability will ever exist. 
i don't know if it will; it's just speculation at this point. 
but for other kinds of information, you can raise the issue because any kind of information that can be stored on a computer, conceivably, can be copied and modified. 
so the ethical issues of free software, the issues of a user's right to copy and modify software, are the same as such questions for other kinds of published information. 
now i'm not talking about private information, say, personal information, which is never meant to be available to the public at all. 
i'm talking about the rights you should have if you get copies of published things where there's no attempt to keep them secret. 
in order to explain my ideas on the subject, i'd like to review the history of the distribution of information and of copyright. 
in the ancient world, books were written by hand with a pen, and anybody who knew how to read and write could copy a book about as efficiently as anybody else. 
now somebody who did it all day would probably learn to be somewhat better at it, but there was not a tremendous difference. 
and because the copies were made one at a time, there was no great economy of scale. 
making ten copies took ten times as long as making one copy. 
there was also nothing forcing centralization; a book could be copied anywhere. 
now because of this technology, because it didn't force copies to be identical, there wasn't in the ancient world the same total divide between copying a book and writing a book. 
there are things in between that made sense. 
they did understand the idea of an author. 
they knew, say, that this play was written by sophocles but in between writing a book and copying a book, there were other useful things you could do. 
for instance, you could copy a part of a book, then write some new words, copy some more and write some new words and on and on. 
this was called "writing a commentary"—that was a common thing to do—and these commentaries were appreciated. 
you could also copy a passage out of one book, then write some other words, and copy a passage from another book and write some more and so on, and this was making a compendium. 
compendia were also very useful. 
there are works that are lost but parts of them survived when they were quoted into other books that got to be more popular than the original. 
maybe they copied the most interesting parts, and so people made a lot of copies of these, but they didn't bother copying the original because it wasn't interesting enough. 
now as far as i can tell, there was no such thing as copyright in the ancient world. 
anyone who wanted to copy a book could copy the book. 
later on, the printing press was developed and books started to be copied on the printing press. 
now the printing press was not just a quantitative improvement in the ease of copying. 
it affected different kinds of copying unevenly because it introduced an inherent economy of scale. 
it was a lot of work to set the type and much less work to make many identical copies of the page. 
so the result was that copying books tended to become a centralized, mass-production activity. 
copies of any given book would probably be made in only a few places. 
it also meant that ordinary readers couldn't copy books efficiently. 
only if you had a printing press could you do that. 
so it was an industrial activity. 
now for the first few centuries of printing, printed books did not totally replace hand-copying. 
hand-copied books were still made, sometimes by rich people and sometimes by poor people. 
the rich people did this to get an especially beautiful copy that would show how rich they were, and poor people did it because maybe they didn't have enough money to buy a printed copy but they had the time to copy a book by hand. 
as the song says, "time ain't money when all you got is time."
 so hand-copying was still done to some extent. 
i think it was in the 1800s that printing actually got to be cheap enough that even poor people could afford printed books if they were literate. 
now copyright was developed along with the use of the printing press and given the technology of the printing press, it had the effect of an industrial regulation. 
it didn't restrict what readers could do; it restricted what publishers and authors could do. 
copyright in england was initially a form of censorship. 
you had to get government permission to publish the book. 
but the idea has changed. 
by the time of the u.s. 
constitution, people came to a different idea of the purpose of copyright, and i think that that idea was accepted in england as well. 
for the u.s. 
constitution it was proposed that authors should be entitled to a copyright, a monopoly on copying their books. 
this proposal was rejected. 
instead, a crucially different proposal was adopted which is that, for the sake of promoting progress, congress could optionally establish a copyright system that would create these monopolies. 
so the monopolies, according to the u.s. 
constitution, do not exist for the sake of those who own them; they exist for the sake of promoting the progress of science. 
the monopolies are handed out to authors as a way of modifying their behavior to get them to do something that serves the public. 
so the goal is more written and published books which other people can then read. 
and this is believed to contribute to increased literary activity, increased writing about science and other fields, and society then learns through this. 
that's the purpose to be served. 
the creation of private monopolies was a means to an end only, and the end is a public end. 
now copyright in the age of the printing press was fairly painless because it was an industrial regulation. 
it restricted only the activities of publishers and authors. 
well, in some strict sense, the poor people who copied books by hand may have been infringing copyright, too. 
but nobody ever tried to enforce copyright against them because it was understood as an industrial regulation. 
copyright in the age of the printing press was also easy to enforce because it had to be enforced only where there was a publisher, and publishers, by their nature, make themselves known. 
if you're trying to sell books, you've got to tell people where to come to buy them. 
you don't have to go into everybody's house to enforce copyright. 
and, finally, copyright may have been a beneficial system in that context. 
copyright in the u.s. 
is considered by legal scholars as a trade, a bargain between the public and authors. 
the public trades away some of its natural rights to make copies, and in exchange gets the benefit of more books' being written and published. 
now, is this an advantageous trade? 
well, when the general public can't make copies because they can only be efficiently made on printing presses—and most people don't own printing presses—the result is that the general public is trading away a freedom it is unable to exercise, a freedom that is of no practical value. 
so if you have something that is a byproduct of your life and it's useless and you have the opportunity to exchange it for something else of any value, you're gaining. 
so that's why copyright may have been an advantageous trade for the public in that time. 
but the context is changing, and that has to change our ethical evaluation of copyright. 
now the basic principles of ethics are not changed by advances in technology; they're too fundamental to be touched by such contingencies. 
but our decision about any specific question is a matter of the consequences of the alternatives available, and the consequences of a given choice may change when the context changes. 
that is what is happening in the area of copyright law because the age of the printing press is coming to an end, giving way gradually to the age of the computer networks. 
computer networks and digital information technology are bringing us back to a world more like the ancient world where anyone who can read and use the information can also copy it and can make copies about as easily as anyone else could make them. 
they are perfect copies and they're just as good as the copies anyone else could make. 
so the centralization and economy of scale introduced by the printing press and similar technologies is going away. 
and this changing context changes the way copyright law works. 
you see, copyright law no longer acts as an industrial regulation; it is now a draconian restriction on a general public. 
it used to be a restriction on publishers for the sake of authors. 
now, for practical purposes, it's a restriction on a public for the sake of publishers. 
copyright used to be fairly painless and uncontroversial. 
it didn't restrict the general public. 
now that's not true. 
if you have a computer, the publishers consider restricting you to be their highest priority. 
copyright was easy to enforce because it was a restriction only on publishers who were easy to find and what they published was easy to see. 
now the copyright is a restriction on each and everyone of you. 
to enforce it requires surveillance—an intrusion—and harsh punishments, and we are seeing these being enacted into law in the u.s. 
and other countries. 
and copyright used to be, arguably, an advantageous trade for the public to make because the public was trading away freedoms it couldn't exercise. 
well, now it can exercise these freedoms. 
what do you do if you have been producing a byproduct which was of no use to you and you were in the habit of trading it away and then, all of a sudden, you discover a use for it? 
you can actually consume it, use it. 
what do you do? 
you don't trade at all; you keep some. 
and that's what the public would naturally want to do. 
that's what the public does whenever it's given a chance to voice its preference; it keeps some of this freedom and exercises it. 
napster is a big example of that, the public deciding to exercise the freedom to copy instead of giving it up. 
so the natural thing for us to do to make copyright law fit today's circumstances is to reduce the amount of copyright power that copyright owners get, to reduce the amount of restriction that they place on the public and to increase the freedom that the public retains. 
but this is not what the publishers want to do. 
what they want to do is exactly the opposite. 
they wish to increase copyright powers to the point where they can remain firmly in control of all use of information. 
this has led to laws that have given an unprecedented increase in the powers of copyright. 
freedoms that the public used to have in the age of the printing press are being taken away. 
for instance, let's look at e-books. 
there's a tremendous amount of hype about e-books; you can hardly avoid it. 
i took a flight in brazil and in the in-flight magazine, there was an article saying that maybe it would take 10 or 20 years before we all switched to e-books. 
clearly, this kind of campaign comes from somebody paying for it. 
now why are they doing that? 
i think i know. 
the reason is that e-books are the opportunity to take away some of the residual freedoms that readers of printed books have always had and still have—the freedom, for instance, to lend a book to your friend or borrow it from the public library or sell a copy to a used bookstore or buy a copy anonymously, without putting a record in the database of who bought that particular book. 
and maybe even the right to read it twice. 
these are freedoms that the publishers would like to take away, but they can't do this for printed books because that would be too obvious a power-grab and would raise an outcry. 
so they have found an indirect strategy: first, they obtain the legislation to take away these freedoms for e-books when there are no e-books; so there's no controversy. 
there are no pre-existing users of e-books who are accustomed to their freedoms and will defend them. 
that they obtained with the digital millennium copyright act in 1998. 
then they introduce e-books and gradually get everybody to switch from printed books to e-books and eventually the result is, readers have lost these freedoms without ever having an instant when those freedoms were being taken away and when they might have fought back to retain them. 
we see at the same time efforts to take away people's freedom in using other kinds of published works. 
for instance, movies that are on dvds are published in an encrypted format that used to be secret—it was meant to be secret—and the only way the movie companies would tell you the format, so that you could make a dvd player, was if you signed a contract to build certain restrictions into the player, with the result that the public would be stopped even from fully exercising their legal rights. 
then a few clever programmers in europe figured out the format of dvds and they wrote a free software package that would read a dvd. 
this made it possible to use free software on top of the gnu+linux operating system to watch the dvd that you had bought, which is a perfectly legitimate thing to do. 
you ought to be able to do that with free software. 
but the movie companies objected and they went to court. 
you see, the movie companies used to make a lot of films where there was a mad scientist and somebody was saying, "but, doctor, there are some things man was not meant to know."
 they must have watched their own films too much because they came to believe that the format of dvds is something that man was not meant to know. 
and they obtained a ruling for total censorship of the software for playing dvds. 
even making a link to a site where this information is legally available outside the u.s. 
has been prohibited. 
an appeal has been made against this ruling. 
i signed a friend-of-the-court brief in that appeal, i'm proud to say, although i'm playing a fairly small role in that particular battle. 
the u.s. 
government intervened directly on the other side. 
this is not surprising when you consider why the digital millennium copyright act was passed in the first place. 
the reason is the campaign finance system that we have in the u.s., which is essentially legalized bribery where the candidates are bought by business before they even get elected. 
and, of course, they know who their master is—they know whom they're working for—and they pass the laws to give business more power. 
what will happen with that particular battle, we don't know. 
but meanwhile australia has passed a similar law and europe is almost finished adopting one; so the plan is to leave no place on earth where this information can be made available to people. 
but the u.s. 
remains the world leader in trying to stop the public from distributing information that's been published. 
the u.s. 
though is not the first country to make a priority of this. 
the soviet union treated it as very important. 
there this unauthorized copying and redistribution was known as samizdat and to stamp it out, they developed a series of methods: first, guards watching every piece of copying equipment to check what people were copying to prevent forbidden copying. 
second, harsh punishments for anyone caught doing forbidden copying. 
you could be sent to siberia. 
third, soliciting informers, asking everyone to rat on their neighbors and co-workers to the information police. 
fourth, collective responsibility—you! 
you're going to watch that group! 
if i catch any of them doing forbidden copying, you are going to prison. 
so watch them hard. 
and, fifth, propaganda, starting in childhood to convince everyone that only a horrible enemy of the people would ever do this forbidden copying. 
the u.s. 
is using all of these measures now. 
first, guards watching copying equipment. 
well, in copy stores, they have human guards to check what you copy. 
but human guards to watch what you copy in your computer would be too expensive; human labor is too expensive. 
so they have robot guards. 
that's the purpose of the digital millennium copyright act. 
this software goes in your computer; it's the only way you can access certain data and it stops you from copying. 
there's a plan now to introduce this software into every hard disk, so that there could be files on your hard disk that you can't even access except by getting permission from some network server to access the file. 
and to bypass this software or even tell other people how to bypass it is a crime. 
second, harsh punishments. 
a few years ago, if you made copies of something and handed them out to your friends just to be helpful, this was not a crime; it had never been a crime in the u.s. 
then they made it a felony, so you could be put in prisons for years for sharing with your neighbor. 
third, informers. 
well, you may have seen the ads on tv, the ads in the boston subways asking people to rat on their co-workers to the information police, which officially is called the software publishers association. 
and fourth, collective responsibility. 
in the u.s., this has been done by conscripting internet service providers, making them legally responsible for everything their customers post. 
the only way they can avoid always being held responsible is if they have an invariable procedure to disconnect or remove the information within two weeks after a complaint. 
just a few days ago, i heard that a clever protest site criticizing city bank for some of its nasty policies was disconnected in this way. 
nowadays, you don't even get your day in court; your site just gets unplugged. 
and, finally, propaganda, starting in childhood. 
that's what the word "pirate" is used for. 
if you'll think back a few years, the term "pirate" was formerly applied to publishers that didn't pay the author. 
but now it's been turned completely around. 
it's now applied to members of the public who escape from the control of the publisher. 
it's being used to convince people that only a nasty enemy of the people would ever do this forbidden copying. 
it says that "sharing with your neighbor is the moral equivalent of attacking a ship."
 i hope that you don't agree with that and if you don't, i hope you will refuse to use the word in that way. 
so the publishers are purchasing laws to give themselves more power. 
in addition, they're also extending the length of time the copyright lasts. 
the u.s. 
constitution says that copyright must last for a limited time, but the publishers want copyright to last forever. 
however, getting a constitutional amendment would be rather difficult, so they found an easier way that achieves the same result. 
every 20 years they retroactively extend copyright by 20 years. 
so the result is, at any given time, copyright nominally lasts for a certain period and any given copyright will nominally expire some day. 
but that expiration will never be reached because every copyright will be extended by 20 years every 20 years; thus no work will ever go into the public domain again. 
this has been called "perpetual copyright on the installment plan."
 the law in 1998 that extended copyright by 20 years is known as the "mickey mouse copyright extension act" because one of the main sponsors of this law was disney. 
disney realized that the copyright on mickey mouse was going to expire, and they don't want that to ever happen because they make a lot of money from that copyright. 
now the original title of this talk was supposed to be "copyright and globalization."
 if you look at globalization, what you see is that it's carried out by a number of policies which are done in the name of economic efficiency or so-called free-trade treaties, which really are designed to give business power over laws and policies. 
they're not really about free trade. 
they're about a transfer of power: removing the power to decide laws from the citizens of any country who might conceivably consider their own interests and giving that power to businesses who will not consider the interests of those citizens. 
democracy is the problem in their view, and these treaties are designed to put an end to the problem. 
for instance, nafta actually contains provisions, i believe, allowing companies to sue another government to get rid of a law that they believe is interfering with their profits in the other country. 
so foreign companies have more power than citizens of the country. 
there are attempts being made to extend this beyond nafta. 
for instance, this is one of the goals of the so-called free trade area of the americas, to extend this principle to all the countries in south america and the caribbean as well, and the multilateral agreement on investment was intended to spread it to the whole world. 
one thing we've seen in the '90s is that these treaties begin to impose copyright throughout the world, and in more powerful and restrictive ways. 
these treaties are not free-trade treaties. 
they're actually corporate-controlled trade treaties being used to give corporations control over world trade, in order to eliminate free trade. 
when the u.s. 
was a developing country in the 1800s, the u.s. 
did not recognize foreign copyrights. 
this was a decision made carefully, and it was an intelligent decision. 
it was acknowledged that for the u.s. 
to recognize foreign copyrights would just be disadvantageous, that it would suck money out and wouldn't do much good. 
the same logic would apply today to developing countries but the u.s. 
has sufficient power to force them to go against their interests. 
actually, it's a mistake to speak of the interests of countries in this context. 
in fact, i'm sure that most of you have heard about the fallacy of trying to judge the public interest by adding up everybody's wealth. 
if working americans lost $1 billion and bill gates gained $2 billion, would americans generally be better off? 
would this be good for america? 
or if you look only at the total, it looks like it's good. 
however, this example really shows that the total is the wrong way to judge because bill gates really doesn't need another $2 billion, but the loss of the $1 billion by other people who don't have as much to start with might be painful. 
well, in a discussion about any of these trade treaties, when you hear people talk about the interests of this country or that country, what they're doing, within each country, is adding up everybody's income. 
the rich people and the poor people are being added up. 
so it's actually an excuse to apply that same fallacy to get you to ignore the effect on the distribution of wealth within the country and whether the treaty is going to make that more uneven, as it has done in the u.s. 
so it's really not the u.s. 
interest that is being served by enforcing copyright around the world. 
it's the interests of certain business owners, many of whom are in the u.s. 
and some of whom are in other countries. 
it doesn't, in any sense, serve the public interest. 
but what would make sense to do? 
if we believe in the goal of copyright stated, for instance in the u.s. 
constitution, the goal of promoting progress, what would be intelligent policies to use in the age of the computer network? 
clearly, instead of increasing copyright powers, we have to pull them back so as to give the general public a certain domain of freedom where they can make use of the benefits of digital technology, make use of their computer networks. 
but how far should that go? 
that's an interesting question because i don't think we should necessarily abolish copyright totally. 
the idea of trading some freedoms for more progress might still be an advantageous trade at a certain level, even if traditional copyright gives up too much freedom. 
but in order to think about this intelligently, the first thing we have to recognize is, there's no reason to make it totally uniform. 
there's no reason to insist on making the same deal for all kinds of work. 
in fact, that already isn't the case because there are a lot of exceptions for music. 
music is treated very differently under copyright law. 
but the arbitrary insistence on uniformity is used by the publishers in a certain clever way. 
they pick some peculiar special case and they make an argument that, in that special case, it would be advantageous to have this much copyright. 
and then they say that for uniformity's sake, there has to be this much copyright for everything. 
so, of course, they pick the special case where they can make the strongest argument, even if it's a rather rare special case and not really very important overall. 
but maybe we should have that much copyright for that particular special case. 
we don't have to pay the same price for everything we buy. 
a thousand dollars for a new car might be a very good deal. 
a thousand dollars for a container of milk is a horrible deal. 
you wouldn't pay the special price for everything you buy in other areas of life. 
why do it here? 
so we need to look at different kinds of works, and i'd like to propose a way of doing this. 
this includes recipes, computer programs, manuals and textbooks, reference works like dictionaries and encyclopedias. 
for all these functional works, i believe that the issues are basically the same as they are for software and the same conclusions apply. 
people should have the freedom even to publish a modified version because it's very useful to modify functional works. 
people's needs are not all the same. 
if i wrote this work to do the job i think needs doing, your idea as a job you want to do may be somewhat different. 
so you want to modify this work to do what's good for you. 
at that point, there may be other people who have similar needs to yours, and your modified version might be good for them. 
everybody who cooks knows this and has known this for hundreds of years. 
it's normal to make copies of recipes and hand them out to other people, and it's also normal to change a recipe. 
if you change the recipe and cook it for your friends and they like eating it, they might ask you, "could i have the recipe?"
 then maybe you'll write down your version and give them copies. 
that is exactly the same thing that we much later started doing in the free-software community. 
so that's one class of work. 
the second class of work is works whose purpose is to say what certain people think. 
talking about those people is their purpose. 
this includes, say, memoirs, essays of opinion, scientific papers, offers to buy and sell, catalogues of goods for sale. 
the whole point of those works is that they tell you what somebody thinks or what somebody saw or what somebody believes. 
to modify them is to misrepresent the authors; so modifying these works is not a socially useful activity. 
and so verbatim copying is the only thing that people really need to be allowed to do. 
the next question is: should people have the right to do commercial verbatim copying? 
or is noncommercial enough? 
you see, these are two different activities we can distinguish, so that we can consider the questions separately—the right to do noncommercial verbatim copying and the right to do commercial verbatim copying. 
well, it might be a good compromise policy to have copyright cover commercial verbatim copying but allow everyone the right to do noncommercial verbatim copying. 
this way, the copyright on the commercial verbatim copying, as well as on all modified versions—only the author could approve a modified version—would still provide the same revenue stream that it provides now to fund the writing of these works, to whatever extent it does. 
by allowing the noncommercial verbatim copying, it means the copyright no longer has to intrude into everybody's home. 
it becomes an industrial regulation again, easy to enforce and painless, no longer requiring draconian punishments and informers for the sake of its enforcement. 
so we get most of the benefit—and avoid most of the horror—of the current system. 
the third category of works is aesthetic or entertaining works, where the most important thing is just the sensation of looking at the work. 
now for these works, the issue of modification is a very difficult one because on the one hand, there is the idea that these works reflect the vision of an artist and to change them is to mess up that vision. 
on the other hand, you have the fact that there is the folk process, where a sequence of people modifying a work can sometimes produce a result that is extremely rich. 
even when you have artists' producing the works, borrowing from previous works is often very useful. 
some of shakespeare's plays used a story that was taken from some other play. 
if today's copyright laws had been in effect back then, those plays would have been illegal. 
so it's a hard question what we should do about publishing modified versions of an aesthetic or an artistic work, and we might have to look for further subdivisions of the category in order to solve this problem. 
for example, maybe computer game scenarios should be treated one way; maybe everybody should be free to publish modified versions of them. 
but perhaps a novel should be treated differently; perhaps for that, commercial publication should require an arrangement with the original author. 
now if commercial publication of these aesthetic works is covered by copyright, that will give most of the revenue stream that exists today to support the authors and musicians, to the limited extent that the present system supports them, because it does a very bad job. 
so that might be a reasonable compromise, just as in the case of the works which represent certain people. 
if we look ahead to the time when the age of the computer networks will have fully begun, when we're past this transitional stage, we can envision another way for the authors to get money for their work. 
imagine that we have a digital cash system that enables you to get money for your work. 
imagine that we have a digital cash system that enables you to send somebody else money through the internet; this can be done in various ways using encryption, for instance. 
and imagine that verbatim copying of all these aesthetic works is permitted. 
but they're written in such a way that when you are playing one or reading one or watching one, a box appears on the side of your screen that says, "click here to send a dollar to the author," or the musician or whatever. 
and it just sits there; it doesn't get in your way; it's on the side. 
it doesn't interfere with you, but it's there, reminding you that it's a good thing to support the writers and the musicians. 
so if you love the work that you're reading or listening to, eventually you're going to say, "why shouldn't i give these people a dollar? 
it's only a dollar. 
what's that? 
i won't even miss it."
 and people will start sending a dollar. 
the good thing about this is that it makes copying the ally of the authors and musicians. 
when somebody e-mails a friend a copy, that friend might send a dollar, too. 
if you really love it, you might send a dollar more than once and that dollar is more than they're going to get today if you buy the book or buy the cd because they get a tiny fraction of the sale. 
the same publishers that are demanding total power over the public in the name of the authors and musicians are giving those authors and musicians the shaft all the time. 
i recommend you read courtney love's article in salon magazine, an article about pirates that plan to use musicians' work without paying them. 
these pirates are the record companies that pay musicians 4% of the sales figures, on the average. 
of course, the very successful musicians have more clout. 
they get more than 4% of their large sales figures, which means that the great run of musicians who have a record contract get less than 4% of their small sales figures. 
here's the way it works: the record company spends money on publicity and they consider this expenditure as an advance to the musicians, although the musicians never see it. 
so nominally when you buy a cd, a certain fraction of that money is going to the musicians, but really it isn't. 
really, it's going to pay back the publicity expenses, and only if the musicians are very successful do they ever see any of that money. 
the musicians, of course, sign their record contracts because they hope they're going to be one of those few who strike it rich. 
so essentially a rolling lottery is being offered to the musicians to tempt them. 
although they're good at music, they may not be good at careful, logical reasoning to see through this trap. 
so they sign and then probably all they get is publicity. 
well, why don't we give them publicity in a different way, not through a system that's based on restricting the public and a system of the industrial complex that saddles us with lousy music that's easy to sell. 
instead, why not make the listener's natural impulse to share the music they love the ally of the musicians? 
if we have this box that appears in the player as a way to send a dollar to the musicians, then the computer networks could be the mechanism for giving the musicians this publicity, the same publicity which is all they get from record contracts now. 
we have to recognize that the existing copyright system does a lousy job of supporting musicians, just as lousy as world trade does of raising living standards in the philippines and china. 
you have these enterprise zones where everyone works in a sweatshop and all of the products are made in sweatshops. 
i knew that globalization was a very inefficient way of raising living standards of people overseas. 
say, an american is getting paid $20 an hour to make something and you give that job to a mexican who is getting paid maybe six dollars a day, what has happened here is that you've taken a large amount of money away from an american worker, given a tiny fraction, like a few percents, to a mexican worker and given back the rest to the company. 
so if your goal is to raise the living standards of mexican workers, this is a lousy way to do it. 
it's interesting to see how the same phenomenon is going on in the copyright industry, the same general idea. 
in the name of these workers who certainly deserve something, you propose measures that give them a tiny bit and really mainly prop up the power of corporations to control our lives. 
if you're trying to replace a very good system, you have to work very hard to come up with a better alternative. 
if you know that the present system is lousy, it's not so hard to find a better alternative; the standard of comparison today is very low. 
we must always remember that when we consider issues of copyright policy. 
so i think i've said most of what i want to say. 
i'd like to mention that tomorrow is phone-in sick day in canada. 
tomorrow is the beginning of a summit to finish negotiating the free trade area of the americas to try to extend corporate power throughout additional countries, and a big protest is being planned for quebec. 
we've seen extreme methods being used to smash this protest. 
a lot of americans are being blocked from entering canada through the border that they're supposed to be allowed to enter through at any time. 
on the flimsiest of excuses, a wall has been built around the center of quebec to be used as a fortress to keep protesters out. 
we've seen a large number of different dirty tricks used against public protest against these treaties. 
so whatever democracy remains to us after government powers have been taken away from democratically elected governors and given to businesses and to unelected international bodies, whatever is left after that may not survive the suppression of public protest against it. 
i've dedicated 17 years of my life to working on free software and allied issues. 
i didn't do this because i think it's the most important political issue in the world. 
i did it because it was the area where i saw i had to use my skills to do a lot of good. 
but what's happened is that the general issues of politics have evolved, and the biggest political issue in the world today is resisting the tendency to give business power over the public and governments. 
i see free software and the allied questions for other kinds of information that i've been discussing today as one part of that major issue. 
so i've indirectly found myself working on that issue. 
i hope i contribute something to the effort. 
response: thorburn: we'll turn to the audience for questions and comments in a moment. 
but let me offer a brief general response. 
it seems to me that the strongest and most important practical guidance that stallman offers us has two key elements. 
one is the recognition that old assumptions about copyright, old usages of copyright are inappropriate; they are challenged or undermined by the advent of the computer and computer networks. 
that may be obvious, but it is essential. 
second is the recognition that the digital era requires us to reconsider how we distinguish and weigh forms of intellectual and creative labor. 
stallman is surely right that certain kinds of intellectual enterprises justify more copyright protection than others. 
trying to identify systematically these different kinds or levels of copyright protection seems to me a valuable way to engage with the problems for intellectual work posed by the advent of the computer. 
but i think i detect another theme that lies beneath what stallman has been saying and that isn't really directly about computers at all, but more broadly about questions of democratic authority and the power that government and corporations increasingly exercise over our lives. 
this populist and anti-corporate side to stallman's discourse is nourishing but also reductive, potentially simplifying. 
and it is also perhaps overly idealistic. 
for example, how would a novelist or a poet or a songwriter or a musician or the author of an academic textbook survive in this brave new world where people are encouraged but not required to pay authors. 
in other words, it seems to me, the gap between existing practice and the visionary possibilities stallman speculates about is still immensely wide. 
so i'll conclude by asking if stallman would like to expand a bit on certain aspects of his talk and, specifically, whether he has further thoughts about the way in which what we'll call "traditional creators" would be protected under his copyright system. 
stallman: first of all, i have to point out that we shouldn't use the term "protection" to describe what copyright does. 
copyright restricts people. 
the term "protection" is a propaganda term of the copyright-owning businesses. 
the term "protection" means stopping something from being somehow destroyed. 
well, i don't think a song is destroyed if there are more copies of it being played more. 
i don't think that a novel is destroyed if more people are reading copies of it, either. 
so i won't use that word. 
i think it leads people to identify with the wrong party. 
also, it's a very bad idea to think about intellectual property for two reasons: first, it prejudges the most fundamental question in the area which is: how should these things be treated and should they be treated as a kind of property? 
to use the term "intellectual property" to describe the area is to presuppose the answer is "yes," that that's the way to treat things, not some other way. 
second, it encourages over-generalization. 
intellectual property is a catch-all for several different legal systems with independent origins such as, copyrights, patents, trademarks, trade secrets and some other things as well. 
they are almost completely different; they have nothing in common. 
but people who hear the term "intellectual property" are led to a false picture where they imagine that there's a general principle of intellectual property that was applied to specific areas, so they assume that these various areas of the law are similar. 
this leads not only to confused thinking about what is right to do, it leads people to fail to understand what the law actually says because they suppose that the copyright law and patent law and trademark law are similar, when, in fact, they are totally different. 
so if you want to encourage careful thinking and clear understanding of what the law says, avoid the term "intellectual property."
 talk about copyrights. 
or talk about patents. 
or talk about trademarks or whichever subject you want to talk about. 
but don't talk about intellectual property. 
opinion about intellectual property almost has to be a foolish one. 
i don't have an opinion about intellectual property. 
i have opinions about copyrights and patents and trademarks, and they're different. 
i came to them through different thought processes because those systems of law are totally different. 
anyway, i made that digression, but it's terribly important. 
so let me now get to the point. 
of course, we can't see now how well it would work, whether it would work to ask people to pay money voluntarily to the authors and musicians they love. 
one thing that's obvious is that how well such a system would work is proportional to the number of people who are participating in the network, and that number, we know, is going to increase by an order of magnitude over a number of years. 
if we tried it today, it might fail, and that wouldn't prove anything because with ten times as many people participating, it might work. 
the other thing is, we do not have this digital cash payment system; so we can't really try it today. 
you could try to do something a little bit like it. 
there are services you can sign up for where you can pay money to someone—things like paypal. 
but before you can pay anyone through paypal, you have to go through a lot of rigmarole and give them personal information about you, and they collect records of whom you pay. 
can you trust them not to misuse that? 
so the dollar might not discourage you, but the trouble it takes to pay might discourage you. 
the whole idea of this is that it should be as easy as falling off a log to pay when you get the urge, so that there's nothing to discourage you except the actual amount of money. 
and if that's small enough, why should it discourage you. 
we know, though, that fans can really love musicians, and we know that encouraging fans to copy and redistribute the music has been done by some bands that were, and are, quite successful like the "grateful dead."
 they didn't have any trouble making a living from their music because they encouraged fans to tape it and copy the tapes. 
they didn't even lose their record sales. 
we are gradually moving from the age of the printing press to the age of the computer network, but it's not happening in a day. 
people are still buying lots of records, and that will probably continue for many years—maybe forever. 
as long as that continues, simply having copyrights that still apply to commercial sales of records ought to do about as good a job of supporting musicians as it does today. 
of course, that's not very good, but, at least, it won't get any worse. 
discussion: question: [a comment and question about free downloading and about stephen king's attempt to market one of his novels serially over the web.] stallman: yes, it's interesting to know what he did and what happened. 
when i first heard about that, i was elated. 
i thought, maybe he was taking a step towards a world that is not based on trying to maintain an iron grip on the public. 
then i saw that he had actually written to ask people to pay. 
to explain what he did, he was publishing a novel as a serial, by installments, and he said, "if i get enough money, i'll release more."
 but the request he wrote was hardly a request. 
it brow-beat the reader. 
it said, "if you don't pay, then you're evil. 
and if there are too many of you who are evil, then i'm just going to stop writing this."
 well, clearly, that's not the way to make the public feel like sending you money. 
you've got to make them love you, not fear you. 
speaker: the details were that he required a certain percentage—i don't know the exact percentage, around 90% sounds correct—of people to send a certain amount of money, which, i believe, was a dollar or two dollars, or somewhere in that order of magnitude. 
you had to type in your name and your e-mail address and some other information to get to download it and if that percentage of people was not reached after the first chapter, he said that he would not release another chapter. 
it was very antagonistic to the public downloading it. 
question: isn't the scheme where there's no copyright but people are asked to make voluntary donations open to abuse by people plagiarizing? 
stallman: no. 
that's not what i proposed. 
remember, i'm proposing that there should be copyright covering commercial distribution and permitting only verbatim redistribution noncommercially. 
so anyone who modified it to put in a pointer to his website, instead of a pointer to the real author's website, would still be infringing the copyright and could be sued exactly as he could be sued today. 
question: i see. 
so you're still imagining a world in which there is copyright? 
stallman: yes. 
as i've said, for those kinds of works. 
i'm not saying that everything should be permitted. 
i'm proposing to reduce copyright powers, not abolish them. 
thorburn: i guess one question that occurred to me while you were speaking, richard, and, again, now when you're responding here to this question is why you don't consider the ways in which the computer, itself, eliminates the middle men completely—in the way that stephen king refused to do—and might establish a personal relationship. 
stallman: well, they can and, in fact, this voluntary donation is one. 
thorburn: you think of that as not involving going through a publisher at all? 
stallman: absolutely not. 
i hope it won't, you see, because the publishers exploit the authors terribly. 
when you ask the publishers' representatives about this, they say, "well, yes, if an author or if a band doesn't want to go through us, they shouldn't be legally required to go through us."
 but, in fact, they're doing their utmost to set it up so that will not be feasible. 
for instance, they're proposing restricted copying media formats and in order to publish in these formats, you'll have to go through the big publishers because they won't tell anyone else how to do it. 
so they're hoping for a world where the players will play these formats, and in order to get anything that you can play on those players, it'll have to come through the publishers. 
so, in fact, while there's no law against an author or a musician publishing directly, it won't be feasible. 
there's also the lure of maybe hitting it rich. 
they say, "we'll publicize you and maybe you'll hit it as rich as the beatles."
 take your pick of some very successful group and, of course, only a tiny fraction of musicians are going to have that happen. 
but they may be drawn by that into signing contracts that will lock them down forever. 
publishers tend to be very bad at respecting their contracts with authors. 
for instance, book contracts typically have said that if a book goes out of print, the rights revert to the author, and publishers have generally not been very good about living up to that clause. 
they often have to be forced. 
well, what they're starting to do now is use electronic publication as an excuse to say that it's never going out of print; so they never have to give the rights back. 
their idea is, when the author has no clout, get him to sign up and from then on, he has no power; it's only the publisher that has the power. 
question: would it be good to have free licenses for various kinds of works that protect for every user the freedom to copy them in whatever is the appropriate way for that kind of work? 
stallman: well, people are working on this. 
but for non-functional works, one thing doesn't substitute for another. 
let's look at a functional kind of work, say, a word processor. 
well, if somebody makes a free word processor, you can use that; you don't need the nonfree word processors. 
but i wouldn't say that one free song substitutes for all the nonfree songs or that a one free novel substitutes for all the nonfree novels. 
for those kinds of works, it's different. 
so what i think we simply have to do is to recognize that these laws do not deserve to be respected. 
it's not wrong to share with your neighbor, and if anyone tries to tell you that you cannot share with your neighbor, you should not listen to him. 
question: with regard to the functional works, how do you, in your own thinking, balance out the need for abolishing the copyright with the need for economic incentives in order to have these functional works developed? 
stallman: well, what we see is, first of all, that this economic incentive is a lot less necessary than people have been supposing. 
look at the free software movement where we have over 100,000 part-time volunteers developing free software. 
we also see that there are other ways to raise money for this which are not based on stopping the public from copying and modifying these works. 
that's the interesting lesson of the free software movement. 
aside from the fact that it gives you a way you can use a computer and keep your freedom to share and cooperate with other people, it also shows us that this negative assumption that people would never do these things unless they are given special powers to force people to pay them is simply wrong. 
a lot of people will do these things. 
then if you look at, say, the writing of monographs which serve as textbooks in many fields of science except for the ones that are very basic, the authors are not making money out of that. 
we now have a free encyclopedia project which is, in fact, a commercial-free encyclopedia project, and it's making progress. 
we had a project for a gnu encyclopedia but we merged it into the commercial project when they adopted our license. 
in january, they switched to the gnu free documentation license for all the articles in their encyclopedia. 
so we said, "well, let's join forces with them and urge people to contribute to them."
 it's called "nupedia," and you can find a link to it, if you look at http://www.gnu.org/encyclopedia. 
so here we've extended the community development of a free base of useful knowledge from software to encyclopedia. 
i'm pretty confident now that in all these areas of functional work, we don't need that economic incentive to the point where we have to mess up the use of these works. 
thorburn: well, what about the other two categories? 
stallman: for the other two classes of work, i don't know. 
i don't know whether people will write some day novels without worrying about whether they make money from it. 
in a post-scarcity society, i guess they would. 
maybe what we need to do in order to reach the post-scarcity society is to get rid of the corporate control over the economy and the laws. 
so, in effect, it's a chicken-or-the-egg problem, you know. 
which do we do first? 
how do we get the world where people don't have to desperately get money except by removing the control by business? 
and how can we remove the control by business except—anyway, i don't know, but that's why i'm trying to propose first a compromise copyright system and, second, the voluntary payment supported by a compromise copyright system as a way to provide a revenue stream to the people who write those works. 
question: how would you really expect to implement this compromise copyright system under the chokehold of corporate interests on american politicians due to their campaign-finance system? 
stallman: it beats me. 
i wish i knew. 
it's a terribly hard problem. 
if i knew how to solve that problem, i would solve it and nothing in the world could make me prouder. 
question:. 
how do you fight the corporate control? 
because when you look at these sums of money going into corporate lobbying in the court case, it is tremendous. 
i think the decs case that you're talking about is costing something like a million-and-a-half dollars on the defense side. 
lord knows what it's costing on the corporate side. 
do you have any idea how to deal with these huge sums of money? 
stallman: i have a suggestion. 
if i were to suggest totally boycotting movies, i think people would ignore that suggestion. 
they might consider it too radical. 
so i would like to make a slightly different suggestion which comes to almost the same thing in the end, and that is, don't go to a movie unless you have some substantial reason to think it's good. 
now this will lead in practice to almost the same result as a total boycott of hollywood movies. 
in extension, it's almost the same but, in intention, it's very different. 
now i've noticed that many people go to movies for reasons that have nothing to do with whether they think the movies are good. 
so if you change that, if you only go to a movie when you have some substantial reason to think it's good, you'll take away a lot of their money. 
thorburn: one way to understand all of this discourse today, i think, is to recognize that whenever radical, potentially transforming technologies appear in society, there's a struggle over who controls them. 
we today are repeating what has happened in the past. 
so from this angle, there may not be a reason for despair, or even pessimism, about what may occur in the longer run. 
but, in the shorter term, struggles over the control of text and images, over all forms of information are likely to be painful and extensive. 
for example, as a teacher of media, my access to images has been restricted in recent years in a way that had never been in place before. 
if i write an essay in which i want to use still images, even from films, they are much harder to get permission to use, and the prices charged to use those still images are much higher—even when i make arguments about intellectual inquiry and the legal category of "fair use."
 so i think, in this moment of extended transformation, the longer-term prospects may, in fact, not be as disturbing as what's happening in the shorter term. 
but in any case, we need to understand the whole of our contemporary experience as a renewed version of a struggle over the control of technological resources that is a recurring principle of western society. 
it's also essential to understand that the history of older technologies is itself a complicated matter. 
the impact of the printing press in spain, for example, is radically different from its impact in england or in france. 
question: one of the things that bothers me when i hear discussions of copyright is that often they start off with, "we want a 180-degree change. 
we want to do away with any sorts of control."
 it seems to me that part of what lay under the three categories that were suggested is an acknowledgement that there is some wisdom to copyright. 
some of the critics of the way copyright is going now believe that, in fact, it ought to be backed up and function much more like patent and trademarks in terms of its duration. 
i wonder if our speaker would comment on that as a strategy. 
stallman: i agree that shortening the time span of copyright is a good idea. 
there is absolutely no need in terms of encouraging publication for a possibility of copyrights' lasting as much as 150 years, which, in some cases, it can under present law. 
now the companies were saying that a 75-year copyright on a work made for hire was not long enough to make possible the production of their works. 
i'd like to challenge those companies to present projected balance sheets for 75 years from now to back up that contention. 
what they really wanted was just to be able to extend the copyrights on the old works, so that they can continue restricting the use of them. 
but how you can encourage greater production of works in the 1920s by extending copyright today escapes me, unless they have a time machine somewhere. 
of course, in one of their movies, they had a time machine. 
so maybe that's what affected their thinking. 
question: have you given thought to extending the concept of "fair use," and are there any nuances there that you might care to lay out for us? 
stallman: well, the idea of giving everyone permission for noncommercial verbatim copying of two kinds of works, certainly, may be thought of as extending what fair use is. 
it's bigger than what's fair use currently. 
if your idea is that the public trades away certain freedoms to get more progress, then you can draw the line at various, different places. 
which freedoms does the public trade away and which freedoms does the public keep? 
question: to extend the conversation for just a moment, in certain entertainment fields, we have the concept of a public presentation. 
so, for example, copyright does not prevent us from singing christmas carols seasonally but it prevents the public performance. 
and i'm wondering if it might be useful to think about instead of expanding fair use to unlimited, noncommercial, verbatim copying, to something less than that but more than the present concept of fair use. 
stallman: i used to think that that might be enough, and then napster convinced me otherwise because napster is used by its users for noncommercial, verbatim redistribution. 
the napster server, itself, is a commercial activity but the people who are actually putting things up are doing so noncommercially, and they could have done so on their websites just as easily. 
the tremendous excitement about, interest in, and use of napster shows that that's very useful. 
so i'm convinced now that people should have the right to publicly noncommercially, redistributed, verbatim copies of everything. 
question: one analogy that was recently suggested to me for the whole napster question was the analogy of the public library. 
i suppose some of you who have heard the napster arguments have heard this analogy. 
i'm wondering if you would comment on it. 
the defenders of people who say napster should continue and there shouldn't be restrictions on it sometimes say something like this: "when folks go into the public library and borrow a book, they're not paying for it, and it can be borrowed dozens of times, hundreds of times, without any additional payment. 
why is napster any different?"
 stallman: well, it's not exactly the same. 
but it should be pointed out that the publishers want to transform public libraries into pay-per-use, retail outlets. 
so they're against public libraries. 
question: can these ideas about copyright suggest any ideas for certain issues about patent law such as making cheap, generic drugs for use in africa? 
stallman: no, there's absolutely no similarity. 
the issues of patents are totally different from the issues of copyrights. 
the idea that they have something to do with each other is one of the unfortunate consequences of using the term "intellectual property" and encouraging people to try to lump these issues together because, as you've heard, i've been talking about issues in which the price of a copy is not the crucial thing. 
but what's the crucial issue about making aids drugs for africa? 
it's the price, nothing but the price. 
now the issue i've been talking about arises because digital information technology gives every user the ability to make copies. 
well, there's nothing giving us all the ability to make copies of medicines. 
i don't have the ability to copy some medicine that i've got. 
in fact, nobody does; that's not how they're made. 
those medicines can only be made in expensive factories and they are made in expensive centralized factories, whether they're generic drugs or imported from the u.s. 
either way, they're going to be made in a small number of factories, and the issues are simply how much do they cost and are they available at a price that people in africa can afford. 
so that's a tremendously important issue, but it's a totally different issue. 
there's just one area where an issue arises with patents that is actually similar to these issues of freedom to copy, and that is in the area of agriculture. 
because there are certain patented things that can be copies, more or less—namely, living things. 
they copy themselves when they reproduce. 
it's not necessarily exact copying; they re-shuffle the genes. 
but the fact is, farmers for millennia have been making use of this capacity of the living things they grow to copy themselves. 
farming is, basically, copying the things that you grew and you keep copying them every year. 
when plant and animal varieties get patented, when genes are patented and used in them, the result is that farmers are being prohibited from doing this. 
there is a farmer in canada who had a patented variety growing on his field and he said, "i didn't do that deliberately. 
the pollen blew, and the wind in those genes got into my stock of plants."
 and he was told that that doesn't matter; he has to destroy them anyway. 
it was an extreme example of how much government can side with a monopolist. 
so i believe that, following the same principles that i apply to copying things on your computer, farmers should have an unquestioned right to save their seeds and breed their livestock. 
maybe you could have patents covering seed companies, but they shouldn't cover farmers. 
question: there's more to making a model successful than just the licensing. 
can you speak to that? 
stallman: absolutely. 
well, you know, i don't know the answers. 
but part of what i believe is crucial for developing free, functional information is idealism. 
people have to recognize that it's important for this information to be free, that when the information is free, you can make full use of it. 
when it's restricted, you can't. 
you have to recognize that the nonfree information is an attempt to divide them and keep them helpless and keep them down. 
then they can get the idea, "let's work together to produce the information we want to use, so that it's not under the control of some powerful person who can dictate to us what we can do."
 this tremendously boosts it. 
but i don't know how much it will work in various different areas, but i think that in the area of education, when you're looking for textbooks, i think i see a way it can be done. 
there are a lot of teachers in the world, teachers who are not at prestigious universities—maybe they're in high-school; maybe they're in college—where they don't write and publish a lot of things and there's not a tremendous demand for them. 
but a lot of them are smart. 
a lot of them know their subjects well and they could write textbooks about lots of subjects and share them with the world and receive a tremendous amount of appreciation from the people who will have learned from them. 
question: that's what i proposed. 
but the funny thing is, i do know the history of education. 
that's what i do—educational, electronic media projects. 
i couldn't find an example. 
do you know of one? 
stallman: no, i don't. 
i started proposing this free encyclopedia and learning resource a couple of years ago, and i thought it would probably take a decade to get things rolling. 
now we already have an encyclopedia that is rolling. 
so things are going faster than i hoped. 
i think what's needed is for a few people to start writing some free textbooks. 
write one about whatever is your favorite subject or write a fraction of one. 
write a few chapters of one and challenge other people to write the rest. 
question: actually what i was looking for is something even more than that. 
what's important in your kind of structure is somebody that creates an infrastructure to which everybody else can contribute. 
there isn't a k through 12 infrastructure out there in any place for a contribution for materials. 
i can get information from lots of places but it's not released under free licenses, so i can't use it to make a free textbook. 
stallman: actually, copyright doesn't cover the facts. 
it only covers the way it's written. 
so you can learn a field from anywhere and then write a textbook, and you can make that textbook free, if you want. 
question: but i can't write by myself all the textbooks that a student needs going through school. 
stallman: well, it's true. 
and i didn't write a whole, free operating system, either. 
i wrote some pieces and invited other people to join me by writing other pieces. 
so i set an example. 
i said, "i'm going in this direction. 
join me and we'll get there."
 and enough people joined in that we got there. 
so if you think in terms of, how am i going to get this whole gigantic job done, it can be daunting. 
so the point is, don't look at it that way. 
think in terms of taking a step and realizing that after you've taken a step, other people will take more steps and, together, it will get the job done eventually. 
assuming that humanity doesn't wipe itself out, the work we do today to produce the free educational infrastructure, the free learning resource for the world, that will be useful for as long as humanity exists. 
if it takes 20 years to get it done, so what? 
so don't think in terms of the size of the whole job. 
think in terms of the piece that you're going to do. 
that will show people it can be done, and so others will do other pieces. 
this speech is published in free software, free society: the selected essays of richard m. stallman. 
copyright versus community in the age of computer networks. 
keynote speech at lianza conference, christchurch convention centre, 12 october 2009. 
there is an older version of this talk, from 2000. 
bc:  tena koutou, tena koutou, tena koutou katoa. 
today i have the privilege of introducing richard stallman, whose keynote speech is being sponsored by the school of information management at victoria university of wellington. 
richard has been working to promote software freedom for over 25 years. 
in 1983 he started the gnu project to develop a free operating system [the gnu system], and in 1985 he set up the free software foundation. 
every time you read or send a message to nz-libs, you use the mailman software which is part of the gnu project. 
so whether you realize it or not, richard's work has touched all of your lives. 
i like to describe him as the most influential person most people have never heard of, although he tells me that that cannot possibly be true because it cannot be tested. 
rms:  we can't tell. 
bc:  i said that—i still like it. 
his ideas about software freedom and free access to information were used by tim berners-lee when he created the world's first web server, and in 1999 his musings about a free online encyclopedia inspired jimmy wales to set up what is now wikipedia. 
today richard will be talking to us about copyright vs community in the age of computer networks, and their implications for libraries. 
richard. 
join our mailing list about the dangers of e-books. 
rms:  i've been in new zealand for a couple of weeks, and in the north island it was raining most of the time. 
now i know why they call gumboots "wellingtons."
 and then i saw somebody who was making chairs and tables out of ponga wood, and he called it fern-iture. 
then we took the ferry to get here, and as soon as we got off, people started mocking and insulting us; but there were no hard feelings, they just wanted to make us really feel picton. 
the reason people usually invite me to give speeches is because of my work on free software. 
this is not a talk about free software; this talk answers the question whether the ideas of free software extend to other kinds of works. 
but in order for that to make sense, i'd better tell you briefly what free software means. 
free software is a matter of freedom, not price, so think of "free speech," not "free beer."
 free software is software that respects the user's freedom, and there are four specific freedoms that the user deserves always to have. 
freedom 0 is the freedom to run the program as you wish. 
freedom 1 is the freedom to study the source code of the program and change it to make the program do what you wish. 
freedom 2 is the freedom to help your neighbour; that is, the freedom to redistribute copies of the program, exact copies when you wish. 
and freedom 3 is the freedom to contribute to your community. 
that's the freedom to publish your modified versions when you wish. 
if the program gives you these four freedoms then it's free software, which means the social system of its distribution and use is an ethical system, one which respects the user's freedom and the social solidarity of the user's community. 
but if one of these freedoms is missing or insufficient, then it's proprietary software, nonfree software, user-subjugating software. 
it's unethical. 
it's not a contribution to society, it's a power grab. 
this unethical practice should not exist; the goal of the free software movement is to put an end to it. 
all software should be free, so that all users can be free. 
proprietary software keeps the users divided and helpless: divided, because they're forbidden to share it, and helpless, because they don't have the source code so they can't change it. 
they can't even study it to verify what it's really doing to them, and many proprietary programs have malicious features which spy on the user, restrict the user, even back doors to attack the user. 
for instance, microsoft windows has a back door with which microsoft can forcibly install software changes, without getting permission from the supposed owner of the computer. 
you may think it's your computer, but if you've made the mistake of having windows running in it, then really microsoft has owned your computer. 
computers need to be defenestrated, which means either throw windows out of the computer, or throw the computer out the window. 
but any proprietary software gives the developers unjust power over the users. 
some of the developers abuse this power more, and some abuse it less, but none of them ought to have it. 
you deserve to have control of your computing, and not be forcibly dependent on a particular company. 
so you deserve free software. 
at the end of speeches about free software, people sometimes ask whether these same freedoms and ideas apply to other things. 
if you have a copy of a published work on your computer, it makes sense to ask whether you should have the same four freedoms—whether it's ethically essential that you have them or not. 
and that's the question that i'm going to address today. 
if you have a copy of something that's not software, for the most part, the only thing that might deny you any of these freedoms is copyright law. 
with software that's not so. 
the main ways of making software nonfree are contracts and withholding the source code from the users. 
copyright is a sort of secondary, back up method. 
for other things there's no such distinction as between source code and executable code. 
for instance, if we're talking about a text, if you can see the text to read it, there's nothing in the text that you can't see. 
so it's not the same kind of issue exactly as software. 
it's for the most part only copyright that might deny you these freedoms. 
so the question can be restated: "what should copyright law allow you to do with published works? 
what should copyright law say?"
 copyright has developed along with copying technology, so it's useful to review the history of copying technology. 
copying developed in the ancient world, where you'd use a writing instrument on a writing surface. 
you'd read one copy and write another. 
this technology was rather inefficient, but another interesting characteristic was that it had no economy of scale. 
to write ten copies would take ten times as long as to write one copy. 
it required no special equipment other than the equipment for writing, and it required no special skill other than literacy itself. 
the result was that copies of any particular book were made in a decentralized manner. 
wherever there was a copy, if someone wanted to copy it, he could. 
there was nothing like copyright in the ancient world. 
if you had a copy and wanted to copy it, nobody was going to tell you you weren't allowed—except if the local prince didn't like what the book said, in which case he might punish you for copying it. 
but that's not copyright, but rather something closely related, namely censorship. 
to this day, copyright is often used in attempts to censor people. 
that went on for thousands of years, but then there was a big advance in copying technology, namely the printing press. 
the printing press made copying more efficient, but not uniformly. 
[this was] because mass production copying became a lot more efficient, but making one copy at a time didn't benefit from the printing press. 
in fact, you were better off just writing it by hand; that would be faster than trying to print one copy. 
the printing press has an economy of scale: it takes a lot of work to set the type, but then you can make many copies very fast. 
also, the printing press and the type were expensive equipment that most people didn't own; and the ability to use them, most literate people didn't know. 
using a press was a different skill from writing. 
the result was a centralized manner of producing copies: the copies of any given book would be made in a few places, and then they would be transported to wherever someone wanted to buy copies. 
copyright began in the age of the printing press. 
copyright in england began as a system of censorship in the 1500s. 
i believe it was originally meant to censor protestants, but it was turned around and used to censor catholics and presumably lots of others as well. 
according to this law, in order to publish a book you had to get permission from the crown, and this permission was granted in the form of a perpetual monopoly to publish it. 
this was allowed to lapse in the 1680s, i believe [it expired in 1695 according to the wikipedia entry]. 
the publishers wanted it back again, but what they got was something somewhat different. 
the statute of anne gave authors a copyright, and only for 14 years, although the author could renew it once. 
this was a totally different idea—a temporary monopoly for the author, instead of a perpetual monopoly for the publisher. 
the idea developed that copyright was a means of promoting writing. 
when the us constitution was written, some people wanted authors to be entitled to a copyright, but that was rejected. 
instead, the us constitution says that congress can optionally adopt a copyright law, and if there is a copyright law, its purpose is to promote progress. 
in other words, the purpose is not benefits for copyright holders or anybody they do business with, but for the general public. 
copyright has to last a limited time; publishers keep hoping for us to forget about this. 
here we have an idea of copyright which is an industrial regulation on publishers, controlled by authors, and designed to provide benefits to the public at large. 
it functioned this way because it didn't restrict the readers. 
now in the early centuries of printing, and still i believe in the 1790s, lots of readers wrote copies by hand because they couldn't afford printed copies. 
nobody ever expected copyright law to be something other than an industrial regulation. 
it wasn't meant to stop people from writing copies, it was meant to regulate the publishers. 
because of this it was easy to enforce, uncontroversial, and arguably beneficial for society. 
it was easy to enforce, because it only had to be enforced against publishers. 
and it's easy to find the unauthorized publishers of a book—you go to a bookstore and say "where do these copies come from?"
 you don't have to invade everybody's home and everybody's computer to do that. 
it was uncontroversial because, as the readers were not restricted, they had nothing to complain about. 
theoretically they were restricted from publishing, but not being publishers and not having printing presses, they couldn't do that anyway. 
in what they actually could do, they were not restricted. 
it was arguably beneficial because the general public, according to the concepts of copyright law, traded away a theoretical right they were not in a position to exercise. 
in exchange, they got the benefits of more writing. 
now if you trade away something you have no possible use for, and you get something you can use in exchange, it's a positive trade. 
whether or not you could have gotten a better deal some other way, that's a different question, but at least it's positive. 
so if this were still in the age of the printing press, i don't think i'd be complaining about copyright law. 
but the age of the printing press is gradually giving way to the age of the computer networks—another advance in copying technology that makes copying more efficient, and once again not uniformly so. 
here's what we had in the age of the printing press: mass production very efficient, one at a time copying still just as slow as the ancient world. 
digital technology gets us here: they've both benefited, but one-off copying has benefited the most. 
we get to a situation much more like the ancient world, where one at a time copying is not so much worse [i.e., harder] than mass production copying. 
it's a little bit less efficient, a little bit less good, but it's perfectly cheap enough that hundreds of millions of people do it. 
consider how many people write cds once in a while, even in poor countries. 
you may not have a cd-writer yourself, so you go to a store where you can do it. 
this means that copyright no longer fits in with the technology as it used to. 
even if the words of copyright law had not changed, they wouldn't have the same effect. 
instead of an industrial regulation on publishers controlled by authors, with the benefits set up to go to the public, it is now a restriction on the general public, controlled mainly by the publishers, in the name of the authors. 
in other words, it's tyranny. 
it's intolerable and we can't allow it to continue this way. 
as a result of this change, [copyright] is no longer easy to enforce, no longer uncontroversial, and no longer beneficial. 
it's no longer easy to enforce because now the publishers want to enforce it against each and every person, and to do this requires cruel measures, draconian punishments, invasions of privacy, abolition of our basic ideas of justice. 
there's almost no limit to how far they will propose to go to prosecute the war on sharing. 
it's no longer uncontroversial. 
there are political parties in several countries whose basic platform is "freedom to share."
 it's no longer beneficial because the freedoms that we conceptually traded away (because we couldn't exercise them), we now can exercise. 
they're tremendously useful, and we want to exercise them. 
what would a democratic government do in this situation? 
it would reduce copyright power. 
it would say: "the trade we made on behalf of our citizens, trading away some of their freedom which now they need, is intolerable. 
we have to change this; we can't trade away the freedom that is important."
 we can measure the sickness of democracy by the tendency of governments to do the exact opposite around the world, extending copyright power when they should reduce it. 
one example is in the dimension of time. 
around the world we see pressure to make copyright last longer and longer and longer. 
a wave of this started in the us in 1998. 
copyright was extended by 20 years on both past and future works. 
i do not understand how they hope to convince the now dead or senile writers of the 20s and 30s to write more back then by extending copyright on their works now. 
if they have a time machine with which to inform them, they haven't used it. 
our history books don't say that there was a burst of vigor in the arts in the 20s when all the artists found out that their copyrights would be extended in 1998. 
it's theoretically conceivable that 20 years more copyright on future works would convince people to make more effort in producing those works. 
but not anyone rational, because the discounted present value of 20 more years of copyright starting 75 years in the future—if it's a work made for hire—and probably even longer if it's a work with an individual copyright holder, is so small it couldn't persuade any rational person to do anything different. 
any business that wants to claim otherwise ought to present its projected balance sheets for 75 years in the future, which of course they can't do because none of them really looks that far ahead. 
the real reason for this law, the desire that prompted various companies to purchase this law in the us congress, which is how laws are decided on for the most part, was they had lucrative monopolies and they wanted those monopolies to continue. 
for instance, disney was aware that the first film in which mickey mouse appeared would go into the public domain in a few years, and then anybody would be free to draw that same character as part of other works. 
disney didn't want that to happen. 
disney borrows a lot from the public domain, but is determined never to give the slightest thing back. 
so disney paid for this law, which we refer to as the mickey mouse copyright act. 
the movie companies say they want perpetual copyright, but the us constitution won't let them get that officially. 
so they came up with a way to get the same result unofficially: "perpetual copyright on the installment plan."
 every 20 years they extend copyright for 20 more years. 
so that at any given time, any given work has a date when it will supposedly fall into the public domain. 
but that date is like tomorrow, it never comes. 
by the time you get there they will have postponed it, unless we stop them next time. 
that's one dimension, the dimension of duration. 
but even more important is the dimension of breadth: which uses of the work does copyright cover? 
in the age of the printing press, copyright wasn't supposed to cover all uses of a copyrighted work, because copyright regulated certain uses that were the exceptions in a broader space of unregulated uses. 
there were certain things you were simply allowed to do with your copy of a book. 
now the publishers have got the idea that they can turn our computers against us, and use them to seize total power over all use of published works. 
they want to set up a pay-per-view universe. 
they're doing it with drm (digital restrictions management)—the intentional features of software that's designed to restrict the user. 
and often the computer itself is designed to restrict the user. 
the first way in which the general public saw this was in dvds. 
a movie on a dvd was usually encrypted, and the format was secret. 
the dvd conspiracy kept this secret because they said anyone that wants to make dvd players has to join the conspiracy, promise to keep the format secret, and promise to design the dvd players to restrict the users according to the rules, which say it has to stop the user from doing this, from doing that, from doing that—a precise set of requirements, all of which are malicious towards us. 
it worked for a while, but then some people figured out the secret format, and published free software capable of reading the movie on a dvd and playing it. 
then the publishers said "since we can't actually stop them, we have to make it a crime."
 and they started that in the us in 1998 with the digital millennium copyright act, which imposed censorship on software capable of doing such jobs. 
so that particular piece of free software was the subject of a court case. 
its distribution in the us is forbidden; the us practices censorship of software. 
the movie companies are well aware that they can't really make that program disappear—it's easy enough to find it. 
so they designed another encryption system, which they hoped would be harder to break, and it's called aacs, or the axe. 
the aacs conspiracy makes precise rules about all players. 
for instance, in 2011 it's going to be forbidden to make analog video outputs. 
so all video outputs will have to be digital, and they will carry the signal encrypted into a monitor specially designed to keep secrets from the user. 
that is malicious hardware. 
they say that the purpose of this is to "close the analog hole."
 i'll show you a couple of analog holes (stallman takes off his glasses): here's one and here's another, that they'd like to poke out permanently.[1] how do i know about these conspiracies? 
the reason is they're not secret—they have websites. 
the aacs website proudly describes the contracts that manufacturers have to sign, which is how i know about this requirement. 
it proudly states the names of the companies that have established this conspiracy, which include microsoft and apple, and intel, and sony, and disney, and ibm. 
a conspiracy of companies designed to restrict the public's access to technology ought to be prosecuted as a serious crime, like a conspiracy to fix prices, except it's worse, so the prison sentences for this should be longer. 
but these companies are quite confident that our governments are on their side against us. 
they have no fear against being prosecuted for these conspiracies, which is why they don't bother to hide them. 
in general drm is set up by a conspiracy of companies. 
once in a while a single company can do it, but generally it requires a conspiracy between technology companies and publishers, so [it's] almost always a conspiracy. 
they thought that nobody would ever be able to break the aacs, but about three and a half years ago someone released a free program capable of decrypting that format. 
however, it was totally useless, because in order to run it you need to know the key. 
and then, six months later, i saw a photo of two adorable puppies, with 32 hex digits above them, and i wondered: "why put those two things together? 
i wonder if those numbers are some important key, and someone could have put the numbers together with the puppies, figuring people would copy the photo of the puppies because they were so cute. 
this would protect the key from being wiped out."
 and that's what it was—that was the key to break the axe. 
people posted it, and editors deleted it, because laws in many countries now conscript them to censor this information. 
it was posted again, they deleted it; eventually they gave up, and in two weeks this number was posted in over 700,000 web sites. 
that's a big outpouring of public disgust with drm. 
but it didn't win the war, because the publishers changed the key. 
not only that: with hd dvd, this was adequate to break the drm, but not with blu-ray. 
blu-ray has an additional level of drm and so far there is no free software that can break it, which means that you must regard blu-ray disks as something incompatible with your own freedom. 
they are an enemy with which no accommodation is possible, at least not with our present level of knowledge. 
never accept any product designed to attack your freedom. 
if you don't have the free software to play a dvd, you mustn't buy or rent any dvds, or accept them even as gifts, except for the rare non-encrypted dvds, which there are a few of. 
i actually have a few [of these]—i don't have any encrypted dvds, i won't take them. 
so this is how things stand in video, but we've also seen drm in music. 
for instance, about ten years ago we started to see things that looked like compact disks, but they weren't written quite like compact disks. 
they didn't follow the standard. 
we called them 'corrupt disks', and the idea of them was that they would play in an audio player, but it was impossible to read them on a computer. 
these different methods had various problems. 
eventually sony came up with a clever idea. 
they put a program on the disk, so that if you stuck the disk into a computer, the disk would install the program. 
this program was designed like a virus to take control of the system. 
it's called a 'root kit', meaning that it has things in it to break the security of the system so that it can install the software deep inside the system, and modify various parts of the system. 
for instance, it modified the command you could use to examine the system to see if the software was present, so as to disguise itself. 
it modified the command you could use to delete some of these files, so that it wouldn't really delete them. 
now all of this is a serious crime, but it's not the only one sony committed, because the software also included free software code—code that had been released under the gnu general public license. 
now the gnu gpl is a copyleft license, and that means it says "yes, you're free to put this code into other things, but when you do, the entire program that you put things into you must release as free software under the same license. 
and you must make the source code available to users, and to inform them of their rights you must give them a copy of this license when they get the software."
 sony didn't comply with all that. 
that's commercial copyright infringement, which is a felony. 
they're both felonies, but sony wasn't prosecuted because the government understands that the purpose of the government and the law is to maintain the power of those companies over us, not to help defend our freedom in any way. 
people got angry and they sued sony. 
however, they made a mistake. 
they focused their condemnation not on the evil purpose of this scheme, but only on the secondary evils of the various methods that sony used. 
so sony settled the lawsuits and promised that in the future, when it attacks our freedom, it will not do those other things. 
actually, that particular corrupt disk scheme was not so bad, because if you were not using windows it would not affect you at all. 
even if you were using windows, there's a key on the keyboard—if you remembered every time to hold it down, then the disk wouldn't install the software. 
but of course it's hard to remember that every time; you're going to slip up some day. 
this shows the kind of thing we've had to deal with. 
fortunately music drm is receding. 
even the main record companies sell downloads without drm. 
but we see a renewed effort to impose drm on books. 
you see, the publishers want to take away the traditional freedoms of book readers—freedom to do things such as borrow a book from the public library, or lend it to a friend; to sell a book to a used book store, or buy it anonymously paying cash (which is the only way i buy books—we've got to resist the temptations to let big brother know everything that we're doing.) even the freedom to keep the book as long as you wish, and read it as many times as you wish, they plan to get rid of. 
the way they do it is with drm. 
they knew that so many people read books and would get angry if these freedoms were taken away that they didn't believe they could buy a law specifically to abolish these freedoms—there would be too much opposition. 
democracy is sick, but once in a while people manage to demand something. 
so they came up with a two-stage plan. 
first, take away these freedoms from e-books, and second, convince people to switch from paper books to e-books. 
they've succeeded with stage 1. in the us they did it with the digital millennium copyright act, and in new zealand, that was part of the year-ago copyright act; censorship on software that can break drm was part of that law. 
that's an unjust provision; it's got to be repealed. 
the second stage is convince people to switch from printed books to ebooks; that didn't go so well. 
one publisher in 2001 had the idea they would make their line of ebooks really popular if they started it with my biography. 
so they found an author and the author asked me if i'd cooperate, and i said "only if this e-book is published without encryption, without drm."
 the publisher wouldn't go along with that, and i just stuck to it—i said no. 
eventually we found another publisher who was willing to do this—in fact willing to publish the book under a free license giving you the four freedoms—so the book was then published, and sold a lot of copies on paper. 
but in any case, e-books failed at the beginning of this decade. 
people just didn't want to read them very much. 
and i said, "they will try again."
 we saw an amazing number of news articles about electronic ink (or is it electronic paper, i can never remember which), and it occurred to me probably the reason there's so many is the publishers want us to think about this. 
they want us to be eager for the next generation of e-book readers. 
now they're upon us. 
things like the sony shreader (its official name is the sony reader, but if you put on 'sh' it explains what it's designed to do to your books), and the amazon swindle, designed to swindle you out of your traditional freedoms without your noticing. 
of course, they call it the kindle which is what it's going to do to your books. 
the kindle is an extremely malicious product, almost as malicious as microsoft windows. 
they both have spy features, they both have digital restrictions management, and they both have back doors. 
in the case of the kindle, the only way you can buy a book is to buy it from amazon[2], and amazon requires you to identify yourself, so they know everything that you've bought. 
then there is digital restrictions management, so you can't lend the book or sell it to a used bookstore, and the library can't lend it either. 
and then there's the back door, which we found out about about three months ago, because amazon used it. 
amazon sent a command to all the kindles to erase a particular book, namely 1984 by george orwell. 
yes, they couldn't have picked a more ironic book to erase. 
so that's how we know that amazon has a back door with which it can erase books remotely. 
what else it can do, who knows? 
maybe it's like microsoft windows. 
maybe amazon can remotely upgrade the software, which means that whatever malicious things are not in it now, they could put them in it tomorrow. 
this is intolerable—any one of these restrictions is intolerable. 
they want to create a world where nobody lends books to anybody anymore. 
imagine that you visit a friend and there are no books on the shelf. 
it's not that your friend doesn't read, but his books are all inside a device, and of course he can't lend you those books. 
the only way he could lend you any one of those books is to lend you his whole library, which is obviously a ridiculous thing to ask anybody to do. 
so there goes friendship for people who love books. 
make sure that you inform people what this device implies. 
it means other readers will no longer be your friends, because you will be acting like a jerk toward them. 
spread the word preemptively. 
this device is your enemy. 
it's the enemy of everyone who reads. 
the people who don't recognize that are the people who are thinking so short-term that they don't see it. 
it's our job to help them see beyond the momentary convenience to the implications of this device. 
i have nothing against distributing books in digital form, if they are not designed to take away our freedom. 
strictly speaking, it is possible to have an e-book reader: that is not designed to attack you, which runs free software and not proprietary software, which doesn't have drm, which doesn't make people identify yourself to get a book, which doesn't have a back door, [and] which doesn't restrict what you can do with the files on your machine. 
it's possible, but the big companies really pushing e-books are doing it to attack our freedom, and we mustn't stand for that. 
this is what governments are doing in cahoots with big business to attack our freedom, by making copyright harsher and nastier, more restrictive than ever before. 
but what should they do? 
governments should make copyright power less. 
here are my specific proposals. 
first of all, there is the dimension of time. 
i propose copyright should last ten years, starting from the date of publication of a work. 
why from the date of publication? 
because before that, we don't have copies. 
it doesn't matter to us whether we would have been allowed to copy our copies that we don't have, so i figure we might as well let the authors have as much time as it takes to arrange publication, and then start the clock. 
but why ten years? 
i don't know about in this country, but in the us, the publication cycle has got shorter and shorter. 
nowadays almost all books are remaindered within two years and out-of-print within three. 
so ten years is more than three times the usual publication cycle—that should be plenty comfortable. 
but not everybody agrees. 
i once proposed this in a panel discussion with fiction writers, and the award-winning fantasy writer next to me said "ten years? 
no way. 
anything more than five years is intolerable."
 you see, he had a legal dispute with his publisher. 
his books seemed to be out of print, but the publisher wouldn't admit it. 
the publisher was using the copyright on his own book to stop him from distributing copies himself, which he wanted to do so people could read it. 
this is what every artist starts out wanting—wanting to distribute her work so it will get read and appreciated. 
very few make a lot of money. 
that tiny fraction face the danger of being morally corrupted, like j.k. 
rowling. 
j.k. 
rowling, in canada, got an injunction against people who had bought her book in a bookstore, ordering them not to read it. 
so in response i call for a boycott of harry potter books. 
but i don't say you shouldn't read them; i leave that to the author and the publisher. 
i just say you shouldn't buy them. 
it's few authors that make enough money that they can be corrupted in this way. 
most of them don't get anywhere near that, and continue wanting the same thing they wanted at the outset: they want their work to be appreciated. 
he wanted to distribute his own book, and copyright was stopping him. 
he realized that more than five years of copyright was unlikely to ever do him any good. 
if people would rather have copyright last five years, i won't be against it. 
i propose ten as a first stab at the problem. 
let's reduce it to ten years and then take stock for a while, and we could adjust it after that. 
i don't say i think ten years is the exact right number—i don't know. 
what about the dimension of breadth? 
which activities should copyright cover? 
i distinguish three broad categories of works. 
first of all, there are the functional works that you use to do a practical job in your life. 
this includes software, recipes, educational works, reference works, text fonts, and other things you can think of. 
these works should be free. 
if you use the work to do a job in your life, then if you can't change the work to suit you, you don't control your life. 
once you have changed the work to suit you, then you've got to be free to publish it—publish your version—because there will be others who will want the changes you've made. 
this leads quickly to the conclusion that users have to have the same four freedoms [for all functional works], not just for software. 
and you'll notice that for recipes, practically speaking, cooks are always sharing and changing recipes just as if the recipes were free. 
imagine how people would react if the government tried to stamp out so-called "recipe piracy."
 the term "pirate" is pure propaganda. 
when people ask me what i think of music piracy, i say "as far as i know, when pirates attack they don't do it by playing instruments badly, they do it with arms. 
so it's not music "piracy," because piracy is attacking ships, and sharing is as far as you get from being the moral equivalent of attacking ships."
 attacking ships is bad, sharing with other people is good, so we should firmly denounce that propaganda term "piracy" whenever we hear it. 
people might have objected twenty years ago: "if we don't give up our freedom, if we don't let the publishers of these works control us, the works won't get made and that will be a horrible disaster."
 now, looking at the free software community, and all the recipes that circulate, and reference works like wikipedia—we are even starting to see free textbooks being published—we know that that fear is misguided. 
there is no need to despair and give up our freedom thinking that otherwise the works won't get made. 
there are lots of ways to encourage them to get made if we want more—lots of ways that are consistent with and respect our freedom. 
in this category, they should all be free. 
but what about the second category, of works that say what certain people thought, like memoirs, essays of opinion, scientific papers, and various other things?[3] to publish a modified version of somebody else's statement of what he thought is misrepresenting [that] somebody. 
that's not particularly a contribution to society. 
therefore it is workable and acceptable to have a somewhat reduced copyright system where all commercial use is covered by copyright, all modification is covered by copyright, but everyone is free to non-commercially redistribute exact copies. 
[2015 note: publishing scientific papers under the cc attribution license (cc-by) is widely done, in accessible journals and arxiv.org, and it seems that permitting publication of modified versions does not cause any problem. 
so that license is what i now recommend for scholarly publications.] that freedom is the minimum freedom we must establish for all published works, because the denial of that freedom is what creates the war on sharing—what creates the vicious propaganda that sharing is theft, that sharing is like being a pirate and attacking ships. 
absurdities, but absurdities backed by a lot of money that has corrupted our governments. 
we need to end the war on sharing; we need to legalize sharing exact copies of any published work. 
in the second category of works, that's all we need; we don't need to make them free. 
therefore i think it's ok to have a reduced copyright system which covers commercial use and all modifications. 
and this will provide a revenue stream to the authors in more or less the same (usually inadequate) way as the present system. 
you've got to keep in mind [that] the present system, except for superstars, is usually totally inadequate. 
what about works of art and entertainment? 
here it took me a while to decide what to think about modifications. 
you see, on one hand, a work of art can have an artistic integrity and modifying it could destroy that. 
of course, copyright doesn't necessarily stop works from being butchered that way. 
hollywood does it all the time. 
on the other hand, modifying the work can be a contribution to art. 
it makes possible the folk process which leads to things which are beautiful and rich. 
even if we look at named authors only: consider shakespeare, who borrowed stories from other works only a few decades old, and did them in different ways, and made important works of literature. 
if today's copyright law had existed then, that would have been forbidden and those plays wouldn't have been written. 
but eventually i realized that modifying a work of art can be a contribution to art, but it's not desperately urgent in most cases. 
if you had to wait ten years for the copyright to expire, you could wait that long. 
not like the present-day copyright that makes you wait maybe 75 years, or 95 years. 
in mexico you might have to wait almost 200 years in some cases, because copyright in mexico expires a hundred years after the author dies. 
this is insane, but ten years, as i've proposed copyright should last, that people can wait. 
so i propose the same partly reduced copyright that covers commercial use and modification, but everyone's got to be free to non-commercially redistribute exact copies. 
after ten years it goes into the public domain, and people can contribute to art by publishing their modified versions. 
one other thing: if you're going to take little pieces out of a bunch of works and rearrange them into something totally different, that should just be legal, because the purpose of copyright is to promote art, not to obstruct art. 
it's stupid to apply copyright to using snippets like that—it's self-defeating. 
it's a kind of distortion that you'd only get when the government is under the control of the publishers of the existing successful works, and has totally lost sight of its intended purpose. 
that's what i propose, and in particular, this means that sharing copies on the internet must be legal. 
sharing is good. 
sharing builds the bonds of society. 
to attack sharing is to attack society. 
so any time the government proposes some new means to attack people who share, to stop them from sharing, we have to recognize that this is evil, not just because the means proposed almost invariably offend basic ideas of justice (but that's not a coincidence). 
the reason is because the purpose is evil. 
sharing is good and the government should encourage sharing. 
but copyright did after all have a useful purpose. 
copyright as a means to carry out that purpose has a problem now, because it doesn't fit in with the technology we use. 
it interferes with all the vital freedoms for all the readers, listeners, viewers, and whatever, but the goal of promoting the arts is still desirable. 
so in addition to the partly reduced copyright system, which would continue to be a copyright system, i propose two other methods. 
one [works via] taxes—distribute tax money directly to artists. 
this could be a special tax, perhaps on internet connectivity, or it could come from general revenue, because it won't be that much money in total, not if it's distributed in an efficient way. 
to distribute it efficiently to promote the arts means not in linear proportion to popularity. 
it should be based on popularity, because we don't want bureaucrats to have the discretion to decide which artists to support and which to ignore, but based on popularity does not imply linear proportion. 
what i propose is measure the popularity of the various artists, which you could do through polling (samples) in which nobody is required to participate, and then take the cube root. 
the cube root looks like this: it means basically that [the payment] tapers off after a while. 
if superstar a is a thousand times as popular as successful artist b, with this system a would get ten times as much money as b, not a thousand times. 
linearly would give a a thousand times as much as b, which means that if we wanted b to get enough to live on we're going to have to make a tremendously rich. 
this is wasteful use of the tax money—it shouldn't be done. 
but if we make it taper off, then yes, each superstar will get handsomely more than an ordinary successful artist, but the total of all the superstars will be a small fraction of the [total] money. 
most of the money will go to support a large number of fairly successful artists, fairly appreciated artists, fairly popular artists. 
thus the system will use money a lot more efficiently than the existing system. 
the existing system is regressive. 
it actually gives far, far more per record, for instance, to a superstar than to anybody else. 
the money is extremely badly used. 
the result is we'd actually be paying a lot less this way. 
i hope that's enough to mollify some of these people who have a knee-jerk hostile reaction to taxes—one that i don't share, because i believe in a welfare state. 
i have another suggestion which is voluntary payments. 
suppose every player had a button you could push to send a dollar to the artist who made the work you're currently playing or the last one you played. 
this money would be delivered anonymously to those artists. 
i think a lot of people would push that button fairly often. 
for instance, all of us could afford to push that button once every day, and we wouldn't miss that much money. 
it's not that much money for us, i'm pretty sure. 
of course, there are poor people who couldn't afford to push it ever, and it's ok if they don't. 
we don't need to squeeze money out of poor people to support the artists. 
there are enough people who are not poor to do the job just fine. 
i'm sure you're aware that a lot of people really love certain art and are really happy to support the artists. 
an idea just came to me. 
the player could also give you a certificate of having supported so-and-so, and it could even count up how many times you had done it and give you a certificate that says "i sent so much to these artists."
 there are various ways we could encourage people who want to do it. 
for instance, we could have a pr campaign which is friendly and kind: "have you sent a dollar to some artists today? 
why not? 
it's only a dollar—you'll never miss it and don't you love what they're doing? 
push the button!"
 it will make people feel good, and they'll think "yeah, i love what i just watched. 
i'll send a dollar."
 this is already starting to work to some extent. 
there's a canadian singer who used to be called jane siberry. 
she put her music on her website and invited people to download it and pay whatever amount they wished. 
she reported getting an average of more than a dollar per copy, which is interesting because the major record companies charge just under a dollar per copy. 
by letting people decide whether and how much to pay, she got more—she got even more per visitor who was actually downloading something. 
but this might not even count whether there was an effect of bringing more people to come, and [thus] increasing the total number that this average was against. 
so it can work, but it's a pain in the neck under present circumstances. 
you've got to have a credit card to do it, and that means you can't do it anonymously. 
and you've got to go find where you're going to pay, and the payment systems for small amounts, they're not very efficient, so the artists are only getting half of it. 
if we set up a good system for this, it would work far, far better. 
so these are my two suggestions. 
and in mecenatglobal.org, you can find another scheme that combines aspects of the two, which was invented by francis muguet and designed to fit in with existing legal systems better to make it easier to enact. 
be careful of proposals to "compensate the rights holders," because when they say "compensate," they're trying to presume that if you have appreciated a work, you now have a specific debt to somebody, and that you have to "compensate" that somebody. 
when they say "rights holders," it's supposed to make you think it's supporting artists while in fact it's going to the publishers—the same publishers who basically exploit all the artists (except the few that you've all heard of, who are so popular that they have clout). 
we don't owe a debt; we have nobody that we have to "compensate."
 [but] supporting the arts is still a useful thing to do. 
that was the motivation for copyright back when copyright fit in with the technology of the day. 
today copyright is a bad way to do it, but it's still good to do it other ways that respect our freedom. 
demand that they change the two evil parts of the new zealand copyright act. 
they shouldn't replace the three strikes punishment[4], because sharing is good, and they've got to get rid of the censorship for the software to break drm. 
beware of acta—they're trying to negotiate a treaty between various countries, for all of these countries to attack their citizens, and we don't know how because they won't tell us. 
footnotes. 
in 2010, the encryption system for digital video output was definitively cracked. 
that was true at the time. 
as of 2018, it is possible to load books from other sources, but the device reports the name of the book being read to amazon servers; thus, amazon knows every book that you read on the device, regardless of where you got the book. 
2015: i included scientific papers because i thought that publishing modified versions of someone else's paper would cause harm; however, publishing physics and math papers under the creative commons attribution license on arxiv.org and many libre journals seems to have no problems. 
thus, i subsequently concluded that scientific papers ought to be free. 
new zealand had enacted a system of punishment without trial for internet users accused of copying; then, facing popular protest, the government did not implement it, and announced a plan to implement a modified unjust punishment system. 
the point here was that they should not proceed to implement a replacement—rather, they should have no such system. 
however, the words i used don't say this clearly. 
the new zealand government subsequently implemented the punishment scheme more or less as originally planned. 
copyright versus community in the age of computer networks (2000). 
this is a transcription from an audio recording, prepared by douglas carnall, july 2000. 
mr stallman arrives a few minutes after the appointed hour of commencement of his talk to address a hushed and respectful audience. 
he speaks with great precision and almost no hesitation in a pronounced boston accent. 
rms: this is made for someone who wears a strangler. 
[indicates clip-on microphone for lecture theatre amplification system] i don't wear stranglers, so there is no place for it to go. 
[clips it to his t-shirt] me: are you ok with the recording? 
rms: yes! 
[testy] how many people have to ask me? 
well, i'm supposed to speak today [long pause] about copyright versus community. 
this is too loud. 
[indicates clip-on microphone] what can i do? 
let's see… there's no volume control… [finds volume control on radio microphone box] this seems better ok. 
copyright versus community in the age of computer networks. 
the principles of ethics can't change. 
they are the same for all situations, but to apply them to any question or situation you have to look at the facts of the situation to compare alternatives, you have to see what their consequences are, a change in technology never changes the principles of ethics, but a change in technology can alter the consequences of the same choices, so it can make a difference for the outcome of the question, and that has happened in the area of copyright law. 
we have a situation where changes in technology have affected the ethical factors that weigh on decisions about copyright law and change the right policy for society. 
laws that in the past may have been a good idea, now are harmful because they are in a different context. 
but to explain this, i should go back to the beginning to the ancient world where books were made by writing them out by hand. 
that was the only way to do it, and anybody who could read could also write a copy of a book. 
to be sure a slave who spent all day writing copies could probably do it somewhat better than someone who didn't ordinarily do that but it didn't make a tremendous difference. 
essentially, anyone who could read, could copy books, about as well as they could be copied in any fashion. 
in the ancient world, there wasn't the sharp distinction between authorship and copying that there tends to be today. 
there was a continuum. 
on the one hand you might have somebody, say, writing a play. 
then you might have, on the other extreme, just somebody making copies of books, but in between you might have say, somebody, who say, copies part of a book, but writes some words of his own, or writing a commentary, and this was very common, and definitely respected. 
other people would copy some bits from one book, and then some bits from another book, and write something of their own words, and then copy from another book, quoting passages of various lengths from many different works, and then writing some other works to talk about them more, or relate them. 
and there are many ancient works—now lost—in which part of them survived in these quotations in other books that became more popular than the book that the original quote [came from]. 
there was a spectrum between writing an original work, and copying. 
there were many books that were partly copied, but mixed with original writing. 
i don't believe there was any idea of copyright in the ancient world and it would have been rather difficult to enforce one, because books could be copied by anyone who could read anywhere, anyone who could get some writing materials, and a feather to write with. 
so, that was a rather clear simple situation. 
later on, printing was developed and printing changed the situation greatly. 
it provided a much more efficient way to make copies of books, provided that they were all identical. 
and it required specialised, fairly expensive equipment that an ordinary reader would not have. 
so in effect it created a situation in which copies could only feasibly be made by specialised businesses, of which the number was not that large. 
there might have been hundreds of printing presses in a country and hundreds of thousands, or maybe even millions of actually people who could read. 
so the decrease in the number of places in which copies could be made was tremendous. 
now the idea of copyright developed along with the printing press. 
i think that there may be… i think i remember reading that venice, which was a major centre of printing in the 1500s also had a kind of copyright but i can't find that: i couldn't find that reference again. 
but the system of copyright fitted in naturally with the printing press because it became rare for ordinary readers to make copies. 
it still happen. 
people who were very poor or very rich had handmade copies of books. 
the very rich people did this to show off their wealth: they had beautiful illuminated wealth to show that they could afford this. 
and poor people still sometimes copied books by hand because they couldn't afford printed copies. 
as the song goes "time ain't money when all you got is time."
 so some poor people copied books with a pen. 
but for the most part the books were all made on printing presses by publishers and copyright as a system fitted in very well with the technical system. 
for one thing it was painless for readers, because the readers weren't going to make copies anyway, except for the very rich ones who could presumably legitimise it, or the very poor ones who were making just individual copies and no one was going to go after them with lawyers. 
and the system was fairly easy to enforce again because there were only a small number of places where it had to be enforced: only the printing presses, and because of this it didn't require, it didn't involve, a struggle against the public. 
you didn't find just about everybody trying to copy books and being threatened with arrest for doing it. 
and in fact, in addition to not restricting the reader's directly, it didn't cause much of a problem for readers, because it might have added a small fraction to the price of books but it didn't double the price, so that small extra addition to the price was a very small burden for the readers. 
the actions restricted by copyright were actions that you couldn't do, as an ordinary reader, and therefore, it didn't cause a problem. 
and because of this there was no need for harsh punishments to convince readers to tolerate it and to obey. 
so copyright effectively was an industrial regulation. 
it restricted publishers and writers but it didn't restrict the general public. 
it was somewhat like charging a fee for going on a boat ride across the atlantic. 
you know, it's easy to collect the fee when people are getting on a boat for weeks or months. 
well, as time went on, printing got more efficient. 
eventually even poor people didn't have to bother copying books by hand and the idea sort of got forgotten. 
i think it's in the 1800s that essentially printing got cheap enough so that essentially everyone could afford printed books, so to some extent the idea of poor people copying books by hand was lost from memory. 
i heard about this about ten years ago when i started talking about the subject to people. 
so originally in england copyright was partly intended as a measure of censorship. 
people who wanted to publish books were required to get approval from the government but the idea began to change and it a different idea was expressed explicitly in the us constitution. 
when the us constitution was written there was a proposal that authors should be entitled to a monopoly on copying their books. 
this idea was rejected. 
instead, a different idea of the philosophy of copyright was put into the constitution. 
the idea that a copyright system could be… well, the idea is that people have the natural right to copy things but copyright as an artificial restriction on copying can be authorised for the sake of promoting progress. 
so the system of copyright would have been the same more or less either way, but this was a statement about the purpose which is said to justify copyright. 
it is explicitly justified as a means to promote progress, not as an entitlement for copyright owners. 
so the system is meant to modify the behaviour of copyright owners so as to benefit the public. 
the benefit consists of more books being written and published and this is intended to contribute to the progress of civilisation, to spreading ideas, and as a means to this end… in other words as a means to this end copyright exists. 
so this also thought of as a bargain between the public and authors; that the public gives up its natural right to make copies of anything in exchange for the progress that is brought about indirectly, by encouraging more people to write. 
now it may seem like an obscure question to ask "what's the purpose of copyright?"
 but the purpose of any activity is the most important thing for deciding when an activity needs to be changed and how. 
if you forget about the purpose you are sure to get things wrong, so ever since that decision was made, the authors and especially the publishers most recently have been trying to misrepresent it and sweep it under the rug. 
there has been a campaign for decades to try to spread the idea that was rejected in the us constitution. 
the idea that copyright exists as an entitlement for copyright owners. 
and you can that expressed in almost everything they say about it starting and ending with the word "pirate" which is used to give the impression that making an unauthorised copy is the moral equivalent of attacking a ship and kidnapping or killing the people on board. 
so if you look at the statements being made by publishers you find lots of implicit assumptions of this sort which you have to drag into the open and then start questioning. 
recent events and problems. 
[brightens] anyway, as long as the age of the printing press continued, copyright was painless, easy to enforce, and probably a good idea. 
but the age of the printing press began changing a few decades ago when things like xerox machines and tape recorders started to be available, and more recently as computer networks have come into use the situation has changed drastically. 
we are now in a situation technologically more like the ancient world, where anybody who could read something could also make a copy of it that was essentially as good as the best copies anyone could make. 
[murmuring in the audience] a situation now where once again, ordinary readers can make copies themselves. 
it doesn't have to be done through centralised mass production, as in the printing press. 
now this change in technology changes the situation in which copyright law operates. 
the idea of the bargain was that the public trades away its natural right to make copies, and in exchange gets a benefit. 
well, a bargain could be a good one or a bad one. 
it depends on the worth of what you are giving up. 
and the worth of what you are getting. 
in the age of the printing press the public traded away a freedom that it was unable to use. 
it's like finding a way of selling shit: what have you got to lose? 
you've got it on hand anyway, if you get something for it, it can hardly be a bad deal. 
[faint laughter] it's like accepting money for promising not to travel to another star. 
you're not going to do it anyway [hearty laughter] at least not in our lifetime so you might as well, if someone's going to pay you to promise not to travel to another star, you might as well take the deal. 
but if i presented you with a starship, then you might not think that deal was such a good deal any more. 
when the thing you used to sell because it was useless, you discover a use for it, then you have to reconsider the desirability of those old deals that used to be advantageous. 
typically in a such a situation you decide that "i'm not going to sell all of this any more; i'm going to keep some of it and use it."
 so if you were giving up a freedom that you couldn't exercise and now you can exercise it, you probably want to start retaining the right to exercise it at least partially. 
you might still trade part of the freedom: and there are many alternatives of different bargains which trade parts of the freedom and keep other parts. 
so, precisely what you want to do requires thought, but in any case you want to reconsider the old bargain, and you probably want to sell less of what you sold in the past. 
but the publishers are trying to do exactly the opposite. 
at exactly the time when the public's interest is to keep part of the freedom to use it, the publishers are passing laws which make us give up more freedom. 
you see copyright was never intended to be an absolute monopoly on all the uses of a copyright work. 
it covered some uses and not others, but in recent times the publishers have been pushing to extend it further and further. 
ending up most recently with things like the digital millennium copyright act in the us which they are also trying to turn into a treaty through the world intellectual property organisation which is essentially an organisation representing the owners of copyrights and patents and which works to try to increase their power, and pretends to be doing so in the name of humanity rather than in the name of these particular companies. 
now, what are the consequences when copyright starts restricting activities that ordinary readers can do. 
well, for one thing it's no longer an industrial regulation. 
it becomes an imposition on the public. 
for another, because of this, you find the public's starting to object to it you know, when it is stopping ordinary people from doing things that are natural in their lives you find ordinary people refusing to obey. 
which means that copyright is no longer easy to enforce and that's why you see harsher and harsher punishments being adopted by governments that are basically serving the publishers rather than the public. 
also, you have to question whether a copyright system is still beneficial. 
basically, the thing that we have been paying is now valuable for us. 
maybe the deal is a bad deal now. 
so all the things that made technology fit in well with the technology of the printing press make it fit badly with digital information technology. 
so, instead of like, charging the fee to cross the atlantic in a boat, it's like charging a fee to cross a street. 
it's a big nuisance, because people cross the street all along the street, and making them pay is a pain in the neck. 
new kinds of copyright. 
now what are some of the changes we might want to make in copyright law in order to adapt it to the situation that the public finds itself in? 
well the extreme change might be to abolish copyright law but that isn't the only possible choice. 
there are various situations in which we could reduce the power of copyright without abolishing it entirely because there are various different actions that can be done with a copyright and there are various situations in which you might do them, and each of those is an independent question. 
should copyright cover this or not? 
in addition, there is a question of "how long?"
 copyright used to be much shorter in its period or duration, and it's been extended over and over again in the past fifty years or so and in fact in now appears that the owners of copyrights are planning to keep on extending copyrights so that they will never expire again. 
the us constitution says that "copyright must exist for a limited time" but the publishers have found a way around this: every twenty years they make copyright twenty years longer, and this way, no copyright will ever expire again. 
now a thousand years from now, copyright might last for 1200 years, just basically enough so that copyright on mickey mouse can not expire. 
because that's why, people believe that us congress passed a law to extend copyright for twenty years. 
disney was paying them, and paying the president too, with campaign funds of course, to make it lawful. 
see, if they just gave them cash it would be a crime, but contributing indirectly to campaigns is legal and that's what they do: to buy the legislators. 
so they passed the sonny bono copyright act. 
now this is interesting: sonny bono was a congressman and a member of the church of scientology, which uses copyrights to suppress knowledge of its activities. 
so they have their pet congressman and they pushed very hard for increased copyright powers. 
anyway, we were fortunate that sonny bono died but in his name they passed the mickey mouse copyright act of 1998 i believe. 
it's being challenged by the way, on the grounds that, there is a legal case that people hope to go to the supreme court and have the extension of old copyrights tossed out. 
in any case, there are all these different situations and questions where we could reduce the scope of copyright. 
so what are some of them? 
well, first of all there are various different contexts for copying. 
there is commercial sale of copies in the stores at one extreme and at the other there is privately making a copy for your friend once in a while, and in between there are other things, like, there's broadcasting on tv or the radio, there's posting it on the website, there's handing it out to all the people in an organisation, and some of these things could be done either commercially or non-commercially. 
you know, you could imagine a company handing out copies to its staff or you could imagine a school doing it, or some private, non-profit organisation doing it. 
different situations, and we don't have to treat them all the same. 
so one way in we could reclaim the… in general though, the activities that are the most private are those that are most crucial to our freedom and our way of life, whereas the most public and commercial are those that are most useful for providing some sort of income for authors so it's a natural situation for a compromise in which the limits of copyright are put somewhere in the middle so that a substantial part of the activity still is covered and provides an income for authors, while the activities that are most directly relevant to peoples' private lives become free again. 
and this is the sort of thing that i propose doing with copyright for things such as novels and biographies and memoires and essays and so on. 
that at the very minimum, people should always have a right to share a copy with a friend. 
it's when governments have to prevent that kind of activity that they have to start intruding into everyone's lives and using harsh punishments. 
the only way basically to stop people in their private lives from sharing is with a police state, but public commercial activities can be regulated much more easily and much more painlessly. 
now, where we should draw these lines depends, i believe, on the kind of work. 
different works serve different purposes for their users. 
until today we've had a copyright system that treats almost everything exactly alike except for music: there are a lot of legal exceptions for music. 
but there's no reason why we have to elevate simplicity above the practical consequences. 
we can treat different kinds of works differently. 
i propose a classification broadly into three kinds of works: functional works, works that express personal position, and works that are fundamentally aesthetic. 
functional works include: computer software; recipes; textbooks; dictionaries and other reference works; anything that you use to get jobs done. 
for functional works i believe that people need very broad freedom, including the freedom to publish modified versions. 
so everything i am going to say tomorrow about computer software applies to other kinds of functional works in the same way. 
so, this criterion of free… because it necessary to have the freedom to publish a modified version this means we have to almost completely get rid of copyright but the free software movement is showing that the progress that society wants that is supposedly the justification for society having copyright can happen in other ways. 
we don't have to give up these important freedoms to have progress. 
now the publishers are always asking us to presuppose that their there is no way to get progress without giving up our crucial freedoms and the most important thing i think about the free software movement is to show them that their pre-supposition is unjustified. 
i can't say i'm sure that in all of these areas we can't produce progress without copyright restrictions stopping people, but what we've shown is that we've got a chance: it's not a ridiculous idea. 
it shouldn't be dismissed. 
the public should not suppose that the only way to get progress is to have copyright but even for these kinds of works there can be some kinds of compromise copyright systems that are consistent with giving people the freedom to publish modified versions. 
look, for example, at the gnu free documentation license, which is used to make a book free. 
it allows anyone to make and sell copies of a modified version, but it requires giving credit in certain ways to the original authors and publishers in a way that can give them a commercial advantage and thus i believe make it possible to have commercial publishing of free textbooks, and if this works people are just beginning to try it commercially. 
the free software foundation has been selling lots of copies of various free books for almost fifteen years now and it's been successful for us. 
at this point though, commercial publishers are just beginning to try this particular approach, but i think that even for functional works where the freedom to publish modified works is essential, some kind of compromise copyright system can be worked out, which permits everyone that freedom. 
for other kinds of works, the ethical questions apply differently, because the works are used differently. 
the second category of works is works that express someone's positions or views or experiences. 
for example, essays, offers to do business with people, statements of one's legal position, memoirs, anything that says, whose point is to say what you think or you want or what you like. 
book reviews and restaurant reviews are also in this category: it's expressing a personal opinion or position. 
now for these kinds of works, making a modified version is not a useful thing to do. 
so i see no reason why people should need to have the freedom to publish modified versions of these works. 
verbatim copying is the only thing that people need to have the freedom to do and because of this we can consider the idea that the freedom to distribute copies should only apply in some situations, for example if it were limited to non-commercial distribution that would be ok i think. 
ordinary citizen's lives would no longer be restricted but publishers would still be covered by copyright for these things. 
[drinks water] now, i used to think that maybe it would be good enough to allow people to privately redistribute copies occasionally. 
i used to think that maybe it would be ok if all public redistribution were still restricted by copyright for these works but the experience with napster has convinced me that that's not so. 
and the reason is that it shows that lots and lots of people both want to publicly redistribute—publicly but not commercially redistribute—and it's very useful. 
and if it's so useful, then it's wrong to stop people from doing it. 
but it would still be acceptable i think, to restrict commercial redistribution of this work, because that would just be an industrial regulation and it wouldn't block the useful activities that people should be doing with these works. 
oh, also, scientific papers. 
or scholarly papers in general fall into this category because publishing modified versions of them is not a good thing to do: it's falsifying the record so they should only be distributed verbatim, so scientific papers should be freely redistributable by anyone because we should be encouraging their redistribution, and i hope you will never agree to publish a scientific paper in a way that restricts verbatim redistribution on the net. 
tell the journal that you won't do that. 
because scientific journals have become an obstacle to the dissemination of scientific results. 
they used to be a necessary mechanism. 
now they are nothing but an obstruction, and those journals that restrict access and restrict redistribution [emphasis] must be abolished. 
they are the enemies of the dissemination of knowledge; they are the enemies of science, and this practice must come to an end. 
now there is a third category of works, which is aesthetic works, whose main use is to be appreciated; novels, plays, poems, drawings in many cases, typically and most music. 
typically it's made to be appreciated. 
now, they're not functional people don't have the need to modify and improve them, the way people have the need to do that with functional works. 
so it's a difficult question: is it vital for people to have the freedom to publish modified versions of an aesthetic work. 
on the one hand you have authors with a lot of ego attachment saying [english accent, dramatic gesture] "oh this is my creation."
 [back to boston] "how dare anyone change a line of this?"
 on the other hand you have the folk process which shows that a series of people sequentially modifying the work or maybe even in parallel and then comparing versions can produce something tremendously rich, and not only beautiful songs and short poems, but even long epics have been produced in this way, and there was a time back before the mystique of the artist as creator, semi-divine figure was so powerful when even great writers reworked stories that had been written by others. 
some of the plays of shakespeare involve stories that were taken from other plays written often a few decades before. 
if today's copyright laws had been in effect they would have called shakespeare a quote pirate unquote for writing some of his great work and so of course you would have had the other authors saying [english accent] "how dare he change one line of my creation. 
he couldn't possibly make it better."
 [faint audience chuckle] you'll hear people ridiculing this idea in exactly those terms. 
well, i am not sure what we should do about publishing modified versions of these aesthetic works. 
one possibility is to do something like what is done in music, which is anyone's allowed to rearranged and play a piece of music, but they may have to pay for doing so, but they don't have to ask permission to perform it. 
perhaps for commercial publication of these works, either modified or unmodified, if they're making money they might have to pay some money, that's one possibility. 
it's a difficult question what to do about publishing modified versions of these aesthetic works and i don't have an answer that i'm fully satisfied with. 
audience member 1 (am1), question, inaudible rms: let me repeat the question because he said it so fast you couldn't possibly have understood it. 
he said "what kind of category should computer games go in?"
 well, i would say that the game engine is functional and the game scenario is aesthetic. 
am1: graphics? 
rms: those are part of the scenario probably. 
the specific pictures are part of the scenario; they are aesthetic, whereas the software for displaying the scenes is functional. 
so i would say that if they combine the aesthetic and the functional into one seamless thing then the software should be treated as functional, but if they're willing to separate the engine and the scenario then it would be legitimate to say, well the engine is functional but the scenario is aesthetic. 
copyright: possible solutions. 
now, how long should copyright last? 
well, nowadays the tendency in publishing is for books to go out of copyright faster and faster. 
today in the us most books that are published are out of print within three years. 
they've been remaindered and they're gone. 
so it's clear that there's not real need for copyright to last for say 95 years: it's ridiculous. 
in fact, it's clear that ten year copyright would be sufficient to keep the activity of publishing going. 
but it should be ten years from date of publication, but it would make sense to allow an additional period before publication which could even be longer than ten years which as you see, as long as the book has not been published the copyright on it is not restricting the public. 
it's basically just giving the author to have it published eventually but i think that once the book is published copyright should run for some ten years or so, then that's it. 
now, i once proposed this in a panel where the other people were all writers. 
and one of them said: "ten year copyright? 
why that's ridiculous! 
anything more than five years is intolerable."
 he was an award-winning science fiction writer who was complaining about the difficulty of retrouving, of pulling back, this is funny, french words are leaking into my english, of, of regaining the rights from the publisher who'd let his books go out of print for practical purposes but was dragging his heels about obeying the contract, which says that when the book is out of print the rights revert to the author. 
the publishers treat authors terribly you have to realise. 
they're always demanding more power in the name of the authors and they will bring along a few very famous very successful writers who have so much clout that they can get contracts that treat them very well to testify saying that the power is really for their sake. 
meanwhile most writers who are not famous and are not rich and have no particular clout are being treated horribly by the publishing industry, and it's even worse in music. 
i recommend all of you to read courtney love's article: it's in salon magazine right? 
am2 (audience member 2) yes rms: she started out by calling the record companies quote pirates unquotes because of the way they treat the musicians. 
in any case we can shorten copyright more or less. 
we could try various lengths, we could see, we could find out empirically what length of copyright is needed to keep publication vigourous. 
i would say that since almost books are out of print by ten years, clearly ten years should be long enough. 
but it doesn't have to be the same for every kind of work. 
for example, maybe some aspects of copyright for movies should last for longer, like the rights to sell all the paraphernalia with the pictures and characters on them. 
you know, that's so crassly commercial it hardly matters if that is limited to one company in most cases. 
maybe the copyright on the movies themselves, maybe that's legitimate for that to last twenty years. 
meanwhile for software, i suspect that a three year copyright would be enough. 
you see if each version of the programme remains copyrighted for three years after its release well, unless the company is in real bad trouble they should have a new version before those three years are up and there will be a lot of people who will want to use the newer version, so if older versions are all becoming free software automatically, the company would still have a business with the newer version. 
now this is a compromise as i see it, because it is a system in which not all software is free, but it might be an acceptable compromise, after all, if we had to wait three years in some cases for programs to become free… well, that's no disaster. 
to be using three years old software is not a disaster. 
am3: don't you think this is a system that would favour feature creep? 
rms: [airily] ah that's ok. 
that's a minor side issue, compared with these issues of freedom encouraging, every system encourages some artificial distortions in what people, and our present system certainly encourages various kinds of artificial distortions in activity that is covered by copyright so if a changed system also encourages a few of these secondary distortions it's not a big deal i would say. 
am4: the problem with this change in the copyright laws for three would be that you wouldn't get the sources. 
rms: right. 
there would have also to be a condition, a law that to sell copies of the software to the public the source code must be deposited somewhere so that three years later it can be released. 
so it could be deposited say, with the library of congress in the us, and i think other countries have similar institutions where copies of published books get placed, and they could also received the source code and after three years, publish it. 
and of course, if the source code didn't correspond to the executable that would be fraud, and in fact if it really corresponds then they ought to be able to check that very easily when the work is published initially so you're publishing the source code and somebody there says alright "dot slash configure dot slash make" and sees if produces the same executables and uh. 
so you're right, just eliminating copyright would not make software free. 
am5: um libre rms: right. 
that's the only sense i use the term. 
it wouldn't do that because the source code might not be available or they might try to use contracts to restrict the users instead. 
so making software free is not as simple as ending copyright on software: it's a more complex situation than that. 
in fact, if copyright were simply abolished from software then we would no longer be able to use copyleft to protect the free status of a program but meanwhile the software privateers could use other methods—contracts or withholding the source to make software proprietary. 
so what would mean is, if we release a free program some greedy bastard could make a modified version and publish just the binaries and make people sign non-disclosure agreements for them. 
we would no longer have a way to stop them. 
so if we wanted to change the law that all software that was published had to be free we would have to do it in some more complex way, not just by turning copyright for software. 
so, overall i would recommend we look at the various kinds of works and the various different kinds of uses and then look for a new place to draw the line: one that gives the public the most important freedoms for making use of each new kind of work while when possible retaining some kind of fairly painless kind of copyright for general public that is still of benefit to authors. 
in this way we can adapt the copyright system to the circumstances where we find it we find ourselves and have a system that doesn't require putting people in prison for years because they shared with their friends, but still does in various ways encourage people to write more. 
we can also i believe look for other ways of encouraging writing other ways of facilitating authors making money. 
for example, suppose that verbatim redistribution of a work is permitted and suppose that the work comes with something, so that when you are playing with it or reading it, there is a box on the side that says "click here to send one dollar to the authors or the musicians or whatever" i think that in the wealthier parts of the world a lot of people will send it because people often really love the authors and musicians that made the things that they like to read and listen to. 
and the interesting thing is that the royalty that they get now is such a small fraction that if you pay twenty dollars for something they're probably not getting more than one anyway. 
so this will be a far more efficient system. 
and the interesting thing will be that when people redistribute these copies they will be helping the author. 
essentially advertising them, spreading around these reasons to send them a dollar. 
now right now the biggest reason why more people don't just send some money to the authors is that it's a pain in the neck to do it. 
what are you going to do? 
write a cheque? 
then who are you going to mail the cheque to? 
you'd have to dig up their address, which might not be easy. 
but with a convenient internet payment system which makes it efficient to pay someone one dollar, then we could put this into all the copies, and then i think you'd find the mechanism starting to work well. 
it may take five of ten years for the ideas to spread around, because it's a cultural thing, you know, at first people might find it a little surprising but once it gets normal people would become accustomed to sending the money, and it wouldn't be a lot of money compared to what it costs to buy books today. 
[drinks] so i think that in this way, for the works of expression, and maybe aesthetic works, maybe this could a successful method. 
but it won't work for the functional works, and the reason for that is that as one person after another makes a modified version and publishes it, who should the boxes point to, and how much money should they send, and you know, it's easy to do this when the work was published just once, by a certain author, or certain group of authors, and they can just agree together what they're going to do and click on the box, if no-one is publishing modified versions then every copy will contain the same box with the same url directing money to the same people but when you have different version which have been worked on by different people there's no simple automatic way of working out who ought to get what fraction of what users donate for this version or that version. 
it's philosophically hard to decide how important each contribution is, and all the obvious ways of trying to measure it are [emphasis] obviously [/emphasis] wrong in some cases, they're obviously closing their eyes to some important part of the facts so i think that this kind of solution is probably not feasible when everybody is free to publish modified versions. 
but for those kinds of works where it is not crucial to have the freedom to publish modified versions then this solution can be applied very simply once we have the convenient internet payment system to base it on. 
with regard to the aesthetic works. 
if there is a system where those who commercially redistribute or maybe even those who are publishing a modified version might have to negotiate the sharing of the payments with the original developers and then this kind of scheme could be extended to those works too even if modified versions are permitted there could be some standard formula which could be in some cases renegotiated, so i think in some cases probably possible even with a system of permitting in some way publishing modified versions of the aesthetic works it may be possible still to have this kind of voluntary payment system. 
now i believe there a people who are trying to set up such voluntary payment systems. 
i heard of something called the street performer's protocol. 
i don't know the details of it. 
and i believe there is something called greenwitch.com [transcriber's note: url uncertain] i believe the people there are trying to set up something more or less like this. 
i think that what they are hoping to do is collect a bunch of payments that you make to various different people, and eventually charge your credit card once it gets to be big enough so that it's efficient. 
whether those kind of systems work smoothly enough in practice that they'll get going is not clear, and whether they will become adopted widely enough for them to become a normal cultural practice is not clear. 
it may be that in order for these voluntary payments to truly catch on we need to have some kind of… you need to see the idea everywhere in order to… "yeah, i outta pay" once in a while. 
we'll see. 
there is evidence ideas like this are not unreasonable. 
if you look at for example public radio in the us, which is mostly supported by donations from listeners, you have i believe, millions of people donating, i'm not sure how many exactly but there are many public radio stations which are supported by their listeners and they seem to be finding it easier to get donations as time goes on. 
ten years ago they would have maybe six weeks of the year when they were spending most of their time asking people "please send some money, don't you think we're important enough" and so on 24 hours a day, and now a lot of them have found that they can raise the contributions by sending people mail who sent them donations in the past, and they don't have to spend their airtime drumming up the donations. 
fundamentally, the stated purpose of copyright: to encourage righting is a worthwhile purpose, but we have to look at ways of ways to achieve it that are not so harsh, and not so constricting of the use of the works whose developments we have encouraged and i believe that digital technology is providing us with solutions to the problem as well as creating a context where we need to solve the problem. 
so that's the end of this talk, and are there questions? 
questions and discussion. 
first of all, what time is the next talk? 
what time is it now? 
me: the time is quarter past three. 
rms: oh really? 
so i'm late already? 
well i hope melanie will permit me to accept a few questions. 
am6 (audience member 6): who will decide in which of your three categories will a work fit? 
rms: i don't know. 
i'm sure there are various ways of deciding. 
you can probably tell a novel when you see one. 
i suspect judges can tell a novel when they see one too. 
am7: any comment on encryption? 
and the interaction of encryption devices with copyrighted materials? 
rms: well, encryption is being used as a means of controlling the public. 
the publishers are trying to impose various encryption systems on the public so that they can block the public from copying. 
now they call these things technological methods, but really they all rest on laws prohibiting people from by-passing them, and without those laws none of these methods would accomplish its purpose, so they are all based on direct government intervention to stop people from copying and i object to them very strongly, and i will not accept those media. 
if as a practical matter the means to copy something are not available to me i won't buy it, and i hope you won't buy it either. 
am8: in france we have a law that says that even if the media is protected you have the right to copy again for backup purpose rms: yes it used to be that way in the us as well until 2 years ago. 
am8: very often you sign an agreement that is illegal in france… the contract you are supposed to sign with a mouse… rms: well, maybe they're not. 
am8: how can we get it challenged? 
rms: [rhetorically] well are you going to challenge them? 
it costs money, it takes trouble, and not only that, how would you do it? 
well, you could either try to go to a court and say, "they have no right to ask people to sign this contract because it is an invalid contract" but that might be difficult if the distributor is in the us. 
french law about what is a valid contract couldn't be used to stop them in the us. 
on the other hand you could also say "i signed this contract but it's not valid in france so i am publicly disobeying, and i challenge them to sue me."
 now that you might consider doing, and if you're right and the laws are not valid in france then the case would get thrown out. 
i don't know. 
maybe that is a good idea to do, i don't know whether, what its effects politically would be. 
i know that there was just a couple of years ago a law was passed in europe to prohibit some kind of private copying of music, and the record companies trotted out some famous very popular musicians to push for this law and they got it, so it's clear that they have a lot of influence here too, and it's possible that they will get more, just pass another law to change this. 
we have to think about the political strategy for building the constituency to resist such changes and the actions we take should be designed to accomplish that. 
now, i'm no expert on how to accomplish that in europe but that's what people should think about. 
am6: what about protection of private correspondence? 
rms: well, if you're not [emphasis] publishing [/emphasis] it that's a completely different issue. 
am6: no, but if i send an email to somebody, that's automatically under my copyright. 
rms: [forcefully] that's entirely irrelevant actually. 
am6: no, i don't accept that. 
if they're going to publish it in a newspaper. 
at the moment my redress is my copyright. 
rms: well, you can't make him keep secret the contents and i'm not sure actually. 
i mean to me, i think there's some injustice in that. 
if you for example, send a letter to somebody threatening to sue him and then you tell him you can't tell anybody i did this because my threat is copyrighted, that's pretty obnoxious, and i'm not sure that it would even be upheld. 
am6: well, there are circumstances where i want to correspond with someone and keep my (and their) reply, entirely private. 
rms: well if you and they agree to keep it private, then that's a different matter entirely. 
i'm sorry the two issues can not be linked, and i don't have time to consider that issue today. 
there's another talk scheduled to start soon. 
but i think it is a total mistake for copyright to apply to such situations. 
the ethics of those situations are completely different from the ethics of published works and so they should be treated in an appropriate way, which is completely different. 
am6: that's fair enough, but at the moment the only redress one has is copyright… rms: [interrupts] no you're wrong. 
if people have agreed to keep something private then you have other redress. 
in europe there are privacy laws, and the other thing is, you don't have a right to force someone to keep secrets for you. 
at most, you could force him to paraphrase it, because he has a right to tell people what you did. 
am6: yes, but i assuming that the two people at either end are both in reasonable agreement. 
rms: well then, don't say that copyright is your only recourse. 
if he's in agreement he isn't going to give it to a newspaper is he? 
am6: no, er, you're sidestepping my question about interception. 
rms: oh interception. 
that's a totally different… [heatedly] no you didn't ask about interception. 
this is the first time you mentioned interception… am6: no it's the second time. 
am9: [murmurs assent to am6] rms: [still heated] well i didn't hear you before… it's totally silly… it's like trying to… oh how can i compare?… it's like trying to kill an elephant with a waffle iron i mean they have nothing to do with each other. 
[uninterpretable silence falls] am10: have you thought about changes [inaudible, in trade secrets?] rms: uh yes: trade secrets has developed in a very ominous and menacing direction. 
it used to be that trade secrecy meant that you wanted to keep something secret so you didn't tell anybody, and later on it was something that was done within a business telling just a few people something and they would agree to keep it secret. 
but now, it's turning into something where the public in general is becoming conscripted into keeping secrets for business even if they have never agreed in any way to keep these secrets and that's a pressure. 
so those who pretend that trade secrecy is just carrying out some natural right of theirs; that's just not true any more. 
they're getting explicit government help in forcing other people to keep their secrets. 
and we might want to consider whether non-disclosure agreements should in general be considered legitimate contracts because of the anti-social nature of trade secrecy it shouldn't be considered automatic that just because somebody has promised to keep a secret that that means it's binding. 
maybe in some cases it should be and in some cases it should not be. 
if there's a clear public benefit from knowing then maybe that should invalidate the contract, or maybe it should be valid when it is signed with customers or maybe between a business and a, maybe when a business supplies secrets to its suppliers that should be legitimate, but to its customers, no. 
there are various possibilities one can think of, but at the very start anybody who hasn't voluntarily agreed to keep the secrets should not be bound by trade secrecy. 
that's the way it was until not long ago. 
maybe it still is that way in europe, i'm not sure. 
am11: is is ok for a company to ask say its… rms: employees? 
am11: no no rms: suppliers? 
am11: yes, suppliers. 
what if the customer is another supplier? 
[gap as minidisk changed] rms: let's start by not encouraging it. 
am12: i have a question regarding your opinion on the scientific work on journals and textbooks. 
in my profession at least one official journal and textbook are available on-line, but they retain copyright, but there is free access to the resources provided they have internet access. 
rms: well, that's good. 
but there are many journals where it is not like that. 
for example, the acm journals you can't access unless you are a subscriber: they're blocked. 
so i think journals should all start opening up access on the web. 
am12: so what impact does that have on the significance of copyright on the public when you basically don't interfere with providing free access on the web. 
rms: well, first of all, i disagree. 
mirror sites are essential, so the journal should only provide open access but they should also give everyone the freedom to set up mirror sites with verbatim copies of these papers. 
if not then there is a danger that they will get lost. 
various kinds of calamities could cause them to be lost, you know, natural disasters, political disasters, technical disasters, bureaucratic disasters, fiscal disasters… all sorts of things could cause that one site to disappear. 
so really what the scholarly community should logically be doing is carefully arranging to have a wide network of mirror sites making sure that every paper is available on every continent, from places near the ocean to places that are far inland and you know this is exactly the kind of thing that major libraries will feel is their mission if only they were not being stopped. 
so what should be done, is that these journals should go one step further. 
in addition to saying everybody can access the site they should be saying, everyone can set up a mirror site. 
even if they said, you have to do the whole publication of this journal, together with our advertisements, now that would still at least do the job of making the availability redundant so that it's not in danger, and other institutions would set up mirror sites, and i predict that you would find ten years down the road, a very well organised unofficial system of co-ordinating the mirroring to make sure that nothing was getting left out. 
at this point the amount that it costs to set up the mirror site for years of a journal is so little that it doesn't require any special funding; nobody has to work very hard: just let librarians do it. 
anyway, oh there was some other thing that this raised and i can't remember what it is. 
oh well, i'll just have to let it go. 
am13: the financing problem for the aesthetical works… do you think the dynamics could be… [inaudible] although i understand the problems of… i mean who's contributing? 
and who will be rewarded? 
does the spirit of free software [inaudible] rms: i don't know. 
it's certainly suggesting the idea to people. 
we'll see. 
i don't the answers, i don't know how we're going to get there, i'm trying to think about where we should get to. 
i know know how we can get there. 
the publishers are so powerful, and can get governments to do their bidding. 
how we're going to build up the kind of world where the public refuses to tolerate this any more i don't know. 
i think the first thing we have to do is to clearly reject the term pirate and the views that go with it. 
every time we hear that we have to speak out and say this is propaganda, it's not wrong for people to share these published works with each other, it's sharing with you friend, it's good. 
and sharing with your friend is more important than how much money these companies get. 
the society shouldn't be shaped for the sake of these companies. 
we have to keep on… because you see the idea that they've spread—that anything that reduces their income is immoral and therefore people must be restricted in any way it takes to guarantee for them to be paid for everything… that is the fundamental thing that we have to start attacking directly. 
people have mostly tried tactics of concentrating on secondary issues, you know, to when people, you know when the publishers demand increased power usually people saying it will cause some secondary kind of harm and arguing based on that but you rarely find anybody (except me) saying that the whole point of the change is wrong, that it's wrong to restrict it in that way, that it's legitimate for people to want to change copies and that they should be allowed to. 
we have to have more of this. 
we have to start cutting the root of their dominion not just hacking away at a few leaves. 
am14: [inaudible] this is important is to concentrate on the donations system for music. 
rms: yes. 
unfortunately though there are patents covering the technique that seems most likely to be usable. 
[laughs, cries of "no" from audience] rms: so it may take ten years before we can do it. 
am15: we only take french laws rms: i don't know. 
i think i'd better hand the floor over to melanie whose talk was supposed to start at 3. and uh so rms stands in silence. 
there is a pause before the outbreak of applause. 
rms turns to applaud the stuffed fabric gnu he placed on the overhead projector at the beginning of the talk. 
correcting my mistake about french law. 
stallman for several years i've said in my speeches that it was a crime in france, punishable by imprisonment, to have a copy of the free software that can decrypt the video on a dvd. 
that encryption is an example of drm (digital restrictions management), the malicious features designed to restrict users. 
that is what sarkozy's dadvsi law said when it was adopted, but i recently learned that the conseil d'etat introduced some exceptions. 
in fact, free software to decrypt and play dvds is legally distributed in france—unlike the us, where it was censored by the infamous 1998 law, the digital millennium copyright act. 
however, it's not clear whether this will apply to other drm schemes. 
there is a danger that the complex conditions will specifically prohibit free software for playing bluray disks and allow only proprietary software. 
thus, it is not a crime in france to possess the free software that can play a dvd, but it is yet to be decided whether it is a crime to possess a free program to play a bluray disk. 
it is certainly not wrong to have a copy of such a program. 
the software that's wrong is nonfree software; the only ethical program to play a video, or do anything else, is a free program. 
the wrong here is in the law itself. 
however, as long as it exists, if you are a dissident in france you should keep such programs hidden. 
when i first got a drive that handles dvds, the reason i decided not to install free dvd-playing software was because of this french law. 
i go to france from time to time, and i was concerned there might be some who would wish to have me imprisoned for this so as to terrorize other netizens. 
i refuse to have any nonfree software, and the only option that left me was to have no software for this job. 
thus, i could not play encrypted dvds at all. 
knowing now that i won't be imprisoned for bringing libdvdcss into france, i could consider having a copy, which would give me the option of playing dvds that have drm. 
however, i think i won't do it. 
i have got used to avoiding encrypted dvds, and this has the bonus of giving hollywood no money with which to lobby for nasty laws like sopa. 
why change? 
the danger of software patents. 
stallman this is the transcript of a talk presented on 8 october 2009 at victoria university of wellington. 
sf: my name is susy frankel and on behalf of myself and meredith kolsky lewis, i'd like to welcome you to this seminar hosted by the new zealand centre for international economic law. 
brenda chawner, who is part of the victoria university school of information management, rather than the centre i just named being part of the law faculty, is really responsible for bringing richard stallman back to new zealand and hosting his tour of new zealand, including this stop here in wellington tonight. 
she's unfortunately unable to be with us at this moment because she's doing what we do in universities which is teach. 
so it's my pleasure to welcome you to the lecture "the danger of software patents."
 richard stallman has a suite of lectures that he offers, and after discussion with brenda, i chose this topic precisely because for the first real time in new zealand history, we have a somewhat prolonged, but important, debate about patent law reform, and many of you in the room are responsible for the debate relating to software patents. 
so it seemed very topical, very timely. 
so thank you, richard, for making that offer. 
richard stallman needs little introduction. 
nonetheless, for some of you who have not heard of him previously, he has launched the development of the gnu operating system. 
i had never heard gnu said before, and i went online to youtube (where would we be be without youtube)… rms: oh, you shouldn't recommend youtube, because they distribute in a patented video format. 
sf: good point. 
i only recommend it for the point that i thought do you say g n u or gnu? 
rms: wikipedia says that. 
[the answer is, pronounce it as a one syllable, with a hard g.] sf: yes, but live i heard you say it on youtube. 
but nonetheless, the important point is that it's not proprietorial. 
but the most interesting point is that richard has received many honors for his work. 
my favorite, and therefore the one that i'm going to mention, is the takeda award for social and economic betterment, and i imagine we're going to hear a lot of that tonight, so join me in welcoming richard. 
rms: first of all, i'd like to mention one of the reasons why i'm drinking this [a can or bottle of a cola which is not coke] is there's a worldwide boycott of coca-cola company for murdering union organizers in colombia. 
look at the site killercoke.org. 
and they're not talking about the effects of drinking the product—after all, the same might be true of many other products—it's murder. 
so before you buy any drink product, look at the fine print and see if it's made by coca-cola company. 
i'm most known for starting the free software movement and leading development of the gnu operating system—although most of the people who use the system mistakenly believe it's linux and think it was started by somebody else a decade later. 
but i'm not going to be speaking about any of that today. 
i'm here to talk about a legal danger to all software developers, distributors, and users: the danger of patents—on computational ideas, computational techniques, an idea for something you can do on a computer. 
now, to understand this issue, the first thing you need to realize is that patent law has nothing to do with copyright law—they're totally different. 
whatever you learn about one of them, you can be sure it doesn't apply to the other. 
so, for example, any time a person makes a statement about "intellectual property," that's spreading confusion, because it's lumping together not only these two laws but also at least a dozen others. 
they're all different, and the result is any statement which purports to be about "intellectual property" is pure confusion—either the person making the statement is confused, or the person is trying to confuse others. 
but either way, whether it's accidental or malicious, it's confusion. 
protect yourself from this confusion by rejecting any statement which makes use of that term. 
the only way to make thoughtful comments and think clear thoughts about any one of these laws is to distinguish it first from all the others, and talk or think about one particular law, so that we can understand what it actually does and then form conclusions about it. 
so i'll be talking about patent law, and what happens in those countries which have allowed patent law to restrict software. 
so, what does a patent do? 
a patent is an explicit, government-issued monopoly on using a certain idea. 
in the patent there's a part called the claims, which describe exactly what you're not allowed to do (although they're written in a way you probably can't understand). 
it's a struggle to figure out what those prohibitions actually mean, and they may go on for many pages of fine print. 
so the patent typically lasts for 20 years, which is a fairly long time in our field. 
twenty years ago there was no world wide web—a tremendous amount of the use of computers goes on in an area which wasn't even possible to propose 20 years ago. 
so of course everything that people do on it is something that's new since 20 years ago—at least in some aspect it is new. 
so if patents had been applied for we'd be prohibited from doing all of it, and we may be prohibited from doing all of it in countries that have been foolish enough to have such a policy. 
most of the time, when people describe the function of the patent system, they have a vested interest in the system. 
they may be patent lawyers, or they may work in the patent office, or they may be in the patent office of a megacorporation, so they want you to like the system. 
the economist once referred to the patent system as "a time-consuming lottery."
 if you've ever seen publicity for a lottery, you understand how it works: they dwell on the very unlikely probability of winning, and they don't talk about the overwhelming likelihood of losing. 
in this way, they intentionally and systematically present a biased picture of what's likely to happen to you, without actually lying about any particular fact. 
it's the same way for the publicity for the patent system: they talk about what it's like to walk down the street with a patent in your pocket—or first of all, what it's like to get a patent, then what it's like to have a patent in your pocket, and every so often you can pull it out and point it at somebody and say, "give me your money."
 to compensate for their bias, i'm going to describe it from the other side, the victim side—what it's like for people who want to develop or distribute or run software. 
you have to worry that any day someone might walk up to you and point a patent at you and say, "give me your money."
 if you want to develop software in a country that allows software patents, and you want to work with patent law, what will you have to do? 
you could try to make a list of all the ideas that one might be able to find in the program that you're about to write, aside from the fact that you don't know that when you start writing the program. 
[but] even after you finish writing the program you wouldn't be able to make such a list. 
the reason is… in the process you conceived of it in one particular way—you've got a mental structure to apply to your design. 
and because of that, it will block you from seeing other structures that somebody might use to understand the same program—because you're not coming to it fresh; you already designed it with one structure in mind. 
someone else who sees it for the first time might see a different structure, which involves different ideas, and it would be hard for you to see what those other ideas are. 
but nonetheless they're implemented in your program, and those patents could prohibit your program, if those ideas are patented. 
for instance, suppose there were graphical-idea patents and you wanted to draw a square. 
well, you would realize that if there was a patent on a bottom edge, it would prohibit your square. 
you could put "bottom edge" on the list of all ideas implemented in your drawing. 
but you might not realize that somebody else with a patent on bottom corners could sue you easily also, because he could take your drawing and turn it by 45 degrees. 
and now your square is like this, and it has a bottom corner. 
so you couldn't make a list of all the ideas which, if patented, could prohibit your program. 
what you might try to do is find out all the ideas that are patented that might be in your program. 
now you can't do that actually, because patent applications are kept secret for at least eighteen months; and the result is the patent office could be considering now whether to issue a patent, and they won't tell you. 
and this is not just an academic, theoretical possibility. 
for instance, in 1984 the compress program was written, a program for compressing files using the lzw data compression algorithm, and at that time there was no patent on that algorithm for compressing files. 
the author got the algorithm from an article in a journal. 
that was when we thought that the purpose of computer science journals was to publish algorithms so people could use them. 
he wrote this program, he released it, and in 1985 a patent was issued on that algorithm. 
but the patent holder was cunning and didn't immediately go around telling people to stop using it. 
the patent holder figured, "let's let everybody dig their grave deeper."
 a few years later they started threatening people; it became clear we couldn't use compress, so i asked for people to suggest other algorithms we could use for compressing files. 
and somebody wrote and said, "i developed another data compression algorithm that works better, i've written a program, i'd like to give it to you."
 so we got ready to release it, and a week before it was ready to be released, i read in the new york times weekly patent column, which i rarely saw—it's a couple of times a year i might see it—but just by luck i saw that someone had gotten a patent for "inventing a new method of compressing data."
 and so i said we had better look at this, and sure enough it covered the program we were about to release. 
but it could have been worse: the patent could have been issued a year later, or two years later, or three years later, or five years later. 
anyway, someone else came up with another, even better compression algorithm, which was used in the program gzip, and just about everybody who wanted to compress files switched to gzip, so it sounds like a happy ending. 
but you'll hear more later. 
it's not entirely so happy. 
so, you can't find out about the patents that are being considered even though they may prohibit your work once they come out, but you can find out about the already issued patents. 
they're all published by the patent office. 
the problem is you can't read them all, because there are too many of them. 
in the us i believe there are hundreds of thousands of software patents; keeping track of them would be a tremendous job. 
so you're going to have to search for relevant patents. 
and you'll find a lot of relevant patents, but you won't necessarily find them all. 
for instance, in the 80s and 90s, there was a patent on "natural order recalculation" in spreadsheets. 
somebody once asked me for a copy of it, so i looked in our computer file which lists the patent numbers. 
and then i pulled out the drawer to get the paper copy of this patent and xeroxed it and sent it to him. 
and when he got it, he said, "i think you sent me the wrong patent. 
this is something about compilers."
 so i thought maybe our file has the wrong number in it. 
i looked in it again, and sure enough it said, "a method for compiling formulas into object code."
 so i started to read it to see if it was indeed the wrong patent. 
i read the claims, and sure enough it was the natural order recalculation patent, but it didn't use those terms. 
it didn't use the term "spreadsheet."
 in fact, what the patent prohibited was dozens of different ways of implementing topological sort—all the ways they could think of. 
but i don't think it used the term "topological sort."
 so if you were writing a spreadsheet and you tried to find relevant patents by searching, you might have found a lot of patents. 
but you wouldn't have found this one until you told somebody, "oh, i'm working on a spreadsheet," and he said, "oh, did you know those other companies that are making spreadsheets are getting sued?"
 then you would have found out. 
well, you can't find all the patents by searching, but you can find a lot of them. 
and then you've got to figure out what they mean, which is hard, because patents are written in tortuous legal language which is very hard to understand the real meaning of. 
so you're going to have to spend a lot of time talking with an expensive lawyer explaining what you want to do in order to find out from the lawyer whether you're allowed to do it. 
even the patent holders often can't recognize just what their patents mean. 
for instance, there's somebody named paul heckel who released a program for displaying a lot of data on a small screen, and based on a couple of the ideas in that program he got a couple of patents. 
i once tried to find a simple way to describe what claim 1 of one of those patents covered. 
i found that i couldn't find any simpler way of saying it than what was in the patent itself; and that sentence, i couldn't manage to keep it all in my mind at once, no matter how hard i tried. 
and heckel couldn't follow it either, because when he saw hypercard, all he noticed was it was nothing like his program. 
it didn't occur to him that the way his patent was written it might prohibit hypercard; but his lawyer had that idea, so he threatened apple. 
and then he threatened apple's customers, and eventually apple made a settlement with him which is secret, so we don't know who really won. 
and this is just an illustration of how hard it is for anybody to understand what a patent does or doesn't prohibit. 
in fact, i once gave this speech and heckel was in the audience. 
and at this point he jumped up and said, "that's not true, i just didn't know the scope of my protection."
 and i said, "yeah, that's what i said," at which point he sat down and that was the end of my experience being heckled by heckel. 
if i had said no, he probably would have found a way to argue with me. 
anyway, after a long, expensive conversation with a lawyer, the lawyer will give you an answer like this: if you do something in this area, you're almost certain to lose a lawsuit; if you do something in this area, there's a considerable chance of losing a lawsuit; and if you really want to be safe you've got to stay out of this area. 
but there's a sizeable element of chance in the outcome of any lawsuit. 
so now that you have clear, predictable rules for doing business, what are you actually going to do? 
well, there are three things that you could do to deal with the issue of any particular patent. 
one is to avoid it, another is to get a license for it, and the third is to invalidate it. 
so i'll talk about these one by one. 
first, there's the possibility of avoiding the patent, which means, don't implement what it prohibits. 
of course, if it's hard to tell what it prohibits, it might be hard to tell what would suffice to avoid it. 
a couple of years ago kodak sued sun [for] using a patent for something having to do with object-oriented programming, and sun didn't think it was infringing that patent. 
but the court decided it was; and when other people look at that patent they haven't the faintest idea whether that decision was right or not. 
no one can tell what that patent does or doesn't cover, but sun had to pay hundreds of millions of dollars because of violating a completely incomprehensible law. 
sometimes you can tell what you need to avoid, and sometimes what you need to avoid is an algorithm. 
for instance, i saw a patent for something like the fast fourier transform, but it ran twice as fast. 
well, if the ordinary fft is fast enough for your application then that's an easy way to avoid this other one. 
and most of the time that would work. 
once in a while you might be trying to do something where it runs doing fft all the time, and it's just barely fast enough using the faster algorithm. 
and then you can't avoid it, although maybe you could wait a couple of years for a faster computer. 
but that's going to be rare. 
most of the time that patent will to be easy to avoid. 
on the other hand, a patent on an algorithm may be impossible to avoid. 
consider the lzw data compression algorithm. 
well, as i explained, we found a better data compression algorithm, and everybody who wanted to compress files switched to the program gzip which used the better algorithm. 
and the reason is, if you just want to compress the file and uncompress it later, you can tell people to use this program to uncompress it; then you can use any program with any algorithm, and you only care how well it works. 
but lzw is used for other things, too; for instance the postscript language specifies operators for lzw compression and lzw uncompression. 
it's no use having another, better algorithm because it makes a different format of data. 
they're not interoperable. 
if you compress it with the gzip algorithm, you won't be able to uncompress it using lzw. 
so no matter how good your other algorithm is, and no matter what it is, it just doesn't enable you to implement postscript according to the specs. 
but i noticed that users rarely ask their printers to compress things. 
generally the only thing they want their printers to do is to uncompress; and i also noticed that both of the patents on the lzw algorithm were written in such a way that if your system can only uncompress, it's not forbidden. 
these patents were written so that they covered compression, and they had other claims covering both compression and uncompression; but there was no claim covering only uncompression. 
so i realized that if we implement only the uncompression for lzw, we would be safe. 
and although it would not satisfy the specification, it would please the users sufficiently; it would do what they actually needed. 
so that's how we barely squeaked by avoiding the two patents. 
now there is gif format, for images. 
that uses the lzw algorithm also. 
it didn't take long for people to define another image format, called png, which stands for "png's not gif."
 i think it uses the gzip algorithm. 
and we started saying to people, "don't use gif format, it's dangerous. 
switch to png."
 and the users said, "well, maybe some day, but the browsers don't implement it yet," and the browser developers said, "we may implement it someday, but there's not much demand from users."
 well, it's pretty obvious what's going on—gif was a de facto standard. 
in effect, asking people to switch to a different format, instead of their de facto standard, is like asking everyone in new zealand to speak hungarian. 
people will say, "well, yeah, i'll learn to speak it after everyone else does."
 and so we never succeeded in asking people to stop using gif, even though one of those patent holders was going around to operators of web sites, threatening to sue them unless they could prove that all of the gifs on the site were made with authorized, licensed software. 
so gif was a dangerous trap for a large part of our community. 
we thought we had an alternative to gif format, namely jpeg, but then somebody said, "i was just looking through my portfolio of patents"—i think it was somebody that just bought patents and used them to threaten people—and he said, "and i found that one of them covers jpeg format."
 well, jpeg was not a de facto standard, it's an official standard, issued by a standards committee; and the committee had a lawyer too. 
their lawyer said he didn't think that this patent actually covered jpeg format. 
so who's right? 
well, this patent holder sued a bunch of companies, and if there was a decision, it would have said who was right. 
but i haven't heard about a decision; i'm not sure if there ever was one. 
i think they settled, and the settlement is almost certainly secret, which means that it didn't tell us anything about who's right. 
these are fairly lightweight cases: one patent on jpeg, two patents on the lzw algorithm used in gif. 
now you might wonder how come there are two patents on the same algorithm? 
it's not supposed to happen, but it did. 
and the reason is that the patent examiners can't possibly take the time to study every pair of things they might need to study and compare, because they're not allowed to take that much time. 
and because algorithms are just mathematics, there's no way you can narrow down which applications and patents you need to compare. 
you see, in physical engineering fields, they can use the physical nature of what's going on to narrow things down. 
for instance, in chemical engineering, they can say, "what are the substances going in? 
what are the substances coming out?"
 if two different [patent] applications are different in that way, then they're not the same process so you don't need to worry. 
but the same math can be represented in ways that can look very different, and until you study them both together, you don't realize they're talking about the same thing. 
and, because of this, it's quite common to see the same thing get patented multiple times [in software]. 
remember that program that was killed by a patent before we released it? 
well, that algorithm got patented twice also. 
in one little field we've seen it happen in two cases that we ran into—the same algorithm being patented twice. 
well, i think my explanation tells you why that happens. 
but one or two patents is a lightweight case. 
what about mpeg2, the video format? 
i saw a list of over 70 patents covering that, and the negotiations to arrange a way for somebody to license all those patents took longer than developing the standard itself. 
the jpeg committee wanted to develop a follow-on standard, and they gave up. 
they said there were too many patents; there was no way to do it. 
sometimes it's a feature that's patented, and the only way to avoid that patent is not to implement that feature. 
for instance, the users of the word processor xywrite once got a downgrade in the mail, which removed a feature. 
the feature was that you could define a list of abbreviations. 
for instance, if you define "exp" as an abbreviation for "experiment," then if you type "exp-space" or "exp-comma," the "exp" would change automatically to "experiment."
 then somebody who had a patent on this feature threatened them, and they concluded that the only thing they could do was to take the feature out. 
and so they sent all the users a downgrade. 
but they also contacted me, because my emacs editor had a feature like that starting from the late 70s. 
and it was described in the emacs manual, so they thought i might be able to help them invalidate that patent. 
well, i'm happy to know i've had at least one patentable idea in my life, but i'm unhappy that someone else patented it. 
fortunately, in fact, that patent was eventually invalidated, and partly on the strength of the fact that i had published using it earlier. 
but in the meantime they had had to remove this feature. 
now, to remove one or two features may not be a disaster. 
but when you have to remove 50 features, you could do it, but people are likely to say, "this program's no good; it's missing all the features i want."
 so it may not be a solution. 
and sometimes a patent is so broad that it wipes out an entire field, like the patent on public-key encryption, which in fact put public-key encryption basically off limits for about ten years. 
so that's the option of avoiding the patent—often possible, but sometimes not, and there's a limit to how many patents you can avoid. 
what about the next possibility, of getting a license for the patent? 
well, the patent holder may not offer you a license. 
it's entirely up to him. 
he could say, "i just want to shut you down."
 i once got a letter from somebody whose family business was making casino games, which were of course computerized, and he had been threatened by a patent holder who wanted to make his business shut down. 
he sent me the patent. 
claim 1 was something like "a network with a multiplicity of computers, in which each computer supports a multiplicity of games, and allows a multiplicity of game sessions at the same time."
 now, i'm sure in the 1980s there was a university that set up a room with a network of workstations, and each workstation had some kind of windowing facility. 
all they had to do was to install multiple games and it would be possible to display multiple game sessions at once. 
this is so trivial and uninteresting that nobody would have bothered to publish an article about doing it. 
no one would have been interested in publishing an article about doing it, but it was worth patenting it. 
if it had occurred to you that you could get a monopoly on this trivial thing, then you could shut down your competitors with it. 
but why does the patent office issue so many patents that seem absurd and trivial to us? 
it's not because the patent examiners are stupid, it's because they're following a system, and the system has rules, and the rules lead to this result. 
you see, if somebody has made a machine that does something once, and somebody else designs a machine that will do the same thing, but n times, for us that's a for-loop, but for the patent office that's an invention. 
if there are machines that can do a, and there are machines that can do b, and somebody designs a machine that can do a or b, for us that's an if-then-else statement, but for the patent office that's an invention. 
so they have very low standards, and they follow those standards; and the result is patents that look absurd and trivial to us. 
whether they're legally valid i can't say. 
but every programmer who sees them laughs. 
in any case, i was unable to suggest anything he could do to help himself, and he had to shut down his business. 
but most patent holders will offer you a license. 
it's likely to be rather expensive. 
but there are some software developers that find it particularly easy to get licenses, most of the time. 
those are the megacorporations. 
in any field the megacorporations generally own about half the patents, and they cross-license each other, and they can make anybody else cross-license if he's really producing anything. 
the result is that they end up painlessly with licenses for almost all the patents. 
ibm wrote an article in its house magazine, think magazine—i think it's issue 5, 1990—about the benefit ibm got from its almost 9,000 us patents at the time (now it's up to 45,000 or more). 
they said that one of the benefits was that they collected money, but the main benefit, which they said was perhaps an order of magnitude greater, was "getting access to the patents of others," namely cross-licensing. 
what this means is since ibm, with so many patents, can make almost everybody give them a cross-license, ibm avoids almost all the grief that the patent system would have inflicted on anybody else. 
so that's why ibm wants software patents. 
that's why the megacorporations in general want software patents, because they know that by cross-licensing, they will have a sort of exclusive club on top of a mountain peak. 
and all the rest of us will be down here, and there's no way we can get up there. 
you know, if you're a genius, you might start up a small company and get some patents, but you'll never get into ibm's league, no matter what you do. 
now a lot of companies tell their employees, "get us patents so we can defend ourselves" and they mean, "use them to try to get cross-licensing," but it just doesn't work well. 
it's not an effective strategy if you've got a small number of patents. 
suppose you've got three patents. 
one points there, one points there, and one points there, and somebody over there points a patent at you. 
well, your three patents don't help you at all, because none of them points at him. 
on the other hand, sooner or later, somebody in the company is going to notice that this patent is actually pointing at some people, and [the company] could threaten them and squeeze money out of them—never mind that those people didn't attack this company. 
so if your employer says to you, "we need some patents to defend ourselves, so help us get patents," i recommend this response: boss, i trust you and i'm sure you would only use those patents to defend the company if it's attacked. 
but i don't know who's going to be the ceo of this company in five years. 
for all i know, it might get acquired by microsoft. 
so i really can't trust the company's word to only use these patents for defense unless i get it in writing. 
please put it in writing that any patents i provide for the company will only be used for self-defense and collective security, and not for repression, and then i'll be able to get patents for the company with a clean conscience. 
it would be most interesting to raise this not just in private with your boss, but also on the company's discussion list. 
the other thing that could happen is that the company could fail and its assets could be auctioned off, including the patents; and the patents will be bought by someone who means to use them to do something nasty. 
this cross-licensing practice is very important to understand, because this is what punctures the argument of the software patent advocates who say that software patents are needed to protect the starving genius. 
they give you a scenario which is a series of unlikelihoods. 
so let's look at it. 
according to this scenario, there's a brilliant designer of whatever, who's been working for years by himself in his attic coming up with a better way to do whatever it is. 
and now that it's ready, he wants to start a business and mass-produce this thing; and because his idea is so good his company will inevitably succeed—except for one thing: the big companies will compete with him and take all his market the away. 
and because of this, his business will almost certainly fail, and then he will starve. 
well, let's look at all the unlikely assumptions here. 
first of all, that he comes up with this idea working by himself. 
that's not very likely. 
in a high-tech field, most progress is made by people working in a field, doing things and talking with people in the field. 
but i wouldn't say it's impossible, not that one thing by itself. 
but anyway the next supposition is that he's going to start a business and that it's going to succeed. 
well, just because he's a brilliant engineer doesn't mean that he's any good at running a business. 
most new businesses fail; more than 95 percent of them, i think, fail within a few years. 
so that's probably what's going to happen to him, no matter what. 
ok, let's assume that in addition to being a brilliant engineer who came up with something great by himself, he's also talented at running businesses. 
if he has a knack for running businesses, then maybe his business won't fail. 
after all, not all new businesses fail, there are a certain few that succeed. 
well, if he understands business, then instead of trying to go head to head with large companies, he might try to do things that small companies are better at and have a better chance of succeeding. 
he might succeed. 
but let's suppose it fails anyway. 
if he's so brilliant and has a knack for running businesses, i'm sure he won't starve, because somebody will want to give him a job. 
so a series of unlikelihoods—it's not a very plausible scenario. 
but let's look at it anyway. 
because where they go from there is to say the patent system will "protect" our starving genius, because he can get a patent on this technique. 
and then when ibm wants to compete with him, he says, "ibm, you can't compete with me, because i've got this patent," and ibm says, "oh, no, not again!"
 well, here's what really happens. 
ibm says, "oh, how nice, you have a patent. 
well, we have this patent, and this patent, and this patent, and this patent, and this patent, all of which cover other ideas implemented in your product, and if you think you can fight us on all those, we'll pull out some more. 
so let's sign a cross-license agreement, and that way nobody will get hurt."
 now since we've assumed that our genius understands business, he's going to realize that he has no choice. 
he's going to sign the cross-license agreement, as just about everybody does when ibm demands it. 
and then this means that ibm will get "access" to his patent, meaning ibm would be free to compete with him just as if there were no patents, which means that the supposed benefit that they claim he would get by having this patent is not real. 
he won't get this benefit. 
the patent might "protect" him from competition from you or me, but not from ibm—not from the very megacorporations which the scenario says are the threat to him. 
you know in advance that there's got to be a flaw in this reasoning when people who are lobbyists for megacorporations recommend a policy supposedly because it's going to protect their small competitors from them. 
if it really were going to do that, they wouldn't be in favor of it. 
but this explains why [software patents] won't do it. 
even ibm can't always do this, because there are companies that we refer to as patent trolls or patent parasites, and their only business is using patents to squeeze money out of people who really make something. 
patent lawyers tell us that it's really wonderful to have patents in your field, but they don't have patents in their field. 
there are no patents on how to send or write a threatening letter, no patents on how to file a lawsuit, and no patents on how to persuade a judge or jury, so even ibm can't make the patent trolls cross-license. 
but ibm figures, "our competition will have to pay them too; this is just part of the cost of doing business, and we can live with it."
 ibm and the other megacorporations figure that the general dominion over all activity that they get from their patents is good for them, and paying off the trolls they can live with. 
so that's why they want software patents. 
there are also certain software developers who find it particularly difficult to get a patent license, and those are the developers of free software. 
the reason is that the usual patent license has conditions we can't possibly fulfill, because usual patent licenses demand a payment per copy. 
but when software gives users the freedom to distribute and make more copies, we have no way to count the copies that exist. 
if someone offered me a patent license for a payment of one-millionth of a dollar per copy, the total amount of money i'd have to pay maybe is in my pocket now. 
maybe it's 50 dollars, but i don't know if it's 50 dollars, or 49, or what, because there's no way i can count the copies that people have made. 
a patent holder doesn't have to demand a payment per copy; a patent holder could offer you a license for a single lump sum, but those lump sums tend to be big, like us$100,000. 
and the reason that we've been able to develop so much freedom-respecting software is [that] we can develop software without money, but we can't pay a lot of money without money. 
if we're forced to pay for the privilege of writing software for the public, we won't be able to do it very much. 
that's the possibility of getting a license for the patent. 
the other possibility is to invalidate the patent. 
if the country considers software patents to be basically valid, and allowed, the only question is whether that particular patent meets the criteria. 
it's only useful to go to court if you've got an argument to make that might prevail. 
what would that argument be? 
you have to find evidence that, years ago, before the patent was applied for, people knew about the same idea. 
and you'd have to find things today that demonstrate that they knew about it publicly at that time. 
so the dice were cast years ago, and if they came up favorably for you, and if you can prove that fact today, then you have an argument to use to try to invalidate the patent. 
and it might work. 
it might cost you a lot of money to go through this case, and as a result, a probably invalid patent is a very frightening weapon to be threatened with if you don't have a lot of money. 
there are people who can't afford to defend their rights—lots of them. 
the ones who can afford it are the exception. 
these are the three things that you might be able to do about each patent that prohibits something in your program. 
the thing is, whether each one is possible depends on different details of the circumstances, so some of the time, none of them is possible; and when that happens, your project is dead. 
but lawyers in most countries tell us, "don't try to find the patents in advance," and the reason is that the penalty for infringement is bigger if you knew about the patent. 
so what they tell you is "keep your eyes shut. 
don't try to find out about the patents, just go blindly taking your design decisions, and hope."
 and of course, with each single design decision, you probably don't step on a patent. 
probably nothing happens to you. 
but there are so many steps you have to take to get across the minefield, it's very unlikely you will get through safely. 
and of course, the patent holders don't all show up at the same time, so you don't know how many there are going to be. 
the patent holder of the natural order recalculation patent was demanding 5 percent of the gross sales of every spreadsheet. 
you could imagine paying for a few such licenses, but what happens when patent holder number 20 comes along, and wants you to pay out the last remaining 5 percent? 
and then what happens when patent holder number 21 comes along? 
people in business say that this scenario is amusing but absurd, because your business would fail long before you got there. 
they told me that two or three such licenses would make your business fail. 
so you'd never get to 20. 
they show up one by one, so you never know how many more there are going to be. 
software patents are a mess. 
they're a mess for software developers, but in addition they're a restriction on every computer user because software patents restrict what you can do on your computer. 
this is very different from patents, for instance, on automobile engines. 
these only restrict companies that make cars; they don't restrict you and me. 
but software patents do restrict you and me, and everybody who uses computers. 
so we can't think of them in purely economic terms; we can't judge this issue purely in economic terms. 
there's something more important at stake. 
but even in economic terms, the system is self-defeating, because its purpose is supposed to be to promote progress. 
supposedly by creating this artificial incentive for people to publish ideas, it's going to help the field progress. 
but all it does is the exact opposite, because the big job in software is not coming up with ideas, it's implementing thousands of ideas together in one program. 
and software patents obstruct that, so they're economically self-defeating. 
and there's even economic research showing that this is so—showing how in a field with a lot of incremental innovation, a patent system can actually reduce investment in r & d. and of course, it also obstructs development in other ways. 
so even if we ignore the injustice of software patents, even if we were to look at it in the narrow economic terms that are usually proposed, it's still harmful. 
people sometimes respond by saying that "people in other fields have been living with patents for decades, and they've gotten used to it, so why should you be an exception?"
 now, that question has an absurd assumption. 
it's like saying, "other people get cancer, why shouldn't you?"
 i think every time someone doesn't get cancer, that's good, regardless of what happened to the others. 
that question is absurd because of its presupposition that somehow we all have a duty to suffer the harm done by patents. 
but there is a sensible question buried inside it, and that sensible question is "what differences are there between various fields that might affect what is good or bad patent policy in those fields?"
 there is an important basic difference between fields in regard to how many patents are likely to prohibit or cover parts of any one product. 
now we have a naive idea in our minds which i'm trying to get rid of, because it's not true. 
and it's that on any one product there is one patent, and that patent covers the overall design of that product. 
so if you design a new product, it can't be patented already, and you will have an opportunity to get "the patent" on that product. 
that's not how things work. 
in the 1800s, maybe they did, but not now. 
in fact, fields fall on a spectrum of how many patents [there are] per product. 
the beginning of the spectrum is one, but no field is like that today; fields are at various places on this spectrum. 
the field that's closest to that is pharmaceuticals. 
a few decades ago, there really was one patent per pharmaceutical, at least at any time, because the patent covered the entire chemical formula of that one particular substance. 
back then, if you developed a new drug, you could be sure it wasn't already patented by somebody else and you could get the one patent on that drug. 
but that's not how it works now. 
now there are broader patents, so now you could develop a new drug, and you're not allowed to make it because somebody has a broader patent which covers it already. 
and there might even be a few such patents covering your new drug simultaneously, but there won't be hundreds. 
the reason is, our ability to do biochemical engineering is so limited that nobody knows how to combine so many ideas to make something that's useful in medicine. 
if you can combine a couple of them you're doing pretty well at our level of knowledge. 
but other fields involve combining more ideas to make one thing. 
at the other end of the spectrum is software, where we can combine more ideas into one usable design than anybody else, because our field is basically easier than all other fields. 
i'm presuming that the intelligence of people in our field is the same as that of people in physical engineering. 
it's not that we're fundamentally better than they are; it's that our field is fundamentally easier, because we're working with mathematics. 
a program is made out of mathematical components, which have a definition, whereas physical objects don't have a definition. 
the matter does what it does, so through the perversity of matter, your design may not work the way it "should" have worked. 
and that's just tough. 
you can't say that the matter has a bug in it, and the physical universe should get fixed. 
[whereas] we [programmers] can make a castle that rests on a mathematically thin line, and it stays up because nothing weighs anything. 
there're so many complications you have to cope with in physical engineering that we don't have to worry about. 
for instance, when i put an if-statement inside of a while-loop, i don't have to worry that if this while-loop repeats at the wrong rate, the if-statement might start to vibrate and it might resonate and crack; i don't have to worry that if it resonates much faster—you know, millions of times per second—that it might generate radio frequency signals that might induce wrong values in other parts of the program; i don't have to worry that corrosive fluids from the environment might seep in between the if-statement and the while-statement and start eating away at them until the signals don't pass anymore; i don't have to worry about how the heat generated by my if-statement is going to get out through the while-statement so that it doesn't make the if-statement burn out; and i don't have to worry about how i would take out the broken if-statement if it does crack, burn, or corrode, and replace it with another if-statement to make the program run again. 
for that matter, i don't have to worry about how i'm going to insert the if-statement inside the while-statement every time i produce a copy of the program. 
i don't have to design a factory to make copies of my program, because there are various general commands that will make copies of anything. 
if i want to make copies on cd, i just have to write a master; and there's one program i can [use to] make a master out of anything, write any data i want. 
i can make a master cd and write it and send it off to a factory, and they'll duplicate whatever i send them. 
i don't have to design a different factory for each thing i want to duplicate. 
very often with physical engineering you have to do that; you have to design products for manufacturability. 
designing the factory may even be a bigger job than designing the product, and then you may have to spend millions of dollars to build the factory. 
so with all of this trouble, you're not going to be able to put together so many different ideas in one product and have it work. 
a physical design with a million nonrepeating different design elements is a gigantic project. 
a program with a million different design elements, that's nothing. 
it's a few hundred thousand lines of code, and a few people will write that in a few years, so it's not a big deal. 
so the result is that the patent system weighs proportionately heavier on us than it does on people in any other field who are being held back by the perversity of matter. 
a lawyer did a study of one particular large program, namely the kernel linux, which is used together with the gnu operating system that i launched. 
this was five years ago now; he found 283 different us patents, each of which appeared to prohibit some computation done somewhere in the code of linux. 
at the time i saw an article saying that linux was 0.25 percent of the whole system. 
so by multiplying 300 by 400 we can estimate the number of patents that would prohibit something in the whole system as being around 100,000. 
this is a very rough estimate only, and no more accurate information is available, since trying to figure it out would be a gigantic task. 
now this lawyer did not publish the list of patents, because that would have endangered the developers of linux the kernel, putting them in a position where the penalties if they were sued would be greater. 
he didn't want to hurt them; he wanted to demonstrate how bad this problem is, of patent gridlock. 
programmers can understand this immediately, but politicians usually don't know much about programming; they usually imagine that patents are basically much like copyrights, only somehow stronger. 
they imagine that since software developers are not endangered by the copyrights on their work, that they won't be endangered by the patents on their work either. 
they imagine that, since when you write a program you have the copyright, [therefore likewise] if you write a program you have the patents also. 
this is false—so how do we give them a clue what patents would really do? 
what they really do in countries like the us? 
i find it's useful to make an analogy between software and symphonies. 
here's why it's a good analogy. 
a program or symphony combines many ideas. 
a symphony combines many musical ideas. 
but you can't just pick a bunch of ideas and say "here's my combination of ideas, do you like it?"
 because in order to make them work you have to implement them all. 
you can't just pick musical ideas and list them and say, "hey, how do you like this combination?"
 you can't hear that [list]. 
you have to write notes which implement all these ideas together. 
the hard task, the thing most of us wouldn't be any good at, is writing all these notes to make the whole thing sound good. 
sure, lots of us could pick musical ideas out of a list, but we wouldn't know how to write a good-sounding symphony to implement those ideas. 
only some of us have that talent. 
that's the thing that limits you. 
i could probably invent a few musical ideas, but i wouldn't know how to use them to any effect. 
so imagine that it's the 1700s, and the governments of europe decide that they want to promote the progress of symphonic music by establishing a system of musical idea patents, so that any musical idea described in words could be patented. 
for instance, using a particular sequence of notes as a motif could be patented, or a chord progression could be patented, or a rhythmic pattern could be patented, or using certain instruments by themselves could be patented, or a format of repetitions in a movement could be patented. 
any sort of musical idea that could be described in words would have been patentable. 
now imagine that it's 1800 and you're beethoven, and you want to write a symphony. 
you're going to find it's much harder to write a symphony you don't get sued for than to write one that sounds good, because you have to thread your way around all the patents that exist. 
if you complained about this, the patent holders would say, "oh, beethoven, you're just jealous because we had these ideas first. 
why don't you go and think of some ideas of your own?"
 now beethoven had ideas of his own. 
the reason he's considered a great composer is because of all of the new ideas that he had, and he actually used. 
and he knew how to use them in such a way that they would work, which was to combine them with lots of well-known ideas. 
he could put a few new ideas into a composition together with a lot of old and uncontroversial ideas. 
and the result was a piece that was controversial, but not so much so that people couldn't get used to it. 
to us, beethoven's music doesn't sound controversial; i'm told it was, when it was new. 
but because he combined his new ideas with a lot of known ideas, he was able to give people a chance to stretch a certain amount. 
and they could, which is why to us those ideas sound just fine. 
but nobody, not even a beethoven, is such a genius that he could reinvent music from zero, not using any of the well-known ideas, and make something that people would want to listen to. 
and nobody is such a genius he could reinvent computing from zero, not using any of the well-known ideas, and make something that people want to use. 
when the technological context changes so frequently, you end up with a situation where what was done 20 years ago is totally inadequate. 
twenty years ago there was no world wide web. 
so, sure, people did a lot of things with computers back then, but what they want to do today are things that work with the world wide web. 
and you can't do that using only the ideas that were known 20 years ago. 
and i presume that the technological context will continue to change, creating fresh opportunities for somebody to get patents that give the shaft to the whole field. 
big companies can even do this themselves. 
for instance, a few years ago microsoft decided to make a phony open standard for documents and to get it approved as a standard by corrupting the international standards organization, which they did. 
but they designed it using something that microsoft had patented. 
microsoft is big enough that it can start with a patent, design a format or protocol to use that patented idea (whether it's helpful or not), in such a way that there's no way to be compatible unless you use that same idea too. 
and then microsoft can make that a de facto standard with or without help from corrupted standards bodies. 
just by its weight it can push people into using that format, and that basically means that they get a stranglehold over the whole world. 
so we need to show the politicians what's really going on here. 
we need to show them why this is bad. 
now i've heard it said that the reason new zealand is considering software patents is that one large company wants to be given some monopolies. 
to restrict everyone in the country so that one company will make more money is the absolute opposite of statesmanship. 
so, at this point, i'd like to ask for questions. 
q. what is the alternative? 
a. no software patents. 
i know that that works fine. 
i was in the field when there were no software patents. 
and that meant people developed software, and they distributed that software in various ways, and they didn't have to worry about getting sued by patent holders for doing it, so they were safe. 
software patents don't solve a real problem, so we don't need to ask what other solution is there. 
q. how do the developers get rewarded? 
a. many ways. 
software patents have nothing to do with that. 
remember if you're a software developer, software patents don't help you get whatever you want to get. 
different software developers want different things. 
i developed some important software in the 1980s, and the reward i wanted was to see people using computers in freedom. 
and i got that reward, although not totally, not everybody has freedom. 
but software patents would only have stopped me. 
other people developed programs because they wanted money. 
software patents threaten them, too, and still threaten them, because you're not going to make any money if patent holders demand that you give it all to them, or if they make you shut down. 
q. how do you prevent plagiarism and still… a. plagiarism has nothing to do with this issue. 
it has absolutely nothing to do with this issue. 
plagiarism means copying the text of a work and claiming to have written it yourself. 
but patents are not concerned with the text of any particular work. 
they simply have nothing to do with this. 
if you write a work and this work embodies some ideas, which it always does, there's no reason to think that the patents covering those ideas would belong to you. 
they're more likely to belong to lots of others, and half of them to the megacorporations, and they can then all sue you. 
so you don't even have to worry [about plagiarism]; long before you get to the point where somebody else might copy it, you're going to be getting the shaft. 
you are confusing patents with copyrights, i'm afraid. 
they have nothing in common. 
i've explained to you what the patent system does to software, but i think you don't believe me because you've heard what copyrights do and you're confusing the two, so these impressions you've got about what copyrights do, you're just assuming that patents do them also—and they don't. 
if you write some code, the copyright on that code would belong to you; but if your code implements ideas, if some of these ideas are patented, those patents belong to others who could then sue you. 
you don't have to be afraid, with copyright, that when you write code yourself, that somebody else already has a copyright on it and can sue you, because copyright only restricts copying. 
in fact, even if you write something which is identical to what somebody else wrote, if you can prove you didn't copy it, that's a defense under copyright law, because copyright law is only concerned with copying. 
but copyright law is only concerned with the details of authorship of a work [i.e., not the ideas it embodies], so it has nothing in common with patent law in terms of what it deals with, and the effects are totally different. 
now i'm not in favor personally of all the things that people do with copyright law, i've criticized it. 
but it's a totally different, unrelated issue. 
if you think that patent law helps somebody who is developing software, it means that you have got a completely wrong picture of what patent law actually does. 
q. don't get me wrong. 
i'm on your side. 
a. ok, but still you've got a wrong picture. 
i'm not blaming you for it, because you've just been misinformed. 
q. if i'm writing software for commercial purposes, do i get good protection by treating it as a black box and keeping it secret? 
a. i don't want to discuss that question because i'm not in favor of it, i think it's unethical to do that, but that's an unrelated issue. 
q. i understand that. 
a. i don't want to change the subject and then praise something that i think is bad. 
but because it's a change of subject i'd rather not get into that. 
q. our foundation for research, science, and technology, i think they're probably the equivalent of your national science foundation, provides grants for research and development and one of the things that they propose pretty actively is that ideas that they have funded should be secured if possible by patents. 
a. that shouldn't be the case in software, because software ideas shouldn't be patentable ever by anyone. 
but what you are seeing there, more generally, is an example of the general corruption of our society by putting commercial aims above all others. 
now i'm not a communist and i don't want to abolish business, but when it becomes business above all, every aspect of life oriented towards business, that is dangerous. 
q. so richard, if you talk to the foundation, perhaps you might propose that there are better ways for a small country like new zealand to make money on software. 
a. software patents don't help anybody make money out of software. 
they mean that you're in danger of getting sued when you try. 
q. which makes it difficult for new zealand as a country to build an economic base using software as part of that. 
a. sorry, when you say "which" i don't know what you are referring to. 
software patents will make it difficult for anyone. 
if new zealand allows software patents, that will make it difficult in new zealand for anybody to develop programs and distribute them, because you'll be in danger of getting sued. 
software patents have nothing to do with developing a program and then putting it to some use. 
q. so new zealand, in terms of its economic development, it would be better protected by having no software patents. 
a. yes. 
you see, each country has its own patent system, and they work independently, except that countries have signed up to a treaty that says, "if you have got a patent in that country, you can basically bring your application over here, and we'll judge it based on the year you applied for it over there."
 but other than that, each country has its own criteria for what can be patented and has its own set of patents. 
so the result is if the us allows software patents and new zealand does not, that means that everybody in the world, including new zealanders, can get us software patents and sue us poor americans at home. 
but if new zealand doesn't allow software patents that means that neither you nor we can get new zealand software patents to sue you new zealanders at home. 
you can be sure that almost all the software patents will belong to foreigners who will use them to basically kick any new zealand software developers whenever they get the chance. 
q. since the hughes aircraft case, i think it was in the 1990s a. i don't know about that case. 
q. but basically new zealand's had software patents. 
it's not like we're going into a field where we don't already have them, we do. 
a. i don't know, but i'm told that there's a decision being made now at the legislative level of whether to allow them. 
but patent offices often respond to lobbying from megacorporations through wipo. 
wipo, as you can tell from its name, which is the world intellectual property organization, is up to no good, because any use of that term is spreading confusion. 
wipo gets a lot of its funds from megacorporations, and uses those funds to bring officials from patent offices to idyllic resort destinations for training. 
what they train them to do is twist the law to allow patents in areas where they're not supposed to be allowed. 
in many countries there are laws and court decisions which say that software as such can't be patented, algorithms can't be patented, or "mathematical" algorithms can't be patented (no one's quite sure what it means for an algorithm to be mathematical or not), and various other criteria which if interpreted naturally would rule out software patents, but the patent offices twist the law to allow them anyway. 
for instance, a lot of things which practically speaking are software patents have the form where they describe a system involving a central processing unit, a memory, input/output facilities, instruction-fetching facilities, and means to perform this particular computation. 
in effect they've written explicitly into the patent all the parts of an ordinary computer, and then they say, "well, this is a physical system which we would like to patent," but really it's just patenting certain software on a computer. 
there are many subterfuges that they've used. 
patent offices will generally try to twist the law into allowing more patents. 
in the us software patents were created by a court decision in 1982, in the appeals court that deals with all patent cases, which misunderstood a supreme court decision from the previous year, and misapplied it. 
now it looks like that appeals court has finally changed its mind, and it's come to the conclusion that it was mistaken all along; and it looks like this decision will get rid of all software patents, unless the supreme court reverses it. 
the supreme court is now considering it, and within less than a year we should find out whether we've won or lost. 
q. should that case be unsuccessful, is there any movement in the states to take a legislated solution? 
a. yes, and i been promoting this for about 19 years now. 
it's a battle that we fight over and over in various different countries. 
q. where in your universe do you put the in i4i case? 
a. i have no idea what that is. 
q. it's where microsoft has basically almost had to shut down on selling word, because they were found to have infringed a canadian patent. 
a. oh, that one. 
that's just an example of how dangerous software patents are to all software developers. 
i don't like what microsoft does, but that's an issue that's irrelevant for this purpose. 
it's not good that somebody can sue a software developer and say "i won't let you distribute such software."
 q. obviously we live in an imperfect world, and in some cases we run into the issue of software patents. 
do you think that we should allow privileges for researchers to get around patents in the same way that copyright law allows research on copyright material? 
a. no, it's a mistake to look for partial solutions, because we have a much better chance of establishing a full solution. 
everybody involved in software development and distribution and use, except the ones in the megacorporations, when they see how dangerous software patents are, they will get behind total rejection of software patents. 
whereas an exception for some special case will only win support from the people in that special case. 
these partial solutions are essentially distractions. 
people start by saying, "oh, i'm sure we can't really solve the problem, so i give up on that. 
let me propose a partial solution."
 but these partial solutions don't make it safe to develop software. 
q. you wouldn't, however, oppose a partial solution that's not necessarily just directed at software patents, so you wouldn't oppose experimental use, which may be a good solution for the pharmaceutical patent. 
a. i wouldn't oppose that. 
q. but what you're saying is that you don't think it's applicable to software, just to clarify. 
a. something that saves only a few of us, or only certain activities, or gets rid of half the software patents, that's analogous to saying, "well, maybe we could clear part of the minefield, or maybe we could destroy half the mines in the minefield."
 [that's an improvement] but that doesn't make it safe. 
q. so you've been speaking the same thing all around the world. 
how much uptake has there been? 
have governments changed, or not adopted software patents? 
a. some have. 
in india a few years ago, there was an attempt to change patent law to explicitly allow software patents and it was dropped. 
a few years ago the us proposed a trade treaty, a free exploitation treaty, with latin america. 
and it was blocked by the president of brazil, who said no to software patents and another nasty thing relating to computers, and that killed the whole treaty. 
that's apparently the whole thing that the us wanted to impose on the rest of the continent. 
but these things don't stay dead; there are companies that have full-time staff looking for some way they can subvert some country or other. 
q. is there any real hard data around what happens in economic terms in the innovation communities in countries that have essentially no software patents? 
a. there isn't any. 
it's almost impossible to measure these things. 
actually, i shouldn't say there isn't any. 
there is a little. 
it's very hard to measure the effect of the patent system, because you're comparing the real world with a counterfactual world, and there's no way to be sure what would happen. 
what i can say is before there were software patents, there was lots of software development; not as much as there is now, because of course there were nowhere near as many computer users. 
how many computer users were there in 1982, even in the us? 
it was a small fraction of the public. 
but there were software developers. 
they weren't saying, "we desperately want patents."
 they weren't getting sued for patent infringement after they developed their programs. 
but there is a bit of [economic] research that i saw that apparently software patents resulted not in an increase in research, but [in] a shift of funds from research into patenting. 
q. do you expect that there would be any interest in trade secrets? 
a. no. 
before there were software patents, a lot of software developers kept the details of their programs secret. 
but they usually wouldn't keep any of the general ideas secret, because that they realized that the big job in developing good software was not picking your general ideas, it was implementing a lot of ideas together. 
so they would publish, [or] they would let their employees publish, in scholarly journals any interesting new ideas that they'd had. 
so now, they'll patent those new ideas. 
it has very little to do with developing a useful program, and just letting people know some ideas doesn't give them a program. 
besides, most of the ideas, the thousands of ideas you've combined in your program, are known anyway. 
q. to back that up, i was listening to an interview, one of the founders of paypal was interviewed, and he said that he really felt strongly that his success was 5 percent idea and 95 percent execution, and that supports your point really well. 
a. i agree. 
sf: excellent. 
richard has here stickers which i believe are free rms: gratis. 
and these [other items] are for sale. 
sf: so you're welcome to come down. 
it's been a great debate—thank you richard. 
this speech is published in free software, free society: the selected essays of richard m. stallman. 
the right way to tax dat. 
stallman [this article does not concern software, not directly. 
it concerns a parallel issue about sharing copies of music.] [the article was first published in wired magazine in 1992; the text has not been changed; instead, i have added notes, in square brackets and with italics or other emphasis.] [the original article addressed the (then hypothetical) issue of sharing music using (then just appearing) digital audio tape recorders, since that is what the proposed us tax law was supposed to address. 
nowadays it could be applied to internet file sharing.] [another approach developed by the late francis muguet with my assistance, which includes some of these ideas, is called the global patronage system (in french, m&eacute;c&eacute;nat global). 
i support both solutions; that is to say, i favor adopting either one.] record company magnates don't like the digital audio tape recorder (dat), which can make perfect copies of musical recordings. 
they fear that customers will copy music themselves, and stop buying prerecorded music. 
threatening lawsuits, they have obtained from the manufacturers of dats an agreement to pay a fee for each dat unit and each dat tape sold to consumers. 
this fee is to be divided among various participants in the music business: musicians, composers, music publishers and record companies. 
in addition, dat manufacturers have agreed to cripple dat units so that they cannot make a copy of a copy of a prerecorded piece. 
now the record companies have asked congress to enact a law turning this fee into a tax and prohibiting manufacture of dat tapedecks that function without imposed limitations. 
the stated purpose of the tax is to "compensate" musicians for copying done by individuals using dats. 
however, 57 percent of the funds collected would go to record companies and music publishers—leaving less than half to the people who participate in the creative process. 
most of these remaining funds would go to musical superstars, and thus would do little to encourage musical creativity. 
meanwhile, dat users would be unable to make full use of the power of dat technology. 
here is a proposal for a different system for taxing dats and dat tape—one designed to support music rather than cater to vested interests. 
collect funds with a tax on dat machines and dat tapes, as the current proposal provides. 
use a survey system to measure the extent of copying of each musical piece. 
distribute these funds entirely to the people who create music. 
adjust each contributor's share so that it increases more slowly per copy as it gets larger. 
this spreads the funds more widely to support a larger number of musicians adequately. 
make no restrictions on the functioning of dats. 
what is the purpose of copyright?. 
the record industry presents its proposal as a way to "compensate" musicians, assuming that they are entitled to be paid for any copy made. 
many americans believe that copyright law reflects a natural right of authors or musicians—that these are entitled to special consideration from public policy. 
however, any lawyer specializing in the field knows this is a misunderstanding, a view rejected by the american legal system. 
the stated purpose of copyright, given in the u.s. 
constitution, is to "promote the progress of science and the useful arts."
 progress in music means new and varied music for the public to enjoy: copyright is supposed to promote a public good, not a private one. 
yet copyright is often thought of as a natural right by laymen and politicians, which often leads to wrong decisions about copyright policy. 
even courts, defining the details of the copyright system, often let this thought creep back implicitly even though it is supposed to be excluded. 
this is a conceptual error because it mistakes a means (copyright) to a larger end (progress) for an end in itself. 
promoting progress in the arts does not inherently justify the idea that authors are entitled to any particular sort of copyright, or even that copyright should exist at all. 
copyright is justified if the benefits of progress exceeds the burden that copyright imposes on everyone except the copyright holder. 
how do we make this cost/benefit comparison? 
it depends partly on facts (how does a particular law affect musical activity and music users) and partly on our value judgements about those results. 
let's assume that it is worth paying a dat tax if the result is a significant increase in musical activity, and investigate how we should arrange the details of this tax in order to maximize the benefit. 
but first, let's review basic principles and facts which have a bearing on the inquiry. 
diminishing returns. 
the law of diminishing returns is a general principle of economics. 
it states that each additional increment of efforts or funds spent on a given goal typically produces a smaller and smaller increment in the results. 
there are exceptions to this law, but they are local; if you keep on increasing the inputs, you eventually leave the exceptions behind. 
for example, you can make traffic flow more smoothly by improving roads. 
adding one lane to 20 miles of congested roads in a city might increase the average traffic speed by 15 miles an hour. 
adding a second lane to those roads will not give the same improvement; this might increase the average speed by only 5 more miles an hour. 
the next additional lane might make no noticeable difference if the traffic jams are already gone. 
yet each successive lane will cause greater dislocation as more and more buildings must be torn down to make room. 
when applied to the activities of musicians, diminishing returns tells us that each successive increase in the income of musicians will have a smaller effect on the amount of creativity in music. 
diminishing returns is the first reason to reject the idea that any use of music "should" be covered by copyright. 
there is nothing to gain by trying to guarantee owners control of every possible aspect of the use of music or to give them a financial stake in every possible aftermarket. 
extending copyright can only "promote progress" up to a certain point. 
further extensions merely increase what the public pays to the owners for what they will do anyway. 
extending copyright beyond that point is certainly undesirable. 
trade-offs. 
those with a vested interest in extending copyright start the discussion by claiming that copyright "should" be extended as far as it can go. 
but the principle of diminishing returns renders this claim implausible. 
so they fall back on the position that copyright should be extended to maximize the rate of progress. 
but this too is wrong, because it ignores the existence of other trade-offs. 
copyright imposes costs and burdens on the public, like any other government project. 
the benefit may not be worth the price. 
government fills many important functions, but few would say that any one of these functions should be expanded to maximize output. 
for example, governments build roads, and this is very useful. 
but few leaders would advocate building every road that could be built. 
road construction is expensive, and citizens have other uses for their money. 
too much concentration on building roads means that other social and individual needs will be unmet. 
the same considerations apply to individual decisions. 
by spending more money, you can buy a bigger and fancier house. 
most people would prefer the more expensive house, all else being equal. 
but given finite resources, at some point spending more on a house becomes a poor allocation of them. 
copyright does not directly spend public funds, but it does impose a cost—a loss of freedom—on every citizen. 
the wider the scope of copyright, the more freedom we pay. 
we might prefer to exercise some of our freedoms rather than trade them away. 
we must judge any decision in copyright policy by comparing the benefits with the costs. 
"incentive" is the wrong concept. 
the idea of providing a monetary incentive for making music is based on a misunderstanding. 
musicians hope primarily for other kinds of reward; they must. 
very few musicians get rich from their music; a talented person whose primary goal is wealth would seek it in other ways. 
in fact, psychological studies show that the desire for an extrinsic reward (such as profit) generally hampers creative activities such as writing music. 
the people who can do them well are usually those who do them mostly for their own sake. 
this is not to say that musicians don't care about being paid. 
most hope to make a living from music so they will be free to devote their time to it. 
as long as they earn enough to live, they will make music as best they can. 
we might wish them to earn somewhat more than just enough, so they can live as well as most americans. 
but to offer them wealth beyond this gains the public little—it is a matter of diminishing returns. 
with this understanding, let's consider how a tax on dat tape could be designed to serve the intended purpose of copyright. 
who should get the funds. 
if the purpose of the dat tax is to better reward musicians and composers, then all the money collected should go to them—not just 43 percent. 
the musicians and composers are the ones who truly create the music. 
in principle, we could do without record companies entirely. 
record companies do provide a useful service: they distribute prerecorded copies of music, usually of high quality. 
this service is widely used, and will probably remain so. 
and it is right that the purchasers of prerecorded copies should pay for this service. 
but listeners making copies for themselves or their friends do not consume this service; they use only the work of the musicians and composers. 
the record companies contribute only incidentally and their role is not essential. 
dividing the funds. 
what share of the tax revenues should each musician or composer get? 
the record company proposal would divide the money in proportion to record sales. 
it makes sense to distribute the funds based on how much that musician's work is copied, more or less. 
but strict proportionality is not the best apportionment. 
if each musician gets a share in strict proportion to the amount of copying of his or her music, then a large share will go to make a few superstars even richer than they are now. 
this won't do much to promote musical culture or diversity. 
we can promote music more effectively by making any one musician's share of the tax revenues taper off as copies increase. 
for example, we could calculate an "adjusted number of copies" which, beyond a certain point, increases more slowly than the actual number. 
the effect of tapering off will be to spread the money more widely, supporting more musicians at an adequate standard of living. 
this encourages diversity, which is what copyright is supposed to do. 
the us government has already established a program to fund diversity in the arts: the nea. 
however, nea grants involve discretionary power, which makes them a center for controversy, sometimes because a few members of the public strongly dislike the work, and sometimes because hardly anyone particularly likes it. 
spreading out dat tax revenues will also have the effect of supporting less popular musicians. 
however, it will not support musicians whose work nobody likes. 
in addition, since it involves no discretion, no arbitrary decisions, there is little room for objection on account of any particular case. 
[i was later asked an interesting question: what organization would "manage" the distribution of these funds. 
since this is tax money, a government agency should collect the tax and distribute the funds. 
private organizations should not be involved.] encouraging home copying. 
the record company proposal includes a requirement to make it difficult for home listeners to make copies. 
specifically, it requires that consumer dat machines refuse to copy a copy that was made on a consumer dat machine. 
the argument for this requirement is based on the assumption that home copying is somehow unfair. 
in the past, many people have considered it unfair, because it reduced the income of musicians. 
the dat tax makes this reason obsolete. 
once home copying does contribute to the income of musicians, through the dat tax, the reason to discourage home copying disappears. 
therefore, if a dat tax is adopted, the ability to copy dat tapes should not be restricted. 
home copying is more efficient than record companies and record stores; music lovers should be encouraged to use home copying as much as possible. 
measuring the use of each piece of music. 
today, nearly all the recorded music in the united states is purchased in record stores; home copying is but a small fraction. 
this will probably remain true for a long time, because record stores offer a place where a person can go to find a particular piece or to browse a wide selection. 
while this remains true, we can usually estimate the audience of a given piece fairly well by counting record sales. 
eventually, home copying may become so widespread that estimating its extent from sales figures may be unsatisfactory. 
this is already unsatisfactory for musicians who distribute independently without the help of record companies; and if any musicians need additional support, these are the ones. 
we need another way to estimate usage of any given piece, in order to distribute the tax funds. 
we can make these estimates by survey. 
from time to time, survey staff would ask randomly chosen members of the public to show what copies they have made of copyrighted music. 
the citizens asked would not be required to answer. 
but no penalty and no guilt would attach to having made copies, so most people will be glad to participate. 
fans will hope to be chosen so that they can contribute to the count for their favorite musical groups. 
to make the survey more efficient and broader-based (and thus more accurate), it could be automated. 
the survey bureau could mail read-write memory cards to the chosen participants, who would connect them momentarily to their dat units and then mail them back. 
with proper design, the survey bureau would have no way of knowing who had sent in any particular card, and thus no information about who had copied what, but they would still have an accurate total. 
conclusion. 
the record companies have proposed an excellent scheme for taxing the public to increase their own income, but this isn't a legitimate purpose of copyright. 
through due attention to the ends of copyright rather than past means, we can design a system which supports musicians while giving citizens full freedom to copy music as they wish. 
what you can do. 
[this section is no longer applicable today; it is too late, because the dat tax bill was adopted in 1992—and dat recorders are obsolete nowadays. 
however, the same method can support musicians and other artists in a world where sharing copies on the internet has been legalized.] record company lobbyists are working hard to pass their form of dat tax. 
there is little organized opposition, and little public debate. 
their bill has already been sent out of committee in the senate. 
this article proposes an alternative to the record company plan. 
in order for this alternative, or any alternative, to have a chance, we must first prevent the hasty adoption of the record company plan. 
to help accomplish this, please write letters to: congressman barney frank 437 cherry st west newton, ma 02165 senator metzenbaum united states senate washington, dc 20510 house subcommittee on intellectual property house of representatives washington, dc 20515 urge congress to reject the record company bill so that this and other alternatives can be properly considered. 
it takes just a few minutes to write a short letter, but in combination with other people's letters it can do a great deal of good. 
if you know any musicians, composers, or songwriters, give them copies of this article. 
many musicians prefer this alternative to the record company tax plan, and they are strongly motivated to act on their concern. 
why the devil's advocate doesn't help reach the truth. 
playing the devil's advocate means challenging a position by saying what a hypothetical adversary would say. 
i encounter this frequently in interviews and q&a sessions, and many people believe that this is a good way to put a controversial position to the test. 
what it really does is put the controversial position at a disadvantage. 
there is an indirect way of playing the devil's advocate: to say, "if i defended your position, how should i respond if someone said xyz?"
 this is less unfriendly than the ordinary devil's advocate, who would simply say xyz, but has the same effect. 
cunning adversaries try intentionally to obstruct thoughtful consideration of a position they oppose. 
my cunning and unscrupulous adversary (the "devil," let us say) would not want my views to get a proper hearing, especially if the devil thinks they are valid and people might agree with them. 
the best way to prevent that is to block me from making them understood. 
the devil achieves that by twisting my words: presenting a misleading context in which my words appear to mean something other than what i intended. 
if this succeeds, it will confuse the audience and distract them from the issue, in effect preventing it from being properly raised. 
if this makes my words appear to mean something that the audience will condemn, and which nobody present is really in favor of, i may need a long explanation to get back on track. 
there may not be time for this, or the audience might lose focus. 
if i succeed in overcoming the first misunderstanding, the cunning adversary would spring another, and another. 
if the adversary is better at verbal fencing than i am, i might never get my point across. 
if the stress makes me heated and i have trouble speaking clearly, the adversary will count that a success. 
it matters little to the devil whether it is my position that is vanquished or only me personally, as long as the audience rejects my views. 
if you are not a real "devil," only playing the devil's advocate, you would not really wish to prevent me from presenting the intended point. 
but you may prevent it without intending to. 
playing the devil's advocate means you act hostile even though you don't feel hostility. 
once you decide to say what an adversary would say, you are likely to do the job as well as you can, by imitating the toughest adversary you can imagine: the cunning and unscrupulous one, whose goal is to oppose rather than to get at the truth. 
if you know what such adversaries have said to me, or if you are skilled at imagining them, you would say the same things they do. 
these statements could distract the audience and block consideration of the issue, just as if a real adversary had said them. 
but if you are not really my adversary, that result may not be what you really want. 
if your goal was to shed light on the issue, your approach will have backfired. 
what i say on many issues goes against the establishment position, and i don't expect people to agree with me without considering the issue thoroughly, including the counterarguments. 
indeed, it would be almost impossible for anyone to avoid considering the establishment's arguments, since everyone knows them by heart. 
to judge what is right requires getting to the bottom of the issue. 
the kind of questions that help get to the bottom of an issue are not those that a cunning and unscrupulous adversary would pose, but rather those of a thoughtful person who has not made up per mind (1). 
they are questions that prise apart the aspects of the issue, so one can see the various possible positions on each aspect, what they imply, and how they relate. 
very different from playing devil's advocate. 
thus, instead of trying to play the devil's advocate, i suggest that you adopt the goal of "probing the issues."
 and if you are asked how you would answer if someone else asked a hostile question, perhaps this essay is a good response. 
footnote. 
the author uses the gender-neutral third person singular pronouns "person," "per," and "pers."
is digital inclusion a good thing? 
how can we make sure it is?. 
richard stallman introduction. 
digital information and communication technology offers the possibility of a new world of freedom. 
it also offers possibilities of surveillance and control which dictatorships of the past could only struggle to establish. 
the battle to decide between these possibilities is being fought now. 
activities directed at "including" more people in the use of digital technology are predicated on the assumption that such inclusion is invariably a good thing. 
it appears so, when judged solely by immediate practical convenience. 
however, if we judge also in terms of human rights, the question of whether digital inclusion is good or bad depends on what kind of digital world we are to be included in. 
if we wish to work towards digital inclusion as a goal, it behooves us to make sure it is the good kind. 
the digital world today faces six major threats to users' freedom: surveillance, censorship, proprietary software, restricted formats, software as a service, and copyright enforcement. 
a program to promote "digital inclusion" must take account of these threats, so as to avoid exposing its intended beneficiaries to them. 
first we look at the nature of these threats; then we propose measures to resist them, collectively and individually. 
surveillance. 
digital surveillance systems are spreading. 
the uk uses computers with cameras to track all car travel. 
china plans to identify and photograph everyone that uses an internet cafe.1 cell phones are big brother's tools. 
some can be activated by remote command to listen to the user's conversations without giving any sign of listening, by the police2 and by unauthorized individuals.3 users are unable to stop this because the software in the phone is not free/libre, thus not under the users' control. 
cell phones also localize the user, even when set to "idle."
 the phone network needs to know roughly where the phone is located in order to communicate with it, and can easily record that information permanently. 
however, networks are designed to locate phones far more accurately by triangulation. 
they can do it even better with gps in the phone, with or without the user's consent. 
in many countries, universal digital surveillance does not record what you say, only who you talk with. 
but that is enough to be quite dangerous, since it allows the police to follow social networks. 
if a known dissident talks with you by phone or email, you are a candidate for labeling as a dissident. 
it is no use ceasing to communicate by phone or email with fellow dissidents when a dictator takes power, because his secret police will have access to records of your past communications. 
the european union mandates keeping records of all phone calls and email for periods up to two years. 
the stated purpose of this surveillance is to "prevent terrorism."
 bush's illegal surveillance of phone calls also cited this purpose. 
non-state-sponsored terrorism is a real danger in a few countries, but the magnitude is often exaggerated; more people died in the us in september 2001 from car accidents than from terrorism, but we have no global war on accidents. 
by contrast, the practice of labeling political opposition as "terrorists," and using supposed "anti-terror" laws to infiltrate and sabotage their activities, threatens democracy everywhere. 
for instance, the us joint terrorism task force infiltrated a wide range of political opposition groups.4 false accusations of "terrorism" are standard practice for suppressing political opposition. 
in the us, protesters who smashed windows at the 2008 republican national convention were charged with "terrorism."
5 more recently, iran described protesters demanding a new election as "terrorists."
6 the generals who ruled most of south america in the 1970s offered precisely that justification for their systematic murder of dissidents.7 a free society does not guarantee anonymity in what you do outside your home: it is always possible that someone will notice where you went on the street, or that a merchant will remember what you bought. 
this information is dispersed, not assembled for ready use. 
a detective can track down the people who noticed you and ask them for it; each person may or may not say what he knows about you. 
the effort required for this limits how often it is done. 
by contrast, systematic digital surveillance collects all the information about everyone for convenient use for whatever purpose, whether it be marketing, infiltration, or arrest of dissidents. 
because this endangers the people's control over the state, we must fight against surveillance whether or not we oppose current government policies. 
given the surveillance and tracking which cell phones do, i have concluded it is my duty to refuse to have one, despite the convenience it would offer. 
i have few secrets about my own travels, most of which are for publicly announced speeches, but we need to fight surveillance even if it is established while we have no particular secrets to keep. 
the uk car travel surveillance system has already been used against political dissidents.8 censorship. 
when the topic of internet censorship is mentioned, people are likely to think of china, but many supposedly freedom-respecting countries have imposed censorship. 
denmark's government has blocked access to a secret list of web pages. 
australia's government wants to do likewise, but has met strong resistance, so instead it has forbidden links to a long list of urls. 
electronic frontiers australia was forced, under threat of fines of aud 11,000 per day, to remove a link to an anti-abortion political web site.9 denmark's secret list of forbidden urls was leaked and posted on wikileaks; that page is now on australia's banned list.10 germany is on the verge of launching internet censorship.11 censorship of the contents of web sites is also a threat. 
india just announced a broad plan of censorship that would effectively abolish freedom of the press on the internet.12 some european countries censor particular political views on the internet. 
in the united states, people have been imprisoned as "terrorists" for running a web site which discussed actions taken against experiments on animals.13 another common excuse for censorship is the claim that "obscene" works are dangerous. 
i agree that some works are obscene; for instance, the gruesome violence in the movie pulp fiction revolted me, and i will try never to see such a thing again. 
but that does not justify censoring it; no matter how obscene a work may be, censorship is more so. 
a variant of this excuse is "protecting children," which plays to the exaggerated and mostly misplaced fears of parents.14 censorship is nothing new. 
what is new is the ease and effectiveness of censorship on electronic communication and publication (even where a few wizards have ways to bypass it). 
china in 1960 achieved effective censorship by cutting its population off from the world, but that held back the country's development, which was painful for the regime as well as for the population. 
today china uses digital technology to achieve effective political censorship without cutting itself off in other ways.15 software you can't control. 
in order for computer users to have freedom in their own computing activities, they must have control over the software they use. 
this means it must be free software, which i here call "free/libre" so as to emphasize that this is a matter of freedom, not price. 
a program is free/libre if it gives the user these four essential freedoms:16 0. freedom to run the program as you wish. 
1. freedom to study the source code, and change it to make the program do what you wish. 
2. freedom to redistribute and/or republish exact copies. 
(this is the freedom to help your neighbor.) 3. freedom to distribute and/or publish copies of your modified versions. 
(this is the freedom to contribute to your community.) when software is free/libre, the users control what it does. 
a nonfree or proprietary program is under the control of its developer, and functions as an instrument to give the developer control over the users. 
it may be convenient, or it may not, but in either case it imposes on its users a social system that keeps them divided and helpless. 
avoiding this injustice and giving users control over their computing requires the four freedoms. 
freedoms 0 and 1 give you control over your own computing, and freedom 3 enables users to work together to jointly control their computing, while freedom 2 means users are not kept divided.17 many argue that free/libre software is impossible on theoretical economic grounds. 
some of them misinterpret free/libre software as "gratis software"; others understand the term correctly, but either way they claim that businesses will never want to develop such software. 
combining this with a theoretical premise such as "useful software can only be developed by paying programmers," they conclude that free software could never exist. 
this argument is typically presented elliptically in the form of a question such as, "how can programmers make a living if software is free?"
 both premises, as well as the conclusion, contradict well-known facts; perhaps the elliptical questions are meant to obscure the premises so people will not compare them with the facts. 
we know that free software can be developed because so much of it exists. 
there are thousands of useful free programs,18 and millions of users19 run the gnu/linux20 operating system. 
thousands of programmers write useful free software as volunteers.21 companies such as red hat, ibm, oracle, and google pay programmers to write free software. 
i do not know even approximately how many paid free software developers there are; studying the question would be useful. 
alexandre zapolsky of the free software business event paris capitale du libre (www.paris-libre.org) said in 2007 that the free software companies of france had over 10,000 employees. 
most computer users use proprietary software, and are accustomed to letting a few companies control their computing. 
if you are one of them, you may have accepted the view that it is normal and proper for those companies, rather than you, to have control. 
you may also believe that "reputable" developers will not use their power to mistreat you. 
the fact is that they do. 
microsoft windows has features to spy on the user,22 digital restrictions management (drm) features designed to stop the user from making full use of his own files,23 and an all-purpose back door with which microsoft can forcibly change the software in any way at any time.24 microsoft can alter any software, not just its own.25 cell phones tied to particular phone networks may give the network a similar back door. 
macos also has drm features designed to restrict the user. 
the only known defense against malicious features is to insist on software that is controlled by the users: free/libre software. 
it is not a perfect guarantee, but the alternative is no defense at all. 
if code is law, those governed by it must have the power to decide what it should say. 
restricted formats. 
restricted file formats impose private control over communication and publication. 
those who control the formats control, in a general sense, society's use of information, since it can't be distributed or read/viewed without their permission. 
for instance, text files are often distributed in the secret microsoft word format, which other developers have only imperfectly been able to decode and implement. 
this practice is comparable to publishing books in a secret alphabet which only officially approved scribes know how to read. 
italian public television (rai) distributes video in vc-1 format, whose specifications are available only under nondisclosure agreement from the society of motion picture and television engineers. 
(as of 2016 rai seems to have shifted to a non-secret format.) ironically, the smpte states this in a word file, which is not suitable to cite as a reference.26 this standard has been partly decoded through reverse engineering. 
most music distribution on the internet uses the patented mp3 format42, and most video uses patented mpeg-4 formats such as divx and h.264. 
vc-1 is also patented.27 any software patent directly attacks every user's freedom to use her computer. 
use of patented data formats is comparable to mandating that people use officially approved scribes rather than do their own reading and writing. 
patents on mpeg formats have been used to attack and threaten developers and distributors of programs that can handle these formats, including free/libre programs. 
some distributors of the gnu/linux system, for instance red hat, do not dare to include support for these programs. 
a restricted format is a trap; any and all use of the format has the effect of pushing computer users into the trap. 
inclusion in dependence on these formats is not a step forward. 
software as a service. 
typical proprietary software gives you only a binary, whose actions are controlled by the developer, and not by you. 
a new practice called "software as a service," or "saas," gives you even less control. 
with saas you don't even get a copy of the program you can run. 
instead, you send your data to a server, a program runs there, and the server sends you back the result. 
if users have a binary, they could reverse-engineer it and patch it if they are really determined. 
with saas, they can't even do that. 
reverse engineering being so difficult, perhaps software as a service is little worse than proprietary software. 
the point, however, is that it is no better. 
for users to have control of their computing, they must avoid saas just as they must avoid proprietary software. 
for the preparation of this paper i was invited to use an ieee site called pdf-express.org to convert my pdf file into one with the embedded fonts required for the conference proceedings. 
looking at that site, i concluded that it was an instance of software as a service, and therefore i should not use it. 
another strike against it is that it requires users to identify themselves, which is gratuitous surveillance. 
it's not that i'm specifically worried that this site is malicious. 
i cannot trust the ieee implicitly, since i disapprove of its restrictions on redistributing the papers it publishes, but there is little scope in that particular site's job for intentional mistreatment of its users (aside from the gratuitous surveillance). 
however, the point is not whether this particular site abuses its power. 
the point is that we should not let ourselves become accustomed to granting others that sort of power over us. 
the habit of handing over control of our computing to others is a dangerous one. 
the way to resist the practice is to refuse invitations to follow it. 
the only way to maintain your control over your computing is to do it using your own copy of a free/libre program. 
copyright and sharing. 
the biggest conflict over freedom in the internet is the war on sharing: the attempt by the publishing industry to prevent internet users from enjoying the capability to copy and share information. 
copyright was established in the age of the printing press as an industrial regulation on the business of writing and publishing. 
the aim was to encourage the publication of a diversity of written works. 
the means used was to require publishers to get the author's permission to publish recent writings. 
this enabled authors to get income from publishers, which facilitated and encouraged writing. 
the general reading public received the benefit of this, while losing little: copyright restricted only publication, not the things an ordinary reader could do, so it was easy to enforce and met with little opposition. 
that made copyright arguably a beneficial system for the public, and therefore legitimate. 
well and good—back then. 
the war on sharing. 
nowadays, computers and networks provide superior means for distributing and manipulating information, including published software, musical recordings, texts, images, and videos. 
networks offer the possibility of unlimited access to all sorts of data—an information utopia. 
the works that people use to do practical jobs, such as software, recipes, text fonts, educational works and reference works, must be free/libre so that the users can control (individually and collectively) the jobs that they do with these works. 
that argument does not apply to other kinds of works, such as those which state what certain people thought, and artistic works, so it is not ethically obligatory for them to be free/libre. 
but there is a minimum freedom that the public must have for all published works: the freedom to share exact copies noncommercially. 
sharing is good; sharing creates the bonds of society. 
when copying and sharing a book was so difficult that one would hardly ask such a large favor, the issue of freedom to share was moot. 
today, the internet makes sharing easy, and thus makes the freedom to share essential. 
one obstacle stands in the way of this utopia: copyright. 
readers and listeners who make use of their new ability to copy and share published information are technically copyright infringers. 
the same law which formerly acted as a beneficial industrial regulation on publishers has now become a restriction on the public it was meant to benefit. 
in a democracy, a law that prohibits a popular and useful activity is usually soon relaxed. 
not so where corporations have more political power than the public. 
the entertainment companies' lobby is determined to prevent the public from taking advantage of the power of their computers, and has found copyright a suitable tool. 
under their influence, rather than relaxing copyright rules to permit productive and free use of the internet, governments have made it stricter than ever, forbidding the act of sharing. 
the publishers and their friendly governments would like to go to any length they can get away with to wage the war on sharing. 
in the us, the record companies' legal arm (the riaa) regularly sues teenagers for hundreds of thousands of dollars, and one sharer was fined almost two million.28 the french government recently passed a law (hadopi) to abolish the principle of due process of law, by punishing internet users with disconnection on the mere accusation of copying. 
only certain selected, government-approved organizations were empowered to make such accusations; thus, this law meant to abolish libert&eacute;, egalit&eacute;, and fraternit&eacute; with one blow. 
the law was rejected as unconstitutional by the constitutional council.29 (it was subsequently changed, introducing a sham trial, to make it acceptable.) a similar law in new zealand was withdrawn this year after public protests. 
the european parliament recently voted against imposing similar injustice on the whole european union, but the eu's weak form of democracy does not give parliament the final decision. 
some would like to go even further: a uk member of parliament proposed ten years' imprisonment for noncommercial sharing. 
the us, canada, the european union, and various other countries are engaged in negotiating the "anti-counterfeiting trade agreement."
 the negotiations are secret, but canada reluctantly published a list of suggestions it received from private parties, and hadopi-style punishment without trial was one of them.30 the suggestion is likely to have come from the copyright lobby, which has great influence in the us government and others, so the danger is not negligible. 
european officials may seek to use this treaty to circumvent the european parliament, following a practice known as "policy laundering."
 the corporations that profit most from copyright legally exercise it in the name of the authors (most of whom actually gain little). 
they would have us believe that copyright is a natural right of authors, and that we the public must suffer it no matter how painful it is. 
they call sharing "piracy," equating helping your neighbor with attacking a ship. 
public anger over these measures is growing, but it is held back by propaganda. 
terms such as "piracy,"31 "protecting authors" and "intellectual property,"32 and claims that reading, viewing or listening to anything without paying is "theft," have convinced many readers that their rights and interests do not count. 
this propaganda implicitly assumes that publishers deserve the special power which they exercise in the name of the authors, and that we are morally obliged to suffer whatever measures might be needed to maintain their power. 
digital restrictions management. 
the publishers aim to do more than punish sharing. 
they have realized that by publishing works in encrypted formats, which can be viewed only with software designed to control the users, they could gain unprecedented power over all use of these works. 
they could compel people to pay, and also to identify themselves, every time they wish to read a book, listen to a song, or watch a video. 
they could make people's copies disappear on a planned schedule. 
they could even make copies unreadable at will, if they have all-purpose back-doors such as found in windows, or special features for the purpose.33 designing products and media to restrict the user is called digital restrictions management, or drm.34 its purpose is an injustice: to deny computer users what would otherwise be their legal rights in using their copies of published works. 
its method is a second injustice, since it imposes the use of proprietary software. 
the publishers gained us government support for their dream of total power with the digital millennium copyright act of 1998 (dmca). 
this law gave publishers power, in effect, to write their own copyright rules, by implementing them in the code of the authorized player software. 
even reading or listening is illegal when the software is designed to block it. 
the dmca has an exception: it does not forbid uses that qualify as "fair use."
 but it strips this exception of practical effect by censoring any software that people could use to do these things. 
under the dmca, any program that could be used to break digital handcuffs is banned unless it has other comparably important "commercially significant" uses. 
(the denial of validity to any other kind of significance, such as social or ethical significance, explicitly endorses business' domination of society.) practically speaking, the limited right to disobey your software jailer is meaningless since the means to do so is not available. 
similar software censorship laws have since been adopted in the european union, australia, and new zealand, and other countries. 
canada has tried to do this for several years, but opposition there has blocked it. 
the publishers' lobbies seek to impose these restrictions on all countries; for instance, the us demands them in trade treaties. 
wipo (the world "intellectual property" organization) helps, by promoting two treaties whose sole point is to require laws such as these. 
signing these treaties does no good for a country's citizens, and there is no good reason why any country should sign them. 
but when countries do sign, politicians can cite "compliance with treaty obligations" as an excuse for software censorship. 
we still have the same old freedoms in using paper books and other analog media. 
but if e-books replace printed books, those freedoms will not transfer. 
imagine: no more used book stores; no more lending a book to your friend; no more borrowing one from the public library—no more "leaks" that might give someone a chance to read without paying. 
no more purchasing a book anonymously with cash—you can only buy an e-book with a credit card, thus enabling computerized surveillance—and public libraries become retail outlets. 
that is the world the publishers want for us. 
if you buy the amazon kindle (we call it the swindle) or the sony reader (we call it the shreader for what it threatens to do to books), you pay to establish that world. 
supporting the arts. 
the publishers tell us that a war on sharing is the only way to keep art alive. 
supporting the arts is a desirable goal, but it could not justify these means. 
fortunately, it does not require them either. 
public sharing of copies tends to call attention to obscure or niche works: when monty python put its video files on the net for download, its sales increased by a factor of over 200.35 meanwhile, digital technology also offers new ways to support the arts. 
donations. 
the singer jane siberry offers her music for download through her own web site, called janesiberry.com in 2010, allowing people to pay whatever amount they wish. 
the average price paid per song was earlier reported to be more than the $.99 that the major record companies charge.36 bestsellers also can still do well without stopping people from sharing. 
stephen king got hundreds of thousands of dollars selling a serialized unencrypted e-book with no technical obstacle to sharing of copies. 
radiohead made millions in 2007 by inviting fans to copy an album and pay what they wished, while it was also shared on the internet. 
in 2008, nine inch nails released an album with permission to share copies and made 750,000 dollars in a few days.37 even hampered by today's inconvenient methods of sending money to artists, voluntary contributions from fans can support them. 
kevin kelly, former editor of wired magazine, estimates the artist need only find approximately 1,000 true fans in order to earn a living from their support.38 but when computer networks provide an easy anonymous method for sending someone a small amount of money, without requiring a credit card, voluntary support for artists will become far more effective. 
every player could have a button you can press, "click here to send the artists one dollar."
 (the optimal amount may vary between countries; in india, one rupee might be a better choice.) wouldn't you press it, at least once a week? 
why, today, would you hesitate to send one dollar to an artist, once a week or even once a day? 
not because you would miss the dollar, but because of the inconvenience of sending it. 
remove the inconvenience, and voluntary support for artists will soar. 
tax-based support. 
another way to support the arts is with tax funds: perhaps with a special tax on blank media or internet connectivity, or with general revenue.39 if this is to succeed in supporting artists, the state should distribute the tax money directly and entirely to them, and make sure it cannot under any pretext be taken from them by publishers such as record companies. 
thus, in order to design this tax system to achieve the valid goal of "supporting the arts," we must first reject the misguided goal of "compensating the rights-holders."
 the state should not distribute this tax money in linear proportion to popularity, because that would give most of it to superstars, leaving little to support all the other artists. 
i therefore recommend using a function whose derivative is positive but tends towards zero, such as cube root. 
with cube root, if superstar a has 1000 times the popularity of successful artist b, a will get 10 times as much money as b. (a linear system would give a 1000 times as much as b.) this way, although each superstar still gets a larger share than other artists, the superstars together will get only a small fraction of the funds, so that the system can adequately support a large number of fairly popular artists. 
this system would use its funds efficiently for the support of art. 
i propose this system for art because art is where the controversy is. 
there is no fundamental reason why a tax-based system should not also be used to support functional works that ought to be free/libre, such as software and encyclopedias, but there is a practical difficulty in doing so: it is common for those works to have thousands of coauthors, and figuring out the right way to divide the funds among them might be difficult even with the cooperation and generosity of everyone involved. 
fortunately it appears not to be necessary to solve this problem, because people already put so much effort into developing free/libre functional works. 
francis muguet40 and i have developed a new proposal called the m&#233;c&#233;nat global (or global patronage) which combines the idea of tax-support and voluntary payments.41 every internet subscriber would pay a monthly fee to support certain arts that are shared on the internet. 
each user could optionally divide up to a certain maximum portion of her fee among her choice of works; the funds for each work would be divided among the creative contributors to the work (but not the publishers). 
the totals thus assigned to various artists would also provide a measure of each artist's popularity. 
the system would then distribute the rest of the money on the basis of that popularity, using a cube-root or similar tapering-off function. 
making digital inclusion good. 
the paper so far describes the factors that can make digital inclusion good or bad. 
these factors are part of human society and subject to our influence. 
beyond just asking whether and when digital inclusion is a good thing, we can consider how to make sure it is good. 
defending freedom legally. 
full victory over the threats to digital freedom can only be achieved through changes in laws. 
systematic collection or retention of information on any person using computers and/or networks should require a specific court order; travel and communication within any country should normally be anonymous. 
states should reject censorship and adopt constitutional protections against it. 
states should protect their computing sovereignty by using only free software, and schools should teach only free software in order to carry out their mission to educate good citizens of a strong, free and cooperating society. 
to respect computer users' freedom to operate their computers, states should not allow patents to apply to software or (more generally) using computers in particular ways. 
states should mandate their own use of freely implementable, publicly documented formats for all communication with the public, and should lead the private sector also to use only these formats. 
to make copyright acceptable in the network age, noncommercial copying and sharing of published works should be legal. 
commercial use of drm should be prohibited, and independently developed free software to access drm formats should be lawful. 
to make these changes in laws happen, we need to organize. 
the electronic frontier foundation (eff.org) campaigns against censorship and surveillance. 
end software patents (endsoftpatents.org) campaigns against software patents. 
the free software foundation campaigns against drm through the site defectivebydesign.org. 
defending freedom personally. 
while we fight these legislative battles, we should also personally reject products and services designed to take away our freedom. 
to resist surveillance, we should avoid identifying ourselves to web sites unless it is inherently necessary, and we should buy things anonymously—with cash, not with bank cards. 
to maintain control of our computing, we should not use proprietary software or software as a service. 
above all, we should never buy or use products that implement drm handcuffs unless we personally have the means to break them. 
products with drm are a trap; don't take the bait! 
defending others' freedom. 
we can take direct action to protect others' freedom in the digital world. 
for instance, we can remove the passwords from our wireless networks—it is safe, and it weakens government surveillance power. 
(the way to protect the privacy of our own internet communications, to the extent that it is possible, is with end-to-end encryption.) if others use enough of the bandwidth to cause actual inconvenience, we need to protect ourselves, but we can try gentle methods first (such as talking with the neighbors, or setting a password occasionally for a day or two), and keep the option of a permanent password as a last resort. 
when we publish, we should grant the users of our work the freedoms they deserve, by applying an explicit license appropriate to the type of work. 
for works that state your thoughts or observations, and artistic works, the license should permit at least noncommercial redistribution of exact copies; any creative commons license is suitable. 
(i insisted on such a license for this article.) works that do functional jobs, such as software, reference works and educational works, should carry a free/libre license that grants users the four freedoms. 
inclusion in freedom. 
in our efforts to help others in practical ways, we must avoid doing them harm at a deeper level. 
until freedom is generally assured in internet use, projects for digital inclusion must take special care that the computing they promote is the freedom-respecting kind. 
this means using free/libre software—certainly not windows or macos. 
this means using free, documented formats, without drm. 
it also means not exposing the supposed beneficiaries to surveillance or censorship through the computing practices to which they are being introduced. 
footnotes. 
… cafe.1 see cecc.gov/publications/commission-analysis/beijing-requires-photo-registration-at-all-internet-cafes-by. 
… police2 see schneier.com/blog/archives/2006/12/remotely_eavesd_1.html. 
… individuals.3 see newarkspeaks.com/forum/showthread.php?t=5379 . … groups4 see aclu.org/fbi-jttf-spying. 
… "terrorism."
5 see democracynow.org/2008/9/4/eight_members_of_rnc_activist_group. 
… "terrorists."
6 see abcnews.go.com/international/story?id=7891929 (archived). 
… dissidents.7 see the documentary, condor: the first war on terror, by rodrigo v&aacute;squez (2003). 
… dissidents.8 see bbc.com/news/2/hi/programmes/whos_watching_you/8064333.stm. 
… site.9 see computerworld.com.au/article/302161/watchdog_threatens_online_rights_group_11k_fine (archived). 
… list.10 see smh.com.au/technology/banned-hyperlinks-could-cost-you-11-000-a-day-20090317-gdtf8j.html. 
… censorship.11 see netzpolitik.org/2009/the-dawning-of-internet-censorship-in-germany/. 
… internet.12 see timesofindia.indiatimes.com/india/govt-gearing-up-to-gag-news-websites/articleshow/4562292.cms. 
… animals.13 i support medical research using animals, as well as abortion rights. 
our defense of political freedom should not be limited to causes we agree with. 
… parents.14 see mcclatchydc.com/news/politics-government/article24476581.html. 
… ways.15 see networkworld.com/article/2255678/20-years-after-tiananmen--china-containing-dissent-online.html. 
… freedoms:16 see gnu.org/philosophy/free-sw.html. 
… divided.17 see gnu.org/philosophy/why-free.html and gnu.org/philosophy/shouldbefree.html for other arguments. 
… programs,18 see directory.fsf.org/wiki/main_page. 
… users19 see wikipedia.org/wiki/linux_adoption. 
… gnu/linux20 see gnu.org/gnu/gnu-linux-faq.html. 
… volunteers.21 see gnu.org/philosophy/fs-motives.html for some of their motives. 
… user,22 see theregister.com/2015/08/21/spotify_worse_than_the_nsa. 
… files,23 see badvista.fsf.org/. 
… time.24 see informationweek.com/government/microsoft-updates-windows-without-user-permission-apologizes. 
… own.25 see voices.washingtonpost.com/securityfix/2009/05/microsoft_update_quietly_insta.html. 
… reference.26 the standard in machine-readable form is only available to be "leased"; smpte.org/sites/default/files/individuallicenseagreementforsmpte_engineeringdocuments.pdf (archived). 
… patented.27 see mpegla.com/lists/mpeg%20la%20news%20list/attachments/176/n_06-08-17_pr.pdf (archived). 
… million.28 see arstechnica.com/tech-policy/2009/06/jammie-thomas-retrial-verdict/. 
… council.29 see laquadrature.net/en/2009/06/10/hadopi-is-dead-three-strikes-killed-by-highest-court/. 
… them.30 see arstechnica.com/tech-policy/2008/11/canadian-wish-list-for-secret-acta-treaty-long-varied/. 
… "piracy,"31 see gnu.org/philosophy/words-to-avoid.html. 
… property,"32 see gnu.org/philosophy/not-ipr.html for why this propaganda term is harmful. 
… purpose.33 see www.cl.cam.ac.uk/~rja14/tcpa-faq.html. 
… drm.34 those publishers, in an act of doublespeak, call it "digital rights management."
 … 200.35 see boingboing.net/2009/01/23/monty-pythons-free-w.html. 
… charge.36 see signalvnoise.com/posts/419-jane-siberrys-you-decide-what-feels-right-pricing. 
… days.37 see boingboing.net/2008/03/05/nine-inch-nails-made.html. 
… support.38 see kk.org/thetechnium/1000-true-fans/. 
… revenue.39 see gnu.org/philosophy/dat.html for my 1992 proposal. 
… muguet40 head of the knowledge networks and information society lab at the university of geneva. 
… payments.41 see stallman.org/mecenat/global-patronage.html. 
… mp342 as of 2017 the patents on playing mp3 files have reportedly expired. 
this essay was first published in the proceedings of the itu's 2009 kaleidoscope conference in mar del plata, argentina. 
patent reform now! 
mail uspto before 12 april 2001!. 
href="mailto:dmarti@ssc.com">dmarti@ssc.com> [this page remains here for historical interest; we will post the results of this campaign when we hear who has been put on the committee.] 3 april 2001 only six working days remain until the deadline arrives to submit nominations for the us patent and trademark office's patent public advisory committee. 
if you or someone you know has some helpful advice for uspto and is a us citizen willing to serve, please submit a nomination. 
a letter and the person's resume is all you need to send. 
it doesn't take long, and you can do it by e-mail. 
richard m. stallman, inventor of notable software innovations including the emacs editor and the software distribution model "copyleft," is our choice for the committee. 
stallman has shown reasoned opposition not only to the current trends of patenting other people's work and trivial new developments, but also to the patentability of mathematical algorithms and business methods. 
"a serious bio" from his web site is the resume he offers; it summarizes his achievements. 
if you a fan of other patent reform advocates, you might consider nominating one of them instead of, or in addition to, rms. 
lawrence lessig, eben moglen and tim o'reilly might all make good committee members. 
nominate your favorite. 
or if you're ready to help uspto fix its broken system, get someone to nominate you. 
last year, acting secretary of commerce robert l. mallett appointed an initial complement of nine to the committee: six lawyers, two patent-holding inventors and two professors. 
(one of the professors is a professor of law, so it adds up to nine, if you're counting.) none are patent reform advocates. 
here is the original notice from the federal register (converted from the original pdf file on the uspto site.) mail <ppacnomination@uspto.gov> today. 
department of commerce united states patent and trademark office [docket no. 
000317075103502] rin 0651 xx22 public advisory committees agency: united states patent and trademark office, commerce. 
action: notice and request for nominations. 
summary on november 29, 1999, the president signed into law the patent and trademark office efficiency act (the "act"), pub. 
l. 106113, appendix i, title iv, subtitle g, 113 stat. 
1501a 572, which, among other things, established two public advisory committees to review the policies, goals, performance, budget and user fees of the united states patent and trademark office (uspto) with respect to patents, in the case of the patent public advisory committee, and with respect to trademarks, in the case of the trademark public advisory committee, and to advise the director in these matters. 
the uspto is requesting nominations for three (3) members to each public advisory committee for terms beginning on july 13, 2001. 
dates: nominations must be postmarked or electronically transmitted on or before april 12, 2001. 
addresses: persons wishing to submit nominations should send the nominee's resume to chief of staff, office of the director of the uspto, washington, dc 20231; by electronic mail to ppacnomination@uspto.gov for the patent public advisory committee or tpacnomination@uspto.gov for the trademark public advisory committee; by facsimile transmission marked to the chief of staff's attention at (703) 305-8664; or by mail marked to the chief of staff's attention and addressed to the office of the director of the uspto, washington, dc 20231. 
for further information contact: chief of staff by facsimile transmission marked to his attention at (703) 3058664, or by mail marked to his attention and addressed to the office of the director of the uspto, washington, dc 20231. 
supplementary information: under the act, the then-acting secretary of commerce appointed members to the two patent and trademark public advisory committees on july 13, 2000. 
the advisory committees' duties include: review and advise the director of the uspto on matters relating to policies, goals, performance, budget, and user fees of the uspto relating to patents and trademarks, respectively; and within 60 days after the end of each fiscal year: (1) prepare an annual report on the matters listed above; (2) transmit the report to the secretary of commerce, the president, and the committees on the judiciary of the senate and the house of representatives; and (3) publish the report in the official gazette of the uspto. 
members of the patent and trademark public advisory committees are appointed by and serve at the pleasure of the secretary of commerce for three (3)-year terms. 
advisory committees the public advisory committees are each composed of nine (9) voting members who are appointed by the secretary of commerce (the "secretary") and who have "substantial backgrounds and achievement in finance, management, labor relations, science, technology, and office automation."
 35 u.s.c. 
5(b)(3). 
the public advisory committee members must be united states citizens and represent the interests of diverse users of the uspto both large and small entity applicants in proportion to the number of such applications filed. 
in the case of the patent public advisory committee, at least twenty-five (25) percent of the members must represent "small business concerns, independent inventors, and nonprofit organizations," and at least one member must represent the independent inventors' community. 
35 u.s.c. 
5(b)(2). 
each of the public advisory committees also includes three (3) non-voting members representing each labor organization recognized by the uspto. 
procedures and guidelines of the patent and trademark public advisory committees each newly appointed member of the patent and trademark public advisory committees will serve for a term of three years. 
members appointed in the current fiscal year shall serve from july 13, 2001, to july 12, 2004. 
as required by the act, members of the patent and trademark public advisory committees will receive compensation for each day, including travel time, while the member is attending meetings or engaged in the business of that advisory committee. 
the rate of compensation is the daily equivalent of the annual rate of basic pay in effect for level iii of the executive schedule under section 5314 of title 5, united states code. 
while away from home or regular place of business, each member will be allowed travel expenses, including per diem in lieu of subsistence, as authorized by section 5703 of title 5, united states code. 
the uspto will provide the necessary administrative support, including technical assistance, for the committees. 
applicability of certain ethics laws members of each public advisory committee shall be special government employees within the meaning of section 202 of title 18, united states code. 
the following additional information assumes that members are not engaged in public advisory committee business more than sixty days during each calendar year: each member will be required to file a confidential financial disclosure form within thirty (30) days of appointment. 
5 c.f.r. 
2634.202(c), 2634.204, 2634.903, and 2634.904(b). 
each member will be subject to many of the public integrity laws, including criminal bars against representing a party, 18 u.s.c. 
203(c), or acting where the united states has an interest, 18 u.s.c. 
205(c), in a particular matter that came before the member's committee and that involved at least one specific party. 
see also 18 u.s.c. 
207 for post-membership bars. 
a member also must not act on a matter in which the member (or any of certain closely related entities) has a financial interest. 
18 u.s.c. 
208. 
representation of foreign interests may also raise issues. 
35 u.s.c. 
5(a)(1) and 18 u.s.c. 
219. 
meetings of the patent and trademark public advisory committees meetings of each advisory committee will take place at the call of the chair to consider an agenda set by the chair. 
meetings may be conducted in person, electronically through the internet, or by other appropriate means. 
the meetings of each advisory committee will be open to the public except each advisory committee may, by majority vote, meet in executive session when considering personnel or other confidential matters. 
nominees must also have the ability to participate in committee business through the internet. 
procedure for submitting nominations submit resumes for nominations for the patent public advisory committee and the trademark public advisory committee to the uspto's chief of staff as provided above. 
dated: march 7, 2001. 
nicholas p. godici, acting under secretary of commerce for intellectual property and acting director of the united states patent and trademark office. 
[fr doc. 
016238 filed 31201; 8:45 am] billing code 351016u 
letter to the editor of dr. 
dobb's journal. 
dear editor, i am sure you don't realize how ironic it is to associate me and tim o'reilly with "open source."
 if the house un-american activities committee asked me, "are you now or have you ever been a supporter of the open source movement," i could proudly and cheerfully say no. 
i've been campaigning since 1984 for free software—free as in freedom. 
(see the gnu manifesto, dr. 
dobb's journal, sept. 
1985.) free software means, roughly, that you are free to study what it does, free to change it, free to redistribute it, and free to publish improved versions. 
(see http://www.gnu.org/philosophy/free-sw.html for more details.) you deserve these freedoms; everyone deserves them. 
i wrote the gnu general public license (gnu gpl), the target of microsoft's greatest ire, to defend these freedoms for all users, in the spirit of the free software movement. 
years later, in 1998, another group began operating under the term "open source."
 they have contributed to the free software community in practical ways, but they stand for very different views. 
they studiously avoid the issues of freedom and principle that we raise in the free software movement; they cite only short-term practical benefits as the reasons for what they do. 
their stated definition for the term "open source" is somewhat broader than free software, and thus includes my work. 
but describing the gnu gpl as an "open source license," as microsoft did, is more than half misleading. 
the gnu gpl embodies the firm philosophy of the free software movement; it doesn't come from the open source movement. 
i am not a supporter of the open source movement, and never have been. 
tim o'reilly, by contrast, is a pillar of the open source movement, at least to hear him tell it. 
however, if you look at actions rather than words, most of the manuals published by o'reilly associates do not qualify as open source, let alone as free. 
the handful of free titles are exceptions. 
he could easily excuse himself to huac—"yes, i talked about open source, but i didn't really do much of it."
 if o'reilly moves to selling free-as-in-freedom books in the future, he could become a true supporter of the free software movement, or at least the open source movement. 
[later in 2001, o'reilly associates published a couple of additional free books. 
we are grateful for this contribution to the free software community, and we look forward to more of the same.] with the recent founding of fsf-europe, and the coming inauguration of fsf-india, the free software movement is going stronger than ever. 
please don't lump us in with the other movement in our community. 
sincerely, — richard stallman president, free software foundation 
e-books: freedom or copyright. 
stallman once upon a time, in the age of the printing press, an industrial regulation was established to cover the business of writing and publishing. 
it was called copyright. 
copyright's purpose, stated in the us constitution, was to "promote progress"—that is, to encourage publication. 
the method used was to make publishers get permission from authors for using recent works. 
ordinary readers had little reason to disapprove, since copyright restricted only publication, not the things a reader could do. 
if it raised the price of a book a small amount, that was only money; it did not contort readers' way of life. 
copyright provided a public benefit, as intended, with little burden on the public. 
it did its job well—back then. 
then a new way of distributing information came about: computers and networks. 
the advantage of digital information technology is that it facilitates copying and manipulating information, including software, musical recordings and books. 
networks offered the possibility of unlimited access to all sorts of data, an information utopia. 
but one obstacle stood in the way: copyright. 
readers who made use of their computers to share published information were technically copyright infringers. 
the world had changed around this law, so that what was once an industrial regulation on publishers had become a restriction on the public it was meant to serve. 
in a system of real democracy, a law that prohibits a popular, natural, and useful activity is usually soon relaxed. 
but the powerful publishers' lobby was determined to prevent the public from taking advantage of the power of their computers, and found copyright a suitable weapon. 
under their influence, rather than relaxing copyright to suit the new circumstances, governments made it stricter than ever, imposing harsh penalties on readers caught sharing. 
but that wasn't the last of it. 
computers can be powerful tools of domination, when a few people control what other people's computers do. 
the publishers realized that by forcing people to use specially designated software to read e-books, they could gain unprecedented power: they could compel readers to pay, and identify themselves, every time they read a book! 
that is the publishers' dream. 
so they prevailed upon the us government to give them the digital millennium copyright act of 1998, a law giving them total legal power over almost anything a reader might do with an e-book. 
even reading it without authorization is a crime. 
join our mailing list about the dangers of ebooks. 
we still have the same old freedoms in using paper books. 
but if e-books replace printed books, that exception will do little good. 
with "electronic ink," which makes it possible to download new text onto an apparently printed piece of paper, even newspapers could become ephemeral. 
imagine: no more used book stores; no more lending a book to your friend; no more borrowing one from the public library—no more "leaks" that might give someone a chance to read without paying. 
and judging from the ads for microsoft reader, no more anonymous purchasing of books. 
this is the world publishers have in mind for us. 
why is there so little public debate about these momentous changes? 
most citizens have not yet had occasion to come to grips with the political issues raised by this futuristic technology. 
besides, the public has been taught that copyright exists to "protect" the copyright holders, with the implication that the public's interests do not count. 
but when the public at large begins to use e-books, and discovers the regime that the publishers have prepared for them, they will begin to resist. 
humanity will not accept this yoke forever. 
the publishers would have us believe that suppressive copyright is the only way to keep art alive, but we do not need a war on copying to encourage a diversity of published works; as the grateful dead showed, copying among fans is not a problem for the artists. 
by legalizing the noncommercial copying of e-books, we can turn copyright back into the industrial regulation it once was. 
for some kinds of writing, we should go even further. 
for scholarly papers and monographs, everyone should be encouraged to republish them verbatim online; this helps protect the scholarly record while making it more accessible. 
for textbooks and most reference works, publication of modified versions should be allowed as well, since that encourages society to improve them. 
eventually, when computer networks provide an easy way to send someone a small amount of money, the whole rationale for restricting verbatim copying will go away. 
if you like a book, and it pops up a box saying, "click here to give the author one dollar," wouldn't you click? 
copyright for books and music, as it applies to distributing verbatim unmodified copies, will be entirely obsolete. 
and not a moment too soon! 
also consider reading e-books must increase our freedom, not decrease it. 
this is a slightly modified version of an article published in technology review in 2000. 
e-books must increase our freedom, not decrease it. 
stallman i love the jehovah contract, and i'd like everyone else to love it too. 
i have lent it out at least six times over the years. 
printed books let us do that. 
i couldn't do that with most commercial e-books. 
it's "not allowed."
 and if i tried to disobey, the software in e-readers has malicious features called digital restrictions management (drm, for short) to restrict reading, so it simply won't work. 
the e-books are encrypted so that only proprietary software with malicious functionality can display them. 
many other habits that we readers are accustomed to are "not allowed" for e-books. 
with the amazon "kindle" (for which "swindle" is a more fitting name), to take one example, users can't buy a book anonymously with cash. 
"kindle" books are typically available from amazon only, and amazon makes users identify themselves. 
thus, amazon knows exactly which books each user has read. 
in a country such as the uk, where you can be prosecuted for possessing a forbidden book, this is more than hypothetically orwellian. 
furthermore, you can't sell the e-book after you read it (if amazon has its way, the used book stores where i have passed many an afternoon will be history). 
you can't give it to a friend either, because according to amazon you never really owned it. 
amazon requires users to sign an end-user license agreement ("eula") which says so. 
you can't even be sure it will still be in your machine tomorrow. 
people reading 1984 in the "kindle" had an orwellian experience: their e-books vanished right before their eyes, as amazon used a malicious software feature called a "back door" to remotely delete them (virtual book-burning; is that what "kindle" means?). 
but don't worry; amazon promised never to do this again, except by order of the state. 
with software, either the users control the program (making such software libre or free) or the program controls its users (non-libre). 
amazon's e-book policies imitate the distribution policies of non-libre software, but that's not the only relationship between the two. 
the malicious software features described above are imposed on users via software that's not libre. 
if a libre program had malicious features like those, some users skilled at programming would remove them, then provide the corrected version to all the other users. 
users can't change non-libre software, which makes it an ideal instrument for exercising power over the public. 
any one of these encroachments on our freedom is reason aplenty to say no. 
if these policies were limited to amazon, we'd bypass them, but the other e-book dealers' policies are roughly similar. 
join our mailing list about the dangers of ebooks. 
what worries me most is the prospect of losing the option of printed books. 
the guardian has announced "digital-only reads": in other words, books available only at the price of freedom. 
i will not read any book at that price. 
five years from now, will unauthorized copies be the only ethically acceptable copies for most books? 
it doesn't have to be that way. 
with anonymous payment on the internet, paying for downloads of non-drm non-eula e-books would respect our freedom. 
physical stores could sell such e-books for cash, like digital music on cds—still available even though the music industry is aggressively pushing drm-restrictive services such as spotify. 
physical cd stores face the burden of an expensive inventory, but physical e-book stores could write copies onto your usb memory stick, the only inventory being memory sticks to sell if you need. 
the reason publishers give for their restrictive e-books practices is to stop people from sharing copies. 
they say this is for the sake of the authors; but even if it did serve the authors' interests (which for quite famous authors it may), it could not justify drm, eulas or the digital economy act which persecutes readers for sharing. 
in practice, the copyright system does a bad job of supporting authors aside from the most popular ones. 
other authors' principal interest is to be better known, so sharing their work benefits them as well as readers. 
why not switch to a system that does the job better and is compatible with sharing? 
a tax on memories and internet connectivity, along the general lines of what most eu countries do, could do the job well if three points are got right. 
the money should be collected by the state and distributed according to law, not given to a private collecting society; it should be divided among all authors, and we mustn’t let companies take any of it from them; and the distribution of money should be based on a sliding scale, not in linear proportion to popularity. 
i suggest using the cube root of each author's popularity: if a is eight times as popular as b, a gets twice b's amount (not eight times b's amount). 
this would support many fairly popular writers adequately instead of making a few stars richer. 
another system is to give each e-reader a button to send some small sum (perhaps 25 pence in the uk) to the author. 
sharing is good, and with digital technology, sharing is easy. 
(i mean non-commercial redistribution of exact copies.) so sharing ought to be legal, and preventing sharing is no excuse to make e-books into handcuffs for readers. 
if e-books mean that readers' freedom must either increase or decrease, we must demand the increase. 
also consider reading e-books: freedom or copyright. 
this essay was originally published by the guardian, on 17 april 2012, as "technology should help us share, not constrain us," with some surprise editing. 
this version incorporates parts of that editing while restoring parts of the original text. 
www.gnu.org/philosophy/economics_frank/frank.html
fsf's brief amicus curiae, eldred v. ashcroft. 
[this document is also available in postscript and pdf formats.] no. 
01-618 in the supreme court of the united states eric eldred, et al., petitioners, v. john d. ashcroft, in his official capacity as attorney general, respondent. 
on writ of certiorari to the united states court of appeals for the district of columbia circuit brief amicus curiae of the free software foundation in support of petitioners eben moglen counsel of record 435 west 116th street new york, ny 10027 (212) 854-8382 counsel for amicus curiae question presented. 
did the court of appeals err in holding that, under the copyright clause, congress may indefinitely extend the term of existing copyrights by seriatim adoption of nominally "limited" extensions? 
contents. 
question presented contents table of authorities interest of amicus curiae summary of argument argument i. the framers intended copyright to be a statutory monopoly awarded to works of authorship for a strictly limited time ii. 
the historical policy embodied in the copyright clause is absolutely essential to reconcile the copyright monopoly with the system of free expression a. indefinite extension of the term of monopoly on existing works of authorship is incompatible with both the copyright clause and the first amendment b. the fifth amendment prohibits legislative action such as this with respect to physical property rights, and there is no constitutional justification for permitting what cannot be done with mere property to be done with free expression iii. 
particular dangers of abuse and corruption justify strict constitutional scrutiny when the term of statutory monopolies is extended conclusion table of authorities. 
cases . abrams v. united states, 250 u.s. 
616 (1919) 10 darcy v. allen, (the case of monopolies), 11 co. 
rep. 
84 (1603) 5 eldred v. reno, 239 f.3d 372 (cadc 2001) 7, passim feist publications, inc. 
v. rural telephone service, co., inc., 499 u.s. 
340 (1991) 7,11,12 goldstein v. california, 412 u.s. 
546 (1973) 12 harper & row, publishers, inc. 
v. nation enterprises, 471 u.s. 
539 (1985) 9 hawaii housing authority v. midkiff, 467 u.s. 
229 (1984) 14 new york times co. 
v. sullivan, 376 u.s. 
254 (1964) 10 reno v. american civil liberties union, 521 u.s. 
844 (1997) 10 san francisco arts & athletics, inc. 
v. united states olympic committee, 483 u.s. 
522 (1987) 9 schnapper v. foley, 667 f.2d 102 (cadc 1981) 11 singer mfg. 
co. 
v. june mfg. 
co., 163 u.s. 
169 (1896) 11 trademark cases, 100 u.s. 
82 (1879) 11 west virginia board of education v. barnette, 319 u.s. 
624 (1943) 10 constitutions, statutes, and regulations . u.s. 
const. 
art. 
i, &#167;8, cl. 
8 3, passim u.s. 
const. 
amend. 
i 7, passim u.s. 
const. 
amend. 
v 13,14 copyright act of 1709 (statute of anne), 8 anne, c. 19 6 copyright act of 1790, 1 stat. 
124 6 sonny bono copyright term extension act, pub. 
l. no. 
105-298, title i, 112 stat. 
2827 3, passim statute of monopolies, 21 jac. 
i, c. 3 5 other materials . yochai benkler, free as the air to common use: first amendment constraints on enclosure of the public domain, 74 n.y.u.l. 
rev. 
354 (1999) 8 william blackstone, commentaries on the laws of england (1769) 5 the charter and general laws of the colony and province of massachusetts bay (boston, 1814) 6 144 cong. 
rec. 
h9951 (daily ed. 
oct. 
7, 1998) 3 thomas i. emerson, the system of freedom of expression (1970) 9 max farrand, the records of the federal convention of 1787 (1937) 6 george lee haskins, law and authority in early massachusetts (1960) 6 melville b. nimmer, does copyright abridge the first amendment guaranties of free speech and the press?, 17 ucla l. rev. 
1180 (1970) 8 mark rose, authors and owners: the invention of copyright (1993) 6 cecily violet wedgwood, the king's peace (1955) 5 no. 
01-618 in the supreme court of the united states eric eldred, et al., petitioners, v. john d. ashcroft, in his official capacity as attorney general, respondent. 
on writ of certiorari to the united states court of appeals for the district of columbia circuit brief amicus curiae of the free software foundation in support of petitioners interest of amicus curiae. 
this brief is filed on behalf of the free software foundation, a charitable corporation with its main offices in boston, massachusetts.[1] the foundation believes that people should be free to study, share and improve all the software they use, as they are free to share and improve all the recipes they cook with, and that this right is an essential aspect of the system of free expression in a technological society. 
the foundation has been working to achieve this goal since 1985 by directly developing and distributing, and by helping others to develop and distribute, software that is licensed on terms that permit all users to copy, modify and redistribute the works, so long as they give others the same freedoms to use, modify and redistribute in turn. 
the foundation is the largest single contributor to the gnu operating system (used widely today in its gnu/linux variant for computers from pcs to supercomputer clusters). 
the foundation's gnu general public license is the most widely used "free software" license, covering major components of the gnu operating system and tens of thousands of other computer programs used on tens of millions of computers around the world. 
the foundation is strongly interested in the use and development of copyright law to encourage sharing, and to protect the rights of users and the public domain. 
summary of argument. 
actually, sonny [bono] wanted the term of copyright protection to last forever. 
--rep. 
mary bono 144 cong. 
rec. 
h9951 (daily ed. 
oct. 
7, 1998) if the late representative bono believed that was possible, he was mistaken. 
the court of appeals erred in holding that congressmen sharing his object can achieve what the constitution expressly forbids, simply because they do so in a series of enactments rather than a single statute. 
no one seriously contends that congress may achieve an expressly unauthorized end by dividing the means of its achievement into multiple statutes. 
yet the court of appeals held that, so long as each individual statute states a precise numerical increment, congress can extend the life of existing copyrights indefinitely. 
this conclusion is in direct conflict with the language of the copyright clause, article i, &#167;8, cl. 
8, in its natural sense. 
the constitutional history of england and british north america, moreover, is unambiguous about the importance of "limited times" in the control of all state-awarded monopolies, of which genus copyright and patent are species. 
the very evils that led english and british north american constitutional lawyers to insist on the strictly limited term of royal and statutory monopolies, and to embody that requirement in the copyright clause of article i, are present in the retroactive extension of existing copyrights by the sonny bono copyright term extension act (ctea), pub. 
l. no. 
105-298, title i, 112 stat. 
2827, at issue in this case. 
in the sphere of copyright, the limited time requirement protects the public domain, by providing for its constant enrichment. 
the public domain is an essential resource of our constitutional system of free expression. 
as this court has previously recognized, several aspects of the copyright system represent constitutionally-required limitations on the nature of the monopoly congress is empowered to grant. 
the limited term is not only a particularly important constitutional limitation on congressional power by virtue of its presence in the text itself—which goes beyond the textually-implicit limitations of fair use and the idea-expression dichotomy—but also in the function it serves: the protection of the common resource of the public domain. 
the ctea unconstitutionally imperils the commons of the public domain by flouting the clear intention of the limited term requirement. 
if congress had acted unilaterally to reduce copyright terms, as the solicitor general seems to believe it may, forcing some material into the public domain decades ahead of current schedule, no doubt the copyright industries would attack the legislation as a taking. 
if, on the other hand, congress acted to extend every 50-year lease by the federal government for an additional 99 years at the government's current rent, there is no question that compensation would be required. 
congress should not be permitted to take the public's reversionary interest in the public domain, any more than it can take a portion of the copyright holder's original term or of any leasehold interest in real property. 
the constitutional system of free expression, the language of the copyright clause, and the history of our tradition demand no less. 
argument. 
i. the framers intended copyright to be a statutory monopoly awarded to works of authorship for a strictly limited time. 
the words "for limited times" appear in the copyright clause, article i, &#167;8, cl. 
8 as the result of long and bitter experience with the constitutional evil of state-awarded monopolies. 
from the seventeenth century, the requirement of limitation in time was a basic constitutional mechanism for dealing with the potential for abuse of power inherent in the royal or statutory monopoly. 
the use by queen elizabeth of letters patent monopolizing certain trades as a means of raising money from bidders for monopoly profits gave rise to the case of darcy v. allen, (the case of monopolies), 11 co. 
rep. 
84 (1603), in which a royal patent monopoly on the making and distribution of playing cards was held void. 
parliament followed in 1624 with the statute of monopolies, 21 jac. 
i, c. 3, which declared that only parliament might grant statutory monopolies, limited to new inventions, for a period not to exceed fourteen years. 
see 4 william blackstone, commentaries on the laws of england *159 (1769). 
this constitutional limitation was evaded by charles i during his period of despotic personal rule; the resulting royal monopolies formed a significant grievance in the years leading up to the english civil war. 
see cecily violet wedgwood, the king's peace 156-62 (1955). 
american colonists at odds with the government of charles i perceived the evil of governmental monopolies; in the massachusetts bay colony as early as 1641, the colony's general court decreed that "there shall be no monopolies granted or allowed amongst us, but of such new inventions that are profitable to the country, and that for a short time."
 the charter and general laws of the colony and province of massachusetts bay 170 (boston, 1814); see also george lee haskins, law and authority in early massachusetts 130 (1960). 
when the copyright act of 1709, the famous "statute of anne," was framed, the drafters insisted on a limited term far more stringent than authors, including john locke, had proposed; they adopted the fourteen-year limit from the statute of monopolies. 
see mark rose, authors and owners: the invention of copyright 44-47 (1993). 
the term provided by the statute of anne, fourteen years with a renewal of fourteen years if the author survived the first term, was adopted by first congress in the copyright act of 1790. 
see copyright act of 1709, 8 anne, c. 19; act of may 31, 1790, 1 stat. 
124-25. 
the framers of the constitution unanimously accepted the idea of the limited term for copyrights in the drafting of article i, without substantial discussion. 
see 2 max farrand, the records of the federal convention of 1787, at 321-325, 505-510, 570, 595 (1937).[2] in doing so, as the subsequent employment in the copyright act of 1790 of the term of years from the statute of monopolies shows, the framers and the first congress acted in full awareness of the long history of attempts to control the harm done by statutory monopolies by limiting their term. 
the constitutional importance of the "limited times" restriction cannot be vitiated, as the court of appeals' reasoning would do, by affording congress the opportunity to create perpetuities on the installment plan, any more than congress can eliminate the constitutional requirement of originality. 
feist publications, inc. 
v. rural telephone service, co., inc., 499 u.s. 
340, 346-347 (1991). 
the court of appeals erred fundamentally in its conclusion that there is "nothing in text or in history that suggests that a term of years for a copyright is not a "limited time" if it may later be extended for another "limited time."
" eldred v. reno, 239 f.3d 372, 379 (cadc 2001). 
in this regard, the ctea should not be judged in isolation. 
the question is whether there is anything in text or history rendering constitutionally objectionable the eleven extensions of the monopoly term in the last forty years, resulting in a virtual cessation of enlargements to the public domain, capped by the statute before the court, which postpones the reversion on every single existing copyright for decades. 
ii. 
the historical policy embodied in the copyright clause is absolutely essential to reconcile the copyright monopoly with the system of free expression. 
as important as the principle of limited time is in the general restraint of the harms that flow from statutory monopolies, in the area of copyright it has an even more crucial purpose to serve. 
the limited term of copyright ensures the steady replenishment of the public domain, the vast repository of the common culture of humankind. 
the public domain is the springboard of societal creativity, the zone of free reproduction and exchange that makes innovation possible. 
as yochai benkler has elegantly shown, the existence of a vital and expanding public domain reconciles the exclusive rights of the copyright system with the underlying goals of the system of free expression protected by the first amendment. 
see yochai benkler, free as the air to common use: first amendment constraints on enclosure of the public domain, 74 n.y.u.l. 
rev. 
354, 386-394 (1999). 
the court below erred in its facile dismissal of petitioners' first amendment concerns. 
that court first held in its opinion that the first amendment's requirements are "categorically" satisfied by the distinction between expression and idea, and then that any material covered by copyright but subject to the defense of fair use is therefore so copiously protected for purposes of free expression that no first amendment claim can possibly lie. 
239 f.3d, at 375-376. 
this position simply cannot be right. 
the court below conceded that an attempt by congress to make copyright perpetual in haec verba would be prohibited by the language of the copyright clause. 
id., at 377. 
but even if the subterfuge of achieving perpetuity piecemeal, by repeated retroactive extensions, somehow evades the plain command of the copyright clause, it does not thus render impotent the first amendment. 
as the great copyright scholar melville nimmer asked: if i may own blackacre in perpetuity, why not also black beauty? 
the answer lies in the first amendment. 
there is no countervailing speech interest which must be balanced against perpetual ownership of tangible real and personal property. 
there is such a speech interest, with respect to literary property, or copyright. 
melville b. nimmer, does copyright abridge the first amendment guaranties of free speech and the press?, 17 ucla l. rev. 
1180, 1193 (1970). 
nor has the court of appeals' position any support in the holdings of this court. 
on the contrary, as this court's cases make clear, copyright and related statutory monopolies in expression must conform like any other regulation of speech to the requirements of the first amendment. 
in harper & row, publishers, inc. 
v. nation enterprises, 471 u.s. 
539 (1985), this court rejected what it characterized as "a public figure exception to copyright," because it found sufficient "the first amendment protections already embodied in the copyright act's distinction between … facts and ideas, and the latitude for scholarship and comment traditionally afforded by fair use."
 id., at 560. 
thus, the court said, it found "no warrant" for a further expansion of the doctrine of fair use. 
id. 
this by no means implies, as the court of appeals somehow concluded, that harper & row stands as an "insuperable" bar to all first amendment challenges to all subsequent copyright statutes. 
see 239 f.3d, at 375. 
in san francisco arts & athletics, inc. 
v. united states olympic committee, 483 u.s. 
522 (1987), this court applied standard first amendment analysis to a statute conveying special quasi-trademark protection to the word "olympic," asking "whether the incidental restrictions on first amendment freedoms are greater than necessary to further a substantial government interest."
 id., at 537 (citation omitted). 
the first amendment abhors the vacuum of limited expression. 
the making of new works by the criticism, imitation, revision, and rearrangement of existing material is the hallmark of literate culture in all the arts and sciences. 
the first amendment establishes not merely a series of independent doctrines, but a "system of free expression."
 see thomas i. emerson, the system of freedom of expression (1970). 
our constitutional commitments to an "uninhibited, robust, and wide-open" public debate, new york times co. 
v. sullivan, 376 u.s. 
254, 270 (1964), a "marketplace of ideas," reno v. american civil liberties union, 521 u.s. 
844, 885 (1997); cf. 
abrams v. united states, 250 u.s. 
616, 630 (1919), where there shall be no power to "prescribe what shall be orthodox" west virginia board of education v. barnette, 319 u.s. 
624, 642 (1943), require us to view with great skepticism all restrictions on the formation and expression of ideas. 
laws tending to establish monopolies in the expression of ideas must pass the exacting scrutiny that protects our most fundamental freedoms. 
the copyright clause does not exempt the legislation enacted under it from such scrutiny, but rather establishes principles that enable statutory monopolies and freedom of expression to coexist. 
of these, the principle of limitation in time is far from the least important. 
by refusing to consider the effect of the instant legislation in the broader context of a congressional policy of piecemeal, indefinite, wholesale extension of copyrights, and in relation to the purposes established by the copyright clause itself, the court of appeals failed in its duty to protect the invaluable interests of the system of free expression. 
a. indefinite extension of the term of monopoly on existing works of authorship is incompatible with both the copyright clause and the first amendment. 
precisely because the creation of exclusive rights in expressions inevitably involves some danger of the monopolization of ideas, it is crucial to the coexistence of copyright and the first amendment that all exclusive rights over expressions are limited in time. 
at some specific moment, all exclusionary rights must end. 
under our constitution, the reversion of every work of authorship is irrevocably vested in the public. 
this reversion is not constitutionally optional. 
in the context of patents, this court has described the reversion as a "condition" that the work subject to temporary statutory monopoly will pass into the public domain upon the patent's expiration. 
singer mfg. 
co. 
v. june mfg. 
co., 163 u.s. 
169, 185 (1896). 
notwithstanding this evident constitutional principle, the court of appeals held that congress may create a perpetuity in copyrights so long as it does so sequentially, by repeatedly extending all existing copyrights for nominally "limited" terms. 
this holding contradicts the spirit of both the copyright clause and the first amendment. 
the court of appeals erroneously held, following its own precedent, see schnapper v. foley, 667 f.2d 102, 112 (1981), that the single phrase comprising the copyright clause, empowering congress "to promote the progress of science and useful arts, by securing for limited times to authors and inventors the exclusive right to their respective writings and discoveries," imposes no substantive limitation on congress through its declaration of purpose. 
but the court of appeals acknowledged, as it must, that this court's cases show clearly that congressional power is indeed limited by the copyright clause, and so its effort is bent to the disintegration of a single phrase of twenty-seven words, directed at showing that the first nine are somehow constitutionally irrelevant. 
this court first held in the trademark cases, 100 u.s. 
82 (1879), and reaffirmed in feist, supra, 499 u.s., at 346-47, that congress cannot constitutionally dilute the requirement of originality, by extending copyright coverage to works of authorship that make use of expressions already in existence, or in which the author's effort in collection and arrangement of existing information does not establish that "modicum of creativity" the constitution requires. 
according to the court of appeals, however, the principle of originality emerges solely from the words "writing" and "author," taking not the slightest support from the declaration of purpose that begins the copyright clause. 
the copyright clause is unique among the enumerations of legislative power in article i, &#167;8 in containing a declaration of purpose; it alone "describes both the objective which congress may seek and the means to achieve it."
 goldstein v. california, 412 u.s. 
546, 555 (1973). 
adopting a reading of the clause that denies legal effect to the words the drafters specifically and atypically included is an implausible style of constitutional construction. 
even without reference to the beginning of the clause, however, this court's prior opinions show that the court of appeals has misperceived the task of construction. 
the court of appeals treats the words "limited times" in purely formal terms, so that—after ten previous interlocking extensions beginning in 1962, holding substantially all works with otherwise-expiring copyrights out of the public domain for a generation—the ctea's extension of existing terms for another twenty years raises no substantive constitutional question because the new twenty-year extension period is numerically definite. 
the same formal, anti-contextual approach to the words would result, however, in the result rejected by this court in feist: telephone directories are undeniably "writings" in the same crabbed sense that the term extension contained in the ctea is "limited."
 b. the fifth amendment prohibits legislative action such as this with respect to physical property rights, and there is no constitutional justification for permitting what cannot be done with mere property to be done with free expression. 
on the logic of the court of appeals' holding, which is apparently supported in this court by the solicitor general, congress could pass a statute shortening the term of existing copyrights, reallocating a large body of currently-covered works to the public domain. 
if the statute simply provided that the term of copyright be reduced to fourteen years, according to the court of appeals, that would satisfy the requirement of "limited times," and there would be no occasion for the courts to inquire into whether such a change promoted the progress of science and the useful arts, though copyright holders could well be expected to contend that such an alteration of the duration of existing copyrights deprived them of the benefit that the "copyright bargain" supposedly "secures" them. 
but the copyright bargain faces two ways: "securing" authors their limited monopoly in return for the reversion to the public. 
increasing the reversionary interest at the expense of the first estate is conceptually no different than increasing the copyright holder's monopoly at the expense of the reversionary interest, which is that of the whole society and the system of free expression. 
shrinking or eliminating the public domain in order to increase the benefit to the monopolists, whose works have already been created in reliance on the previous allocation of rights, neither promotes the progress of knowledge nor respects the critically-important free speech interest in the health of the public domain.[3] nor would the takings clause of the fifth amendment permit such uncompensated legislative adjustment of the terms of interest in real property. 
copyright—not surprisingly in view of its common law origins—adopts an essentially familiar structure of "estates" in works of authorship, beginning with a conveyance for term of years or a life interest plus a term of years, with a reversion to the public domain. 
this court has held that legislative alteration of such estates that destroys or limits the reversionary interest in real property in order to achieve redistribution between private parties is "public use" within the meaning of the takings clause, and is constitutional if compensated. 
hawaii housing authority v. midkiff, 467 u.s. 
229 (1984). 
but it has never been suggested that congress or a state legislature could achieve a similarly vast wealth transfer to present lessees through the extension of the terms of all existing leases, extinguishing or indefinitely postponing the reversionary interest, without paying compensation. 
what the fifth amendment prohibits with respect to interference with existing rights in real property should not be permissible where the rights being destroyed by legislative changes in property rules are rights to the freedom of speech and publication. 
the court of appeals dismissively viewed petitioners as seeking to enforce rights to use the copyrighted works of others. 
239 f.3d, at 376. 
on the contrary, petitioners claim only their constitutional entitlement to use the works that would have entered the public domain, as required by the law in effect at the time the particular statutory monopolies at issue were granted, had it not been for unconstitutional congressional interference. 
iii. 
particular dangers of abuse and corruption justify strict constitutional scrutiny when the term of statutory monopolies is extended. 
during the first century of our republic, the term of copyright was extended once. 
during the next seventy years, it was extended once more. 
since 1962, copyright terms have been extended regularly, in increments ranging from one year to twenty years, and the flow of us-copyrighted works into the public domain has nearly ceased. 
the statute before this court postpones rights in material protected by the first amendment to any but the holders of statutory monopolies for an additional generation. 
no pattern of legislation could more clearly indicate the presence of the very evils against which the framers of the constitution and their forebears contended, and which gave rise to the copyright clause and its requirement for "limited times."
 when our predecessors in the struggle for constitutional liberty perceived a danger from corruption in the grant of monopolies, the danger they apprehended was from the executive, which might use its power to grant such monopolies to raise money independent of the legislature. 
in our time the risk is that the legislature, which is granted the power to create such monopolies by article i, &#167;8, will use that power to benefit copyright holders at the expense of the public domain. 
such a purpose—to turn the system of free expression into a series of private fiefdoms for the benefit of monopolists, who may choose to rebate a small portion of the monopoly rents thus extracted from the population in the form of campaign contributions—is forbidden to congress by the plain wording of the copyright clause and by the first amendment. 
the use of repeated interim extensions to achieve the effect of a perpetuity is not less dangerous than the single enactment that all parties concede would be unconstitutional. 
on the contrary, such a legislative practice increases the dangers of corruption without reducing the harm to the public domain. 
conclusion. 
perhaps the late representative bono did indeed believe that copyright should last forever. 
that any legislator could hold that view suggests the degree of danger to a fundamental part of the system of free expression into which we have drifted. 
this court should hold that the extension of existing copyright terms in the ctea violates the requirements of the copyright clause and the first amendment. 
the decision of the court of appeals should be reversed. 
respectfully submitted. 
eben moglen counsel of record 435 west 116th street new york, ny 10027 (212) 854-8382 counsel for amicus curiae 1 counsel for both parties have consented to the filing of this brief, and those consents have been filed with the clerk of this court. 
no counsel for either party had any role in authoring this brief, and no person other than the amicus and its counsel made any monetary contribution to its preparation and submission. 
2 the only amendment made was in the replacement of the phrase originally suggested by charles pinckney of south carolina, that monopolies be granted for a "certain" time. 
see 3 id., at 122. 
3 the court of appeals minimized the importance of the impoverishment of the public domain when it maintained that "[p]reserving access to works that would otherwise disappear—not enter the public domain but disappear—"promotes progress" as surely as does stimulating the creation of new works."
 239 f.3d, at 379. 
this is an apparent reference to claims made by copyright holders in the legislative process that certain classes of works, particularly films, would not be physically preserved unless the copyright monopoly were extended. 
it is sufficient to point out that such a principle for the award of copyright monopolies conflicts with the constitutionally mandated requirement of originality: congress cannot elect to preserve books, films, or music by conveying to the conservator a statutory monopoly of copying and distribution lasting decades. 
enforcing the gnu gpl. 
moglen&#8239;[*] 10 september 2001 microsoft's anti-gpl offensive this summer has sparked renewed speculation about whether the gpl is "enforceable."
 this particular example of "fud" (fear, uncertainty and doubt) is always a little amusing to me. 
i'm the only lawyer on earth who can say this, i suppose, but it makes me wonder what everyone's wondering about: enforcing the gpl is something that i do all the time. 
because free software is an unorthodox concept in contemporary society, people tend to assume that such an atypical goal must be pursued using unusually ingenious, and therefore fragile, legal machinery. 
but the assumption is faulty. 
the goal of the free software foundation in designing and publishing the gpl, is unfortunately unusual: we're reshaping how programs are made in order to give everyone the right to understand, repair, improve, and redistribute the best-quality software on earth. 
this is a transformative enterprise; it shows how in the new, networked society traditional ways of doing business can be displaced by completely different models of production and distribution. 
but the gpl, the legal device that makes everything else possible, is a very robust machine precisely because it is made of the simplest working parts. 
the essence of copyright law, like other systems of property rules, is the power to exclude. 
the copyright holder is legally empowered to exclude all others from copying, distributing, and making derivative works. 
this right to exclude implies an equally large power to license—that is, to grant permission to do what would otherwise be forbidden. 
licenses are not contracts: the work's user is obliged to remain within the bounds of the license not because she voluntarily promised, but because she doesn't have any right to act at all except as the license permits. 
but most proprietary software companies want more power than copyright alone gives them. 
these companies say their software is "licensed" to consumers, but the license contains obligations that copyright law knows nothing about. 
software you're not allowed to understand, for example, often requires you to agree not to decompile it. 
copyright law doesn't prohibit decompilation, the prohibition is just a contract term you agree to as a condition of getting the software when you buy the product under shrink wrap in a store, or accept a "clickwrap license" on line. 
copyright is just leverage for taking even more away from users. 
the gpl, on the other hand, subtracts from copyright rather than adding to it. 
the license doesn't have to be complicated, because we try to control users as little as possible. 
copyright grants publishers power to forbid users to exercise rights to copy, modify, and distribute that we believe all users should have; the gpl thus relaxes almost all the restrictions of the copyright system. 
the only thing we absolutely require is that anyone distributing gpl'd works or works made from gpl'd works distribute in turn under gpl. 
that condition is a very minor restriction, from the copyright point of view. 
much more restrictive licenses are routinely held enforceable: every license involved in every single copyright lawsuit is more restrictive than the gpl. 
because there's nothing complex or controversial about the license's substantive provisions, i have never even seen a serious argument that the gpl exceeds a licensor's powers. 
but it is sometimes said that the gpl can't be enforced because users haven't "accepted" it. 
this claim is based on a misunderstanding. 
the license does not require anyone to accept it in order to acquire, install, use, inspect, or even experimentally modify gpl'd software. 
all of those activities are either forbidden or controlled by proprietary software firms, so they require you to accept a license, including contractual provisions outside the reach of copyright, before you can use their works. 
the free software movement thinks all those activities are rights, which all users ought to have; we don't even want to cover those activities by license. 
almost everyone who uses gpl'd software from day to day needs no license, and accepts none. 
the gpl only obliges you if you distribute software made from gpl'd code, and only needs to be accepted when redistribution occurs. 
and because no one can ever redistribute without a license, we can safely presume that anyone redistributing gpl'd software intended to accept the gpl. 
after all, the gpl requires each copy of covered software to include the license text, so everyone is fully informed. 
despite the fud, as a copyright license the gpl is absolutely solid. 
that's why i've been able to enforce it dozens of times over nearly ten years, without ever going to court. 
meanwhile, much murmuring has been going on in recent months to the supposed effect that the absence of judicial enforcement, in us or other courts, somehow demonstrates that there is something wrong with the gpl, that its unusual policy goal is implemented in a technically indefensible way, or that the free software foundation, which authors the license, is afraid of testing it in court. 
precisely the reverse is true. 
we do not find ourselves taking the gpl to court because no one has yet been willing to risk contesting it with us there. 
so what happens when the gpl is violated? 
with software for which the free software foundation holds the copyright (either because we wrote the programs in the first place, or because free software authors have assigned us the copyright, in order to take advantage of our expertise in protecting their software's freedom), the first step is a report, usually received by email to <license-violation@gnu.org>. 
we ask the reporters of violations to help us establish necessary facts, and then we conduct whatever further investigation is required. 
we reach this stage dozens of times a year. 
a quiet initial contact is usually sufficient to resolve the problem. 
parties thought they were complying with gpl, and are pleased to follow advice on the correction of an error. 
sometimes, however, we believe that confidence-building measures will be required, because the scale of the violation or its persistence in time makes mere voluntary compliance insufficient. 
in such situations we work with organizations to establish gpl-compliance programs within their enterprises, led by senior managers who report to us, and directly to their enterprises' managing boards, regularly. 
in particularly complex cases, we have sometimes insisted upon measures that would make subsequent judicial enforcement simple and rapid in the event of future violation. 
in approximately a decade of enforcing the gpl, i have never insisted on payment of damages to the foundation for violation of the license, and i have rarely required public admission of wrongdoing. 
our position has always been that compliance with the license, and security for future good behavior, are the most important goals. 
we have done everything to make it easy for violators to comply, and we have offered oblivion with respect to past faults. 
in the early years of the free software movement, this was probably the only strategy available. 
expensive and burdensome litigation might have destroyed the fsf, or at least prevented it from doing what we knew was necessary to make the free software movement the permanent force in reshaping the software industry that it has now become. 
over time, however, we persisted in our approach to license enforcement not because we had to, but because it worked. 
an entire industry grew up around free software, all of whose participants understood the overwhelming importance of the gpl—no one wanted to be seen as the villain who stole free software, and no one wanted to be the customer, business partner, or even employee of such a bad actor. 
faced with a choice between compliance without publicity or a campaign of bad publicity and a litigation battle they could not win, violators chose not to play it the hard way. 
we have even, once or twice, faced enterprises which, under us copyright law, were engaged in deliberate, criminal copyright infringement: taking the source code of gpl'd software, recompiling it with an attempt to conceal its origin, and offering it for sale as a proprietary product. 
i have assisted free software developers other than the fsf to deal with such problems, which we have resolved—since the criminal infringer would not voluntarily desist and, in the cases i have in mind, legal technicalities prevented actual criminal prosecution of the violators—by talking to redistributors and potential customers. 
"why would you want to pay serious money," we have asked, "for software that infringes our license and will bog you down in complex legal problems, when you can have the real thing for free?"
 customers have never failed to see the pertinence of the question. 
the stealing of free software is one place where, indeed, crime doesn't pay. 
but perhaps we have succeeded too well. 
if i had used the courts to enforce the gpl years ago, microsoft's whispering would now be falling on deaf ears. 
just this month i have been working on a couple of moderately sticky situations. 
"look," i say, "at how many people all over the world are pressuring me to enforce the gpl in court, just to prove i can. 
i really need to make an example of someone. 
would you like to volunteer?"
 someday someone will. 
but that someone's customers are going to go elsewhere, talented technologists who don't want their own reputations associated with such an enterprise will quit, and bad publicity will smother them. 
and that's all before we even walk into court. 
the first person who tries it will certainly wish he hadn't. 
our way of doing law has been as unusual as our way of doing software, but that's just the point. 
free software matters because it turns out that the different way is the right way after all. 
[*] eben moglen is professor of law and legal history at columbia university law school. 
he serves without fee as general counsel of the free software foundation. 
www.gnu.org/philosophy/essays-and-articles.html
europe's "unitary patent" could mean unlimited software patents. 
just as the us software industry is experiencing the long anticipated all-out software patent wars that we have anticipated, the european union has a plan to follow the same course. 
when the hargreaves report urged the uk to avoid software patents, the uk had already approved plan that is likely to impose them on uk. 
software patents are dangerous to software developers because they impose monopolies on software ideas. 
it is not feasible or safe to develop nontrivial software if you must thread a maze of patents. 
see "software patents and literary patents."
 every program combines many ideas; a large program implements thousands of them. 
google recently estimated there might be 250,000 patented ideas in a smartphone. 
i find that figure plausible because in 2004 i estimated that the gnu/linux operating system implemented around 100,000 actually patented ideas. 
(linux, the kernel, had been found by dan ravicher to contain 283 such ideas, and was estimated to be .25% of the whole system at the time.) the consequences are becoming manifest now in the us, but multinational companies have long lobbied to spread software patents around the world. 
in 2005, the european parliament took up the second reading of a directive that had been proposed by the european commission to authorize software patents. 
the parliament had previously amended it to reject them, but the council of europe had undone those amendments. 
the commission's text was written in a sneaky way: when read by laymen, it appeared to forbid patents on pure software ideas, because it required a patent application to have a physical aspect. 
however, it did not require the "inventive step," the advance that constitutes a patentable "invention," to be physical. 
this meant that a patent application could present the required physical aspect just by mentioning the usual physical elements of the computer on which the program would run (processor, memory, display, etc.). 
it would not have to propose any advance in these physical elements, just cite them as part of the larger system also containing the software. 
any computational idea could be patented this way. 
such a patent would only cover software meant for running on a computer, but that was not much of a limitation, since it is not practical to run a large program by hand simulation. 
a massive grass-roots effort—the first one ever directed at convincing the european parliament—resulted in defeat of the directive. 
but that does not mean we convinced half of parliament to reject software patents. 
rather, it seems the pro-patent forces decided at the last minute to junk their own proposal. 
the volunteer activists drifted away, thinking the battle won, but the corporate lobbyists for software patents were paid to stay on the job. 
now they have contrived another sneaky method: the "unitary patent" system proposed for the eu. 
under this system, if the european patent office issues a patent, it will automatically be valid in every participating country, which in this case means all of the eu except for spain and italy. 
how would that affect software patents? 
evidently, either the unitary patent system would allow software patents or it wouldn't. 
if it allows them, no country will be able to escape them on its own. 
that would be bad, but what if the system rejects software patents? 
then it would be good—right? 
right—except the plan was designed to prevent that. 
a small but crucial detail in the plan is that appeals against the epo's decisions would be decided based on the epo's own rules. 
the epo could thus tie european business and computer users in knots to its heart's content. 
the epo has a vested interest in extending patents into as many areas of life as it can get away with. 
with external limits (such as national courts) removed, the epo could impose software patents, or any other controversial kind of patents. 
for instance, if it chooses to decide that natural genes are patentable, as a us appeals court just did, no one could reverse that decision except perhaps the european court of justice. 
in fact, the epo's decision about software patents has already been made, and can be seen in action. 
the epo has issued tens of thousands of software patents, in contempt for the treaty that established it. 
(see "your web shop is patented."
) at present, though, each state decides whether those patents are valid. 
if the unitary patent system is adopted and the epo gets unchecked power to decide, europe will get us-style patent wars. 
the european court of justice ruled in march that a unitary patent system would have to be subject to its jurisdiction, but it isn't clear whether its jurisdiction would include substantive policy decisions such as "can software ideas be patented?"
 that's because it's not clear how the european patent convention relates to the ecj. 
if the ecj can decide this, the plan would no longer be certain disaster. 
instead, the ball would be one bounce away from disaster. 
before adopting such a system, europe should rewrite the plan to make certain software is safe from patents. 
if that can't be done, the next best thing is to reject the plan entirely. 
minor simplifications are not worth a disaster; harmonization is a misguided goal if it means doing things wrong everywhere. 
the uk government seems to wish for the disaster, since it stated in december 2010 [archived] that it wanted the ecj not have a say over the system. 
will the government listen to hargreaves and change its mind about this plan? 
britons must insist on this. 
more information about the drawbacks and legal flaws of this plan can be found in unitary-patent.eu. 
you will note that the term "intellectual property" has not been used in this article. 
that term spreads confusion because it is applied to a dozen unrelated laws. 
even if we consider just patent law and copyright law, they are so different in their requirements and effects that generalizing about the two is a mistake. 
absolutely nothing in this article pertains to copyright law. 
to avoid leading people to generalize about disparate laws, i never use the term "intellectual property," and i never miss it either. 
first published in the guardian 
fighting software patents - singly and together. 
software patents are the software project equivalent of land mines: each design decision carries a risk of stepping on a patent, which can destroy your project. 
developing a large and complex program means combining many ideas, often hundreds or thousands of them. 
in a country that allows software patents, chances are that some substantial fraction of the ideas in your program will be patented already by various companies. 
perhaps hundreds of patents will cover parts of your program. 
a study in 2004 found almost 300 us patents that covered various parts of a single important program. 
it is so much work to do such a study that only one has been done. 
practically speaking, if you are a software developer, you will usually be threatened by one patent at a time. 
when this happens, you may be able to escape unscathed if you find legal grounds to overturn the patent. 
you may as well try it; if you succeed, that will mean one less mine in the mine field. 
if this patent is particularly threatening to the public, the public patent foundation may take up the case; that is its specialty. 
if you ask for the computer-using community's help in searching for prior publication of the same idea, to use as evidence to overturn a patent, we should all respond with whatever useful information we might have. 
however, fighting patents one by one will never eliminate the danger of software patents, any more than swatting mosquitos will eliminate malaria. 
you cannot expect to defeat every patent that comes at you, any more than you can expect to kill every monster in a video game: sooner or later, one is going to defeat you and damage your program. 
the us patent office issues around a hundred thousand software patents each year; our best efforts could never clear these mines as fast as they plant more. 
some of these mines are impossible to clear. 
every software patent is harmful, and every software patent unjustly restricts how you use your computer, but not every software patent is legally invalid according to the patent system's criteria. 
the software patents we can overturn are those that result from "mistakes," where the patent system's rules were not properly carried out. 
there is nothing we can do when the only relevant mistake was the policy of allowing software patents. 
to make a part of the castle safe, you've got to do more than kill the monsters as they appear—you have to wipe out the generator that produces them. 
overturning existing patents one by one will not make programming safe. 
to do that, we have to change the patent system so that patents can no longer threaten software developers and users. 
there is no conflict between these two campaigns: we can work on the short-term escape and the long-term fix at once. 
if we take care, we can make our efforts to overturn individual software patents do double duty, building support for efforts to correct the whole problem. 
the crucial point is not to equate "bad" software patents with mistaken or invalid software patents. 
each time we invalidate one software patent, each time we talk about our plans to try, we should say in no uncertain terms, "one less software patent, one less menace to programmers: the target is zero."
 the battle over software patents in the european union is reaching a crucial stage. 
the european parliament voted a year ago to reject software patents conclusively. 
in may, the council of ministers voted to undo the parliament's amendments and make the directive even worse than when it started. 
however, at least one country that supported this has already reversed its vote. 
we must all do our utmost right now to convince an additional european country to change its vote, and to convince the newly elected members of the european parliament to stand behind the previous vote. 
please refer to ffii.org for more information on how to help, and to get in touch with other activists. 
www.gnu.org/philosophy/fire.html
floss and foss. 
the two political camps in the free software community are the free software movement and open source. 
the free software movement is a campaign for computer users' freedom; we say that a nonfree program is an injustice to its users. 
the open source camp declines to see the issue as a matter of justice to the users, and bases its arguments on practical benefits only. 
to emphasize that "free software" refers to freedom and not to price, we sometimes write or say "free (libre) software," adding the french or spanish word that means free in the sense of freedom. 
in some contexts, it works to use just "libre software."
 a researcher studying practices and methods used by developers in the free software community decided that these questions were independent of the developers' political views, so he used the term "floss," meaning "free/libre and open source software," to explicitly avoid a preference between the two political camps. 
if you wish to be neutral, this is a good way to do it, since this makes the names of the two camps equally prominent. 
others use the term "foss," which stands for "free and open source software."
 this is meant to mean the same thing as "floss," but it is less clear, since it fails to explain that "free" refers to freedom. 
it also makes "free software" less visible than "open source," since it presents "open source" prominently but splits "free software" apart. 
"free and open source software" is misleading in another way: it suggests that "free and open source" names a single point of view, rather than mentioning two different ones. 
this conceptualization of the field is an obstacle to understanding the fact that free software and open source are different political positions that disagree fundamentally. 
thus, if you want to be neutral between free software and open source, and clear about them, the way to achieve that is to say "floss," not "foss."
 we in the free software movement don't use either of these terms, because we don't want to be neutral on the political question. 
we stand for freedom, and we show it every time—by saying "free" and "libre"—or "free (libre)."
a free digital society - what makes digital inclusion good or bad?. 
transcription of a lecture at sciences po paris, october 19, 2011  (video) table of contents. 
introduction surveillance censorship restricted data formats software that isn't free the four freedoms of free software the gnu project and the free software movement free software and education internet services computers for voting the war on sharing supporting the arts rights in cyberspace introduction. 
projects with the goal of digital inclusion are making a big assumption. 
they are assuming that participating in a digital society is good, but that's not necessarily true. 
being in a digital society can be good or bad, depending on whether that digital society is just or unjust. 
there are many ways in which our freedom is being attacked by digital technology. 
digital technology can make things worse, and it will, unless we fight to prevent it. 
therefore, if we have an unjust digital society, we should cancel these projects for digital inclusion and launch projects for digital extraction. 
we have to extract people from digital society if it doesn't respect their freedom, or we have to make it respect their freedom. 
surveillance. 
what are the threats? 
first, surveillance. 
computers are stalin's dream: they are ideal tools for surveillance, because anything we do with computers, the computers can record. 
they can record the information in a perfectly indexed searchable form in a central database, ideal for any tyrant who wants to crush opposition. 
surveillance is sometimes done with our own computers. 
for instance, if you have a computer that's running microsoft windows, that system is doing surveillance. 
there are features in windows that send data to some server, data about the use of the computer. 
a surveillance feature was discovered in the iphone a few months ago, and people started calling it the "spy-phone."
 flash player has a surveillance feature too, and so does the amazon "swindle."
 they call it the kindle, but i call it "the swindle," l'escroc, because it's meant to swindle users out of their freedom. 
it makes people identify themselves whenever they buy a book, and that means amazon has a giant list of all the books each user has read. 
such a list must not exist anywhere. 
most portable phones will transmit their location, computed using gps, on remote command. 
the phone company is accumulating a giant list of places that the user has been. 
a german mp in the green party [correction: malte spitz is on the staff of the green party, not an elected official] asked the phone company to give him the data it had about where he was. 
he had to sue, he had to go to court to get this information. 
and when he got it, he received forty-four thousand location points for a period of six months! 
that's more than two hundred per day! 
what that means is someone could form a very good picture of his activities just by looking at that data. 
we can stop our own computers from doing surveillance on us if we have control of the software that they run. 
but the software these people are running, they don't have control over. 
it's nonfree software, and that's why it has malicious features such as surveillance. 
however, the surveillance is not always done with our own computers, it's also done at one remove. 
for instance isps in europe are required to keep data about the user's internet communications for a long time, in case the state decides to investigate that person later for whatever imaginable reason. 
with a portable phone… even if you can stop the phone from transmitting your gps location, the system can determine the phone's location approximately, by comparing the time when the signals arrive at different towers. 
so the phone system can do surveillance even without special cooperation from the phone itself. 
likewise, the bicycles that people rent in paris. 
of course the system knows where you get the bicycle and it knows where you return the bicycle, and i've heard reports that it tracks the bicycles as they are moving around as well. 
so they are not something we can really trust. 
but there are also systems that have nothing to do with us that exist only for tracking. 
for instance, in the uk all car travel is monitored. 
every car's movements are being recorded in real time and can be tracked by the state in real time. 
this is done with cameras on the side of the road. 
now, the only way we can prevent surveillance that's done at one remove or by unrelated systems is through political action against increased government power to track and monitor everyone, which means of course we have to reject whatever excuse they come up with. 
for doing such systems, no excuse is valid—to monitor everyone. 
in a free society, when you go out in public, you are not guaranteed anonymity. 
it's possible for someone to recognize you and remember. 
and later that person could say that he saw you at a certain place. 
but that information is diffuse. 
it's not conveniently assembled to track everybody and investigate what they did. 
to collect that information is a lot of work, so it's only done in special cases when it's necessary. 
but computerized surveillance makes it possible to centralize and index all this information so that an unjust regime can find it all, and find out all about everyone. 
if a dictator takes power, which could happen anywhere, people realize this and they recognize that they should not communicate with other dissidents in a way that the state could find out about. 
but if the dictator has several years of stored records of who talks with whom, it's too late to take any precautions then, because he already has everything he needs to realize: "ok, this guy is a dissident, and he spoke with him. 
maybe he is a dissident too. 
maybe we should grab him and torture him."
 so we need to campaign to put an end to digital surveillance now. 
you can't wait until there is a dictator and it would really matter. 
and besides, it doesn't take an outright dictatorship to start attacking human rights. 
i wouldn't quite call the government of the uk a dictatorship. 
it's not very democratic, and one way it crushes democracy is using surveillance. 
a few years ago, people believed to be on their way to a protest, they were going to protest, they were arrested before they could get there because their car was tracked through this universal car tracking system. 
censorship. 
the second threat is censorship. 
censorship is not new, it existed long before computers. 
but 15 years ago, we thought that the internet would protect us from censorship, that it would defeat censorship. 
then, china and some other obvious tyrannies went to great lengths to impose censorship on the internet, and we said: "well that's not surprising, what else would governments like that do?"
 but today we see censorship imposed in countries that are not normally thought of as dictatorships, such as for instance the uk, france, spain, italy, denmark… they all have systems of blocking access to some websites. 
denmark established a system that blocks access to a long list of web pages, which was secret. 
the citizens were not supposed to know how the government was censoring them, but the list was leaked and posted on wikileaks. 
at that point, denmark added the wikileaks page to its censorship list. 
so, the whole rest of the world can find out how danes are being censored, but danes are not supposed to know. 
a few months ago, turkey, which claims to respect some human rights, announced that every internet user would have to choose between censorship and more censorship. 
four different levels of censorship they get to choose! 
but freedom is not one of the options. 
australia wanted to impose filtering on the internet, but that was blocked. 
however australia has a different kind of censorship: it has censorship of links. 
that is, if a website in australia has a link to some censored site outside australia, the one in australia can be punished. 
electronic frontiers australia, that is an organization that defends human rights in the digital domain in australia, posted a link to a foreign political website. 
it was ordered to delete the link or face a penalty of $11,000 a day. 
so they deleted it, what else could they do? 
this is a very harsh system of censorship. 
in spain, the censorship that was adopted earlier this year allows officials to arbitrarily shut down an internet site in spain, or impose filtering to block access to a site outside of spain. 
and they can do this without any kind of trial. 
this was one of the motivations for the indignados, who have been protesting in the street. 
there were protests in the street in turkey as well, after that announcement, but the government refused to change its policy. 
we must recognize that a country that imposes censorship on the internet is not a free country. 
and is not a legitimate government either. 
restricted data formats. 
the next threat to our freedom comes from data formats that restrict users. 
sometimes it's because the format is secret. 
there are many application programs that save the user's data in a secret format, which is meant to prevent the user from taking that data and using it with some other program. 
the goal is to prevent interoperability. 
now, evidently, if a program implements a secret format, that's because the program is not free software. 
so this is another kind of malicious feature. 
surveillance is one kind of malicious feature that you find in some nonfree programs; using secret formats to restrict the users is another kind of malicious feature that you also find in some nonfree programs. 
but if you have a free program that handles a certain format, ipso facto that format is not secret. 
this kind of malicious feature can only exist in a nonfree program. 
surveillance features, well, theoretically they could exist in a free program but you don't find them happening. 
because the users would fix it, you see. 
the users wouldn't like this, so they would fix it. 
in any case, we also find secret data formats in use for publication of works. 
you find secret data formats in use for audio, such as music, for video, for books… and these secret formats are known as digital restrictions management, or drm, or digital handcuffs (les menottes num&eacute;riques). 
so, the works are published in secret formats so that only proprietary programs can play them, so that these proprietary programs can have the malicious feature of restricting the users, stopping them from doing something that would be natural to do. 
and this is used even by public entities to communicate with the people. 
for instance italian public television makes its programs available on the net in a format called vc-1, which is a standard supposedly, but it's a secret standard. 
now i can't imagine how any publicly supported entity could justify using a secret format to communicate with the public. 
this should be illegal. 
in fact i think all use of digital restrictions management should be illegal. 
no company should be allowed to do this. 
there are also formats that are not secret but almost might as well be secret, for instance flash. 
flash is not actually secret but adobe keeps making new versions, which are different, faster than anyone can keep up and make free software to play those files; so it has almost the same effect as being secret. 
then there are the patented formats, such as mp31 for audio. 
it's bad to distribute audio in mp3 format. 
there is free software to handle mp3 format, to play it and to generate it, but because it's patented in many countries, many distributors of free software don't dare include those programs; so if they distribute the gnu+linux system, their system doesn't include a player for mp3. 
as a result if anyone distributes some music in mp3, that's putting pressure on people not to use gnu/linux. 
sure, if you're an expert you can find a free software and install it, but there are lots of non experts, and they might see that they installed a version of gnu/linux which doesn't have that software, and it won't play mp3 files, and they think it's the system's fault. 
they don't realize it's mp3's fault. 
but this is the fact. 
therefore, if you want to support freedom, don't distribute mp3 files. 
that's why i say if you're recording my speech and you want to distribute copies, don't do it in a patented format such as mpeg-2, or mpeg-4, or mp3. 
use a format friendly to free software, such as the ogg formats or webm. 
and by the way, if you are going to distribute copies of the recording, please put on it the creative commons, no derivatives license. 
this is a statement of my personal views. 
if it were a lecture for a course, if it were didactic, then it ought to be free, but statements of opinion are different. 
software that isn't free. 
now this leads me to the next threat which comes from software that the users don't have control over. 
in other words, software that isn't free, that is not libre. 
in this particular point french is clearer than english. 
the english word "free" means libre and gratuit, but what i mean when i say "free software" is logiciel libre. 
i don't mean gratuit. 
i'm not talking about price. 
price is a side issue, just a detail, because it doesn't matter ethically. 
you know, if i have a copy of a program and i sell it to you for one euro or a hundred euros, who cares? 
right? 
why should anyone think that's good or bad? 
or suppose i gave it to you gratuitement… still, who cares? 
but whether this program respects your freedom, that's important! 
so free software is software that respects users' freedom. 
what does this mean? 
ultimately there are just two possibilities with software: either the users control the program or the program controls the users. 
if the users have certain essential freedoms, then they control the program, and those freedoms are the criterion for free software. 
but if the users don't fully have the essential freedoms, then the program controls the users. 
but somebody controls that program and, through it, has power over the users. 
so, a nonfree program is an instrument to give somebody power over a lot of other people, and this is unjust power that nobody should ever have. 
this is why nonfree software (les logiciels privateurs, qui privent de la libert&eacute;), why proprietary software is an injustice and should not exist; because it leaves the users without freedom. 
now, the developer who has control of the program often feels tempted to introduce malicious features to further exploit or abuse those users. 
he feels a temptation because he knows he can get away with it. 
because his program controls the users and the users do not have control of the program, if he puts in a malicious feature, the users can't fix it; they can't remove the malicious feature. 
i've already told you about two kinds of malicious features: surveillance features, such as are found in windows and the iphone and flash player and the swindle, sort of. 
and there are also features to restrict users, which work with secret data formats, and those are found in windows, macintosh, the iphone, flash player, the amazon swindle, the playstation 3 and lots and lots of other programs. 
the other kind of malicious feature is the backdoor. 
that means something in that program is listening for remote commands and obeying them, and those commands can mistreat the user. 
we know of backdoors in windows, in the iphone, in the amazon swindle. 
the amazon swindle has a backdoor that can delete books, remotely delete books. 
we know this by observation, because amazon did it: in 2009 amazon remotely deleted thousands of copies of a particular book. 
those were authorized copies, people had obtained them directly from amazon, and thus amazon knew exactly where they were, which is how amazon knew where to send the commands to delete those books. 
you know which book amazon deleted? 
1984 by george orwell. 
[laughter] it's a book everyone should read, because it discusses a totalitarian state that did things like delete books it didn't like. 
everybody should read it, but not on the amazon swindle. 
[laughter] anyway, malicious features are present in the most widely used nonfree programs, but they are rare in free software, because with free software the users have control. 
they can read the source code and they can change it. 
so, if there were a malicious feature, somebody would sooner or later spot it and fix it. 
this means that somebody who is considering introducing a malicious feature does not find it so tempting, because he knows he might get away with it for a while but somebody will spot it, will fix it, and everybody will loose trust in the perpetrator. 
it's not so tempting when you know you're going to fail. 
and that's why we find that malicious features are rare in free software, and common in proprietary software. 
the four freedoms of free software. 
the essential freedoms are four: freedom 0 is the freedom to run the program as you wish. 
freedom 1 is the freedom to study the source code and change it, so the program does your computing the way you wish. 
freedom 2 is the freedom to help others. 
that's the freedom to make exact copies and redistribute them when you wish. 
freedom 3 is the freedom to contribute to your community. 
that's the freedom to make copies of your modified versions, if you have made any, and then distribute them to others when you wish. 
these freedoms, in order to be adequate, must apply to all activities of life. 
for instance if it says "this is free for academic use," it's not free. 
because that's too limited. 
it doesn't apply to all areas of life. 
in particular, if a program is free, that means it can be modified and distributed commercially, because commerce is an area of life, an activity in life. 
and this freedom has to apply to all activities. 
however, it's not obligatory to do any of these things. 
the point is you're free to do them if you wish, when you wish. 
but you never have to do them. 
you don't have to do any of them. 
you don't have to run the program. 
you don't have to study or change the source code. 
you don't have to make any copies. 
you don't have to distribute your modified versions. 
the point is you should be free to do those things if you wish. 
now, freedom number 1, the freedom to study and change the source code to make the program do your computing as you wish, includes something that might not be obvious at first. 
if the program comes in a product, and the developer can provide an upgrade that will run, then you have to be able to make your version run in that product. 
if the product will only run the developer's versions, and refuses to run yours, the executable in that product is not free software. 
even if it was compiled from free source code, it's not free because you don't have the freedom to make the program do your computing the way you wish. 
so, freedom 1 has to be real, not just theoretical. 
it has to include the freedom to use your version, not just the freedom to make some source code that won't run. 
the gnu project and the free software movement. 
i launched the free software movement in 1983, when i announced the plan to develop a free software operating system whose name is gnu. 
now gnu, the name gnu, is a joke; because part of the hacker's spirit is to have fun even when you're doing something very serious. 
now i can't think of anything more seriously important than defending freedom. 
but that didn't mean i couldn't give my system a name that's a joke. 
so gnu is a joke because it's a recursive acronym, it stands for "gnu's not unix," so g.n.u.: gnu's not unix. 
so the g in gnu stands for gnu. 
in fact this was a tradition at the time. 
the tradition was: if there was an existing program and you wrote something similar to it, inspired by it, you could give credit by giving your program a name that's a recursive acronym saying it's not the other one. 
so i gave credit to unix for the technical ideas of unix, but with the name gnu, because i decided to make gnu a unix-like system, with the same commands, the same system calls, so that it would be compatible, so that people who used unix could switch over easily. 
but the reason for developing gnu, that was unique. 
gnu is the only operating system, as far as i know, ever developed for the purpose of freedom. 
not for technical motivations, not for commercial motivations. 
gnu was written for your freedom. 
because without a free operating system, it's impossible to have freedom and use a computer. 
and there were none, and i wanted people to have freedom, so it was up to me to write one. 
nowadays there are millions of users of the gnu operating system and most of them don't know they are using the gnu operating system, because there is a widespread practice which is not nice. 
people call the system "linux."
 many do, but some people don't, and i hope you'll be one of them. 
please, since we started this, since we wrote the biggest piece of the code, please give us equal mention, please call the system "gnu+linux," or "gnu/linux."
 it's not much to ask. 
but there is another reason to do this. 
it turns out that the person who wrote linux, which is one component of the system as we use it today, he doesn't agree with the free software movement. 
and so if you call the whole system linux, in effect you're steering people towards his ideas, and away from our ideas. 
because he's not gonna say to them that they deserve freedom. 
he's going to say to them that he likes convenient, reliable, powerful software. 
he's going to tell people that those are the important values. 
but if you tell them the system is gnu+linux—it's the gnu operating system plus linux the kernel—then they'll know about us, and then they might listen to what we say: you deserve freedom. 
and since freedom will be lost if we don't defend it—there's always going to be a sarkozy to take it away—we need above all to teach people to demand freedom, to be ready to stand up for their freedom the next time someone threatens to take it away. 
nowadays, you can tell who doesn't want to discuss these ideas of freedom because they don't say logiciel libre. 
they don't say libre, they say "open source."
 that term was coined by the people like mr torvalds who would prefer that these ethical issues don't get raised. 
and so the way you can help us raise them is by saying libre. 
you know, it's up to you where you stand, you're free to say what you think. 
if you agree with them, you can say open source. 
if you agree with us, show it, say libre! 
free software and education. 
the most important point about free software is that schools must teach exclusively free software. 
all levels of schools from kindergarten to university, it's their moral responsibility to teach only free software in their education, and all other educational activities as well, including those that say that they're spreading digital literacy. 
a lot of those activities teach windows, which means they're teaching dependence. 
to teach people the use of proprietary software is to teach dependence, and educational activities must never do that because it's the opposite of their mission. 
educational activities have a social mission to educate good citizens of a strong, capable, cooperating, independent and free society. 
and in the area of computing, that means: teach free software; never teach a proprietary program because that's inculcating dependence. 
why do you think some proprietary developers offer gratis copies to schools? 
they want the schools to make the children dependent. 
and then, when they graduate, they're still dependent and, you know, the company is not going to offer them gratis copies. 
and some of them get jobs and go to work for companies. 
not many of them anymore, but some of them. 
and those companies are not going to be offered gratis copies. 
oh no! 
the idea is: if the school directs the students down the path of permanent dependence, they can drag the rest of society with them into dependence. 
that's the plan! 
it's just like giving the school gratis needles full of addicting drugs, saying: "inject this into your students, the first dose is gratis. 
once you're dependent, then you have to pay."
 well, the school would reject the drugs because it isn't right to teach the students to use addictive drugs, and it's got to reject the proprietary software also. 
some people say: "let's have the school teach both proprietary software and free software, so the students become familiar with both."
 that's like saying: "for the lunch let's give the kids spinach and tobacco, so that they become accustomed to both."
 no! 
the schools are only supposed to teach good habits, not bad ones! 
so there should be no windows in a school, no macintosh, nothing proprietary in the education. 
but also, for the sake of educating the programmers. 
you see, some people have a talent for programming. 
at ten to thirteen years old, typically, they're fascinated, and if they use a program, they want to know: "how does it do this?"
 but when they ask the teacher, if it's proprietary, the teacher has to say: "i'm sorry, it's a secret, we can't find out."
 which means education is forbidden. 
a proprietary program is the enemy of the spirit of education. 
it's knowledge withheld, so it should not be tolerated in a school, even though there may be plenty of people in the school who don't care about programming, don't want to learn this. 
still, because it's the enemy of the spirit of education, it shouldn't be there in the school. 
but if the program is free, the teacher can explain what he knows, and then give out copies of the source code, saying: "read it and you'll understand everything."
 and those who are really fascinated, they will read it! 
and this gives them an opportunity to start to learn how to be good programmers. 
to learn to be a good programmer, you'll need to recognize that certain ways of writing code, even if they make sense to you and they are correct, they're not good because other people will have trouble understanding them. 
good code is clear code that others will have an easy time working on when they need to make further changes. 
how do you learn to write good clear code? 
you do it by reading lots of code, and writing lots of code. 
well, only free software offers the chance to read the code of large programs that we really use. 
and then you have to write lots of code, which means you have to write changes in large programs. 
how do you learn to write good code for the large programs? 
you have to start small, which does not mean small program, oh no! 
the challenges of the code for large programs don't even begin to appear in small programs. 
so the way you start small at writing code for large programs is by writing small changes in large programs. 
and only free software gives you the chance to do that. 
so, if a school wants to offer the possibility of learning to be a good programmer, it needs to be a free software school. 
but there is an even deeper reason, and that is for the sake of moral education, education in citizenship. 
it's not enough for a school to teach facts and skills, it has to teach the spirit of goodwill, the habit of helping others. 
therefore, every class should have this rule: "students, if you bring software to class, you may not keep it for yourself, you must share copies with the rest of the class, including the source code in case anyone here wants to learn. 
because this class is a place where we share our knowledge. 
therefore, bringing a proprietary program to class is not permitted."
 the school must follow its own rule to set a good example. 
therefore, the school must bring only free software to class, and share copies, including the source code, with anyone in the class that wants copies. 
those of you who have a connection with a school, it's your duty to campaign and pressure that school to move to free software. 
and you have to be firm. 
it may take years, but you can succeed as long as you never give up. 
keep seeking more allies among the students, the faculty, the staff, the parents, anyone! 
and always bring it up as an ethical issue. 
if someone else wants to sidetrack the discussion into this practical advantage and this practical disadvantage, which means they're ignoring the most important question, then you have to say: "this is not about how to do the best job of educating, this is about how to do a good education instead of an evil one. 
it's how to do education right instead of wrong, not just how to make it a little more effective, or less."
 so don't get distracted with those secondary issues, and ignore what really matters! 
internet services. 
so, moving on to the next menace. 
there are two issues that arise from the use of internet services. 
one of them is that the server could abuse your data, and another is that it could take control of your computing. 
the first issue, people already know about. 
they are aware that, if you upload data to an internet service, there is a question of what it will do with that data. 
it might do things that mistreat you. 
what could it do? 
it could lose the data, it could change the data, it could refuse to let you get the data back. 
and it could also show the data to someone else you don't want to show it to. 
four different possible things. 
now, here, i'm talking about the data that you knowingly gave to that site. 
of course, many of those services do surveillance as well. 
for instance, consider facebook. 
users send lots of data to facebook, and one of the bad things about facebook is that it shows a lot of that data to lots of other people, and even if it offers them a setting to say "no," that may not really work. 
after all, if you say "some other people can see this piece of information," one of them might publish it. 
now, that's not facebook's fault, there is nothing they could do to prevent that, but it ought to warn people. 
instead of saying "mark this as only to your so-called friends," it should say "keep in mind that your so-called friends are not really your friends, and if they want to make trouble for you, they could publish this."
 every time, it should say that, if they want to deal with people ethically. 
as well as all the data users of facebook voluntarily give to facebook, facebook is collecting data about people's activities on the net through various methods of surveillance. 
but that's the first menace. 
for now i am talking about the data that people know they are giving to these sites. 
now, losing data is something that could always happen by accident. 
that possibility is always there, no matter how careful someone is. 
therefore, you need to keep multiple copies of data that matters. 
if you do that, then, even if someone decided to delete your data intentionally, it wouldn't hurt you that much, because you'd have other copies of it. 
so, as long as you are maintaining multiple copies, you don't have to worry too much about someone's losing your data. 
what about whether you can get it back. 
well, some services make it possible to get back all the data that you sent, and some don't. 
google services will let the user get back the data the user has put into them. 
facebook, famously, does not. 
of course in the case of google, this only applies to the data the user knows google has. 
google does lots of surveillance, too, and that data is not included. 
but in any case, if you can get the data back, then you could track whether they have altered it. 
and they're not very likely to start altering people's data if the people can tell. 
so maybe we can keep a track on that particular kind of abuse. 
but the abuse of showing the data to someone you don't want it to be shown to is very common and almost impossible for you to prevent, especially if it's a us company. 
you see, the most hypocritically named law in us history, the so-called usa patriot act, says that big brother's police can collect just about all the data that companies maintain about individuals. 
not just companies, but other organizations too, like public libraries. 
the police can get this massively, without even going to court. 
now, in a country that was founded on an idea of freedom, there's nothing more unpatriotic than this. 
but this is what they did. 
so you mustn't ever trust any of your data to a us company. 
and they say that foreign subsidiaries of us companies are subject to this as well. 
so the company you're directly dealing with may be in europe, but if it's owned by a us company, you've got the same problem to deal with. 
however, this is mainly of concern when the data you're sending to the service is not for publication. 
there are some services where you publish things. 
of course, if you publish something, you know everybody is gonna be able to see it. 
so, there is no way they can hurt you by showing it to somebody who wasn't supposed to see it. 
there is nobody who wasn't supposed to see it, if you published it. 
so in that case the problem doesn't exist. 
so these are four sub-issues of this one threat of abusing our data. 
the idea of the freedom box project is you have your own server in your own home, and when you want to do something remotely, you do it with your own server, and the police have to get a court order in order to search your server. 
so you have the same rights this way that you would have traditionally in the physical world. 
the point here and in so many other issues is: as we start doing things digitally instead of physically, we shouldn't lose any of our rights; because the general tendency is that we do lose rights. 
basically, stallman's law says that, in an epoch when governments work for the mega-corporations instead of reporting to their citizens, every technological change can be taken advantage of to reduce our freedom. 
because reducing our freedom is what these governments want to do. 
so the question is: when do they get an opportunity? 
well, any change that happens for some other reason is a possible opportunity, and they will take advantage of it if that's their general desire. 
but the other issue with internet services is that they can take control of your computing, and that's not so commonly known. 
but it's becoming more common. 
there are services that offer to do computing for you on data supplied by you—things that you should do in your own computer but they invite you to let somebody else's computer do that computing work for you. 
and the result is you lose control over it. 
it's just as if you used a nonfree program. 
two different scenarios, but they lead to the same problem. 
if you do your computing with a nonfree program… well, the users don't control the nonfree program, it controls the users, which would include you. 
so you've lost control of the computing that's being done. 
but if you do your computing in his server… well, the programs that are doing it are the ones he chose. 
you can't touch them or see them, so you have no control over them. 
he has control over them, maybe. 
if they are free software and he installs them, then he has control over them. 
but even he might not have control. 
he might be running a proprietary program in his server, in which case it's somebody else who has control of the computing being done in his server. 
he doesn't control it and you don't. 
but suppose he installs a free program, then he has control over the computing being done in his computer, but you don't. 
so, either way, you don't! 
so the only way to have control over your computing is to do it with your copy of a free program. 
this practice is called "software as a service."
 it means doing your computing with your data in somebody else's server. 
and i don't know of anything that can make this acceptable. 
it's always something that takes away your freedom, and the only solution i know of is to refuse. 
for instance, there are servers that will do translation or voice recognition, and you are letting them have control over this computing activity, which we shouldn't ever do. 
of course, we are also giving them data about ourselves which they shouldn't have. 
imagine if you had a conversation with somebody through a voice-recognition translation system that was software as a service and it's really running on a server belonging to some company. 
well, that company also gets to know what was said in the conversation, and if it's a us company that means big brother also gets to know. 
this is no good. 
computers for voting. 
the next threat to our freedom in a digital society is using computers for voting. 
you can't trust computers for voting. 
whoever controls the software in those computers has the power to commit undetectable fraud. 
elections are special, because there's nobody involved that we dare trust fully. 
everybody has to be checked, crosschecked by others, so that nobody is in a position to falsify the results by himself. 
because if anybody is in a position to do that, he might do it. 
so our traditional systems for voting were designed so that nobody was fully trusted, everybody was being checked by others. 
so that nobody could easily commit fraud. 
but once you introduce a program, this is impossible. 
how can you tell if a voting machine will honestly count the votes? 
you'd have to study the program that's running in it during the election, which of course nobody can do, and most people wouldn't even know how to do. 
but even the experts who might theoretically be capable of studying the program, they can't do it while people are voting. 
they'd have to do it in advance, and then how do they know that the program they studied is the one that's running while people vote? 
maybe it's been changed. 
now, if this program is proprietary, that means some company controls it. 
the election authority can't even tell what that program is doing. 
well, this company then could rig the election. 
and there are accusations that this was done in the us within the past ten years, that election results were falsified this way. 
but what if the program is free software? 
that means the election authority who owns this voting machine has control over the software in it, so the election authority could rig the election. 
you can't trust them either. 
you don't dare trust anybody in voting, and the reason is, there's no way that the voters can verify for themselves that their votes were correctly counted, nor that false votes were not added. 
in other activities of life, you can usually tell if somebody is trying to cheat you. 
consider for instance buying something from a store. 
you order something, maybe you give a credit card number. 
if the product doesn't come, you can complain and you can… of course if you've got a good enough memory you'll notice if that product doesn't come. 
you're not just giving total blind trust to the store, because you can check. 
but in elections you can't check. 
i saw once a paper where someone described a theoretical system for voting which used some sophisticated mathematics so that people could check that their votes had been counted, even though everybody's vote was secret, and they could also verify that false votes hadn't been added. 
it was very exciting, powerful mathematics; but even if that mathematics is correct, that doesn't mean the system would be acceptable to use in practice, because the vulnerabilities of a real system might be outside of that mathematics. 
for instance, suppose you're voting over the internet and suppose you're using a machine that's a zombie. 
it might tell you that the vote was sent for a while actually sending a vote for b. who knows whether you'd ever find out? 
so, in practice the only way to see if these systems work and are honest is through years, in fact decades, of trying them and checking in other ways what happened. 
i wouldn't want my country to be the pioneer in this. 
so, use paper for voting. 
make sure there are ballots that can be recounted. 
speaker's note, added subsequently. 
remote voting by internet has an inherent social danger, that your boss might tell you, "i want you to vote for candidate c, and do it from the computer in my office while i watch you."
 he does not need to say out loud that you might be fired if you do not comply. 
this danger is not based on a technical flaw, so it can't be fixed by fixing the technology. 
the war on sharing. 
the next threat to our freedom in a digital society comes from the war on sharing. 
one of the tremendous benefits of digital technology is that it is easy to copy published works and share these copies with others. 
sharing is good, and with digital technology, sharing is easy. 
so, millions of people share. 
those who profit by having power over the distribution of these works don't want us to share. 
and since they are businesses, governments which have betrayed their people and work for the empire of mega-corporations try to serve those businesses, they are against their own people, they are for the businesses, for the publishers. 
well, that's not good. 
and with the help of these governments, the companies have been waging war on sharing, and they've proposed a series of cruel draconian measures. 
why do they propose cruel draconian measures? 
because nothing less has a chance of success: when something is good and easy, people do it, and the only way to stop them is by being very nasty. 
so of course, what they propose is nasty, nasty, and the next one is nastier. 
so they tried suing teenagers for hundreds of thousands of dollars. 
that was pretty nasty. 
and they tried turning our technology against us, digital restrictions management that means, digital handcuffs. 
but among the people there were clever programmers too and they found ways to break the handcuffs. 
so for instance, dvds were designed to have encrypted movies in a secret encryption format, and the idea was that all the programs to decrypt the video would be proprietary with digital handcuffs. 
they would all be designed to restrict the users. 
and their scheme worked ok for a while. 
but some people in europe figured out the encryption and they released a free program that could actually play the video on a dvd. 
well, the movie companies didn't leave it there. 
they went to the us congress and bought a law making that software illegal. 
the united states invented censorship of software in 1998, with the digital millennium copyright act (dmca). 
so the distribution of that free program was forbidden in the united states. 
unfortunately it didn't stop with the united states. 
the european union adopted a directive, in 2003 i believe, requiring such laws. 
the directive only says that commercial distribution has to be banned, but just about every country in the european union has adopted a nastier law. 
in france, the mere possession of a copy of that program is an offense punished by imprisonment, thanks to sarkozy. 
i believe that was done by the law dadvsi. 
i guess he hoped that with an unpronounceable name, people wouldn't be able to criticize it. 
[laughter] so, elections are coming. 
ask the candidates in the parties: will you repeal the dadvsi? 
and if not, don't support them. 
you mustn't give up lost moral territory forever. 
you've got to fight to win it back. 
so, we still are fighting against digital handcuffs. 
the amazon swindle has digital handcuffs to take away the traditional freedoms of readers to do things such as: give a book to someone else, or lend a book to someone else. 
that's a vitally important social act. 
that is what builds society among people who read, lending books. 
amazon doesn't want to let people lend books freely. 
and then there is also selling a book, perhaps to a used bookstore. 
you can't do that either. 
it looked for a while as if drm had disappeared on music, but now they're bringing it back with streaming services such as spotify. 
these services all require proprietary client software, and the reason is so they can put digital handcuffs on the users. 
so, reject them! 
they already showed quite openly that you can't trust them, because first they said: "you can listen as much as you like."
 and then they said: "oh, no! 
you can only listen a certain number of hours a month."
 the issue is not whether that particular change was good or bad, just or unjust; the point is, they have the power to impose any change in policies. 
so don't let them have that power. 
you should have your own copy of any music you want to listen to. 
and then came the next assault on our freedom: hadopi, basically punishment on accusation. 
it was started in france but it's been exported to many other countries. 
the united states now demand such unjust policies in its free exploitation treaties. 
a few months ago, colombia adopted such a law under orders from its masters in washington. 
of course, the ones in washington are not the real masters, they're just the ones who control the united states on behalf of the empire. 
but they're the ones who also dictate to colombia on behalf of the empire. 
in france, since the constitutional council objected to explicitly giving people punishment without trial, they invented a kind of trial which is not a real trial, it's just a form of a trial, so they can pretend that people have a trial before they're punished. 
but in other countries they don't bother with that, it's explicit punishment on accusation only. 
which means that for the sake of their war on sharing, they're prepared to abolish the basic principles of justice. 
it shows how thoroughly anti-freedom anti-justice they are. 
these are not legitimate governments. 
and i'm sure they'll come up with more nasty ideas because they're paid to defeat the people no matter what it takes. 
now, when they do this, they always say that it's for the sake of the artists, that they have to "protect" the "creators."
 now those are both propaganda terms. 
i am convinced that the reason they love the word "creators" is because it is a comparison with a deity. 
they want us to think of artists as super-human, and thus deserving special privileges and power over us, which is something i disagree with. 
in fact though, the only artists that benefit very much from this system are the big stars. 
the other artists are getting crushed into the ground by the heels of these same companies. 
but they treat the stars very well, because the stars have a lot of clout. 
if a star threatens to move to another company, the company says: "oh, we'll give you what you want."
 but for any other artist they say: "you don't matter, we can treat you any way we like."
 so the superstars have been corrupted by the millions of dollars or euros that they get, to the point where they'll do almost anything for more money. 
for instance, j. k. rowling is a good example. 
j. k. rowling, a few years ago, went to court in canada and obtained an order that people who had bought her books must not read them. 
she got an order telling people not to read her books! 
here's what happened. 
a bookstore put the books on display for sale too early, before the date they were supposed to go on sale. 
and people came into the store and said: "oh, i want that!"
 and they bought it and took away their copies. 
and then, they discovered the mistake, so they took the copies off of display. 
but rowling wanted to crush any circulation of any information from those books, so she went to court, and the court ordered those people not to read the books that they now owned. 
in response, i call for a total boycott of harry potter. 
but i don't say you shouldn't read those books or watch the movies, i only say you shouldn't buy the books or pay for the movies. 
[laughter] i leave it to rowling to tell people not to read the books. 
as far as i am concerned, if you borrow the book and read it, that's ok. 
[laughter] just don't give her any money! 
but this happened with paper books. 
the court could make this order but it couldn't get the books back from the people who had bought them. 
imagine if they were ebooks. 
imagine if they were ebooks on the swindle. 
amazon could send commands to erase them. 
so, i don't have much respect for stars who will go to such lengths for more money. 
but most artists aren't like that, they never got enough money to be corrupted. 
because the current system of copyright supports most artists very badly. 
and so, when these companies demand to expand the war on sharing, supposedly for the sake of the artists, i'm against what they want but i would like to support the artists better. 
i appreciate their work and i realize if we want them to do more work we should support them. 
supporting the arts. 
i have two proposals for how to support artists, methods that are compatible with sharing, that would allow us to end the war on sharing and still support artists. 
one method uses tax money. 
we get a certain amount of public funds to distribute among artists. 
but, how much should each artist get? 
well, we have to measure popularity. 
you see, the current system supposedly supports artists based on their popularity. 
so i'm saying: let's keep that, let's continue in this system to support them based on their popularity. 
we can measure the popularity of all the artists with some kind of polling or sampling, so that we don't have to do surveillance. 
we can respect people's anonymity. 
ok, we get a raw popularity figure for each artist, how do we convert that into an amount of money? 
well, the obvious way is: distribute the money in proportion to popularity. 
so if a is a thousand times as popular as b, a will get a thousand times as much money as b. that's not efficient distribution of the money. 
it's not putting the money to good use. 
you see, it's easy for a star a to be a thousand times as popular as a fairly successful artist b. and if we use linear proportion, we'll give a a thousand times as much money as we give b. and that means that, either we have to make a tremendously rich, or we are not supporting b enough. 
well, the money we use to make a tremendously rich is failing to do an effective job of supporting the arts; so, it's inefficient. 
therefore i say: let's use the cube root. 
cube root looks sort of like this. 
the point is: if a is a thousand times as popular as b, with the cube root a will get ten times as much as b, not a thousand times as much, just ten times as much. 
so the use of the cube root shifts a lot of the money from the stars to the artists of moderate popularity. 
and that means, with less money we can adequately support a much larger number of artists. 
there are two reasons why this system would use less money than we pay now. 
first of all because it would be supporting artists but not companies, second because it would shift the money from the stars to the artists of moderate popularity. 
now, it would remain the case that the more popular you are, the more money you get. 
and so the star a would still get more than b, but not astronomically more. 
that's one method, and because it won't be so much money it doesn't matter so much how we get the money. 
it could be from a special tax on internet connectivity, it could just be some of the general budget that gets allocated to this purpose. 
we won't care because it won't be so much money, much less than we're paying now. 
the other method i've proposed is voluntary payments. 
suppose each player had a button you could use to send one euro. 
a lot of people would send it; after all it's not that much money. 
i think a lot of you might push that button every day, to give one euro to some artist who had made a work that you liked. 
but nothing would demand this, you wouldn't be required or ordered or pressured to send the money; you would do it because you felt like it. 
but there are some people who wouldn't do it because they're poor and they can't afford to give one euro. 
and it's good that they won't give it, we don't have to squeeze money out of poor people to support the artists. 
there are enough non-poor people who'll be happy to do it. 
why wouldn't you give one euro to some artists today, if you appreciated their work? 
it's too inconvenient to give it to them. 
so my proposal is to remove the inconvenience. 
if the only reason not to give that euro is you would have one euro less, you would do it fairly often. 
so these are my two proposals for how to support artists, while encouraging sharing because sharing is good. 
let's put an end to the war on sharing, laws like dadvsi and hadopi, it's not just the methods that they propose that are evil, their purpose is evil. 
that's why they propose cruel and draconian measures. 
they're trying to do something that's nasty by nature. 
so let's support artists in other ways. 
rights in cyberspace. 
the last threat to our freedom in digital society is the fact that we don't have a firm right to do the things we do, in cyberspace. 
in the physical world, if you have certain views and you want to give people copies of a text that defends those views, you're free to do so. 
you could even buy a printer to print them, and you're free to hand them out on the street, or you're free to rent a store and hand them out there. 
if you want to collect money to support your cause, you can just have a can and people could put money into the can. 
you don't need to get somebody else's approval or cooperation to do these things. 
but, in the internet, you do need that. 
for instance if want to distribute a text on the internet, you need companies to help you do it. 
you can't do it by yourself. 
so if you want to have a website, you need the support of an isp or a hosting company, and you need a domain name registrar. 
you need them to continue to let you do what you're doing. 
so you're doing it effectively on sufferance, not by right. 
and if you want to receive money, you can't just hold out a can. 
you need the cooperation of a payment company. 
and we saw that this makes all of our digital activities vulnerable to suppression. 
we learned this when the united states government launched a "distributed denial of service attack" (ddos) against wikileaks. 
now i'm making a bit of joke because the words "distributed denial of service attack" usually refer to a different kind of attack. 
but they fit perfectly with what the united states did. 
the united states went to the various kinds of network services that wikileaks depended on, and told them to cut off service to wikileaks. 
and they did! 
for instance, wikileaks had rented a virtual amazon server, and the us government told amazon: "cut off service for wikileaks."
 and it did, arbitrarily. 
and then, amazon had certain domain names such as wikileaks.org. 
the us government tried to get all those domains shut off. 
but it didn't succeed, some of them were outside its control and were not shut off. 
then, there were the payment companies. 
the us went to paypal and said: "stop transferring money to wikileaks or we'll make life difficult for you."
 and paypal shut off payments to wikileaks. 
and then it went to visa and mastercard and got them to shut off payments to wikileaks. 
others started collecting money on wikileaks' behalf and their accounts were shut off too. 
but in this case, maybe something can be done. 
there's a company in iceland which began collecting money on behalf of wikileaks, and so visa and mastercard shut off its account; it couldn't receive money from its customers either. 
and now, that business is suing visa and mastercard apparently, under european union law, because visa and mastercard together have a near-monopoly. 
they're not allowed to arbitrarily deny service to anyone. 
well, this is an example of how things need to be for all kinds of services that we use in the internet. 
if you rented a store to hand out statements of what you think, or any other kind of information that you can lawfully distribute, the landlord couldn't kick you out just because he didn't like what you were saying. 
as long as you keep paying the rent, you have a right to continue in that store for a certain agreed-on period of time that you signed. 
so you have some rights that you can enforce. 
and they couldn't shut off your telephone line because the phone company doesn't like what you said, or because some powerful entity didn't like what you said and threatened the phone company. 
no! 
as long as you pay the bills and obey certain basic rules, they can't shut off your phone line. 
this is what it's like to have some rights! 
well, if we move our activities from the physical world to the virtual world, then either we have the same rights in the virtual world, or we have been harmed. 
so, the precarity of all our internet activities is the last of the menaces i wanted to mention. 
now i'd like to say that for more information about free software, look at gnu.org. 
also look at fsf.org, which is the website of the free software foundation. 
you can go there and find many ways you can help us, for instance. 
you can also become a member of the free software foundation through that site. 
[…] there is also the free software foundation of europe fsfe.org. 
you can join fsf europe also. 
[…] footnote. 
as of 2017 the patents on playing mp3 files have reportedly expired. 
why free software needs free documentation. 
the biggest deficiency in free operating systems is not in the software—it is the lack of good free manuals that we can include in these systems. 
many of our most important programs do not come with full manuals. 
documentation is an essential part of any software package; when an important free software package does not come with a free manual, that is a major gap. 
we have many such gaps today. 
once upon a time, many years ago, i thought i would learn perl. 
i got a copy of a free manual, but i found it hard to read. 
when i asked perl users about alternatives, they told me that there were better introductory manuals—but those were not free (not freedom-respecting). 
why was this? 
the authors of the good manuals had written them for o'reilly associates, which published them with restrictive terms—no copying, no modification, source files not available—which made them nonfree, thus excluded them from the free world. 
that wasn't the first time this sort of thing has happened, and (to our community's great loss) it was far from the last. 
proprietary manual publishers have enticed a great many authors to restrict their manuals since then. 
many times i have heard a gnu user eagerly tell me about a manual that he is writing, with which he expects to help the gnu project—and then had my hopes dashed, as he proceeded to explain that he had signed a contract with a publisher that would restrict it so that we cannot use it. 
given that writing good english is a rare skill among programmers, we can ill afford to lose manuals this way. 
join our mailing list about the dangers of ebooks. 
free documentation, like free software, is a matter of freedom, not price. 
the problem with these manuals was not that o'reilly associates charged a price for printed copies—that in itself is fine. 
(the free software foundation sells printed copies of free gnu manuals, too.) but gnu manuals are available in source code form, while these manuals are available only on paper. 
gnu manuals come with permission to copy and modify; the perl manuals do not. 
these restrictions are the problems. 
the criterion for a free manual is pretty much the same as for free software: it is a matter of giving all users certain freedoms. 
redistribution (including commercial redistribution) must be permitted, so that the manual can accompany every copy of the program, on line or on paper. 
permission for modification is crucial too. 
the gnu free documentation license as a general rule, i don't believe that it is essential for people to have permission to modify all sorts of articles and books. 
the issues for writings are not necessarily the same as those for software. 
for example, i don't think you or i are obliged to give permission to modify articles like this one, which describe our actions and our views. 
but there is a particular reason why the freedom to modify is crucial for documentation for free software. 
when people exercise their right to modify the software, and add or change its features, if they are conscientious they will change the manual too—so they can provide accurate and usable documentation with the modified program. 
a manual which forbids programmers from being conscientious and finishing the job, or more precisely requires them to write a new manual from scratch if they change the program, does not fill our community's needs. 
while a blanket prohibition on modification is unacceptable, some kinds of limits on the method of modification pose no problem. 
for example, requirements to preserve the original author's copyright notice, the distribution terms, or the list of authors, are ok. 
it is also no problem to require modified versions to include notice that they were modified, even to have entire sections that may not be deleted or changed, as long as these sections deal with nontechnical topics. 
(some gnu manuals have them.) these kinds of restrictions are not a problem because, as a practical matter, they don't stop the conscientious programmer from adapting the manual to fit the modified program. 
in other words, they don't block the free software community from making full use of the manual. 
however, it must be possible to modify all the technical content of the manual, and then distribute the result through all the usual media, through all the usual channels; otherwise, the restrictions do block the community, the manual is not free, and so we need another manual. 
unfortunately, it is often hard to find someone to write another manual when a proprietary manual exists. 
the obstacle is that many users think that a proprietary manual is good enough—so they don't see the need to write a free manual. 
they do not see that the free operating system has a gap that needs filling. 
why do users think that proprietary manuals are good enough? 
some have not considered the issue. 
i hope this article will do something to change that. 
other users consider proprietary manuals acceptable for the same reason so many people consider proprietary software acceptable: they judge in purely practical terms, not using freedom as a criterion. 
these people are entitled to their opinions, but since those opinions spring from values which do not include freedom, they are no guide for those of us who do value freedom. 
please spread the word about this issue. 
we continue to lose manuals to proprietary publishing. 
if we spread the word that proprietary manuals are not sufficient, perhaps the next person who wants to help gnu by writing documentation will realize, before it is too late, that he must above all make it free. 
we can also encourage commercial publishers to sell free, copylefted manuals instead of proprietary ones. 
one way you can help this is to check the distribution terms of a manual before you buy it, and prefer copylefted manuals to noncopylefted ones. 
[note: we maintain a page that lists free books available from other publishers]. 
free hardware and free hardware designs. 
stallman to what extent do the ideas of free software extend to hardware? 
is it a moral obligation to make our hardware designs free, just as it is to make our software free? 
does maintaining our freedom require rejecting hardware made from nonfree designs? 
definitions. 
free software is a matter of freedom, not price; broadly speaking, it means that users are free to use the software and to copy and redistribute the software, with or without changes. 
more precisely, the definition is formulated in terms of the four essential freedoms. 
to emphasize that "free"refers to freedom, not price, we often use the french or spanish word "libre" along with "free."
 applying the same concept directly to hardware, free hardware means hardware that users are free to use and to copy and redistribute with or without changes. 
however, there are no copiers for hardware, aside from keys, dna, and plastic objects' exterior shapes. 
most hardware is made by fabrication from some sort of design. 
the design comes before the hardware. 
thus, the concept we really need is that of a free hardware design. 
that's simple: it means a design that permits users to use the design (i.e., fabricate hardware from it) and to copy and redistribute it, with or without changes. 
the design must provide the same four freedoms that define free software. 
then we can refer to hardware made from a free design as "free hardware," but "free-design hardware" is a clearer term since it avoids possible misunderstanding. 
people first encountering the idea of free software often think it means you can get a copy gratis. 
many free programs are available for zero price, since it costs you nothing to download your own copy, but that's not what "free" means here. 
(in fact, some spyware programs such as flash player and angry birds are gratis although they are not free.) saying "libre" along with "free" helps clarify the point. 
for hardware, this confusion tends to go in the other direction; hardware costs money to produce, so commercially made hardware won't be gratis (unless it is a loss-leader or a tie-in), but that does not prevent its design from being free/libre. 
things you make in your own 3d printer can be quite cheap to make, but not exactly gratis since the raw materials will typically cost something. 
in ethical terms, the freedom issue trumps the price issue totally, since a device that denies freedom to its users is worth less than nothing. 
we can use the term "libre hardware" as a concise equivalent for "hardware made from a free (libre) design."
 the terms "open hardware" and "open source hardware" are used by some with the same concrete meaning as "free-design hardware," but those terms downplay freedom as an issue. 
they were derived from the term "open source software," which refers more or less to free software but without talking about freedom or presenting the issue as a matter of right or wrong. 
to underline the importance of freedom, we make a point of referring to freedom whenever it is pertinent; since "open" fails to do that, let's not substitute it for "free."
 hardware and software. 
hardware and software are fundamentally different. 
a program, even in compiled executable form, is a collection of data which can be interpreted as instructions for a computer. 
like any other digital work, it can be copied and changed using a computer. 
a copy of a program has no inherent preferred physical form or embodiment. 
by contrast, hardware is a physical structure and its physicality is crucial. 
while the hardware's design might be represented as data, in some cases even as a program, the design is not the hardware. 
a design for a cpu can't execute a program. 
you won't get very far trying to type on a design for a keyboard or display pixels on a design for a screen. 
furthermore, while you can use a computer to modify or copy the hardware design, a computer can't convert the design into the physical structure it describes. 
that requires fabrication equipment. 
the boundary between hardware and software. 
what is the boundary, in digital devices, between hardware and software? 
it follows from the definitions. 
software is the operational part of a device that can be copied, and modified with a computer; hardware is the operational part that can't be. 
this is the right way to make the distinction because it relates to the practical consequences. 
there is a gray area between hardware and software that contains firmware that can be upgraded or replaced, but is not meant ever to be upgraded or replaced once the product is sold. 
or perhaps it is possible but unusual, or the manufacturer can release a replacement but you can't. 
in conceptual terms, the gray area is rather narrow. 
in practice, it is important because many products fall in it. 
indeed, nowadays keyboards, cameras, disk drives and usb memories typically contain an embedded nonfree program that could be replaced by the manufacturer. 
we can think of the difference between built-in firmware and equivalent hardware as a minor implementation detail, provided that we are sure in either case that it won't be changed. 
a hardware circuit can't be changed; that's its nature. 
if it's acceptable for a device to be implemented with internal circuitry that no one can alter, then an internal program that no one can alter is no worse. 
it would not be sensible to reject an equivalent internal software implementation, when operationally they are indistinguishable. 
the equivalence falls apart, however, when the software implementation is not totally internal and some company can modify that code. 
for example, when firmware needs to be copied into the device to make the device function, or included in the system distribution that you install, that is no internal software implementation; rather, it is a piece of installed nonfree software. 
it is unjust because some manufacturer can change it but you can't. 
in order for a firmware program to be morally equivalent to hardware, it must be unmodifiable. 
what about when the device can't possibly run without some firmware and it offers a way to modify that? 
we can make that firmware unmodifiable in practice by taking care never to let that replacement happen. 
this solution is not entirely clean, but no entirely clean solution has been proposed; this is the only way we know to preserve some meaning for the rejection of nonfree software while using that device. 
this is much better than just giving up. 
but we can't have it both ways. 
to make preinstalled firmware effectively unmodifiable by not letting anyone invoke the method to change it, we must carry that out without exception even when there are changes we would wish were installed. 
that means rejecting all upgrades or patches to that firmware. 
some have said that preinstalled firmware programs and field-programmable gate array chips (fpgas) "blur the boundary between hardware and software," but i think that is a misinterpretation of the facts. 
firmware that is installed during use is software; firmware that is delivered inside the device and can't be changed is software by nature, but we can treat it as if it were a circuit. 
as for fpgas, the fpga itself is hardware, but the gate pattern that is loaded into the fpga is a kind of firmware. 
running free gate patterns on fpgas could potentially be a useful method for making digital devices that are free at the circuit level. 
however, to make fpgas usable in the free world, we need free development tools for them. 
the obstacle is that the format of the gate pattern file that gets loaded into the fpga is secret. 
for many years there was no model of fpga for which those files could be produced without nonfree (proprietary) tools. 
as of 2015, free software tools are available for programming the lattice ice40, a common model of fpga, from input written in a hardware description language (hdl). 
it is also possible to compile c programs and run them on the xilinx spartan 6 lx9 fpga with free tools, but those do not support hdl input. 
we recommend that you reject other fpga models until they too are supported by free tools. 
as for the hdl code itself, it can act as software (when it is run on an emulator or loaded into an fpga) or as a hardware design (when it is realized in immutable silicon or a circuit board). 
the ethical question for 3d printers. 
ethically, software must be free; a nonfree program is an injustice. 
should we take the same view for hardware designs? 
we certainly should, in the fields that 3d printing (or, more generally, any sort of personal fabrication) can handle. 
printer patterns to make a useful, practical object (i.e., functional rather than decorative) must be free because they are works made for practical use. 
users deserve control over these works, just as they deserve control over the software they use. 
distributing a nonfree functional object design is as wrong as distributing a nonfree program. 
be careful to choose 3d printers that work with exclusively free software; the free software foundation endorses such printers. 
some 3d printers are made from free hardware designs, but makerbot's hardware designs are nonfree. 
must we reject nonfree digital hardware?. 
is a nonfree digital [1] hardware design an injustice? 
must we, for our freedom's sake, reject all digital hardware made from nonfree designs, as we must reject nonfree software? 
due to the conceptual parallel between hardware designs and software source code, many hardware hackers are quick to condemn nonfree hardware designs just like nonfree software. 
i disagree because the circumstances for hardware and software are different. 
present-day chip and board fabrication technology resembles the printing press: it lends itself to mass production in a factory. 
it is more like copying books in 1950 than like copying software today. 
freedom to copy and change software is an ethical imperative because those activities are feasible for those who use software: the equipment that enables you to use the software (a computer) is also sufficient to copy and change it. 
today's mobile computers are too weak to be good for this, but anyone can find a computer that's powerful enough. 
moreover, a computer suffices to download and run a version changed by someone else who knows how, even if you are not a programmer. 
indeed, nonprogrammers download software and run it every day. 
this is why free software makes a real difference to nonprogrammers. 
how much of this applies to hardware? 
not everyone who can use digital hardware knows how to change a circuit design, or a chip design, but anyone who has a pc has the equipment needed to do so. 
thus far, hardware is parallel to software, but next comes the big difference. 
you can't build and run a circuit design or a chip design in your computer. 
constructing a big circuit is a lot of painstaking work, and that's once you have the circuit board. 
fabricating a chip is not feasible for individuals today; only mass production can make them cheap enough. 
with today's hardware technology, users can't download and run a modified version of a widely used digital hardware design, as they could run a modified version of a widely used program. 
thus, the four freedoms don't give users today collective control over a hardware design as they give users collective control over a program. 
that's where the reasoning showing that all software must be free fails to apply to today's hardware technology. 
in 1983 there was no free operating system, but it was clear that if we had one, we could immediately use it and get software freedom. 
all that was missing was the code for one. 
in 2014, if we had a free design for a cpu chip suitable for a pc, mass-produced chips made from that design would not give us the same freedom in the hardware domain. 
if we're going to buy a product mass produced in a factory, this dependence on the factory causes most of the same problems as a nonfree design. 
for free designs to give us hardware freedom, we need future fabrication technology. 
we can envision a future in which our personal fabricators can make chips, and our robots can assemble and solder them together with transformers, switches, keys, displays, fans and so on. 
in that future we will all make our own computers (and fabricators and robots), and we will all be able to take advantage of modified designs made by those who know hardware. 
the arguments for rejecting nonfree software will then apply to nonfree hardware designs too. 
that future is years away, at least. 
in the meantime, there is no need to reject hardware with nonfree designs on principle. 
we need free digital hardware designs. 
although we need not reject digital hardware made from nonfree designs in today's circumstances, we need to develop free designs and should use them when feasible. 
they provide advantages today, and in the future they may be the only way to use free software. 
free hardware designs offer practical advantages. 
multiple companies can fabricate one, which reduces dependence on a single vendor. 
groups can arrange to fabricate them in quantity. 
having circuit diagrams or hdl code makes it possible to study the design to look for errors or malicious functionalities (it is known that the nsa has procured malicious weaknesses in some computing hardware). 
furthermore, free designs can serve as building blocks to design computers and other complex devices, whose specs will be published and which will have fewer parts that could be used against us. 
free hardware designs may become usable for some parts of our computers and networks, and for embedded systems, before we are able to make entire computers this way. 
free hardware designs may become essential even before we can fabricate the hardware personally, if they become the only way to avoid nonfree software. 
as common commercial hardware is increasingly designed to subjugate users, it becomes increasingly incompatible with free software, because of secret specifications and requirements for code to be signed by someone other than you. 
cell phone modem chips and even some graphics accelerators already require firmware to be signed by the manufacturer. 
any program in your computer, that someone else is allowed to change but you're not, is an instrument of unjust power over you; hardware that imposes that requirement is malicious hardware. 
in the case of cell phone modem chips, all the models now available are malicious. 
some day, free-design digital hardware may be the only platform that permits running a free system at all. 
let us aim to have the necessary free digital designs before then, and hope that we have the means to fabricate them cheaply enough for all users. 
if you design hardware, please make your designs free. 
if you use hardware, please join in urging and pressuring companies to make hardware designs free. 
levels of design. 
software has levels of implementation; a package might include libraries, commands and scripts, for instance. 
but these levels don't make a significant difference for software freedom because it is feasible to make all the levels free. 
designing components of a program is the same sort of work as designing the code that combines them; likewise, building the components from source is the same sort of operation as building the combined program from source. 
to make the whole thing free simply requires continuing the work until we have done the whole job. 
therefore, we insist that a program be free at all levels. 
for a program to qualify as free, every line of the source code that composes it must be free, so that you can rebuild the program out of free source code alone. 
physical objects, by contrast, are often built out of components that are designed and build in a different kind of factory. 
for instance, a computer is made from chips, but designing (or fabricating) chips is very different from designing (or fabricating) the computer out of chips. 
thus, we need to distinguish levels in the design of a digital product (and maybe some other kinds of products). 
the circuit that connects the chips is one level; each chip's design is another level. 
in an fpga, the interconnection of primitive cells is one level, while the primitive cells themselves are another level. 
in the ideal future we will want the design be free at all levels. 
under present circumstances, just making one level free is a significant advance. 
however, if a design at one level combines free and nonfree parts—for example, a "free" hdl circuit that incorporates proprietary "soft cores"—we must conclude that the design as a whole is nonfree at that level. 
likewise for nonfree "wizards" or "macros," if they specify part of the interconnections of chips or programmably connected parts of chips. 
the free parts may be a step towards the future goal of a free design, but reaching that goal entails replacing the nonfree parts. 
they can never be admissible in the free world. 
licenses and copyright for free hardware designs. 
you make a hardware design free by releasing it under a free license. 
we recommend using the gnu general public license, version 3 or later. 
we designed gpl version 3 with a view to such use. 
copyleft on circuits, and on nondecorative object shapes, doesn't go as far as one might suppose. 
the copyright on these designs only applies to the way the design is drawn or written. 
copyleft is a way of using copyright law, so its effect carries only as far as copyright law carries. 
for instance, a circuit, as a topology, cannot be copyrighted (and therefore cannot be copylefted). 
definitions of circuits written in hdl can be copyrighted (and therefore copylefted), but the copyleft covers only the details of expression of the hdl code, not the circuit topology it generates. 
likewise, a drawing or layout of a circuit can be copyrighted, so it can be copylefted, but this only covers the drawing or layout, not the circuit topology. 
anyone can legally draw the same circuit topology in a different-looking way, or write a different hdl definition that produces the same circuit. 
copyright doesn't cover physical circuits, so when people build instances of the circuit, the design's license will have no legal effect on what they do with the devices they have built. 
for drawings of objects, and 3d printer models, copyright doesn't cover making a different drawing of the same purely functional object shape. 
it also doesn't cover the functional physical objects made from the drawing. 
as far as copyright is concerned, everyone is free to make them and use them (and that's a freedom we need very much). 
in the us, copyright does not cover the functional aspects that the design describes, but does cover decorative aspects. 
when one object has decorative aspects and functional aspects, you get into tricky ground [2]. 
all this may be true in your country as well, or it may not. 
before producing objects commercially or in quantity, you should consult a local lawyer. 
copyright is not the only issue you need to be concerned with. 
you might be attacked using patents, most likely held by entities that had nothing to do with making the design you're using, and there may be other legal issues as well. 
keep in mind that copyright law and patent law are totally different. 
it is a mistake to suppose that they have anything in common. 
this is why the term "intellectual property" is pure confusion and should be totally rejected. 
promoting free hardware designs through repositories. 
the most effective way to push for published hardware designs to be free is through rules in the repositories where they are published. 
repository operators should place the freedom of the people who will use the designs above the preferences of people who make the designs. 
this means requiring designs of useful objects to be free, as a condition for posting them. 
for decorative objects, that argument does not apply, so we don't have to insist they must be free. 
however, we should insist that they be sharable. 
thus, a repository that handles both decorative object models and functional ones should have an appropriate license policy for each category. 
for digital designs, i suggest that the repository insist on gnu gpl v3-or-later, apache 2.0, or cc0. 
for functional 3d designs, the repository should ask the design's author to choose one of four licenses: gnu gpl v3-or-later, apache 2.0, cc by-sa, cc by or cc0. 
for decorative designs, it should suggest gnu gpl v3-or-later, apache 2.0, cc0, or any of the cc licenses. 
the repository should require all designs to be published as source code, and source code in secret formats usable only by proprietary design programs is not really adequate. 
for a 3d model, the stl format is not the preferred format for changing the design and thus is not source code, so the repository should not accept it, except perhaps accompanying real source code. 
there is no reason to choose one single format for the source code of hardware designs, but source formats that cannot yet be handled with free software should be accepted reluctantly at best. 
free hardware designs and warranties. 
in general, the authors of free hardware designs have no moral obligation to offer a warranty to those that fabricate the design. 
this is a different issue from the sale of physical hardware, which ought to come with a warranty from the seller and/or the manufacturer. 
conclusion. 
we already have suitable licenses to make our hardware designs free. 
what we need is to recognize as a community that this is what we should do and to insist on free designs when we fabricate objects ourselves. 
footnotes. 
as used here, "digital hardware" includes hardware with some analog circuits and components in addition to digital ones. 
an article by public knowledge gives useful information about this complexity, for the us, though it falls into the common mistake of using the bogus concept of "intellectual property" and the propaganda term "protection."
 most of this article was published in two parts in wired in march 2015. 
www.gnu.org/philosophy/free-open-overlap.html
free software is even more important now. 
stallman since 1983, the free software movement has campaigned for computer users' freedom—for users to control the software they use, rather than vice versa. 
when a program respects users' freedom and community, we call it "free software."
 we also sometimes call it "libre software" to emphasize that we're talking about liberty, not price. 
some proprietary (nonfree) programs, such as photoshop, are very expensive; others, such as the uber app, are available gratis—but that's a minor detail. 
either way, they give the program's developer power over the users, power that no one should have. 
watch a 14-min video presentation of these ideas. 
those two nonfree programs have something else in common: they are both malware. 
that is, both have functionalities designed to mistreat the user. 
proprietary software nowadays is often malware because the developers' power corrupts them. 
that directory lists around 600 different malicious functionalities (as of april 2023), but it is surely just the tip of the iceberg. 
with free software, the users control the program, both individually and collectively. 
so they control what their computers do (assuming those computers are loyal and do what the users' programs tell them to do). 
with proprietary software, the program controls the users, and some other entity (the developer or "owner") controls the program. 
so the proprietary program gives its developer power over its users. 
that is unjust in itself; moreover, it tempts the developer to mistreat the users in other ways. 
even when proprietary software isn't downright malicious, its developers have an incentive to make it addictive, controlling and manipulative. 
you can say, as does the author of that article, that the developers have an ethical obligation not to do that, but generally they follow their interests. 
if you want this not to happen, make sure the program is controlled by its users. 
freedom means having control over your own life. 
if you use a program to carry out activities in your life, your freedom depends on your having control over the program. 
you deserve to have control over the programs you use, and all the more so when you use them for something important in your life. 
users' control over the program requires four essential freedoms. 
(0) the freedom to run the program as you wish, for whatever purpose. 
(1) the freedom to study the program's "source code," and change it, so the program does your computing as you wish. 
programs are written by programmers in a programming language—like english combined with algebra—and that form of the program is the "source code."
 anyone who knows programming, and has the program in source code form, can read the source code, understand its functioning, and change it too. 
when all you get is the executable form, a series of numbers that are efficient for the computer to run but extremely hard for a human being to understand, understanding and changing the program in that form are forbiddingly hard. 
(2) the freedom to make and distribute exact copies when you wish. 
(it is not an obligation; doing this is your choice. 
if the program is free, that doesn't mean someone has an obligation to offer you a copy, or that you have an obligation to offer him a copy. 
distributing a program to users without freedom mistreats them; however, choosing not to distribute the program—using it privately—does not mistreat anyone.) (3) the freedom to make and distribute copies of your modified versions, when you wish. 
the first two freedoms mean each user can exercise individual control over the program. 
with the other two freedoms, any group of users can together exercise collective control over the program. 
with all four freedoms, the users fully control the program. 
if any of them is missing or inadequate, the program is proprietary (nonfree), and unjust. 
other kinds of works are also used for practical activities, including recipes for cooking, educational works such as textbooks, reference works such as dictionaries and encyclopedias, fonts for displaying paragraphs of text, circuit diagrams for hardware for people to build, and patterns for making useful (not merely decorative) objects with a 3d printer. 
since these are not software, the free software movement strictly speaking doesn't cover them; but the same reasoning applies and leads to the same conclusion: these works should carry the four freedoms. 
a free program allows you to tinker with it to make it do what you want (or cease to do something you dislike). 
tinkering with software may sound ridiculous if you are accustomed to proprietary software as a sealed box, but in the free world it's a common thing to do, and a good way to learn programming. 
even the traditional american pastime of tinkering with cars is obstructed because cars now contain nonfree software. 
the injustice of proprietariness. 
if the users don't control the program, the program controls the users. 
with proprietary software, there is always some entity, the developer or "owner" of the program, that controls the program—and through it, exercises power over its users. 
a nonfree program is a yoke, an instrument of unjust power. 
in outrageous cases (though this outrage has become quite usual) proprietary programs are designed to spy on the users, restrict them, censor them, and abuse them. 
for instance, the operating system of apple ithings does all of these, and so does windows on mobile devices with arm chips. 
windows, mobile phone firmware, and google chrome for windows include a universal back door that allows some company to change the program remotely without asking permission. 
the amazon kindle has a back door that can erase books. 
the use of nonfree software in the "internet of things" would turn it into the "internet of telemarketers" as well as the "internet of snoopers."
 with the goal of ending the injustice of nonfree software, the free software movement develops free programs so users can free themselves. 
we began in 1984 by developing the free operating system gnu. 
today, millions of computers run gnu, mainly in the gnu/linux combination. 
distributing a program to users without freedom mistreats those users; however, choosing not to distribute the program does not mistreat anyone. 
if you write a program and use it privately, that does no wrong to others. 
(you do miss an opportunity to do good, but that's not the same as doing wrong.) thus, when we say all software must be free, we mean that every copy must come with the four freedoms, but we don't mean that someone has an obligation to offer you a copy. 
nonfree software and saass. 
nonfree software was the first way for companies to take control of people's computing. 
nowadays, there is another way, called service as a software substitute, or saass. 
that means letting someone else's server do your own computing tasks. 
saass doesn't mean the programs on the server are nonfree (though they often are). 
rather, using saass causes the same injustices as using a nonfree program: they are two paths to the same bad place. 
take the example of a saass translation service: the user sends text to the server, and the server translates it (from english to spanish, say) and sends the translation back to the user. 
now the job of translating is under the control of the server operator rather than the user. 
if you use saass, the server operator controls your computing. 
it requires entrusting all the pertinent data to the server operator, which will be forced to show it to the state as well—who does that server really serve, after all? 
primary and secondary injustices. 
when you use proprietary programs or saass, first of all you do wrong to yourself, because it gives some entity unjust power over you. 
for your own sake, you should escape. 
it also wrongs others if you make a promise not to share. 
it is evil to keep such a promise, and a lesser evil to break it; to be truly upright, you should not make the promise at all. 
there are cases where using nonfree software puts pressure directly on others to do likewise. 
skype is a clear example: when one person uses the nonfree skype client software, it requires another person to use that software too—thus both surrender their freedom. 
(google hangouts have the same problem.) it is wrong even to suggest using such programs. 
we should refuse to use them even briefly, even on someone else's computer. 
another harm of using nonfree programs and saass is that it rewards the perpetrator, encouraging further development of that program or "service," leading in turn to even more people falling under the company's thumb. 
all the forms of indirect harm are magnified when the user is a public entity or a school. 
free software and the state. 
public agencies exist for the people, not for themselves. 
when they do computing, they do it for the people. 
they have a duty to maintain full control over that computing so that they can assure it is done properly for the people. 
(this constitutes the computational sovereignty of the state.) they must never allow control over the state's computing to fall into private hands. 
to maintain control of the people's computing, public agencies must not do it with proprietary software (software under the control of an entity other than the state). 
and they must not entrust it to a service programmed and run by an entity other than the state, since this would be saass. 
proprietary software has no security at all in one crucial case—against its developer. 
and the developer may help others attack. 
microsoft shows windows bugs to the nsa (the us government digital spying agency) before fixing them. 
we do not know whether apple does likewise, but it is under the same government pressure as microsoft. 
if the government of any other country uses such software, it endangers national security. 
do you want the nsa to break into your government's computers? 
see our suggested policies for governments to promote free software. 
free software and education. 
schools (and this includes all educational activities) influence the future of society through what they teach. 
they should teach exclusively free software, so as to use their influence for the good. 
to teach a proprietary program is to implant dependence, which goes against the mission of education. 
by training in use of free software, schools will direct society's future towards freedom, and help talented programmers master the craft. 
they will also teach students the habit of cooperating, helping other people. 
each class should have this rule: "students, this class is a place where we share our knowledge. 
if you bring software to class, you may not keep it for yourself. 
rather, you must share copies with the rest of the class—including the program's source code, in case someone else wants to learn. 
therefore, bringing proprietary software to class is not permitted except to reverse engineer it."
 proprietary developers would have us punish students who are good enough at heart to share software and thwart those curious enough to want to change it. 
this means a bad education. 
see more discussion about the use of free software in schools. 
free software: more than "advantages". 
i'm often asked to describe the "advantages" of free software. 
but the word "advantages" is too weak when it comes to freedom. 
life without freedom is oppression, and that applies to computing as well as every other activity in our lives. 
we must refuse to give the developers of the programs or computing services control over the computing we do. 
this is the right thing to do, for selfish reasons; but not solely for selfish reasons. 
freedom includes the freedom to cooperate with others. 
denying people that freedom means keeping them divided, which is the start of a scheme to oppress them. 
in the free software community, we are very much aware of the importance of the freedom to cooperate because our work consists of organized cooperation. 
if your friend comes to visit and sees you use a program, she might ask for a copy. 
a program which stops you from redistributing it, or says you're "not supposed to," is antisocial. 
in computing, cooperation includes redistributing exact copies of a program to other users. 
it also includes distributing your changed versions to them. 
free software encourages these forms of cooperation, while proprietary software forbids them. 
it forbids redistribution of copies, and by denying users the source code, it blocks them from making changes. 
saass has the same effects: if your computing is done over the web in someone else's server, by someone else's copy of a program, you can't see it or touch the software that does your computing, so you can't redistribute it or change it. 
conclusion. 
we deserve to have control of our own computing. 
how can we win this control? 
by rejecting nonfree software on the computers we own or regularly use, and rejecting saass. 
by developing free software (for those of us who are programmers.) by refusing to develop or promote nonfree software or saass. 
by spreading these ideas to others. 
by saying no and stating our reasons when we are invited to run a nonfree program. 
we and thousands of users have done this since 1984, which is how we now have the free gnu/linux operating system that anyone—programmer or not—can use. 
join our cause, as a programmer or an activist. 
let's make all computer users free. 
suggested ways you can help the free software movement a substantially edited version of this article was published in wired. 
why "free software" is better than "open source". 
this article has been superseded by a major rewrite, "open source" misses the point of free software, which is much better. 
we keep this version for historical reasons. 
while free software by any other name would give you the same freedom, it makes a big difference which name we use: different words convey different ideas. 
in 1998, some of the people in the free software community began using the term "open source software" instead of "free software" to describe what they do. 
the term "open source" quickly became associated with a different approach, a different philosophy, different values, and even a different criterion for which licenses are acceptable. 
the free software movement and the open source movement are today separate movements with different views and goals, although we can and do work together on some practical projects. 
the fundamental difference between the two movements is in their values, their ways of looking at the world. 
for the open source movement, the issue of whether software should be open source is a practical question, not an ethical one. 
as one person put it, "open source is a development methodology; free software is a social movement."
 for the open source movement, nonfree software is a suboptimal solution. 
for the free software movement, nonfree software is a social problem and free software is the solution. 
relationship between the free software movement and open source movement. 
the free software movement and the open source movement are like two political camps within the free software community. 
radical groups in the 1960s developed a reputation for factionalism: organizations split because of disagreements on details of strategy, and then treated each other as enemies. 
or at least, such is the image people have of them, whether or not it was true. 
the relationship between the free software movement and the open source movement is just the opposite of that picture. 
we disagree on the basic principles, but agree more or less on the practical recommendations. 
so we can and do work together on many specific projects. 
we don't think of the open source movement as an enemy. 
the enemy is proprietary software. 
we are not against the open source movement, but we don't want to be lumped in with them. 
we acknowledge that they have contributed to our community, but we created this community, and we want people to know this. 
we want people to associate our achievements with our values and our philosophy, not with theirs. 
we want to be heard, not obscured behind a group with different views. 
to prevent people from thinking we are part of them, we take pains to avoid using the word "open" to describe free software, or its contrary, "closed," in talking about nonfree software. 
so please mention the free software movement when you talk about the work we have done, and the software we have developed—such as the gnu/linux operating system. 
comparing the two terms. 
this rest of this article compares the two terms "free software" and "open source."
 it shows why the term "open source" does not solve any problems, and in fact creates some. 
ambiguity. 
the term "free software" has an ambiguity problem: an unintended meaning, "software you can get for zero price," fits the term just as well as the intended meaning, "software which gives the user certain freedoms."
 we address this problem by publishing a more precise definition of free software, but this is not a perfect solution; it cannot completely eliminate the problem. 
an unambiguously correct term would be better, if it didn't have other problems. 
unfortunately, all the alternatives in english have problems of their own. 
we've looked at many alternatives that people have suggested, but none is so clearly "right" that switching to it would be a good idea. 
every proposed replacement for "free software" has a similar kind of semantic problem, or worse—and this includes "open source software."
 the official definition of "open source software," as published by the open source initiative, is very close to our definition of free software; however, it is a little looser in some respects, and they have accepted a few licenses that we consider unacceptably restrictive of the users. 
however, the obvious meaning for the expression "open source software" is "you can look at the source code."
 this is a much weaker criterion than free software; it includes free software, but also some proprietary programs, including xv, and qt under its original license (before the qpl). 
that obvious meaning for "open source" is not the meaning that its advocates intend. 
the result is that most people misunderstand what those advocates are advocating. 
here is how writer neal stephenson defined "open source": linux is "open source" software meaning, simply, that anyone can get copies of its source code files. 
i don't think he deliberately sought to reject or dispute the "official" definition. 
i think he simply applied the conventions of the english language to come up with a meaning for the term. 
the state of kansas published a similar definition: make use of open-source software (oss). 
oss is software for which the source code is freely and publicly available, though the specific licensing agreements vary as to what one is allowed to do with that code. 
of course, the open source people have tried to deal with this by publishing a precise definition for the term, just as we have done for "free software."
 but the explanation for "free software" is simple—a person who has grasped the idea of "free speech, not free beer" will not get it wrong again. 
there is no such succinct way to explain the official meaning of "open source" and show clearly why the natural definition is the wrong one. 
fear of freedom. 
the main argument for the term "open source software" is that "free software" makes some people uneasy. 
that's true: talking about freedom, about ethical issues, about responsibilities as well as convenience, is asking people to think about things they might rather ignore. 
this can trigger discomfort, and some people may reject the idea for that. 
it does not follow that society would be better off if we stop talking about these things. 
years ago, free software developers noticed this discomfort reaction, and some started exploring an approach for avoiding it. 
they figured that by keeping quiet about ethics and freedom, and talking only about the immediate practical benefits of certain free software, they might be able to "sell" the software more effectively to certain users, especially business. 
the term "open source" is offered as a way of doing more of this—a way to be "more acceptable to business."
 the views and values of the open source movement stem from this decision. 
this approach has proved effective, in its own terms. 
today many people are switching to free software for purely practical reasons. 
that is good, as far as it goes, but that isn't all we need to do! 
attracting users to free software is not the whole job, just the first step. 
sooner or later these users will be invited to switch back to proprietary software for some practical advantage. 
countless companies seek to offer such temptation, and why would users decline? 
only if they have learned to value the freedom free software gives them, for its own sake. 
it is up to us to spread this idea—and in order to do that, we have to talk about freedom. 
a certain amount of the "keep quiet" approach to business can be useful for the community, but we must have plenty of freedom talk too. 
at present, we have plenty of "keep quiet," but not enough freedom talk. 
most people involved with free software say little about freedom—usually because they seek to be "more acceptable to business."
 software distributors especially show this pattern. 
some gnu/linux operating system distributions add proprietary packages to the basic free system, and they invite users to consider this an advantage, rather than a step backwards from freedom. 
we are failing to keep up with the influx of free software users, failing to teach people about freedom and our community as fast as they enter it. 
this is why nonfree software (which qt was when it first became popular), and partially nonfree operating system distributions, find such fertile ground. 
to stop using the word "free" now would be a mistake; we need more, not less, talk about freedom. 
if those using the term "open source" draw more users into our community, that is a contribution, but the rest of us will have to work even harder to bring the issue of freedom to those users' attention. 
we have to say, "it's free software and it gives you freedom!"
—more and louder than ever before. 
would a trademark help?. 
the advocates of "open source software" tried to make it a trademark, saying this would enable them to prevent misuse. 
this initiative was later dropped, the term being too descriptive to qualify as a trademark; thus, the legal status of "open source" is the same as that of "free software": there is no legal constraint on using it. 
i have heard reports of a number of companies' calling software packages "open source" even though they did not fit the official definition; i have observed some instances myself. 
but would it have made a big difference to use a term that is a trademark? 
not necessarily. 
companies also made announcements that give the impression that a program is "open source software" without explicitly saying so. 
for example, one ibm announcement, about a program that did not fit the official definition, said this: as is common in the open source community, users of the … technology will also be able to collaborate with ibm… this did not actually say that the program was "open source," but many readers did not notice that detail. 
(i should note that ibm was sincerely trying to make this program free software, and later adopted a new license which does make it free software and "open source"; but when that announcement was made, the program did not qualify as either one.) and here is how cygnus solutions, which was formed to be a free software company and subsequently branched out (so to speak) into proprietary software, advertised some proprietary software products: cygnus solutions is a leader in the open source market and has just launched two products into the [gnu/]linux marketplace. 
unlike ibm, cygnus was not trying to make these packages free software, and the packages did not come close to qualifying. 
but cygnus didn't actually say that these are "open source software," they just made use of the term to give careless readers that impression. 
these observations suggest that a trademark would not have truly prevented the confusion that comes with the term "open source."
 misunderstandings(?) of "open source". 
the open source definition is clear enough, and it is quite clear that the typical nonfree program does not qualify. 
so you would think that "open source company" would mean one whose products are free software (or close to it), right? 
alas, many companies are trying to give it a different meaning. 
at the "open source developers day" meeting in august 1998, several of the commercial developers invited said they intend to make only a part of their work free software (or "open source"). 
the focus of their business is on developing proprietary add-ons (software or manuals) to sell to the users of this free software. 
they ask us to regard this as legitimate, as part of our community, because some of the money is donated to free software development. 
in effect, these companies seek to gain the favorable cachet of "open source" for their proprietary software products—even though those are not "open source software"—because they have some relationship to free software or because the same company also maintains some free software. 
(one company founder said quite explicitly that they would put, into the free package they support, as little of their work as the community would stand for.) over the years, many companies have contributed to free software development. 
some of these companies primarily developed nonfree software, but the two activities were separate; thus, we could ignore their nonfree products, and work with them on free software projects. 
then we could honestly thank them afterward for their free software contributions, without talking about the rest of what they did. 
we cannot do the same with these new companies, because they won't let us. 
these companies actively invite the public to lump all their activities together; they want us to regard their nonfree software as favorably as we would regard a real contribution, although it is not one. 
they present themselves as "open source companies," hoping that we will get a warm fuzzy feeling about them, and that we will be fuzzy-minded in applying it. 
this manipulative practice would be no less harmful if it were done using the term "free software."
 but companies do not seem to use the term "free software" that way; perhaps its association with idealism makes it seem unsuitable. 
the term "open source" opened the door for this. 
at a trade show in late 1998, dedicated to the operating system often referred to as "linux," the featured speaker was an executive from a prominent software company. 
he was probably invited on account of his company's decision to "support" that system. 
unfortunately, their form of "support" consists of releasing nonfree software that works with the system—in other words, using our community as a market but not contributing to it. 
he said, "there is no way we will make our product open source, but perhaps we will make it "internal" open source. 
if we allow our customer support staff to have access to the source code, they could fix bugs for the customers, and we could provide a better product and better service."
 (this is not an exact quote, as i did not write his words down, but it gets the gist.) people in the audience afterward told me, "he just doesn't get the point."
 but is that so? 
which point did he not get? 
he did not miss the point of the open source movement. 
that movement does not say users should have freedom, only that allowing more people to look at the source code and help improve it makes for faster and better development. 
the executive grasped that point completely; unwilling to carry out that approach in full, users included, he was considering implementing it partially, within the company. 
the point that he missed is the point that "open source" was designed not to raise: the point that users deserve freedom. 
spreading the idea of freedom is a big job—it needs your help. 
that's why we stick to the term "free software" in the gnu project, so we can help do that job. 
if you feel that freedom and community are important for their own sake—not just for the convenience they bring—please join us in using the term "free software."
 note. 
lakhani and wolf's paper on the motivation of free software developers says that a considerable fraction are motivated by the view that software should be free. 
this was despite the fact that they surveyed the developers on sourceforge, a site that does not support the view that this is an ethical issue. 
this essay is published in free software, free society: the selected essays of richard m. stallman. 
free software movement. 
people use free software operating systems such as gnu/linux for various reasons. 
many users switch for practical reasons: because the system is powerful, because it is reliable, or for the convenience of being able to change the software to do what you need. 
those are good reasons—but there is more at stake than just convenience. 
what's at stake is your freedom, and your community. 
the idea of the free software movement is that computer users deserve the freedom to form a community. 
you should have the freedom to help yourself, by changing the source code to do whatever you need to do. 
and the freedom to help your neighbor, by redistributing copies of programs to other people. 
also the freedom to help build your community, by publishing improved versions so that other people can use them. 
whether a program is free software depends mainly on its license. 
however, a program can also be nonfree because you don't have access to its source code, or because hardware won't let you put a modified version into use (this is called "tivoization"). 
our detailed definition of free software shows how we evaluate a license to see if it makes programs free software. 
we also have articles about certain specific licenses explaining the advantages and disadvantages of some licenses that do qualify, and why some other licenses are too restrictive to qualify. 
in 1998 the term "open source" was coined and associated with views considerably different from ours. 
these views cite only the practical advantages of free software, and carefully avoid the deeper issues of freedom and social solidarity that the free software movement raises. 
the idea of open source is good as far as it goes, but it only scratches the surface of the issue. 
we don't mind working with supporters of open source on practical activities such as software development, but we do not agree with their views, and we decline to operate under their name. 
if you think that freedom and community are important for their own sake, please join us in proudly using the term "free software," and help spread the word. 
should rockets have only free software? 
free software and appliances . could there be a rocket that is totally free software? 
should we demand that spacex liberate the software in its satellite launching rockets? 
i don't think the person who asked me this was serious, but answering that question may illuminate similar issues about the sorts of products people really buy today. 
as far as i know, software as such is not capable of generating thrust. 
a rocket is necessarily principally a physical device, so it can't literally be free software. 
but it may include computerized control and telemetry systems, and thus software. 
if someone offered to sell me a rocket, i would treat it like any other appliance. 
consider, for instance, a thermostat. 
if it contains software to be modified, all the software in it needs to be free, and i alone should have the authority to decide whether to install some change. 
if, however, the software in it is not meant ever to be altered, and it communicates only through some limited interface, such as buttons on the control panel, a tv remote control, or a usb interface with a fixed set of commands, i would not consider it crucial to know what is inside the thermostat: whether it contains a special-purpose chip, or a processor running code, makes no direct difference to me as user. 
if it does contain code, it might as well have a special chip instead, so i don't need to care which it is. 
i would object if that thermostat sent someone data about my activities, regardless of how that was implemented. 
once again, special chip or special code makes no direct difference. 
free software in it could give me a way to turn off the surveillance, but that is not the only way. 
another is by disconnecting its digital communication antennas, or switching them off. 
if the rocket contains software, releasing that as free software can be a contribution to the community, and we should appreciate that contribution—but that is a different issue. 
such release also makes it possible for people who have bought the rockets to work on improving the software in them, though the irreversible nature of many rocket failures may discourage tinkering. 
readers have pointed out that spacex has received important financial support from the us government to develop its rockets. 
by rights, accepting this support should require spacex to release the rocket software under a free license, even if it uses that software only inside its own rockets. 
given the experience of tesla cars, which are full of surveillance and tracking malware that tesla can change but the owner can't, i suppose spacex rockets have that too. 
if someday rockets are sold like today's cars and tractors, software in them would be unjust, and it would probably be malware. 
if the manufacturer could install modified software in it but the owner could not, that too would be unjust. 
people are starting to recognize this: look at the right-to-repair movement, which demands only the beginning of these freedoms (much less than freeing the car's software) and nonetheless faces a hard fight. 
however, i don't think spacex sells rockets; i think it provides the service of launching payloads in its own rockets. 
that makes the issue totally different: if you are a customer, you're not operating the rocket; spacex is doing that. 
the rocket that spacex uses is not like your own car or van, or even a car or van leased to you. 
rather, it's comparable to a moving company's van that is, for the moment, transporting your books and furniture to your specified destination. 
it is the moving company that deserves control over the software in that van—not the customer of the moment. 
it makes sense to treat the job of transporting your things to outer mongolia, or to outer space, as a service because the job is mostly self-contained and mostly independent of the customer ("mostly" does not mean "absolutely" or "100%"), so the instructions for the job are simple (take these boxes to address a by date d). 
if spacex has released the rocket software under a free license, that would give you the right to make, use and distribute modified versions, but would not give you the right to modify the code running in spacex's rocket. 
but there is a kind of activity which a hypothetical future spaceship might do, which should never be treated as a service: private computational activity. 
that's because a private computational activity is exactly what you could do on your own computer in freedom, given suitable free software. 
when a program's task is to do computing for you, you are entitled to demand control over what it does and how, not just that it obey your orders as it interprets them. 
you are entitled, in other words, to use your own copy of a free program, running on a computer you control. 
no wonder there are companies that would like you to cede control over your computing activities to them, by labeling those activities as "services" to be done on their servers with programs that they control. 
even things as minutely directed by the user as text editing! 
this is a scheme to get you to substitute their power for your freedom. 
we call that "service as a software substitute," saass for short (see "who does that server really serve?"
), and we reject it. 
for instance, imagine a hypothetical spacex smart spaceship, which as a "service" wants to know all about your business so spacex servers can decide for you what cargoes to buy and sell on which planets. 
that planning service would be saass—therefore a dis-service. 
instead of using that dis-service, you should do that planning with your copy of free software on your own computer. 
spacex and others could then legitimately offer you the non-computational service of transporting cargoes, and you could use it sometimes; or you could choose some other method, perhaps to buy a spaceship and operate it yourself. 
what is free software?. 
"free software" means software that respects users' freedom and community. 
roughly, it means that the users have the freedom to run, copy, distribute, study, change and improve the software. 
thus, "free software" is a matter of liberty, not price. 
to understand the concept, you should think of "free" as in "free speech," not as in "free beer."
 we sometimes call it "libre software," borrowing the french or spanish word for "free" as in freedom, to show we do not mean the software is gratis. 
you may have paid money to get copies of a free program, or you may have obtained copies at no charge. 
but regardless of how you got your copies, you always have the freedom to copy and change the software, even to sell copies. 
we campaign for these freedoms because everyone deserves them. 
with these freedoms, the users (both individually and collectively) control the program and what it does for them. 
when users don't control the program, we call it a "nonfree" or "proprietary" program. 
the nonfree program controls the users, and the developer controls the program; this makes the program an instrument of unjust power. 
"open source" is something different: it has a very different philosophy based on different values. 
its practical definition is different too, but nearly all open source programs are in fact free. 
we explain the difference in why "open source" misses the point of free software. 
table of contents. 
the free software definition the four essential freedoms free software can be commercial clarifying the boundary between free and nonfree the freedom to run the program as you wish the freedom to study the source code and make changes the freedom to redistribute if you wish: basic requirements copyleft rules about packaging and distribution details export regulations legal considerations contract-based licenses the free software definition in practice how we interpret these criteria get help with free licenses use the right words when talking about free software beyond software history have a question about free software licensing not answered here? 
see our other licensing resources, and if necessary contact the fsf compliance lab at licensing@fsf.org. 
the free software definition. 
the free software definition presents the criteria for whether a particular software program qualifies as free software. 
from time to time we revise this definition, to clarify it or to resolve questions about subtle issues. 
see the history section below for a list of changes that affect the definition of free software. 
the four essential freedoms. 
a program is free software if the program's users have the four essential freedoms: [1] the freedom to run the program as you wish, for any purpose (freedom 0). 
the freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). 
access to the source code is a precondition for this. 
the freedom to redistribute copies so you can help others (freedom 2). 
the freedom to distribute copies of your modified versions to others (freedom 3). 
by doing this you can give the whole community a chance to benefit from your changes. 
access to the source code is a precondition for this. 
a program is free software if it gives users adequately all of these freedoms. 
otherwise, it is nonfree. 
while we can distinguish various nonfree distribution schemes in terms of how far they fall short of being free, we consider them all equally unethical. 
in any given scenario, these freedoms must apply to whatever code we plan to make use of, or lead others to make use of. 
for instance, consider a program a which automatically launches a program b to handle some cases. 
if we plan to distribute a as it stands, that implies users will need b, so we need to judge whether both a and b are free. 
however, if we plan to modify a so that it doesn't use b, only a needs to be free; b is not pertinent to that plan. 
free software can be commercial. 
"free software" does not mean "noncommercial."
 on the contrary, a free program must be available for commercial use, commercial development, and commercial distribution. 
this policy is of fundamental importance—without this, free software could not achieve its aims. 
we want to invite everyone to use the gnu system, including businesses and their workers. 
that requires allowing commercial use. 
we hope that free replacement programs will supplant comparable proprietary programs, but they can't do that if businesses are forbidden to use them. 
we want commercial products that contain software to include the gnu system, and that would constitute commercial distribution for a price. 
commercial development of free software is no longer unusual; such free commercial software is very important. 
paid, professional support for free software fills an important need. 
thus, to exclude commercial use, commercial development or commercial distribution would hobble the free software community and obstruct its path to success. 
we must conclude that a program licensed with such restrictions does not qualify as free software. 
a free program must offer the four freedoms to any would-be user that obtains a copy of the software, who has complied thus far with the conditions of the free license covering the software in any previous distribution of it. 
putting some of the freedoms off limits to some users, or requiring that users pay, in money or in kind, to exercise them, is tantamount to not granting the freedoms in question, and thus renders the program nonfree. 
clarifying the boundary between free and nonfree. 
in the rest of this article we explain more precisely how far the various freedoms need to extend, on various issues, in order for a program to be free. 
the freedom to run the program as you wish. 
the freedom to run the program means the freedom for any kind of person or organization to use it on any kind of computer system, for any kind of overall job and purpose, without being required to communicate about it with the developer or any other specific entity. 
in this freedom, it is the user's purpose that matters, not the developer's purpose; you as a user are free to run the program for your purposes, and if you distribute it to other people, they are then free to run it for their purposes, but you are not entitled to impose your purposes on them. 
the freedom to run the program as you wish means that you are not forbidden or stopped from making it run. 
this has nothing to do with what functionality the program has, whether it is technically capable of functioning in any given environment, or whether it is useful for any particular computing activity. 
for example, if the code arbitrarily rejects certain meaningful inputs—or even fails unconditionally—that may make the program less useful, perhaps even totally useless, but it does not deny users the freedom to run the program, so it does not conflict with freedom 0. if the program is free, the users can overcome the loss of usefulness, because freedoms 1 and 3 permit users and communities to make and distribute modified versions without the arbitrary nuisance code. 
"as you wish" includes, optionally, "not at all" if that is what you wish. 
so there is no need for a separate "freedom not to run a program."
 the freedom to study the source code and make changes. 
in order for freedoms 1 and 3 (the freedom to make changes and the freedom to publish the changed versions) to be meaningful, you need to have access to the source code of the program. 
therefore, accessibility of source code is a necessary condition for free software. 
obfuscated "source code" is not real source code and does not count as source code. 
source code is defined as the preferred form of the program for making changes in. 
thus, whatever form a developer changes to develop the program is the source code of that developer's version. 
freedom 1 includes the freedom to use your changed version in place of the original. 
if the program is delivered in a product designed to run someone else's modified versions but refuse to run yours—a practice known as "tivoization" or "lockdown," or (in its practitioners' perverse terminology) as "secure boot"—freedom 1 becomes an empty pretense rather than a practical reality. 
these binaries are not free software even if the source code they are compiled from is free. 
one important way to modify a program is by merging in available free subroutines and modules. 
if the program's license says that you cannot merge in a suitably licensed existing module—for instance, if it requires you to be the copyright holder of any code you add—then the license is too restrictive to qualify as free. 
whether a change constitutes an improvement is a subjective matter. 
if your right to modify a program is limited, in substance, to changes that someone else considers an improvement, that program is not free. 
one special case of freedom 1 is to delete the program's code so it returns after doing nothing, or make it invoke some other program. 
thus, freedom 1 includes the "freedom to delete the program."
 the freedom to redistribute if you wish: basic requirements. 
freedom to distribute (freedoms 2 and 3) means you are free to redistribute copies, either with or without modifications, either gratis or charging a fee for distribution, to anyone anywhere. 
being free to do these things means (among other things) that you do not have to ask or pay for permission to do so. 
you should also have the freedom to make modifications and use them privately in your own work or play, without even mentioning that they exist. 
if you do publish your changes, you should not be required to notify anyone in particular, or in any particular way. 
freedom 3 includes the freedom to release your modified versions as free software. 
a free license may also permit other ways of releasing them; in other words, it does not have to be a copyleft license. 
however, a license that requires modified versions to be nonfree does not qualify as a free license. 
the freedom to redistribute copies must include binary or executable forms of the program, as well as source code, for both modified and unmodified versions. 
(distributing programs in runnable form is necessary for conveniently installable free operating systems.) it is ok if there is no way to produce a binary or executable form for a certain program (since some languages don't support that feature), but you must have the freedom to redistribute such forms should you find or develop a way to make them. 
copyleft. 
certain kinds of rules about the manner of distributing free software are acceptable, when they don't conflict with the central freedoms. 
for example, copyleft (very simply stated) is the rule that when redistributing the program, you cannot add restrictions to deny other people the central freedoms. 
this rule does not conflict with the central freedoms; rather it protects them. 
in the gnu project, we use copyleft to protect the four freedoms legally for everyone. 
we believe there are important reasons why it is better to use copyleft. 
however, noncopylefted free software is ethical too. 
see categories of free software for a description of how "free software," "copylefted software" and other categories of software relate to each other. 
rules about packaging and distribution details. 
rules about how to package a modified version are acceptable, if they don't substantively limit your freedom to release modified versions, or your freedom to make and use modified versions privately. 
thus, it is acceptable for the license to require that you change the name of the modified version, remove a logo, or identify your modifications as yours. 
as long as these requirements are not so burdensome that they effectively hamper you from releasing your changes, they are acceptable; you're already making other changes to the program, so you won't have trouble making a few more. 
rules that "if you make your version available in this way, you must make it available in that way also" can be acceptable too, on the same condition. 
an example of such an acceptable rule is one saying that if you have distributed a modified version and a previous developer asks for a copy of it, you must send one. 
(note that such a rule still leaves you the choice of whether to distribute your version at all.) rules that require release of source code to the users for versions that you put into public use are also acceptable. 
a special issue arises when a license requires changing the name by which the program will be invoked from other programs. 
that effectively hampers you from releasing your changed version so that it can replace the original when invoked by those other programs. 
this sort of requirement is acceptable only if there's a suitable aliasing facility that allows you to specify the original program's name as an alias for the modified version. 
export regulations. 
sometimes government export control regulations and trade sanctions can constrain your freedom to distribute copies of programs internationally. 
software developers do not have the power to eliminate or override these restrictions, but what they can and must do is refuse to impose them as conditions of use of the program. 
in this way, the restrictions will not affect activities and people outside the jurisdictions of these governments. 
thus, free software licenses must not require obedience to any nontrivial export regulations as a condition of exercising any of the essential freedoms. 
merely mentioning the existence of export regulations, without making them a condition of the license itself, is acceptable since it does not restrict users. 
if an export regulation is actually trivial for free software, then requiring it as a condition is not an actual problem; however, it is a potential problem, since a later change in export law could make the requirement nontrivial and thus render the software nonfree. 
legal considerations. 
in order for these freedoms to be real, they must be permanent and irrevocable as long as you do nothing wrong; if the developer of the software has the power to revoke the license, or retroactively add restrictions to its terms, without your doing anything wrong to give cause, the software is not free. 
a free license may not require compliance with the license of a nonfree program. 
thus, for instance, if a license requires you to comply with the licenses of "all the programs you use," in the case of a user that runs nonfree programs this would require compliance with the licenses of those nonfree programs; that makes the license nonfree. 
it is acceptable for a free license to specify which jurisdiction's law applies, or where litigation must be done, or both. 
contract-based licenses. 
most free software licenses are based on copyright, and there are limits on what kinds of requirements can be imposed through copyright. 
if a copyright-based license respects freedom in the ways described above, it is unlikely to have some other sort of problem that we never anticipated (though this does happen occasionally). 
however, some free software licenses are based on contracts, and contracts can impose a much larger range of possible restrictions. 
that means there are many possible ways such a license could be unacceptably restrictive and nonfree. 
we can't possibly list all the ways that might happen. 
if a contract-based license restricts the user in an unusual way that copyright-based licenses cannot, and which isn't mentioned here as legitimate, we will have to think about it, and we will probably conclude it is nonfree. 
the free software definition in practice. 
how we interpret these criteria. 
note that criteria such as those stated in this free software definition require careful thought for their interpretation. 
to decide whether a specific software license qualifies as a free software license, we judge it based on these criteria to determine whether it fits their spirit as well as the precise words. 
if a license includes unconscionable restrictions, we reject it, even if we did not anticipate the issue in these criteria. 
sometimes a license requirement raises an issue that calls for extensive thought, including discussions with a lawyer, before we can decide if the requirement is acceptable. 
when we reach a conclusion about a new issue, we often update these criteria to make it easier to see why certain licenses do or don't qualify. 
get help with free licenses. 
if you are interested in whether a specific license qualifies as a free software license, see our list of licenses. 
if the license you are concerned with is not listed there, you can ask us about it by sending us email at <licensing@gnu.org>. 
if you are contemplating writing a new license, please contact the free software foundation first by writing to that address. 
the proliferation of different free software licenses means increased work for users in understanding the licenses; we may be able to help you find an existing free software license that meets your needs. 
if that isn't possible, if you really need a new license, with our help you can ensure that the license really is a free software license and avoid various practical problems. 
use the right words when talking about free software. 
when talking about free software, it is best to avoid using terms like "give away" or "for free," because those terms imply that the issue is about price, not freedom. 
some common terms such as "piracy" embody opinions we hope you won't endorse. 
see confusing words and phrases that are worth avoiding for a discussion of these terms. 
we also have a list of proper translations of "free software" into various languages. 
another group uses the term "open source" to mean something close (but not identical) to "free software."
 we prefer the term "free software" because, once you have heard that it refers to freedom rather than price, it calls to mind freedom. 
the word "open" never refers to freedom. 
beyond software. 
software manuals must be free, for the same reasons that software must be free, and because the manuals are in effect part of the software. 
the same arguments also make sense for other kinds of works of practical use—that is to say, works that embody useful knowledge, such as educational works and reference works. 
wikipedia is the best-known example. 
any kind of work can be free, and the definition of free software has been extended to a definition of free cultural works applicable to any kind of works. 
history. 
from time to time we revise this free software definition. 
here is the list of substantive changes, along with links to show exactly what was changed. 
version 1.169: explain more clearly why the four freedoms must apply to commercial activity. 
explain why the four freedoms imply the freedom not to run the program and the freedom to delete it, so there is no need to state those as separate requirements. 
version 1.165: clarify that arbitrary annoyances in the code do not negate freedom 0, and that freedoms 1 and 3 enable users to remove them. 
version 1.153: clarify that freedom to run the program means nothing stops you from making it run. 
version 1.141: clarify which code needs to be free. 
version 1.135: say each time that freedom 0 is the freedom to run the program as you wish. 
version 1.134: freedom 0 is not a matter of the program's functionality. 
version 1.131: a free license may not require compliance with a nonfree license of another program. 
version 1.129: state explicitly that choice of law and choice of forum specifications are allowed. 
(this was always our policy.) version 1.122: an export control requirement is a real problem if the requirement is nontrivial; otherwise it is only a potential problem. 
version 1.118: clarification: the issue is limits on your right to modify, not on what modifications you have made. 
and modifications are not limited to "improvements" version 1.111: clarify 1.77 by saying that only retroactive restrictions are unacceptable. 
the copyright holders can always grant additional permission for use of the work by releasing the work in another way in parallel. 
version 1.105: reflect, in the brief statement of freedom 1, the point (already stated in version 1.80) that it includes really using your modified version for your computing. 
version 1.92: clarify that obfuscated code does not qualify as source code. 
version 1.90: clarify that freedom 3 means the right to distribute copies of your own modified or improved version, not a right to participate in someone else's development project. 
version 1.89: freedom 3 includes the right to release modified versions as free software. 
version 1.80: freedom 1 must be practical, not just theoretical; i.e., no tivoization. 
version 1.77: clarify that all retroactive changes to the license are unacceptable, even if it's not described as a complete replacement. 
version 1.74: four clarifications of points not explicit enough, or stated in some places but not reflected everywhere: "improvements" does not mean the license can substantively limit what kinds of modified versions you can release. 
freedom 3 includes distributing modified versions, not just changes. 
the right to merge in existing modules refers to those that are suitably licensed. 
explicitly state the conclusion of the point about export controls. 
imposing a license change constitutes revoking the old license. 
version 1.57: add "beyond software" section. 
version 1.46: clarify whose purpose is significant in the freedom to run the program for any purpose. 
version 1.41: clarify wording about contract-based licenses. 
version 1.40: explain that a free license must allow to you use other available free software to create your modifications. 
version 1.39: note that it is acceptable for a license to require you to provide source for versions of the software you put into public use. 
version 1.31: note that it is acceptable for a license to require you to identify yourself as the author of modifications. 
other minor clarifications throughout the text. 
version 1.23: address potential problems related to contract-based licenses. 
version 1.16: explain why distribution of binaries is important. 
version 1.11: note that a free license may require you to send a copy of versions you distribute to previous developers on request. 
there are gaps in the version numbers shown above because there are other changes in this page that do not affect the definition or its interpretations. 
for instance, the list does not include changes in asides, formatting, spelling, punctuation, or other parts of the page. 
you can review the complete list of changes to the page through the cvsweb interface. 
footnote. 
the reason they are numbered 0, 1, 2 and 3 is historical. 
around 1990 there were three freedoms, numbered 1, 2 and 3. then we realized that the freedom to run the program needed to be mentioned explicitly. 
it was clearly more basic than the other three, so it properly should precede them. 
rather than renumber the others, we made it freedom 0. 
free system distribution guidelines (gnu fsdg). 
the purpose of these guidelines is to explain what it means for an installable system distribution (such as a gnu/linux distribution) to qualify as free (libre), and help distribution developers make their distributions qualify. 
these guidelines are not complete. 
we have mentioned the issues we are aware of now, but we're sure there are more. 
we will add them when we come across them. 
we would like to thank the fedora project for help in focusing these policies, and allowing us to use its own distribution license guidelines as a basis for this document. 
this page is maintained by the free software foundation's licensing and compliance lab. 
you can support our efforts by making a donation to the fsf. 
have a question not answered here? 
check out some of our other licensing resources or contact the compliance lab at licensing@fsf.org. 
complete distros. 
our list of distributions is a guide for systems you can install in a computer. 
therefore, it only includes distributions that are complete in themselves and ready to use. 
if a distribution is incomplete—if it requires further development, or presupposes installing other software as well—then it is not listed here, even if it is free software. 
in particular, a free system distribution should be self-hosting. 
this means that you must be able to develop and build the system with tools that the system provides you. 
as a result, a free system distribution cannot include free software that can only be built by using nonfree software. 
we make an exception to this requirement for small system distributions, which are distros designed for devices with limited resources, like a wireless router for example. 
free small system distributions do not need to be self-hosting or complete, because it is impractical to do development on such a system, but it must be developable and buildable on top of a free complete system distribution from our list of distributions, perhaps with the aid of free tools distributed alongside the small system distribution itself. 
license rules. 
"information for practical use" includes software, documentation, fonts, and other data that has direct functional applications. 
it does not include artistic works that have an aesthetic (rather than functional) purpose, or statements of opinion or judgment. 
all information for practical use in a free distribution must be available in source form. 
("source" means the form of the information that is preferred for making changes to it.) the information, and the source, must be provided under an appropriate free license. 
we evaluate specific licenses and list our determinations in our license list, with separate sections for licenses that are suitable for software, documentation, fonts, and other useful works. 
if such a work is released under a disjunction of licenses, the work is free as long as at least one of its licenses is free; the system developers should follow the terms of the applicable free license(s) when they distribute and/or modify it. 
a free system distribution must not steer users towards obtaining any nonfree information for practical use, or encourage them to do so. 
the system should have no repositories for nonfree software and no specific recipes for installation of particular nonfree programs. 
nor should the distribution refer to third-party repositories that are not committed to only including free software; even if they only have free software today, that may not be true tomorrow. 
programs in the system should not suggest installing nonfree plugins, documentation, and so on. 
for instance, a free system distribution must not contain browsers that implement eme, the browser functionality designed to load drm modules. 
some nonfree distros offer an installation option to exclude nonfree packages. 
that option is a step forward, since it makes avoiding them much easier, provided the distro's implementation of the option is fully correct. 
however, the nonfree packages are nonetheless included in the distro. 
moreover, we know that most users are not strongly committed to software freedom, and will not reject packages that seem handy just for being nonfree. 
practically speaking, to list one of these distros as free would mostly lead people to install nonfree software. 
for these reasons, we do not list them. 
there's a lot of code in most free system distributions today; the amount of effort it would take to audit it all directly is impractical for most teams. 
in the past, some nonfree code has accidentally been included in free system distributions. 
we don't de-list distributions because of this; instead, we only ask that a distribution's developers make a good faith effort to avoid including nonfree software, and commit themselves to removing such programs if any are discovered. 
certain kinds of license situations merit special attention for people creating or considering free software distributions; those are discussed in the sections below. 
nonfree firmware. 
some applications and drivers require firmware to function, and sometimes that firmware is distributed only in object code form, under a nonfree license. 
we call these firmware programs "blobs."
 on most gnu/linux systems, you'll typically find these accompanying some drivers in the kernel linux. 
such firmware should be removed from a free system distribution. 
blobs can take many forms. 
sometimes, they will be provided in separate files. 
other times, they may be incorporated into the source of the driver itself—for example, it could be encoded as a large array of numbers. 
but no matter how it's encoded, any nonfree firmware needs to be removed from a free system. 
(to be clear, not every array of numbers in a driver is firmware. 
it's important to understand the purpose of the data before deciding whether or not it's appropriate for a free system.) brian brazil, jeff moe, and alexandre oliva have developed a series of scripts to remove nonfree firmware from a stock version of the linux kernel. 
you may find them helpful if you would like to develop your own free gnu/linux distribution—although we recommend joining development of an existing free distro rather than fragmenting effort by starting a new one. 
the complete source for a blob-free version of the linux kernel is also available; you can learn more about this project from the free software directory. 
non-functional data. 
data that isn't functional, that doesn't do a practical job, is more of an adornment to the system's software than a part of it. 
thus, we don't insist on the free license criteria for non-functional data. 
it can be included in a free system distribution as long as its license gives you permission to copy and redistribute, both for commercial and non-commercial purposes. 
for example, some game engines released under the gnu gpl have accompanying game information—a fictional world map, game graphics, and so on—released under such a verbatim-distribution license. 
this kind of data can be part of a free system distribution, even though its license does not qualify as free, because it is non-functional. 
trademarks. 
trademarks are associated with some software. 
for example, the name of a program may be trademarked, or its interface may display a trademarked logo. 
often, the use of these marks will be controlled in some way; in particular, developers are commonly asked to remove references to the trademark from the software when they modify it. 
in extreme cases, these restrictions may effectively render the program nonfree. 
it is unfair for someone to ask you to remove a trademark from modified code if that trademark is scattered all throughout the original source. 
as long as the practical requirements are reasonable, however, free system distributions may include these programs, either with or without the trademarks. 
similarly, the distribution itself may hold particular trademarks. 
it is not a problem if modification requires removal of these trademarks, as long as they can readily be removed without losing functionality. 
however, it is unacceptable to use trademarks to restrict verbatim copying and redistribution of the whole distribution, or any part. 
documentation. 
all the documentation in a free system distribution must be released under an appropriate free license. 
additionally, it must take care not to recommend nonfree software. 
in general, something that helps people who already use nonfree software to use the free software better with it is acceptable, but something that encourages users of the free software to install nonfree software is not. 
for example, a free system distribution may have documentation for users setting up dual boot systems. 
it could explain how to access filesystems of the proprietary operating system, import settings from it, and so on. 
that would be helping people install a free system distribution on a machine which already has proprietary software, which is good. 
what would be unacceptable is for the documentation to give people instructions for installing a nonfree program on the system, or mention conveniences they might gain by doing so. 
for a borderline case, a clear and serious exhortation not to use the nonfree program would move it to the acceptable side of the line. 
patents. 
it is effectively impossible for free software developers and distributors to know whether or not a given piece of software infringes any patents: there are too many of them, they vary from country to country, they're often worded so as to make it hard to tell what they do or don't cover, and it isn't easy to tell which ones are valid. 
therefore, we don't generally ask free system distributions to exclude software because of possible threats from patents. 
on the other hand, we also don't object if a distributor chooses to omit some software in order to avoid patent risk. 
no malware. 
the distro must contain no drm, no back doors, and no spyware. 
commitment to correct mistakes. 
most distribution development teams don't have the resources to exhaustively check that their distribution meet all these criteria. 
neither do we. 
so we expect distros to occasionally contain mistakes: nonfree software that slipped through, etc. 
we don't reject a distribution over mistakes. 
our requirement is for the distribution developers to have a firm commitment to promptly correct any mistakes that are reported to them. 
maintenance. 
to be listed, a distribution should be actively maintained, and should give the gnu project a clear and specific way to report problems of nonfree software that we find out about. 
it should also inform us when the problems we have reported are fixed. 
name confusion. 
we will not list a distribution whose name makes confusion with nonfree distributions likely. 
for example, if foobar light is a free distribution and foobar is a nonfree distribution, we will not list foobar light. 
this is because we expect that the distinction between the two would be lost in the process of communicating the message. 
in particular, the principal name of the free distribution ("foobar," in this example) should not be part of the name of any nonfree distribution. 
some people have thought of adding the name "gnu" to a free distro name to distinguish it from a nonfree one. 
this has two problems. 
first, the two names would not be sufficiently different, since the principal word in both names would be the same. 
second, this would promote a misunderstanding of what "gnu" means. 
gnu is an operating system, typically used with linux as the kernel, and essentially all so-called "linux" distributions are really gnu/linux distributions. 
in this scenario, both versions are gnu/linux, and it would be misleading to omit "gnu" from the name of one of them. 
contacting upstream if you're downstream. 
for distro developers (or anyone else) who have sent an important bug report for a gnu package: if it has gone unheeded by the package maintainer after a reasonable time (please allow at least two weeks), you can escalate the bug by writing to <maintainers@gnu.org>. 
this is especially warranted if you can't find evidence of recent activity by the package maintainer. 
please teach users about free software. 
to establish lasting freedom, just giving users freedom isn't sufficient. 
it is necessary also to teach them to understand what it means and to demand it. 
thus, we suggest and urge that free distros announce prominently on the screen, before login and on the default desktop after login, a prominent statement about freedom, such as "this system is freedom-respecting free/libre software" or something comparable, and to present a link or icon pointing at gnu.org or gnu.org/philosophy for further information about the issue. 
please avoid repeating propaganda and confusion. 
please see our list of words to avoid, which are either biased, misguided or misleading, and try to avoid them in your public statements and discussions with the public. 
final notes. 
we maintain a list of the free gnu system distributions we know about. 
if you know about a free distribution that isn't listed there, please ask its developers write to <webmasters@gnu.org> with a description of their system and a link to their web page. 
we also list free non-gnu system distributions on the same ethical conditions. 
if you have questions or comments about these guidelines themselves, feel free to send those to <licensing@fsf.org>. 
we hope that they help everyone better understand the issues that are important for free system distributions, and we look forward to promoting more of them in the future. 
only the free world can stand up to microsoft. 
the reproduction and distribution cost of software is zero at the margin. 
this means that in theory it is no more expensive to produce software which can be freely distributed and used by everybody than it is to produce software for a limited clientele. 
the pricing of software bears no relationship to the cost of its development. 
the two factors that do matter are market size (which is limited by price and utility) and competition. 
given a market for a software product, the maximum margin can be obtained by precluding or eliminating competition. 
software companies that are able to thwart competition attain pinnacles of power which are inconceivable in other industries. 
partly this is due to the enormous cash flows that are possible in the absence of competition from products with nil reproduction costs, but largely it is due to the complexity of software itself, which allows dominant companies to design "standards" which exclude future competition. 
all niche markets for software rapidly evolve toward monopoly or an equilibrium where a small number of players tacitly agree not to mutually destroy their profits. 
(established companies can defend their market share by reducing their prices to practically nothing, making price competition suicidal for newcomers.) however, there are cases of asymmetrical competition, where a large company with other sources of income can destroy a smaller company that depends on a single niche revenue stream. 
microsoft has a secure revenue stream based on its dominant position in personal computer operating systems software, and uses the power inherent in that position to favor its other business activities with its ability to dictate "standards" and to undermine competition, especially where power (as opposed to mere money) is at stake. 
capitalists invest in new software ventures with the hope of gaining a dominant position in a new niche market. 
there is essentially no new investment in existing niche markets, since it is impossible to compete with an established dominant player on the basis of lower costs and the possible gains of an uphill battle for a small share of a shrinking pie rarely justify the risks. 
in their wildest dreams these capitalists want nothing so much as to be just like microsoft. 
the drive to restrain microsoft under the rubric of antitrust law seems mostly to be the effort of companies who find their own power positions threatened by microsoft's activities. 
they seek to make it harder for microsoft to undermine their own businesses. 
however, they are fundamentally similar to microsoft in that they don't question a world where technology companies working from private caches of intellectual property are able to control the use of that technology for their own best profit. 
in the market equation, demand is equal to, and in many ways the master of, production. 
yet in the world we live in, production is highly organized and efficient and commands enormous financial resources and seductive powers of persuasion, while demand is fragmented, uninformed, and powerless. 
while consumers can still kill a product that they have no desire for, they are nearly powerless to direct or even influence the detailed designs of those products. 
for software products, consumers can only choose among a given set of alternatives, which are extremely complex, dauntingly impenetrable, and generally designed more for the company's anticompetitive purposes than for the user's tasks. 
(even the old fashioned option of doing without is often impossible due to the intricate web of interdependencies as new hardware and software march in lock step into the future.) the real "killer software" is free software: software that is free of intellectual property claims; that is published in source code form, so can be inspected, evaluated, fixed and enhanced by anyone with a mind to do so; that is freely distributed and can be installed on machines and used without limit. 
free software is the software that kills the closed, nefarious software product industry. 
it is software that users can select intelligently, to do today's tasks, and which they can collaboratively build on to handle future needs. 
free software is the one thing that not even microsoft can compete with. 
still, there is one core problem: who pays for developing free software? 
the usual answer—which leads to all of the trouble above—is that investors pay for development, which they recover from their profits. 
the only real answer is that development costs must be paid for by users. 
the key point here is that what is paid for is not the distribution or use of the software, but its development, and that the development of free software implies that it can be used by anyone. 
i think there is a simple way to handle this: anyone who wants a piece of software developed or enhanced posts a "request-for-proposal," including a sum that the requester is willing to contribute towards its development. 
intermediary organizations can pool these requests, and interested parties can up the ante. 
developers can then search through the current postings and bid on development work or work on spec. 
developers can also post their own proposals, which users can then buy into. 
free software can be developed less expensively than closed software products. 
even for well paid professional developers, fully underwritten by conscientious users, the cost of free software would be significantly less than the premiums now being paid for empire building. 
the quality would be better, especially in terms of fitness for use. 
free distribution would ensure maximum exposure and choice: a free market based purely on utility and quality. 
the service component of software would also open up: anyone who wanted to could start from the same code, to learn, support, and teach. 
the best service providers would succeed. 
simple steps can get this movement underway: form an initial organization to sort out the technical issues, suggest working arrangements, study the economics, hack out a legal framework, seed and coordinate the requests, and canvas for initial technology contributions (including the large body of currently available freeware), do some evangelical work. 
urge large companies and organizations to budget a small fraction of their annual software outlays for proposals. 
set up a review group for intellectual property issues, challenge dubious claims, and investigate the feasibility of buying and releasing rights to valid claims. 
encourage the development of more local organizations—local to place, to industry, to niche, to taste—with the initial group breaking up or fading away: common methods and procedures, but no centralized control. 
let's call this organization, this whole framework, "the free world."
 it stands for free and open knowledge, free and open development, software that works for you. 
take a stand. 
make a contribution. 
you have nothing to lose but ctl-alt-del. 
additional notes can be found at gnu.org/philosophy/free-world-notes.html. 
free world notes. 
id="hull-rev" href="#hull">[*] this page contains supplemental notes to the manifesto "only the free world can stand up to microsoft."
 in general, this critique reflects a more general line of thought, which is based on the recognition that the inefficiencies and ulterior motives in our current modes of production require much unnecessary work to produce products and services of often dubious merit for grossly inflated prices, effects which diminish the quality of our lives and the worth of our work. 
nonetheless, my proposal here is not especially radical: it does not challenge the precepts of intellectual property; it requires no political action (not even the application of antitrust law); it can be initiated by a small group of people, and to some extent simply builds on work already done by various individuals and groups. 
some paragraph notes: commercial software companies typically divide their costs into several sectors: development; manufacturing; marketing/sales; service; general and administrative. 
development costs are usually less than 20% of revenues. 
by far the largest cost is marketing/sales, so most of what the customer is actually paying for is the persuasion to convince the customer to pay so much for something that costs so little to develop, and practically nothing to reproduce and deliver. 
more expensive software often includes after-the-sale service, which should be considered a marketing/sales cost, since it props up an extravagant price structure. 
service should be considered a separate cost, independent of development. 
free software is always delivered with no service, and customers who need service can obtain help independently, since the inner workings of the software are public knowledge. 
media companies have comparable cash flows, but necessarily work within the technical standards of their media. 
consuming their products does not in any way prevent or even disincline one from consuming competitive products. 
microsoft likes to expand its operating system to eliminate the market for add-on software, such as for disk compression and networking. 
microsoft's claim that ie is part of the operating system is spectacularly spurious. 
microsoft's dominance is at least partly due to the lack of any significant challengers. 
apple and ibm used their operating systems to lock customers into their hardware, and would at any rate have been rejected by the rest of the pc industry, which at least with microsoft got access to the same product. 
unix vendors have stuck steadfastly to higher priced markets, avoiding direct competition, even though nt is aimed directly at destroying unix. 
the longer microsoft goes without serious competition, the harder it gets to mount any such competition. 
the last sentence is a slight exaggeration. 
many capitalists do in fact realize that they will never be in the position to wield the sort of power that microsoft commands, and as such have no use for the megalomania that goes with such power. 
the main point, however, is that under current circumstances no sane investor will directly challenge microsoft. 
the cases in other industries where challenges are made to dominant companies depend on the discovery of some significant cost advantage (e.g., mci's challenge to at&t), but cost advantages are essentially impossible in software, unless you're willing to forego all your margin, a position no investor will take. 
antitrust laws work more for the protection of other businesses than to protect consumer interests, although consumers generally do benefit from increased, more even handed competition, at least in the long run. 
in the short run consumers may benefit more from crippling price competition. 
netscape, for example, having gained a dominant market share in its niche, still cannot raise its prices because of microsoft's competition, which is a windfall of sorts for customers. 
we talk much about the advantages of "letting the market decide," but most business activity is oriented toward rigging the market. 
look at any business plan and the key section will be something like "barriers to competition," because competition kills profits, and successful companies are the ones that avoid competition, or at least are able to dictate its terms. 
the key thing here is that the free software must have at least the same level of quality and utility as the commercial software that it challenges, which means that it must be professionally designed and developed, tested and supported. 
which means that free software must move well beyond its current niche as an academic hobby, to a point where it is supported by well-financed organizations that can attract and support quality workers. 
of course, microsoft (and all other commercial software companies so threatened) will do their best to compete with free software, and can be expected to do so as desperately as they compete with everything else. 
there will be many arguments floated as to why commercial software is better than free software. 
many of these arguments are variations on the master salesman's boast that he can sell more $10 bills for $20 than a less convincing huckster can give away. 
such arguments can be defeated by establishing that free software is quality software and makes sound economic sense. 
some arguments are more substantial: commercial software companies have a huge head start; some such companies have convinced many users to trust their brands; the true costs of software include the time that it takes to learn and use, so no software is really cost-free; the investment that users and companies have in commercial software can make switching painful; many people still regard commercial software as something of a bargain. 
one issue that needs to be recognized and understood is the notion that free software, openly published in source form and freely inspected by anyone who has an interest or desire to do so, is worthy of far greater trust than closed, proprietary, secretive software. 
i for one found the installation of microsoft's internet explorer to be a very scary experience: the computer running totally out of my control, reconfiguring itself, plugging into microsoft's own web sites, setting up preferences and defaults according to microsoft's business machinations. 
sometimes i wonder whether microsoft's underlying goal isn't simply to make the world safe for computer viruses. 
i'm not an especially paranoid person, but how can you ever know? 
consumers nowadays are so often (and so effectively) fleeced that there is much resistance to paying for something you can get away with not paying for, so this will be an uphill educational battle. 
there is a game theory problem here: who should i commit to paying for a development which i can get for nothing if only i wait for someone else to pay for it? 
but if everyone waits, no one benefits. 
there are other ways to handle this level of funding, such as imposing taxes on computer hardware (sort of like the gas tax is used to build roads) or even on commercial software (sort of like using cigarette taxes for public health). 
developing countries, in particular, should support free software development, since the notion of intellectual property must appear to them as one more form of tribute to the rich. 
these approaches require political efforts that are sure to be contested and hamstrung. 
i'm inclined to start small, start voluntarily, and see how far reason and civility takes us. 
it should also be emphasized that there is at present a substantial amount of free software already written and available, and that there are many organizations and individuals that have contributed to the development and dissemination and support of free software. 
what is missing is a systematic approach to funding development, and a strong and consistent system for user feedback and direction. 
i would estimate that free software can be developed to quality standards that meet/exceed commercial software for less than 25% of the price of equivalent commercial software. 
this estimate is based on common r&d expenditure levels plus a generous amount for those organizations which coordinate development and promote use. 
given that free software is not compelled to become obsolescent (it can continue to be used as long as it is useful, whereas commercial software must obsolete old product to promote the sales of new), the costs for free software will decline over time, sharply except for the cases where new needs arise. 
much of this work is already being done. 
what's missing is not so much the people or even the organization as a coherent sense of the economic imperatives. 
to date, free software has largely been driven by political sensibilities and the traditions of academic freedom, which have led it into a hodge podge of areas, many of which have very little impact on common needs and usages. 
(some, such as the web, have had major impact, and as such have attracted enormous commercial attention.) however, the driving force behind free software must be economics: why do we spend so much money propping up empires when all we really want are clean, simple programs that do our work? 
and why do software professions have to work for commercial companies when their skills and work are more immediately needed by users? 
the argument that large companies (government, any organization that spends serious money on software) should routinely support free software development is strong and well focused. 
even if such an organization never directly used free software, its existence would provide a damper on prices and a strong bargaining point with commercial software vendors. 
it is a win/win bet: free software, cheaper software, more options, more competition. 
it is completely obvious that free software organizations must be international in scope. 
it seems likely that most of the support for free software will come from outside the us, perhaps by an overwhelming margin. 
this proposal does not dispute the rights of intellectual property owners. 
under this proposal it should be possible to buy or license technology where appropriate, and inventors should consider the possibility of selling their inventions to the free world. 
whether intellectual property rights in fact encourage innovation in any useful way can be debated separately. 
another aspect of this proposal is that it does not try to kill off the profit motive in software development. 
as i envision it, most of the free software work would be done by small companies bidding on contract proposals, presumably with the intent of making a profit. 
(the companies are likely to be small because they won't need to float a large marketing/sales organization, which is the main advantage big software companies have over small ones. 
also because the free software networking organizations should work for providing sharable resources, such as capital and services, saving small companies from having to overextend themselves.) my proposal is that free software will start out aiming to produce the most basic and most broadly used software: it will in effect harvest the "cash cows" of the commercial software industry, rather than attempt to innovate at the fringes of development. 
(of course, innovators are more than welcome to contribute.) beyond free software there will still be shareware and commercial products, which will to some extent compete with free software and to a larger extent open up new niches where free software is not yet available. 
the free software industry will provide a damper on the sort of prices that can be charged. 
it will also help lower the costs of all software development, and may eventually provide a salvage market for discontinued commercial software. 
shareware may be a fruitful ground for speculative software development, with the goal being to develop and popularize a new product that can be sold off to the free market. 
finally, i believe that no restrictions should be placed on the use of free software: that it can be repackaged, sold, incorporated into commercial products. 
free software will reduce the development costs of commercial software, which will help make commercial software cheaper, better, more competitive: all good things. 
the goal after all is better, cheaper, more usable and useful software: victory is not measured in bankruptcies. 
the impulse to segregate free software from commercial software is doomed, as is the impulse to isolate free software from commerce. 
we live in a jungle of commerce, which no one can truly flee from, regardless of how offensive it may seem. 
the proposal here is to start to take short, deliberate, sensible steps toward reclaiming parts of that jungle for everyone's use and betterment. 
this implies, of course, that (following the reagan demonology) microsoft et al. 
are "the evil empire."
 that's a joke, of course, but if it didn't harbor a shred of truth it wouldn't be funny. 
[*] you may contact tom hull at <ftwalk@contex.com>. 
he is also the author of the ftwalk programming language, a script programming language, which is free software available for unix systems. 
freedom—or copyright?. 
this essay addresses how the principles of software freedom apply in some cases to other works of authorship and art. 
it's included here since it involves the application of the ideas of free software. 
copyright was established in the age of the printing press as an industrial regulation on the business of writing and publishing. 
the aim was to encourage the publication of a diversity of written works. 
the means was to require publishers to get the author's permission to publish recent writings. 
this enabled authors to get income from publishers, which facilitated and encouraged writing. 
the general reading public received the benefit of this, while losing little: copyright restricted only publication, not the things an ordinary reader could do. 
that made copyright arguably a beneficial system for the public, and therefore arguably legitimate. 
well and good—back then. 
now we have a new way of distributing information: computers and networks. 
their benefit is that they facilitate copying and manipulating information, including software, musical recordings, books, and movies. 
they offer the possibility of unlimited access to all sorts of data—an information utopia. 
one obstacle stood in the way: copyright. 
readers and listeners who made use of their new ability to copy and share published information were technically copyright infringers. 
the same law which had formerly acted as a beneficial industrial regulation on publishers had become a restriction on the public it was meant to serve. 
in a democracy, a law that prohibits a popular and useful activity is usually soon relaxed. 
not so where corporations have political power. 
the publishers' lobby was determined to prevent the public from taking advantage of the power of their computers, and found copyright a handy weapon. 
under their influence, rather than relaxing copyright rules to suit the new circumstances, governments made them stricter than ever, imposing harsh penalties on the practice of sharing. 
the latest fashion in supporting the publishers against the citizens, known as "three strikes," is to cut off people's internet connections if they share. 
but that wasn't the worst of it. 
computers can be powerful tools of domination when software suppliers deny users the control of the software they run. 
the publishers realized that by publishing works in encrypted format, which only specially authorized software could view, they could gain unprecedented power: they could compel readers to pay, and identify themselves, every time they read a book, listen to a song, or watch a video. 
that is the publishers' dream: a pay-per-view universe. 
the publishers gained us government support for their dream with the digital millennium copyright act of 1998. 
this law gave publishers power to write their own copyright rules, by implementing them in the code of the authorized player software. 
under this practice, called digital restrictions management, or drm, even reading or listening without authorization is forbidden. 
we still have the same old freedoms in using paper books and other analog media. 
but if e-books replace printed books, those freedoms will not transfer. 
imagine: no more used book stores; no more lending a book to your friend; no more borrowing one from the public library—no more "leaks" that might give someone a chance to read without paying. 
no more purchasing a book anonymously with cash—you can only buy an e-book with a credit card. 
that is the world the publishers want to impose on us. 
if you buy the amazon kindle (we call it the swindle) or the sony reader (we call it the shreader for what it threatens to do to books), you pay to establish that world. 
the swindle even has an orwellian back door that can be used to erase books remotely. 
amazon demonstrated this capability by erasing copies, purchased from amazon, of orwell's book 1984. 
evidently amazon's name for this product reflects the intention to burn our books. 
public anger against drm is slowly growing, held back because propaganda expressions such as "protect authors" and "intellectual property" have convinced readers that their rights do not count. 
these terms implicitly assume that publishers deserve special power in the name of the authors, that we are morally obliged to bow to them, and that we have wronged someone if we see or hear anything without paying for permission. 
the organizations that profit most from copyright legally exercise it in the name of the authors (most of whom gain little). 
they would have you believe that copyright is a natural right of authors, and that we the public must suffer it no matter how painful it is. 
they call sharing "piracy," equating helping your neighbor with attacking a ship. 
they also tell us that a war on sharing is the only way to keep art alive. 
even if true, it would not justify the policy; but it isn't true. 
public sharing of copies is likely to increase the sales of most works, and decrease sales only for big hits. 
bestsellers can still do well without forbidding sharing. 
stephen king got hundreds of thousands of dollars selling an unencrypted e-book serial with no obstacle to copying and sharing. 
(he was dissatisfied with that amount and called the experiment a failure, but it looks like a success to me.) radiohead made millions in 2007 by inviting fans to copy an album and pay what they wished, while it was also shared on peer-to-peer networks. 
in 2008, nine inch nails released an album with permission to share copies and made $750,000 in a few days. 
the possibility of success without oppression is not limited to bestsellers. 
many artists of various levels of fame now make an adequate living through voluntary support: donations and merchandise purchases of their fans. 
kevin kelly estimates the artist need only find around 1,000 true fans. 
when computer networks provide an easy anonymous method for sending someone a small amount of money, without a credit card, it will be easy to set up a much better system to support the arts. 
when you view a work, there will be a button you can press saying, "click here to send the artist one dollar."
 wouldn't you press it, at least once a week? 
another good way to support music and the arts is with tax funds—perhaps a tax on blank media or on internet connectivity. 
the state should distribute the tax money entirely to the artists, not waste it on corporate executives. 
but the state should not distribute it in linear proportion to popularity, because that would give most of it to a few superstars, leaving little to support all the other artists. 
i therefore recommend using a cube-root function or something similar. 
with linear proportion, superstar a with 1,000 times the popularity of a successful artist b will get 1,000 times as much money as b. with the cube root, a will get 10 times as much as b. thus, each superstar gets a larger share than a less popular artist, but most of the funds go to the artists who really need this support. 
this system will use our tax money efficiently to support the arts. 
the global patronage proposal combines aspects of those two systems, incorporating mandatory payments with voluntary allocation among artists. 
to make copyright fit the network age, we should legalize the noncommercial copying and sharing of all published works, and prohibit drm. 
but until we win this battle, you must protect yourself: don't buy any products with drm unless you personally have the means to break the drm. 
never use a product designed to attack your freedom unless you can nullify the attack. 
freedom—or copyright? 
(old version). 
there is an updated version of this article. 
the brave new world of e-books: no more used book stores, no more lending a book to your friend, no more borrowing one from the public library, no purchasing a book except with a credit card that identifies what you read. 
even reading an e-book without authorization is a crime. 
once upon a time, in the age of the printing press, an industrial regulation was established for the business of writing and publishing. 
it was called copyright. 
copyright's purpose was to encourage the publication of a diversity of written works. 
copyright's method was to make publishers get permission from authors to reprint recent writings. 
ordinary readers had little reason to disapprove, since copyright restricted only publication, not the things a reader could do. 
if it raised the price of a book a small amount, that was only money. 
copyright provided a public benefit, as intended, with little burden on the public. 
it did its job well—back then. 
then a new way of distributing information came about: computers and networks. 
the advantage of digital information technology is that it facilitates copying and manipulating information, including software, musical recordings and books. 
networks offered the possibility of unlimited access to all sorts of data—an information utopia. 
but one obstacle stood in the way: copyright. 
readers who made use of their computers to share published information were technically copyright infringers. 
the world had changed, and what was once an industrial regulation on publishers had become a restriction on the public it was meant to serve. 
in a democracy, a law that prohibits a popular, natural and useful activity is usually soon relaxed. 
but the powerful publishers' lobby was determined to prevent the public from taking advantage of the power of their computers, and found copyright a suitable weapon. 
under their influence, rather than relaxing copyright to suit the new circumstances, governments made it stricter than ever, imposing harsh penalties on readers caught sharing. 
but that wasn't the last of it. 
computers can be powerful tools of domination when a few people control what other people's computers do. 
the publishers realized that by forcing people to use specially designated software to watch videos and read e-books, they can gain unprecedented power: they can compel readers to pay, and identify themselves, every time they read a book! 
that is the publishers' dream, and they prevailed upon the u.s. 
government to enact the digital millennium copyright act of 1998. 
this law gives them total legal power over almost anything a reader might do with an e-book, as long as they publish the book in encrypted form. 
even reading the book without authorization is a crime. 
we still have the same old freedoms in using paper books. 
but if e-books replace printed books, that exception will do little good. 
with "electronic ink," which makes it possible to download new text onto an apparently printed piece of paper, even newspapers could become ephemeral. 
imagine: no more used book stores; no more lending a book to your friend; no more borrowing one from the public library—no more "leaks" that might give someone a chance to read without paying. 
(and judging from the ads for microsoft reader, no more anonymous purchasing of books either.) this is the world publishers have in mind for us. 
why is there so little public debate about these momentous changes? 
most citizens have not yet had occasion to come to grips with the political issues raised by this futuristic technology. 
besides, the public has been taught that copyright exists to "protect" the copyright holders, with the implication that the public's interests do not count. 
(the biased term "intellectual property" also promotes that view; in addition, it encourages the mistake of trying to treat several laws that are almost totally different—such as copyright law and patent law—as if they were a single issue.) but when the public at large begins to use e-books, and discovers the regime that the publishers have prepared for them, they will begin to resist. 
humanity will not accept this yoke forever. 
the publishers would have us believe that suppressive copyright is the only way to keep art alive, but we do not need a war on copying to encourage a diversity of published works; as the grateful dead showed, private copying among fans is not necessarily a problem for artists. 
(in 2007, radiohead made millions by inviting fans to copy an album and pay whatever amount they wish; a few years before, stephen king got hundreds of thousands for an e-book which people could copy.) by legalizing the copying of e-books among friends, we can turn copyright back into the industrial regulation it once was. 
for some kinds of writing, we should go even further. 
for scholarly papers and monographs, everyone should be encouraged to republish them verbatim online; this helps protect the scholarly record while making it more accessible. 
for textbooks and most reference works, publication of modified versions should be allowed as well, since that encourages improvement. 
eventually, when computer networks provide an easy way to send someone a small amount of money, the whole rationale for restricting verbatim copying will go away. 
if you like a book, and a box pops up on your computer saying "click here to give the author one dollar," wouldn't you click? 
copyright for books and music, as it applies to distributing verbatim unmodified copies, will be entirely obsolete. 
and not a moment too soon! 
freedom or power?. 
the love of liberty is the love of others; the love of power is the love of ourselves. 
—william hazlitt in the free software movement, we stand for freedom for the users of software. 
we formulated our views by looking at what freedoms are necessary for a good way of life, and permit useful programs to foster a community of goodwill, cooperation, and collaboration. 
our criteria for free software specify the freedoms that a program's users need so that they can cooperate in a community. 
we stand for freedom for programmers as well as for other users. 
most of us are programmers, and we want freedom for ourselves as well as for you. 
but each of us uses software written by others, and we want freedom when using that software, not just when using our own code. 
we stand for freedom for all users, whether they program often, occasionally, or not at all. 
however, one so-called freedom that we do not advocate is the "freedom to choose any license you want for software you write."
 we reject this because it is really a form of power, not a freedom. 
this oft overlooked distinction is crucial. 
freedom is being able to make decisions that affect mainly you; power is being able to make decisions that affect others more than you. 
if we confuse power with freedom, we will fail to uphold real freedom. 
making a program proprietary is an exercise of power. 
copyright law today grants software developers that power, so they and only they choose the rules to impose on everyone else—a relatively small number of people make the basic software decisions for all users, typically by denying their freedom. 
when users lack the freedoms that define free software, they can't tell what the software is doing, can't check for back doors, can't monitor possible viruses and worms, can't find out what personal information is being reported (or stop the reports, even if they do find out). 
if it breaks, they can't fix it; they have to wait for the developer to exercise its power to do so. 
if it simply isn't quite what they need, they are stuck with it. 
they can't help each other improve it. 
proprietary software developers are often businesses. 
we in the free software movement are not opposed to business, but we have seen what happens when a software business has the "freedom" to impose arbitrary rules on the users of software. 
microsoft is an egregious example of how denying users' freedoms can lead to direct harm, but it is not the only example. 
even when there is no monopoly, proprietary software harms society. 
a choice of masters is not freedom. 
discussions of rights and rules for software have often concentrated on the interests of programmers alone. 
few people in the world program regularly, and fewer still are owners of proprietary software businesses. 
but most of humanity now uses computers (specifically, smartphones) and thus uses software, so software developers now control the way they live, do business, communicate, and are entertained. 
the ethical and political issues are not addressed by the slogan of "freedom of choice (for developers only)."
 if "code is law," (1) then the real question we face is: who should control the code you use—you, or an elite few? 
we believe you are entitled to control the software you use, and giving you that control is the goal of free software. 
we believe you should decide what to do with the software you use; however, that is not what today's law says. 
current copyright law places us in the position of power over users of our code, whether we like it or not. 
the ethical response to this situation is to proclaim freedom for each user, just as the bill of rights was supposed to exercise government power by guaranteeing each citizen's freedoms. 
that is what the gnu general public license is for: it puts you in control of your usage of the software while protecting you from others who would like to take control of your decisions. 
as more and more users realize that code is law, and come to feel that they too deserve freedom, they will see the importance of the freedoms we stand for, just as more and more users have come to appreciate the practical value of the free software we have developed. 
footnote. 
william j. mitchell, city of bits: space, place, and the infobahn (cambridge, mass.: mit press, 1995), p. 111, as quoted by lawrence lessig in code and other laws of cyberspace, version 2.0 (new york, ny: basic books, 2006), p. 5. this essay is published in free software, free society: the selected essays of richard m. stallman. 
free software and sustainable development. 
many organizations that aim to promote development by spreading the use of computers make a fundamental mistake: they promote the use of proprietary (nonfree) software. 
using proprietary software is not development; it makes society dependent, not strong. 
proprietary software such as ms windows and the macintosh system is distributed in a scheme to keep the users divided and helpless. 
the users are divided because each user is forbidden to share the program with anyone else; they are helpless because the "plans" of the software, the source code, are secret. 
users can't feasibly change the program, or even verify that it does what the developer says (and not anything else that the developer didn't say). 
the way to avoid being divided and helpless is to use free software. 
free software respects users' freedom. 
specifically, free software means users have four essential freedoms: they are free to run the software, free to study its source code and change it to do what they want, free to redistribute copies, and free to publish modified versions. 
free software is part of human knowledge. 
increasing the use of free software makes society more capable. 
free software can be freely used, understood, maintained and adapted by local people anywhere in the world. 
this is true development. 
by contrast, increasing use of proprietary software means deepening society's dependency on a few corporations in rich countries. 
proprietary software is secret technology, which local people are forbidden to understand, forbidden to maintain, forbidden to adapt, and forbidden to extend. 
it can be used only under the direct control of a single corporation, or else illegally. 
dependence on proprietary software is not development, it is electronic colonization. 
for more information on free software and the popular gnu/linux operating system, see www.gnu.org. 
first published on insnet.org in 2005. 
motives for writing free software. 
don't make the mistake of supposing that all software development has one simple motive. 
here are some of the motives we know influence many people to write free software. 
fun for some people, often the best programmers, writing software is the greatest fun, especially when there is no boss to tell you what to do. 
nearly all free software developers share this motive. 
political idealism the desire to build a world of freedom, and help computer users escape from the power of software developers. 
to be admired if you write a successful, useful free program, the users will admire you. 
that feels very good. 
professional reputation if you write a successful, useful free program, that will suffice to show you are a good programmer. 
community being part of a community by collaborating with other people in public free software projects is a motive for many programmers. 
education if you write free software, it is often an opportunity to dramatically improve both your technical and social skills; if you are a teacher, encouraging your students to take part in an existing free software project or organizing them into a free software project may provide an excellent opportunity for them. 
gratitude if you have used the community's free programs for years, and it has been important to your work, you feel grateful and indebted to their developers. 
when you write a program that could be useful to many people, that is your chance to pay it forward. 
hatred for microsoft it is a mistake to focus our criticism narrowly on microsoft. 
indeed, microsoft is evil, since it makes nonfree software. 
even worse, it is often malware in various ways including drm. 
however, many other companies do these things, and the nastiest enemy of our freedom nowadays is apple. 
nonetheless, it is a fact that many people utterly despise microsoft, and some contribute to free software based on that feeling. 
money a considerable number of people are paid to develop free software or have built businesses around it. 
wanting a better program to use people often work on improvements in programs they use, in order to make them more convenient. 
(some commentators recognize no motive other than this, but their picture of human nature is too narrow.) human nature is complex, and it is quite common for a person to have multiple simultaneous motives for a single action. 
each person is different, and there could be other motives that are missing from this list. 
if you know of other motives not listed here, please send email to <campaigns@gnu.org>. 
if we think the other motives are likely to influence many developers, we will add them to the list. 
www.gnu.org/philosophy/fs-translations.html
funding art vs funding software. 
stallman i've proposed two new systems to fund artists in a world where we have legalized sharing (noncommercial redistribution of exact copies) of published works. 
one is for the state to collect taxes for the purpose, and divide the money among artists in proportion to the cube root of the popularity of each one (as measured by surveying samples of the population). 
the other is for each player to have a "donate" button to anonymously send a small sum (perhaps 50 cents, in the us) to the artists who made the last work played. 
these funds would go to artists, not to their publishers. 
people often wonder why i don't propose these methods for free software. 
there's a reason for that: it is hard to adapt them to works that are free. 
in my view, works designed to be used to do practical jobs must be free. 
the people who use them deserve to have control over the jobs they do, which requires control over the works they use to do them, which requires the four freedoms. 
works to do practical jobs include educational resources, reference works, recipes, text fonts and, of course, software; these works must be free. 
that argument does not apply to works of opinion (such as this one) or art, because they are not designed for the users to do practical jobs with. 
thus, i don't believe those works must be free. 
we must legalize sharing them, and using pieces in remix to make totally different new works, but that doesn't include in publishing modified versions of them. 
it follows that, for these works, we can tell who the authors are. 
each published work can specify who its authors are, and changing that information can be illegal. 
that crucial point enables my proposed funding systems to work. 
it means that if you play a song and push the "donate" button, the system can be sure who should get your donation. 
likewise, if you participate in the survey that calculates popularities, the system will know who to credit with a little more popularity because you listened to that song or made a copy of it. 
when one song is made by multiple artists (for instance, several musicians and a songwriter), that doesn't happen by accident. 
they know they are working together, and they can decide in advance how to divide up the popularity that song later develops—or use the standard default rules for this division. 
this case creates no problem for those two funding proposals because the work, once made, is not changed by others. 
however, in a field of free works, one large work can have hundreds, even thousands of authors. 
there can be various versions with different, overlapping sets of authors. 
moreover, the contributions of those authors will differ in kind as well as in magnitude. 
this makes it impossible to divide the work's popularity among the contributors in a way that can be justified as correct. 
it's not just hard work; it's not merely complex. 
the problem raises philosophical questions that have no good answers. 
consider, for example, the free program gnu emacs. 
our records of contributions to the code of gnu emacs are incomplete in the period before we started using version control—before that we have only the change logs. 
but let's imagine we still had every version and could determine precisely what code contribution is due to each of the hundreds of contributors. 
we'd still be stuck. 
if we wanted to give credit in proportion to lines of code (or should it be characters?), then it would be straightforward, once we decide how to handle a line that was written by a and then changed by b. but that assumes each line as important as every other line. 
i am sure that is wrong—some pieces of the code do more important jobs and others less; some code is harder to write and other code is easier. 
but i see no way to quantify these distinctions, and the developers could argue about them forever. 
i might deserve some additional credit for having initially written the program, and certain others might deserve additional credit for having initially written certain later important additions, but i see no objective way to decide how much. 
i can't propose a justifiable rule for dividing up the popularity credit of a program like gnu emacs. 
as for asking all the contributors to negotiate an agreement, we can't even try. 
there have been hundreds of contributors, and we could not find them all today. 
they contributed across a span of 26 years, and never at any time did all those people decide to work together. 
we might not even know the names of all the authors. 
if some code was donated by companies, we did not need to ask which persons wrote that code. 
then what about the forked or modified variants of gnu emacs? 
each one is an additional case, equally complex but different. 
how much of the credit for such a variant should go to those who worked on that variant, and how much to the original authors of the code they got from other gnu emacs versions, other programs, and so on? 
the conclusion is that there is no way we could come up with a division of the credit for gnu emacs and justify it as anything but arbitrary. 
but emacs is not a special case; it is a typical example. 
the same problems would arise for many important free programs, and other free works such as wikipedia pages. 
these problems are the reasons i don't propose using those two funding systems in fields such as software, encyclopedias or education, where all works ought to be free. 
what makes sense for these areas is to ask people to donate to projects for the work they propose to do. 
that system is simple. 
the free software foundation asks for donations in two ways. 
we ask for general donations to support the foundation's work, and we invite targeted donations for certain specific projects. 
other free software organizations do this too. 
 it's not the gates, it's the bars. 
stallman to pay so much attention to bill gates' retirement is missing the point. 
what really matters is not gates, nor microsoft, but the unethical system of restrictions that microsoft—like many other software companies—imposes on its customers. 
that statement may surprise you, since most people interested in computers have strong feelings about microsoft. 
businessmen and their tame politicians admire its success in building an empire over so many computer users. 
many outside the computer field credit microsoft for advances which it only took advantage of, such as making computers cheap and fast, and convenient graphical user interfaces. 
gates' philanthropy for health care for poor countries has won some people's good opinion. 
the la times reported that his foundation spends five to 10% of its money annually and invests the rest, sometimes in companies it suggests cause environmental degradation and illness in the same poor countries. 
(2010 update: the gates foundation is supporting a project with agribusiness giant cargill on a project that could involve pushing genetically modified crops in africa.) many computerists specially hate gates and microsoft. 
they have plenty of reasons. 
microsoft persistently engages in anti-competitive behaviour, and has been convicted three times. 
(bush, who let microsoft off the hook for the second us conviction, was invited to microsoft headquarters to solicit funds for the 2000 election. 
in the uk, microsoft established a major office in gordon brown's constituency. 
both lawful, both potentially corrupting.) many users hate the "microsoft tax," the retail contracts that make you pay for windows on your computer even if you won't use it. 
(in some countries you can get a refund, but the effort required is daunting.) there's also the digital restrictions management: software features designed to "stop" you from accessing your files freely. 
(increased restriction of users seems to be the main advance of vista.) then there are the gratuitous incompatibilities and obstacles to interoperation with other software. 
(this is why the eu required microsoft to publish interface specifications.) this year microsoft packed standards committees with its supporters to procure iso approval of its unwieldy, unimplementable and patented "open standard" for documents. 
(the eu is now investigating this.) these actions are intolerable, of course, but they are not isolated events. 
they are systematic symptoms of a deeper wrong which most people don't recognize: proprietary software. 
microsoft's software is distributed under licenses that keep users divided and helpless. 
the users are divided because they are forbidden to share copies with anyone else. 
the users are helpless because they don't have the source code that programmers can read and change. 
if you're a programmer and you want to change the software, for yourself or for someone else, you can't. 
if you're a business and you want to pay a programmer to make the software suit your needs better, you can't. 
if you copy it to share with your friend, which is simple good-neighbourliness, they call you a "pirate."
 microsoft would have us believe that helping your neighbour is the moral equivalent of attacking a ship. 
the most important thing that microsoft has done is to promote this unjust social system. 
gates is personally identified with it, due to his infamous open letter which rebuked microcomputer users for sharing copies of his software. 
it said, in effect, "if you don't let me keep you divided and helpless, i won't write the software and you won't have any. 
surrender to me, or you're lost!"
 but gates didn't invent proprietary software, and thousands of other companies do the same thing. 
it's wrong—no matter who does it. 
microsoft, apple, adobe, and the rest, offer you software that gives them power over you. 
a change in executives or companies is not important. 
what we need to change is this system. 
that's what the free software movement is all about. 
"free" refers to freedom: we write and publish software that users are free to share and modify. 
we do this systematically, for freedom's sake; some of us paid, many as volunteers. 
we already have complete free operating systems, including gnu/linux. 
our aim is to deliver a complete range of useful free software, so that no computer user will be tempted to cede her freedom to get software. 
in 1984, when i started the free software movement, i was hardly aware of gates' letter. 
but i'd heard similar demands from others, and i had a response: "if your software would keep us divided and helpless, please don't write it. 
we are better off without it. 
we will find other ways to use our computers, and preserve our freedom."
 in 1992, when the gnu operating system was completed by the kernel, linux, you had to be a wizard to run it. 
today gnu/linux is user-friendly: in parts of spain and india, it's standard in schools. 
tens of millions use it, around the world. 
you can use it too. 
gates may be gone, but the walls and bars of proprietary software he helped create remain—for now. 
dismantling them is up to us. 
this article was published by bbc news in 2008. 
why there are no gif files on gnu web pages. 
there is no special patent threat to gif format nowadays as far as we know; the patents that were used to attack gif have expired. 
nonetheless, this article will remain pertinent as long as programs can be forbidden by patents, since the same sorts of things could happen in any area of computing. 
see our website policies regarding gifs. 
there are no gifs on the gnu web site because of the patents (unisys and ibm) covering the lzw compression algorithm which is used in making gif files. 
these patents make it impossible to have free software to generate proper gifs. 
they also apply to the compress program, which is why gnu does not use it or its format. 
unisys and ibm both applied for patents in 1983. 
unisys (and perhaps ibm) applied for these patents in a number of countries. 
of the places whose patent databases we were able to search, the latest expiration date seems to be 1 october 2006&#8239;[1]. 
until then, anyone who releases a free program for making gif files is likely to be sued. 
we don't know any reason to think that the patent owners would lose these lawsuits. 
if we released such a program, unisys and ibm might think it wiser (for public relations reasons) not to sue a charity like the fsf. 
they could instead sue the users of the program, including the companies who redistribute gnu software. 
we feel it would not be responsible behavior for us to set up this situation. 
many people think that unisys has given permission for distributing free software to make gif format. 
unfortunately that is not what unisys has actually done. 
here is what unisys actually said about the matter in 1995: unisys does not require licensing, or fees to be paid, for non-commercial, non-profit gif-based applications, including those for use on the on-line services. 
concerning developers of software for the internet network, the same principle applies. 
unisys will not pursue previous inadvertent infringement by developers producing versions of software products for the internet prior to 1995. 
the company does not require licensing, or fees to be paid for non-commercial, non-profit offerings on the internet, including "freeware."
 unfortunately, this doesn't permit free software which can be used in a free operating system such as gnu. 
it also does not permit at all the use of lzw for other purposes such as compression of files. 
this is why we think it is still best to reject lzw, and switch to alternatives such as gnu gzip and png. 
commercial redistribution of free software is very important, and we want the gnu system as a whole to be redistributed commercially. 
this means we can't add a gif-generating program to gnu, not under the unisys terms. 
the free software foundation is a non-commercial, non-profit organization, so strictly speaking the income from our sales of cd-roms is not "profit."
 perhaps this means we could include a gif program on our cd-rom and claim to be acting within the scope of the unisys permission—or perhaps not. 
but since we know that other redistributors of gnu would be unable to include it, doing this would not be very useful. 
shortly after unisys made its announcement, when the net in general was reassured thinking that unisys had given permission for free gif-generating software, we wrote to the unisys legal department asking for clarification of these issues. 
we did not receive a response. 
even if unisys really did give permission for free software to generate gifs, we would still have to deal with the ibm patent. 
both the ibm and the unisys patents cover the same "invention"—the lzw compression algorithm. 
(this could reflect an error on the part of the us patent and trademark office, which is famous for incompetence and poor judgment.) decoding gifs is a different issue. 
the unisys and ibm patents are both written in such a way that they do not apply to a program which can only uncompress lzw format and cannot compress. 
therefore we can and will include support for displaying gif files in gnu software. 
given this situation, we could still include gif files in our web pages if we wanted to. 
many other people would be happy to generate them for us, and we would not be sued for having gif files on our server. 
but we feel that if we can't distribute the software to enable people to generate gif files properly, then we should not have other people run such software for us. 
besides, if we can't provide software in gnu to generate gif files, we have to recommend an alternative. 
we ourselves should use the alternative that we recommend. 
in 1999, unisys had the following to say about the issue of their patent: unisys has frequently been asked whether a unisys license is required in order to use lzw software obtained by downloading from the internet or from other sources. 
the answer is simple. 
in all cases, a written license agreement or statement signed by an authorized unisys representative is required from unisys for all use, sale or distribution of any software (including so-called "freeware") and/or hardware providing lzw conversion capability (for example, downloaded software). 
with this statement, unisys is trying to take back what they said in 1995 when they gave parts of the patent to the public. 
the legality of such a move is questionable. 
a further issue is that the lzw patents—and computational idea patents in general—are an offense against the freedom of programmers generally, and all programmers need to work together to protect software from patents. 
so even if we could find a solution to enable the free software community to generate gifs, that isn't really a solution, not for the problem as a whole. 
the solution is switching to another format and not using gif any more. 
therefore, we don't use gif, and we hope you won't use it either. 
it is possible to make non-compressed images that act like gifs, in that they work with programs that decode gif format. 
this can be done without infringing patents. 
these pseudo-gifs are useful for some purposes. 
it is also possible to create gifs using a patent-free run length encoding but this doesn't achieve the compression that one normally expects in a gif. 
we decided not to use these pseudo-gifs on our web site because they are not a satisfactory solution to the community's problem. 
they work, but they are very large. 
what the web needs is a patent-free compressed format, not large pseudo-gifs. 
the png format is a patent-free compressed format. 
we hope it will become widely supported; then we will use it. 
we do provide png versions of most of the images on this server. 
for more information about the gif patent problems, see the league for programming freedom gif page. 
through that page you can find more information about the problem of software patents in general. 
there is a library called libungif that reads gif files and writes uncompressed gifs to circumvent the unisys patent. 
burnallgifs.org is a web site devoted to discouraging the use of gif files on the web. 
footnote. 
we were able to search the patent databases of the usa, canada, japan, and the european union. 
the unisys patent expired on 20 june 2003 in the usa, in europe it expired on 18 june 2004, in japan the patent expired on 20 june 2004 and in canada it expired on 7 july 2004. 
the u.s. 
ibm patent expired 11 august 2006. 
the software freedom law center says that after 1 october 2006, there will be no significant patent claims interfering with the use of static gifs. 
animated gifs are a different story. 
we do not know what patents might cover them. 
however, we have not heard reports of threats against use of animated gifs. 
any software can be threatened by patents, but we have no reason to consider animated gifs to be in particular danger—no particular reason to shun them. 
regarding gnutella. 
"gnutella" is, at present, the name for a protocol for distributed file sharing, mostly used for music files. 
the name also sometimes refers to the network itself, as well as the original gnutella software. 
the situation is quite confusing. 
for more on gnutella's origin and history, please refer to the wikipedia article on the subject. 
in any case, the name was originally a word play on "gnu" (the original developers planned to release their code under the gnu gpl, and may have had in mind contributing it to the gnu project) and "nutella" (a candy bar that the original developers enjoyed). 
however, neither the original software nor any of the related current projects are official gnu packages. 
we have asked that the gnutella developers change the name to avoid confusion; perhaps that will happen in the future. 
there are a number of free software programs that implement the gnutella protocol, such as gtk-gnutella, mutella, and gnucleus. 
please note, however, that none of these programs are officially gnu software either. 
gnu has its own peer-to-peer networking program, gnunet, whose documentation includes a comparison of the protocols. 
the free software foundation is concerned with the freedom to copy and change software; music is outside our scope. 
but there is a partial similarity in the ethical issues of copying software and copying recordings of music. 
some articles in the philosophy directory relate to the issue of copying for things other than software. 
some of the other people's articles we have links to are also relevant. 
no matter what sort of published information is being shared, we urge people to reject the assumption that some person or company has a natural right to prohibit sharing and dictate exactly how the public can use it. 
even the us legal system nominally rejects that anti-social idea. 
gnu & the free software foundation. 
engineering tech talk at google, june 11, 2004 table of contents. 
1. introduction 2. how it started 3. gnu operating system 4. gnu emacs 5. expensive habits 6. definition of free software 7. freedom 2 moral dilemma 8. freedom 2 spirit of good will 9. freedom 0 to run a program, freedom 1 to modify it 10. 
drm, back doors, bugs 11. 
freedom 3 having no master 12. 
copyleft forbidding is forbidden 13. 
general public license 13a. 
developing gnu 14. 
making money off free software 15. 
why write free software 16. 
linux kernel 17. 
gnu vs. 
linux confusion problem freedom 18. 
enemies of free software 19. 
treacherous computing 20. 
help gnu 21. 
saint ignucius 22. 
about anonymity, credit cards, cell phones 23. 
free formats, copyright, microsoft 24. 
dangers of webmail loss of freedom 25. 
copyright art vs. 
software 26. 
malicious free software 27. 
patented file formats 28. 
games as free software 29. 
gpl freedoms for cars, saving seeds 30. 
no software is better than nonfree software 31. 
portability of free software 32. 
is some free software obfuscated on purpose? 
33. 
proprietary keeping an edge 34. 
forbidding is forbidden how is this freedom? 
35. 
can google help free software 36. 
free software on windows, good or bad 37. 
sco's suit 38. 
stallman's problem typing 39. 
open source, good or bad pat-riot act 40. 
the end 1. introduction. 
ed: well, thank you everybody for making it. 
i'm ed falk and this man needs very little introduction; if you don't know what the letters rms stand for, you probably don't belong in this room. 
richard was the founder of the free software foundation, in 1984 i believe it was, and as such could be considered the father of free software and, of course, google's infrastructure is based on free software. 
so we owe the free software movement quite a great deal of thanks. 
[and my mic is dying on this microphone so i won't talk too long.] this is richard stallman and we thank him for being here on short notice and we thank our mutual friend lile elam who arranged all of this and i think with no further ado, i give you richard! 
[richard bows] 2. how it started. 
richard: please raise your hands if you cannot hear me. 
[laughter] yes, somebody raised his hand. 
so, the topic of my speech is free software. 
i didn't begin free software; there was free software going back to the early days of computing. 
as soon as there were a couple of computers of the same model, people could try sharing software. 
and they did. 
{this is not… this has a problem. 
how do we stop the feedback? 
can someone do anything? 
i'm willing to get some feedback, but only from you, not from the pa system. 
audience: [unintelligible] richard: well, that doesn't matter; i'm not an advocate of open source and never was and never will be.} so free software existed before i started programming and i had the good fortune, in the 1970s, of being part of a community of programmers who shared software. 
so i learned about free software as a way of life, by living it. 
and i came to appreciate what it meant to be free to share with people, not divided from the rest of the world by attitudes of secrecy and hostility. 
but that community died in the early '80s and i found myself confronted by the prospect of spending the rest of my life in a world of proprietary software. 
and, worst of all, confronted by the prospect of signing a non-disclosure agreement {which i}. 
and i had concluded that it is unethical to sign a non-disclosure agreement for generally useful technical information, such as software. 
to promise not to share with one's fellows is a violation of human solidarity. 
so when i saw that the machine downstairs was asking me to sign an nda, i just said, "i can't sign an nda."
 well, fortunately, there was an option; they let me come in here and speak without signing it, otherwise you would have had to go outside to listen. 
[laughter] (they asked a couple of other interesting questions; they asked about company, so i said i'm available tonight. 
[looking at name tag][laughter] and they asked for my host, so i put down fencepost.gnu.org. 
but that's just the hacker spirit.) so i found myself in a situation where the only way you could get a modern computer and start to use it was to sign a non-disclosure agreement for some proprietary operating system. 
because all the operating systems for modern computers in 1983 were proprietary, and there was no lawful way to get a copy of those operating systems without signing a non-disclosure agreement, which was unethical. 
so i decided to try to do something about it, to try to change that situation. 
and the only way i could think of to change it was to write another operating system, and then say as the author "this system is free; you can have it without a non-disclosure agreement and you're welcome to redistribute it to other people. 
you're welcome to study how it works. 
you're welcome to change it."
 so, instead of being divided and helpless, the users of this system would live in freedom. 
ordinary proprietary software is part of a scheme where users are deliberately kept divided and helpless. 
the program comes with a license that says you're forbidden to share it, and in most cases you can't get the source code, so you can't study it or change it. 
it may even have malicious features and you can't tell. 
with free software, we respect the user's freedom, and that's the whole point. 
the reason for the free software movement is so that the people of cyberspace can have freedom, so that there is a way to live in freedom and still use a computer, to avoid being kept divided and helpless. 
3. gnu operating system. 
you can't use a computer without an operating system, so a free software operating system was absolutely essential. 
and in 1983 i announced my plan to develop one: an operating system called gnu. 
i had decided to make the system unix-like so that it would be portable. 
the operating system that we had used for many years at the artificial intelligence lab was the incompatible timesharing system, or its. 
it had been written in assembler language for the pdp-10, so when digital discontinued the pdp-10, our many years of work turned into dust and blew away. 
i didn't want to write another system and have the same thing happen, so i decided this system had better be portable. 
but there was only one successful portable operating system i knew of, and that was unix. 
so i decided to follow the design of unix, figuring that way i'd have a good chance of succeeding in making a system that was useful and portable. 
and then i decided to make the system upward-compatible with the interfaces of unix, and the reason for this was so that users could switch to it without an incompatible change. 
i realized that i could take the best ideas from the various systems i had helped develop or use and add my pet ideas and make my dream operating system. 
but this would have been incompatible, and the users would mostly have rejected it, saying "it would be too much work to switch, so we're just not going to."
 so, by making the system upward-compatible with unix, i could spare the users that obstacle and make more of a chance that users would actually use the system. 
if the users had rejected it, i would have had a perfect excuse. 
i could have said "i offered them freedom and they rejected it; it's their fault."
 but i wanted to make more than just an excuse. 
i wanted to build a community where people would actually live in freedom, which meant i had to develop a system people would actually use. 
so i decided to make the system upward-compatible with unix. 
now, unix consists of many components that communicate through interfaces that are more or less documented. 
and the users use those interfaces. 
so to be compatible with unix required using the same interfaces, which meant that the initial design decisions were already made, except one: what range of target machines to support. 
unix had been designed to support 16-bit machines, which was a lot of extra work, because programs had to be kept small; so i decided to save that extra work by not supporting anything less than a 32-bit machine. 
i figured it would take many years to get the system done and by then people would normally be using 32-bit machines anyway, and that turned out to be true. 
so then the only thing that i needed before i could start work was a name. 
now, to be a hacker means to enjoy playful cleverness—in programming, and in other areas of life, any area of life [where] you could be playfully clever. 
and there was a hacker tradition that when you were writing a program that was similar to some existing program, you could give your new program a name that's a recursive acronym, saying it is not the other program. 
for instance, in the '60s and '70s there were many teco text editors, more or less similar; typically each system would have a teco and it would be called something-or-other-teco. 
but one clever hacker called his program tint, for "tint is not teco"—the first recursive acronym. 
and we thought that was very funny. 
so after i developed the first emacs extensible text editor in 1975, there were many imitations, and some were called this-or-that-emacs. 
but one was called fine for "fine is not emacs" and there was sine for "sine is not emacs," and eine for "eine is not emacs," and mince for "mince is not complete emacs."
 then eine was mostly rewritten, and version two was called zwei for "zwei was eine initially."
 [laughter] so i looked for a recursive acronym for "something is not unix," but the usual four-letter method was no good, because none of those was a word. 
and if it doesn't have some other meaning, it's not funny. 
so i thought, "what else can i do, hmm?"
 nothing came to me, so i thought, "i'll make a contraction, then i could get a three-letter recursive acronym."
 i started substituting all 26 letters: anu, bnu, cnu, dnu, enu, fnu, gnu! 
well, "gnu" is the funniest word in the english language, so that had to be the choice. 
if you can call something "gnu," it makes no sense to pick anything else. 
so, of course, the reason why the word "gnu" is used for so much word-play is that, according to the dictionary, it's pronounced "new."
 so people started asking each other, "hey, what's g-nu," as a joke, long before you could answer "gnu's not unix."
 but now you can give that answer and the best part is, it sounds like you're obnoxiously telling the person what it isn't, instead of answering his question. 
but the fact is, you're giving the exact meaning of gnu; so you are, in fact, answering the question in the most exact possible way, but it gives the appearance that you're refusing to. 
in any case, when it's the name of our operating system, please pronounce a hard g; don't follow the dictionary. 
if you talk about the "new" operating system, you'll get people very confused. 
we've been working on it for 20 years now, so it's not new anymore. 
but it still is, and always will be, gnu, no matter how many people call it linux by mistake. 
{[audience: unintelligible] [richard: thank you!]} so, having the name i could start work. 
i quit my job at mit to begin writing pieces of the gnu operating system, in january 1984. 
i had to quit my job because, had i remained an mit employee, that would have enabled mit to claim to own all the code i was writing, and mit could have turned it into proprietary software products. 
and since mit had already done that kind of thing, i certainly couldn't trust them not to do so here. 
and i didn't want to have to argue with the mit administration about all the details of the license i was going to use. 
so, by quitting my job, i took them out of the equation, and i have never had a job since then. 
however, the head of the ai lab was nice enough to let me keep using the facilities, so i began using a unix machine at the ai lab to start bootstrapping pieces of the gnu system. 
i had never used unix before that time. 
i was never a unix wizard and i chose to follow the design of unix for the exact reason that i've told you, not because unix was my favorite system or anything. 
sometimes people write that it was changes in unix's licensing policy that inspired gnu. 
well, this is not true; in fact, unix was never free software. 
they were more or less restrictive and more or less nasty about enforcing the requirements, but it was never free software, so those changes actually made no difference and, in any case, they took place long before i ever saw an actual unix machine. 
4. gnu emacs. 
so, at the time, i thought that i and the other people i was recruiting to try to help would develop all these pieces and make a complete system and then we'd say, "come and get it."
 but that's not how it happened. 
in september '84, i started developing gnu emacs, which was my second implementation of the extensible programmable text editor. 
and by early '85, it was suitable for me to do all my editing with it. 
now, that was a big relief. 
you see, i had absolutely no intention of learning to use vi. 
[laughter, applause] so, until that point, i did my editing on other machines where there was an emacs and copied the files through the net, in order to test them on the unix machine. 
once gnu emacs was running, i could do my editing on the unix machine. 
but other people wanted to get copies of gnu emacs to use it for their editing, to use it on their unix systems. 
there was no gnu system yet, there were just a few pieces. 
but this one piece turned out to be interesting by itself. 
people asked me for copies, so i had to work out the details of how to distribute it. 
of course, i put a copy in the anonymous ftp server, and that was good for people on the net, but in 1985, most programmers were not on the internet. 
so they asked me for copies; what was i going to say? 
i could have said, "i want to spend my time writing more pieces of the gnu system, not writing mag tapes, so please find a friend who can download it and put it on tape for you," and they would have found people sooner or later, because programmers generally know other programmers. 
5. expensive habits. 
but i had no job, and i was looking for some way to make some money through my work on free software. 
so i announced, "send me $150 and i'll mail you a tape of gnu emacs."
 and the orders began dribbling in. 
by the middle of the year, they were trickling in, eight to ten orders a month, which, if necessary, i could have lived on. 
that's because i make efforts to resist expensive habits. 
an expensive habit is like a trap; it's dangerous. 
now most americans have the exact opposite attitude: if they make this much money, they look for how to spend this much, [makes ample gesture] which is completely imprudent. 
so they start buying houses and cars and boats and planes and rare stamps and artwork and adventure travel and children, [laughter] all sorts of expensive luxuries that use up a lot of the world's resources, especially the children. 
and then, the next thing they know, they've got to desperately struggle all day long to get money to pay for these things, so they have no time even to enjoy them, which is especially sad when it's a matter of children. 
the other things, i guess, can get repossessed. 
so then they become puppets of money, unable to decide what they're going to do with their lives. 
if you don't want to be a puppet of money, then resist the expensive habits, so that the less you need to spend to live on, the more flexibility you've got and the less of your life you're forced to spend to make that money. 
so i still live, basically, like a student, and i want it to be that way. 
6. definition of free software. 
but people sometimes used to say to me, "what do you mean, it's free software, if it costs $150?"
 well, the english word "free" has multiple meanings and they were confused by that. 
it even took me a few years to realize that i needed to clarify this. 
one meaning, you see, refers to price, and another meaning refers to freedom. 
when we speak of free software, we're talking about freedom, not price. 
so think of "free speech," not "free beer."
 some users got their copies of gnu emacs from me through the net, and did not pay. 
some users got their copies from me on a tape, and did pay. 
and some got their copies from someone else, not from me, because everyone who had a copy was free to redistribute it. 
and did they pay that somebody else? 
well, i don't know; that was between them. 
they didn't have to tell me. 
so gnu emacs was gratis for some users and paid for for other users, but it was free software for all of them, because all of them had certain essential freedoms, which are the definition of free software. 
so let me now give you the definition of free software. 
you see, it's very easy to say "i'm in favor of freedom."
 i mean, even bush can say that. 
[laughter] i don't think he knows what it means. 
but the point is, unless you make a person get more specific, it's just cheap talk. 
so let me give you—let me get more specific now, and give you the definition of free software. 
a program is free software for you, a particular user, if you have the following four freedoms: freedom 0 is the freedom to run the program however you like; freedom 1 is the freedom to help yourself by studying the source code to see what the program really does and then changing it to do what you want; freedom 2 is the freedom to help your neighbor by distributing copies to others; and freedom 3 is the freedom to help build your community, that is the freedom to publish a modified version so others can benefit from your changes; all four of these freedoms are essential. 
they are not levels of freedom, they are four freedoms, all of which you must have in order for the program to qualify as free software. 
all of these are freedoms that no computer user should ever be denied. 
[gnu.org/philosophy/free-sw.html] 7. freedom 2 moral dilemma. 
why these particular freedoms? 
why should we define it this way? 
freedom 2 is necessary so that you can live an upright life, so that you can be ethical, be a good member of society. 
if you use a program that does not give you freedom 2, the freedom to help your neighbor, the freedom to distribute copies to others, then you are facing a potential moral dilemma that could happen at any moment, when somebody comes up and says, "could i have a copy of that program?"
 at that point, what are you going to do? 
you're forced to choose between two evils. 
one evil is to make a copy of the program for that person and violate the license. 
the other evil is to comply with the license, but be a bad neighbor. 
so you've got to choose the lesser evil, which is to make a copy for that person and violate the license. 
[laughter, applause] you see, in this case, this evil is lesser because it's directed at somebody who intentionally tried to divide you from the rest of society, and thus did something extremely wrong to you; and therefore deserves it. 
however, it's not good to live your life by lying to people. 
when somebody {asks you to promise that} says, "i'll let you have a copy of this, but you'll have to promise not to share it with anyone," the right thing to do is say no. 
once you have thought about this moral dilemma, you should anticipate that when you start using that program it's going to lead you to choose between two evils, and therefore you should refuse to use that program. 
you should just say "no, thanks" to it, and that's the principle that i believe in. 
if someone offers me a program that i'm not free to share with you, i'm going to say no, on principle. 
in fact, i was once in the audience when john perry barlow was giving a speech and he said, "raise your hands if you have no unauthorized copies of software."
 and he was surprised to see someone raise his hand, until he saw it was me. 
and then he said, "oh, of course, you," because he knew why i have no unauthorized copies; that's because all my copies of software are free software, and everybody's authorized to make copies. 
that's the whole point. 
8. freedom 2 spirit of good will. 
the most essential resource of any society is the spirit of good will, the willingness to help your neighbor; not necessarily every time you're asked, but fairly often. 
this is what makes the difference between a livable society and a dog-eat-dog jungle. 
this spirit is not going to be 100% and it's not going to be zero, but it's going to be somewhere in between—and cultural actions can influence it, can raise it or lower it. 
and it's essential to work to raise it some, because that makes life easier for everyone. 
so it's no accident that the world's major religions have been encouraging this spirit of good will for thousands of years. 
so what does it mean when powerful social institutions say that it's wrong to share? 
they're poisoning this vital resource, something no society can afford. 
now what does it mean when they say that if you share with your neighbor, you're a pirate? 
they're saying that helping your neighbor is the moral equivalent of attacking a ship. 
well, nothing could be more wrong than that. 
attacking ships is very, very bad; helping your neighbor is good. 
and what does it mean when they establish harsh punishments for anyone caught sharing? 
how much fear do you think it's going to take before everyone's too scared to help his neighbor? 
and do you want that terror campaign to go on in our society? 
i hope that the answer is no. 
we need to abolish the war on copying that is being imposed on our society. 
we need to say, loud and clear, "copying and sharing with your neighbor is good, it's legitimate, and laws that prohibit this are wrong."
 9. freedom 0 to run a program, freedom 1 to modify it. 
so that's the reason for freedom 2; it's essentially an ethical reason. 
you can't live an ethical life if you don't have freedom 2. freedom 0 is needed for a completely different reason: so you can control your own computer. 
if you are restricted in when or how much or how you can run the program, clearly you're not using your computer in freedom. 
so freedom 0 is obvious, but freedom 0 is not enough, because with freedom 0 all you can do is use the program the way it was programmed by its developer. 
you're free to do this [makes hand sign] or nothing. 
to really be free, you've got to be in control of what the program does, so you need freedom 1, which is the freedom to help yourself, the freedom to study the source code and then change it to do what you want. 
if you don't have freedom 1, you don't know what the program's doing. 
the developer is saying, "just trust me" and blind faith is the only way you can do it. 
and you have to be really blind, given that it's not unusual for proprietary programs to have malicious features, features that are put in not to serve the user, but rather to impose on, harm or restrict the user. 
for instance, spyware is quite common. 
[51 seconds of missing audio were filled in by rms in aug 2010] microsoft windows spies on the user; specific spy features have been found. 
windows media player spies too; it reports to microsoft whatever the user looks at. 
[end replacement for 51 seconds of missing audio] course do it. 
realplayer, for instance, spies on you. 
the tivo spies on you. 
some people were excited about the tivo, enthusiastic about it, because it uses some free software inside. 
but it also has nonfree software in it and it spies on you. 
so this shows it's not enough. 
we shouldn't cheer when something uses some free software; we should cheer when it respects the user's freedom. 
10. 
drm, back doors, bugs. 
but spyware is not as bad as it gets. 
there are nonfree software packages that are deliberately designed to refuse to work. 
this is called drm, digital restrictions management, where the program says, "i won't let you look at that file; i won't let you copy this; i won't let you edit this."
 well, who the hell is this program to stop you? 
and sometimes nonfree programs will reconfigure your machine, for instance make it display advertisements, figuring that you won't know it's going to happen and you won't know how to undo it afterward. 
and sometimes they have actual back doors. 
for instance, windows xp has a back door: when it asks for an upgrade, it tells microsoft who you are, so microsoft can give you an upgrade designed just for you. 
and this upgrade could have secret accounts, it could have special spy features, it could just refuse to work. 
and there's essentially nothing you can do. 
so that's the back door that microsoft knows about and we know about. 
[added in 2010: we later learned that microsoft can force "upgrades"—a much nastier back door.] there might be other back doors that we don't know about and maybe even microsoft doesn't know about. 
when i was in india in january, i was told some programmers in india had been arrested and accused of working for al-qaeda, trying to introduce back doors into windows xp. 
so, apparently, that effort failed. 
but did some others succeed? 
there's no way we can tell. 
now, i won't claim that all developers of nonfree software put in malicious features. 
there are some who try to put in features so that they will be convenient for the user and only for that. 
but they are humans, so they make mistakes. 
they can design features with all the best will that you don't like, or they can write bugs in their code. 
and when that happens, you're helpless too; you're the helpless prisoner of any decision that they make. 
whether it's malicious or made with good will, if you don't like it, you're stuck. 
now, we, the developers of free software, are also human, we also make mistakes. 
i have designed features that users didn't like. 
i have written code that had bugs in it. 
the difference is, {with our} you're not a prisoner of our decisions, because we don't keep you helpless. 
if you don't like my decisions, you can change them, because you have the freedom to change them. 
i won't blame the developers of nonfree, user-subjugating software for being human and making mistakes; i will blame them for keeping you helpless prisoner of their mistakes by denying you the freedom to correct those mistakes yourself. 
11. 
freedom 3 having no master. 
but freedom 1 is not enough. 
freedom 1 is the freedom personally to study and change the source code. 
freedom 1 is not enough because there are millions of users who use computers, but don't know how to program, so they can't take advantage of freedom 1, not personally. 
and freedom 1 is not enough even for us programmers, because there's just so much software, even so much free software, that nobody has the time to study it all and master it all and make all the changes that she wants. 
so the only way we can really, fully have control over our own software is if we do so together. 
and that's what freedom 3 is for. 
freedom 3 is the freedom to publish a modified version, so others can use it too. 
and this is what enables us to work together, taking control of our software. 
because i could make this change in a program and publish the modified version, and then you could make that change and publish the modified version, and someone else can make that change and publish the modified version. 
and now we've got a version with all three changes in it and everybody can switch to that if everybody likes it. 
with this freedom, any collectivity of users can take control together and make the software do what they together want. 
suppose there are 1,000,000 users who would like a certain change. 
well, by luck, some of them will be programmers; let's say there are 10,000 of them who know how to program. 
well, sooner or later, a few of them will make the change and publish the modified version and then all of those million users can switch to it. 
you know, most of them don't know how to program, but they can still switch to it. 
so they all get what they want. 
now let's suppose there are only 1,000 people who want some other change and none of them knows how to program. 
they can still make use of these freedoms. 
they can form an organization and each put in money, so if each puts in $100, that makes $100,000. 
and at that point they can go to a programming company and say, "will you make this change for $100,000 and when can you have it done?"
 and if they don't like the answer from there, they can go to another programming company and say, "will you make this change and when can you have it done?"
 which shows us, first of all, that these 1,000 users who don't know how to program can, by using the four freedoms, get the change that they want. 
and second, it shows that free software means a free market for support. 
proprietary software typically means a monopoly for support. 
only the developer has the source code in most cases, so only the developer can offer any support. 
if you want a change, you've got to go to the developer and beg. 
now, if you're very big and important, maybe the developer will pay attention. 
if you're not, the developer will say, "go away, don't bother me."
 or maybe the developer will say, "pay us and we'll let you report a bug."
 and if you do that, the developer will say, "thank you. 
in six months there will be an upgrade. 
buy the upgrade and you'll see if this bug was fixed and you will see what new bugs we have for you."
 but with free software, you're dealing with a free market, so that those who really value support can, in general, get better support for their money by using free software. 
now, one paradoxical consequence of this is, when you have a choice between several nonfree programs to do a job, this is actually a choice between monopolies. 
if you pick this program, the support for it afterwards will be a monopoly. 
if you pick this program, [points hand in different direction] the support for it will be a different monopoly, and if you pick this program, [points hand in different direction] the support for it will be yet another monopoly. 
so you're choosing one of these three monopolies. 
now, what this shows is that merely having a choice between a discrete set of options is not freedom. 
freedom is something much deeper and much broader than having a few choices you can make. 
many people try to equate freedom with having some choice and they're missing the point completely. 
freedom means that you get to make the decisions about how to live your life. 
{it doesn't mean, you know} having three choices about being able to choose this master or this master or this master is just a choice of masters, and a choice of masters is not freedom. 
freedom is having no master. 
12. 
copyleft forbidding is forbidden. 
so i've explained the reasons for the four freedoms. 
and thus i've explained to you what free software means. 
a program is free software for you, a particular user, if you have all of these four freedoms. 
why do i define it that way? 
the reason is that sometimes the same code can be free software for some users and nonfree for the rest. 
this might seem strange, so let me give you an example to show how it happens. 
the biggest example i know of is the x window system. 
it was developed at mit in the late '80s and released under a license that gave the user all four freedoms, so if you got x in source code under that license, it was free software for you. 
among those who got it were various computer manufacturers that distributed unix systems. 
they got the source code for x, they changed it as necessary to run on their platform, they compiled it and they put the binaries into their unix system, and they distributed only the binaries to all of their customers under the same license as the rest of unix—the same non-disclosure agreement. 
so, for those many users, the x window system was no more free than the rest of unix. 
in this paradoxical situation, the answer to the question "is x free software or not?"
 depended on where you made the measurement. 
if you made the measurement coming out of the developer's group, you'd say, "i observe all four freedoms; it's free software."
 if you made the measurement among the users, you'd say, "most of them don't have these freedoms; it's not free software."
 the developers of x did not consider this a problem, because their goal was not to give users freedom, it was to have a big success, and as far as they were concerned, those many users who were using the x window system without freedom were just a part of their big success. 
but, in the gnu project, our goal specifically was to give the users freedom. 
if what happened to x had happened to gnu, gnu would be a failure. 
so i looked for a way to stop this from happening. 
and the method i came up with is called copyleft. 
copyleft is based legally on copyright law, and you can think of it as taking copyright and flipping it over to get copyleft. 
here's how it works: we start with a copyright notice which legally doesn't actually make a difference anymore, but it reminds people that the program is copyrighted, which means that, by default, it's prohibited to copy, distribute or modify this program. 
but then we say, "you are authorized to make copies, you are authorized to distribute them, you are authorized to modify this program and you are authorized to publish modified or extended versions."
 but there is a condition, and the condition says that any program you distribute that contains any substantial part of this must, as a whole, be distributed under these conditions, no more and no less. 
which means that, no matter how many people modify the program or how much, as long as any substantial amount of our code is in there, that program must be free software in the same way. 
in effect, we guarantee that nobody can put himself between you and me and strip off the freedom and pass the code on to you missing the freedom. 
in other words, forbidding is forbidden. 
13. 
gnu general public license. 
copyleft makes the four freedoms into inalienable rights for all users, so that wherever the code goes, the freedom goes with it. 
the specific license that we use to implement the general concept of copyleft is called the gnu general public license, or gnu gpl for short. 
this license is used for around two thirds or three quarters of all free software packages. 
but that still leaves a substantial number that have other licenses. 
some of those licenses are copyleft licenses, some are not. 
so we have copylefted free software and we have non-copylefted free software. 
in both cases, the developers have respected your freedom; they have not tried to trample your freedom. 
the difference is, with copyleft we go further and we actively defend your freedom against anyone who would try to be a middleman and take it away from you, whereas the developers of non-copylefted free software don't do that. 
they have not tried to take away your freedom, but they don't actively protect your freedom from anyone else. 
so i think that they could do more for the sake of freedom. 
but they haven't done anything bad; insofar as they have done things, those things are good. 
so i won't say that they are wrong, i will just say that they could do more. 
i think that they're making a mistake. 
but their work is free software, so it does contribute to our community and, in fact, that software can be part of a free operating system such as gnu. 
13a. 
developing gnu. 
during the 1980s, our work on the gnu project was to develop or find all these pieces of gnu so that we could have a complete gnu system. 
in some cases, someone else wrote a program and made it free software and we were able to use it, and that was good because it shortened the work that we had to do. 
for instance, the x window system is one of the programs that was developed by others for reasons of their own, but they did make it free software, so we could use it. 
now, people were saying the job was so big, we'd never finish it. 
well, i thought we would eventually get a free operating system but i agreed the job was big; we had to look for shortcuts. 
so, for instance, i always wanted to have windowing facilities in gnu. 
i had written a couple of window systems at the ai lab before even starting gnu, so of course i wanted that in the system. 
but we never developed a gnu window system because someone else developed x first. 
i looked at it and i said, "well, it's not copylefted, but it is free, it's popular, it's powerful, so let's just use it."
 and so we saved one big chunk of work. 
so we took it, x, and we put it into the gnu system and we started making other pieces of gnu work with x. because the goal was to have a free operating system, not to have a free operating system every piece of which had been written purposely by us just for that. 
14. 
making money off free software. 
however, it only happened occasionally that someone else released some free software that was useful in gnu and when it happened, it was a coincidence, because they were not writing this software in order to have a free operating system. 
so when it happened, that was great, but there were lots of other pieces we had to develop. 
some were developed by staff of the free software foundation. 
the free software foundation is a tax-exempt charity to promote free software which we founded in october, '85, after gnu emacs' popularity suggested that people might actually start donating money to the gnu project. 
so we founded the free software foundation and it asked for donations, but also took over selling the tapes of gnu emacs. 
and it turns out that most of the fsf's income for the first many years came from that, from selling things, from selling copies of software and manuals that everyone was free to copy. 
now this is interesting, because this was supposedly impossible; but we did it anyway. 
now that meant i had to find some other way to make a living. 
as the president of the fsf, i did not want to compete with it; i thought that would be unfair and not correct behavior. 
so i started making my living by commissions to change the software i had written and teaching classes about it. 
so people would want some change to be made in emacs or gcc, and they would think of hiring me, because they figured i was the author so i could do a better job faster. 
so i started charging as much as $250 an hour and i calculated i could make a living in 7 weeks of paid work per year—and that meant enough money to spend, an equal amount to save, and an equal amount for taxes. 
and [when i reached] that point i figured, "i won't take any more paid work this year, i've got other, better things to do."
 so i've actually had three different free software businesses during the period i've been working on gnu. 
i've described two of them; the third one is, i get paid for some of my speeches. 
whether i get paid for this speech, i don't yet know. 
[laughter] i said, "please pay me what you can."
 now, i think google ought to be able to afford to pay me some handsome amount, but whether it will, i don't know. 
anyway, i figured it's worth doing the speech just for the good it will do for the movement. 
15. 
why write free software. 
so this raises the question of why people develop free software. 
you see, there are people who believe that no one would ever write software except to get paid, that that's the only motive that anyone would ever have to write code. 
it's amazing, the kind of utterly stupid, simplistic theories that people will sometimes believe because that's part of a prevailing ideology. 
now, human nature is very complex. 
whatever it is people are doing, they might do for various reasons. 
in fact, one person will often have multiple motives simultaneously for a single act. 
nonetheless, there are people who say, "if the software is free, that means nobody's paid to write it, so no one will write it."
 now, obviously they were confusing the two meanings of the word "free," so their theory was based on a confusion. 
in any case, we can compare their theory with empirical fact and we can see that at least hundreds, maybe thousands of people are paid to work on free software, including some people here, i believe, and there are about a million or so people developing free software at all for the many different reasons they have. 
{so to say that nobody} this simplistic theory about motivation is absurd. 
so let's see what motivates people to write free software; what are the real motives? 
well, i don't necessarily know about them. 
there could always be a person who has a motive that i don't know about or i've forgotten about. 
i can only tell you the motives that i recall encountering. 
one motive is political idealism: making the world a better place where we can live together in freedom. 
now, that's a very important motive for me, but it's not my only motive. 
and there are others who write free software and don't agree with that motive at all. 
another motive that's very important is fun. 
programming is tremendous fun. 
not for everybody, of course, but for a lot of the best programmers. 
and these are the people whose contributions we want most. 
in fact, it's so much fun, it's especially fun, when no one can tell you what to do, which is why so many people who have jobs programming like to write free software in their spare time. 
but this is not the only motive; another motive is to be appreciated. 
if 1% of our community is using your program, that's hundreds of thousands of users. 
that's a lot of people admiring you. 
another related, but different, motive is professional reputation. 
if 1% of our community is using your program, you can put that on your resume and it proves you're a good programmer. 
you don't even have to go to school. 
another motivation is gratitude. 
if you've been using the community's free software for years and appreciating it, then when you write a program, that's your opportunity to pay something back to the community that has given you so much. 
another motivation is hatred for microsoft. 
[laughter] now, this is a rather foolish motive, because microsoft is really just one of many developers of nonfree software and they're all doing the same evil thing. 
it's a mistake to focus [solely] on microsoft, and this mistake can have bad consequences. 
when people focus too much on microsoft, they start forgetting that all the others are doing something just as bad. 
and they may end up thinking that anything that competes with microsoft is good, even if it is also nonfree software and thus inherently just as evil. 
now, it's true that these other companies have not subjugated as many users as microsoft has, but that's not for want of trying; they just haven't succeeded in mistreating as many people as microsoft has, which is hardly, ethically speaking, an excuse. 
nonetheless, {when this particular motive motivates} this motive does motivate people to develop free software, so we have to count it as one of the motives that has this result. 
and another motive is money. 
when people were being paid to develop free software, that's part of their motive for the work that they're doing. 
in fact, when i was paid to make improvements in various programs i had written, that money was part of my motive for doing those particular jobs, too. 
[rms, 2010: a motive i forgot to mention is improving a free program because you want to use the improvement yourself.] so there are many possible motives to write free software. 
and, fortunately, there are many developers of free software and a lot of free software is being developed. 
16. 
the kernel, linux. 
so, during the 1980s we were filling in these missing pieces of the gnu operating system. 
by the early '90s we had almost everything necessary. 
only one important piece was missing, one essential piece for an initial system, and that was the kernel. 
we started developing a kernel in 1990. 
{i was looking for some way to} i was looking for some shortcut, some way we could start from something existing. 
i thought that debugging a kernel would be painful, because you don't get to do it with your symbolic debugger, and when it crashes, it's sort of annoying. 
so i was looking for a way to bypass that work, and i found one eventually, a microkernel called mach that had been developed as a funded project at carnegie mellon. 
now, mach doesn't have all the features of unix; the idea is, it provides certain general low-level features and you implement the rest in user programs. 
well, that, i thought, would be easy to debug, because they're user programs; when they crash, the system isn't dead. 
so people began working on those user programs, which we called the gnu hurd, because it's a herd of gnu servers (you see, gnus live in herds). 
anyway, i thought that this design would enable us to get the job done faster, but it didn't work out that way; it actually took many years to get the hurd to run, partly because mach was unreliable, partly because the debugging environment wasn't very good, partly because it's hard to debug these multithreaded, asynchronous programs and partly because this was somewhat of a research project. 
at least that's as far as i can tell; i was never involved in the actual development of the hurd. 
fortunately, we didn't have to wait for that, because in 1991, linus torvalds, a finnish college student, developed his own kernel, using the traditional monolithic design, and he got it to barely run in less than a year. 
initially, linux—that's what this kernel's name was—was not free, but in 1992 he re-released it under the gnu general public license and at that point it was free software. 
and so it was possible, by combining linux and the gnu system, to make a complete free operating system. 
and thus, the goal we had set out for, that i had announced in 1983, had been reached: there was, for the first time, a complete modern operating system for modern computers, and it was possible to get a modern computer and run it without betraying the rest of humanity, without being subjugated. 
you could do this by installing the gnu + linux operating system. 
17. 
gnu vs. 
linux confusion problem freedom. 
but the people who combined gnu and linux got confused and they started naming the entire thing linux, which was actually the name of one piece. 
and somehow that confusion spread faster than we have been able to correct it. 
so i'm sure you've heard many people speaking of linux as an operating system, an operating system {most of which} which basically started in 1984 under the name of the gnu project. 
now, this clearly isn't right. 
this system isn't linux; it contains linux, linux is the kernel, but the system as a whole is basically gnu. 
so i ask you: please don't call it linux. 
if you call it linux, you're giving linus torvalds credit for our work. 
now, he contributed one important piece of the system, but he didn't contribute the biggest part and the overall vision was there long before he got involved. 
we started developing the system when he was in junior high school. 
so please give us equal mention; surely we deserve at least that. 
you can do that by calling the system gnu/linux, or gnu+linux, or gnu&linux, whichever punctuation mark you feel expresses it best. 
[gnu.org/gnu/gnu-linux-faq.html] now, of course, part of the reason why i'm asking for this is that we deserve credit, but that's not really a very important thing. 
if it were just a matter of credit, it wouldn't be worth making a fuss about. 
but there more at stake here. 
you see, when people think that the system is linux, they then assume incorrectly that it was mainly developed and started by linus torvalds and then they assume incorrectly that the overall vision came from him, so they look at his vision and follow that. 
now, his vision is apolitical. 
he's not motivated to fight for freedom. 
he doesn't believe that computer users deserve the freedom to share and change software. 
he has never supported our philosophy. 
well, he has a right to his views and the fact that he disagrees with us doesn't reduce the value of his contribution. 
the reason we have the gnu+linux system is because of a many-year campaign for freedom. 
we in the gnu project didn't develop linux, just as we didn't develop x, or tex, or various other free programs that are now important parts of the system. 
but people who didn't share our values, who weren't motivated by the determination to live in freedom, would have seen no reason to aim for a complete system, and they would never have done so, and never have produced such a thing, if not for us. 
but this tends to be forgotten nowadays. 
you will see, if you look around, most of the discussion of the gnu system calls it linux, and tends to refer to it as "open source" rather than as "free software," and doesn't mention freedom as an issue. 
this issue, which is the reason for the system's existence, is mostly forgotten. 
you see many techies who prefer to think of technical questions in a narrowly technical context, without looking beyond at social effects of their technical decisions. 
whether the software tramples your freedom or respects your freedom, that's part of the social context. 
that's exactly what techies tend to forget or devalue. 
we have to work constantly to remind people to pay attention to freedom and, unfortunately, while we keep doing this, the users of our system often don't pay attention because they don't know it's our system. 
they don't know it's the gnu system, they think it's linux. 
and that's why it makes a real difference if you remind people where the system came from. 
people will say to me that it doesn't look good to ask for credit. 
well, i'm not asking for credit for me personally; i'm asking for credit for the gnu project, which includes thousands of developers. 
but they are right, it's true: people who are looking for some reason to see evil can see evil in that. 
so they go on and say, "you should let it drop, and when people call the system linux, you can smile to yourself and take pride in a job well done."
 that would be very wise advice if the assumption were correct: the assumption that the job is done. 
we've made a great beginning, but that's all. 
we haven't finished the job. 
we will have finished the job when every computer is running a free operating system and free application programs exclusively. 
the job is to liberate the inhabitants of cyberspace. 
we've made a great beginning; we've developed free operating systems and free gui desktops and free office suites and there are now tens of millions of users of these. 
but there are hundreds of millions of users of proprietary systems, so we have a long way to go. 
and, despite this wide range of free software, there are still a lot of application things that there is no free software to do; so we have a lot more work ahead of us. 
we've come in view of finishing the job, you know. 
maybe we're only one order of magnitude away, having come through many orders of magnitude. 
but that doesn't mean that what's left is easy. 
and today we have something that we didn't have before: we have enemies; powerful, rich enemies, powerful enough to buy governments. 
18. 
enemies of free software. 
at the beginning, gnu and the free software movement had no enemies. 
there were people who weren't interested, lots of them, but nobody was actively trying to stop us from developing and releasing a free operating system. 
nowadays, they are trying to stop us and the main obstacle we face is this, rather than the work itself. 
in the us, there are two different laws that prohibit various kinds of free software. 
one of them is the dmca, which has been used to prohibit the free software to play a dvd. 
if you buy a dvd, it's lawful for you to view it in your computer, but the free software that would enable you to do this on your gnu/linux system has been censored in the us. 
now, this affects a fairly narrow range of software: software to view encrypted media. 
but many users may want to do that, and if they can't do that with free software, they may take that as a reason to use nonfree software, if they don't value their freedom. 
but the big danger comes from patent law, because the us allows software ideas to be patented. 
now, writing a non-trivial program means combining hundreds of different ideas. 
it's very hard to do that if any one of those ideas might be someone's monopoly. 
it makes software development like crossing a mine field, because at each design decision, probably nothing happens to you, but there's a certain chance that you will step on a patent and it will blow up your project. 
and, considering how many steps you have to take, that adds up into a serious problem. 
we have a long list of features that free software packages don't have, because we're scared to implement them. 
[endsoftwarepatents.org] and now, the fcc is considering applying the broadcast flag regulation to software. 
the fcc adopted a regulation {prohibiting digital tv tuners unless} requiring digital tv tuners to have a mechanism to block copying and this has to be tamper-resistant, meaning it can't be implemented in free software. 
they haven't finished deciding whether this applies to software or not, but if they do, they will have prohibited gnu radio, which is free software that can decode digital tv broadcasts. 
then, there's the threat from hardware that has secret specifications or is designed to interfere with the user's control. 
nowadays there are many pieces of hardware you can get for your pc whose specifications are secret. 
they'll sell you the hardware, but they won't tell you how to run it. 
so how do we write free software to run it? 
well, we either have to figure out the specs by reverse engineering or we have to put market pressure on those companies. 
and in both cases, we are weakened by the fact that so many of the users of gnu/linux don't know why this system was developed and have never heard of these ideas that i'm telling you today. 
and the reason is that, when they hear about the system, they hear it called linux and it's associated with the apolitical philosophy of linus torvalds. 
linus torvalds is still working on developing linux. 
{which is, you know} developing the kernel was an important contribution to our community. 
at the same time, he is setting a very public bad example by using a nonfree program to do the job. 
now, if he were using a nonfree program privately, i would never even have heard about it and i wouldn't make a fuss about it. 
but by inviting the other people who work on linux to use it with him, he's setting a very public example legitimizing the use of nonfree software. 
so when people see that, you know, if they think that's okay, they can't possibly believe that nonfree software is bad. 
so then, when these companies say, "yes, {we support} our hardware supports linux, here is this binary-only driver you can install, and then it will work," these people see nothing wrong in that, so they don't apply their market pressure and they don't feel motivated to help in reverse engineering. 
so when we face the various dangers that we must confront, we are weakened by the lack of resolve. 
now, having strong motivation to fight for freedom won't guarantee that we win all of these fights, but it will sure help. 
it will make us try harder, and if we try harder, we'll win more of them. 
19. 
treacherous computing. 
we are going to have to politically organize to keep from being completely prohibited from writing free software. 
today, one of the most insidious threats to the future of free software comes from treacherous computing, which is a conspiracy of many large corporations. 
they call it "trusted computing," but what do they mean by that? 
what they mean is that an application developer can trust your computer to obey him and disobey you. 
so, from your point of view, it's _treacherous computing_, because your computer won't obey you anymore. 
the purpose of this plan is that you won't control your computer. 
[gnu.org/philosophy/can-you-trust.html] and there are various different things that treacherous computing can be used to do, things like prohibit you from running any program that hasn't been authorized by the operating system developer. 
that's one thing they could do. 
but they may not feel they dare go that far. 
but another thing that they plan to do is to have data that's only available to a particular application. 
the idea is that an application will be able to write data in an encrypted form, such that it can only be decrypted by the same application, such that nobody else can independently write another program to access that data. 
and, of course, they would use that for limiting access to published works, you know, something to be a replacement for dvds so that it would be not only illegal, but impossible to write the free software to play it. 
but they don't have to stop at doing this to published data. 
they could do it to your data too. 
imagine if treacherous computing is common in 10 years and microsoft decides to come out with a new version of word format that uses treacherous computing to encrypt your data. 
then it would be impossible to write free software to read word files. 
microsoft is trying every possible method to prevent us from having free software to read word files. 
first, they switched to a secret word format, so people had to try to figure out the format. 
well, we more or less have figured it out. 
there are free programs that will read most word files (not all). 
but then they came up with another idea. 
they said, "let's use xml."
 now here's what microsoft means when they speak of using xml. 
the beginning of the file has a trivial thing that says "this is xml and here comes binary word format data," and then there's the binary word format data and then there's something at the end that says, "that was binary word format data."
 and they patented this. 
{so that… i'm not sure} i don't know exactly what the patent does and doesn't cover, but, you know, there are things we could do, either reading or writing that file format, probably they could try suing us about. 
and i'm sure that, if treacherous computing is available for them to use, they'll use that too. 
this is why we have a campaign to refuse to read word files. 
now there are many reasons you should refuse to read word files. 
one is, they could have viruses in them. 
if someone sends you a word file, you shouldn't look at it. 
but the point is, you shouldn't even try to look at it. 
nowadays there are free programs that will read most word files. 
but it's really better, better than trying to read the file is if you send a message back saying, "please send that to me in a format that isn't secret. 
it's not a good idea to send people word files."
 and the reason is, we have to overcome the tendency in society for people to use these secret formats for communication. 
we have to convince people to insist on publicly documented standard formats that everyone is free to implement. 
and word format is the worst offender and so that's the best place to start. 
if somebody sends you a word file, don't try to read it. 
write back, saying "you really shouldn't do that."
 and there's a page in www.gnu.org/philosophy which is good to reference. 
it gives an explanation of why this is an important issue. 
[gnu.org/philosophy/no-word-attachments.html] 20. 
help gnu. 
now, www.gnu.org is the website of the gnu project. 
so you can go there for more information. 
in the /gnu directory you'll find the history and in the /philosophy directory you'll find articles about the philosophy of free software and in the /directory you'll find the free software directory, which now lists over 3,000 usable free software packages that will run the on gnu/linux system. 
[it is now over 6000, and located in directory.fsf.org] now, i'm about to close my speech, but before i do, i'd like to mention that i've got some stickers here to give away. 
these stickers show a flying gnu and a flying penguin, both rather unrealistic, but they're superheroes. 
and {i also have some things} if people don't mind, i've got some things i'm selling on behalf of the free software foundation, so if you buy them, you're supporting us. 
i've got these buttons that say, "ask me about free software—it's all about freedom" and i've got some gnu keyrings and gnu pins that are sort of pretty. 
so you can buy those. 
you can also support us by becoming an associate member. 
now, you can do that just through our website, but i also have some cards you can have if you would like to join [right now]. 
21. 
saint ignucius. 
so now i will close my speech by presenting my alter ego. 
see, people sometimes accuse me of having a "holier than thou" attitude. 
now, i hope that's not true. 
i'm not going to condemn somebody just for not being as firmly committed as i am. 
i will try to encourage him to become more so, but that's different. 
so i don't think i really have a "holier than thou" attitude, but i have a holy attitude because i'm a saint; it's my job to be holy. 
[dons a black robe and a magnetic disk halo] [laughter, applause] [richard holds a laptop like a holy book and waves] i am saint ignucius of the church of emacs. 
i bless your computer, my child. 
emacs started out as a text editor which became a way of life for many computer users and then a religion. 
does anyone know what the alt.religion.emacs newsgroup was used for? 
i know it existed, but since i'd never read net news, i don't know what was said in it. 
in any case, now we even have a great schism between two rival versions of emacs, and we also have saints; no gods, though. 
to be a member of the church of emacs, you must recite the confession of the faith: you must say, "there is no system but gnu, and linux is one of its kernels."
 the church of emacs has advantages compared with other churches i might name. 
to be a saint in the church of emacs does not require celibacy. 
so if you're looking for a church in which to be holy, you might consider ours. 
however, it does require making a commitment to live a life of moral purity. 
you must exorcise the evil proprietary operating systems that possess all the computers under either your practical control or your authority, and you must install a wholly [i.e., holy] free operating system, where "wholly" can be spelled in more than one way, and then only install free software on top of that. 
if you make this commitment and live by it, then you, too, will be a saint and you, too, may eventually have a halo—if you can find one, because they don't make them anymore. 
sometimes people ask me if, in the church of emacs, it is a sin to use vi. 
well, it's true that vi-vi-vi is the editor of the beast, [laughter] but using a free version of vi is not a sin, it's a penance. 
and sometimes people ask me if my halo is really an old computer disk. 
[points at halo] this is no computer disk, this is my halo. 
but it was a computer disk in a previous existence. 
so, thank you everyone. 
[applause] 22. 
about anonymity, credit cards, cell phones. 
so i can answer questions for a while. 
audience: yeah, do you know, or can you tell us why linus torvalds, who has very very different attitudes with yours, released linux under your [unintelligible]? 
what motivated him? 
richard: i don't know why linus torvalds switched to the gnu gpl for linux. 
you'd have to ask him that. 
i don't recall ever seeing the reason for that. 
i don't know. 
audience: can you say something about the current effort to put security in the network itself? 
richard: i don't know… he said, "efforts to plug security into the network."
 i don't know what that means. 
audience: [unintelligible] remove anonymity from the network itself. 
richard: remove anonymity? 
well, i don't know about those efforts, but i think it's horrible. 
i don't do e-commerce because i don't like to buy things with credit cards. 
i want to buy things anonymously and i do so by paying cash in a store. 
i don't like giving big brother any records about me. 
for the same reason, i do not have a cell phone. 
i don't want to carry a personal tracking device. 
we have to fight more to preserve our privacy from surveillance systems. 
so, although i'm not familiar with the specific efforts you're talking about, i find them dangerous, much more dangerous than computer insecurity. 
now, perhaps that's because i'm not a windows user; so i have less problem to deal with. 
23. 
free formats, copyright, microsoft. 
audience: [unintelligible] richard: no, we can't. 
basically he's asking if we can monopolize file formats. 
well, the answer is, we can't do so using our copyright-based licenses, because copyright does not cover any idea, principle, method of operation or system; it only covers the details of expression of a work of authorship. 
so we can't, using our licenses like the gnu gpl, prohibit anyone from writing his own code to handle the same format. 
we could conceivably get patents; however, it turns out patents are very, very different from copyright; they have almost nothing in common, and it turns out it costs a lot of money to get a patent and even more money to keep the patent going. 
and the other thing is, {microsoft doesn't need to get} you shouldn't assume that what microsoft is getting a patent on is important because it's a big improvement. 
it just has to be different. 
microsoft can get a patent on something about a file format that's different and then they can force most users to switch over to a new format that uses that idea. 
and microsoft can do this because of its market power, its control. 
we can't do that. 
the whole thing about the free software is, the developers don't have any power; the users are in control. 
we can't force users to switch over to anything, not even for their own safety. 
you know, we've been trying since around 1992 or so to convince users to stop using gif format, because that format is patented and some users will get sued. 
so we said, "everybody please stop using gif format for the sake of those who get sued if the public uses this format."
 and people haven't listened. 
so the thing is, we can't do what microsoft does, because that's based on using the power that they have, and since we have chosen to respect people's freedom, we don't have power over the public. 
24. 
dangers of webmail loss of freedom. 
audience: so, when somebody's using google, they don't have access to the source code that we use, so they have no way of [unintelligible] what we do, so using that violates their freedom. 
richard: when a person is accessing the google server, they don't have either the binaries or the source code of the program that google is using, because it's google that's using the program; that person is not using the program. 
so i wouldn't expect to have the authority to change the software that's running on your computer. 
you should have the freedom to change the software that's running on your computer, but i would never expect that i would have the freedom to go into your computer and change the software there. 
why should you let me do that? 
so that's the way i see it when a person is using google server to do a search. 
now, there is a possible danger there. 
the danger doesn't come from things like google. 
the danger comes from things like hotmail. 
when people start using a server on the net to store their data and to do the jobs that they really could be doing on their own computer, that introduces a danger. 
i've never understood the people who said that thin clients were the future, because i can't imagine why i would ever do things that way. 
i've got a pc and it's capable of doing things like running a mail reader; i'm going to have the mail on my own computer, i'm not going to leave it on anybody's server. 
especially not a server i have no reason to trust. 
and these days, of course, if you allow your personal data to be on somebody's server, you might as well be handing it straight to ashcroft and his gestapo. 
[rms, 2010: gmail is comparable to hotmail in this regard. 
see also gnu.org/philosophy/who-does-that-server-really-serve.html for another issue that applies to some, but not all, network services.] audience: unintelligible richard: he's asking, "if people were using a thin client and all the computation were done on a remote server."
 yes, it does mean that people lose freedom, because, clearly, you can't change the software that's set up on somebody else's server, so if you're using the software on somebody else's server, instead of running it on your own computer, you lose control. 
now, i don't think that's a good thing, and therefore i'm going to encourage people not to go along with it. 
people will keep on developing the software to do these jobs on your own machine. 
{leaving so soon? 
[laughter] i hope it wasn't something i said. 
and gee, now i won't get to meet her. 
anyway.} 25. 
copyright art vs. 
software. 
audience: are the creative commons a different denomination of the same religion or a different religion? 
richard: {creative commons} well, first of all, this isn't a religion, except as a joke. 
the church of emacs is a joke. 
please keep in mind, taking any church too seriously can be hazardous to your health, even the church of emacs. 
so this has nothing to do with religion. 
this is a matter of ethics. 
it's a matter of what makes for a good society and what kind of society we want to live in. 
these are not questions of dogma, these are questions of philosophy and politics. 
the creative commons licenses are designed for artistic works, and i think that they are good for artistic works. 
the issue for artistic works is not exactly the same as for software. 
software is an example of a practical, functional work. 
you use it do to a job. 
the main purpose of a program is not that people will read the code and think, "boy, how fascinating, what a great job they did."
 the main purpose of software is, you run it and it does something. 
and yes, those people who are interested in software will also read it and learn, but that's not the main purpose. 
it's interesting because of the job it will do, not just because of how nice it is to read. 
whereas with art, the main use of art is the sensation that you get when you look at it or listen to it. 
so these are very different ways of being used and, as a result, the ethical issues about copying and modification are different. 
for practical, functional works, people have to be free with the four freedoms, including free to publish a modified version. 
but for art i wouldn't say that. 
i think that there's a certain minimum freedom that we must always have for using any published work, and that is the freedom to non-commercially distribute verbatim, exact copies. 
but i wouldn't say that it has to go further than that necessarily. 
so i think the creative commons licenses are a very useful and good thing to use for art. 
26. 
malicious free software. 
audience: since everybody has the freedom to modify the code and republish it, how do you keep out saboteurs? 
richard: well, you don't. 
the point is, you can't ever. 
so you just look at these different versions and you see which one you actually like. 
you can't keep the saboteurs out of nonfree software either; in fact, the developer could be the saboteur. 
the developers often put in, as i said, malicious features. 
and then you're completely helpless. 
at least with free software, you can read the source code, you can compare the two versions. 
if you're thinking of switching from this version to that version, you can compare them and see what's different and look for some malicious code. 
27. 
patented file formats. 
audience: do you happen to know which popular file formats are secret and which ones are public? 
richard: well, of the popular file formats, the only ones that i know of that are secret are some microsoft ones. 
but, on the other hands, there are others that have patent problems. 
for instance, there's still a patent covering lzw compression, which is used in gif format. 
and someone has a patent he claims covers jpeg format and is actually suing a bunch of companies. 
and then there's a patent on mp3 audio, so that the free software mp3 encoders have been driven underground in the us [1]. 
that's why people should switch to ogg vorbis format. 
and then, if you look at, say, mpeg-2 video, there are 39 different us patents said to cover aspects of mpeg-2. 
so there are a lot of such problems. 
28. 
games as free software. 
audience: is there any software that sort of mixes between the creative commons and functional software, such as games or…? 
richard: well, {you can say that a game} in many cases you can look at a game as the combination of a program and a scenario. 
and then it would make sense to treat the program like a program and the scenario like a work of fiction. 
on the other hand, what you see is that it's quite useful for the users to edit and republish modified versions of these scenarios. 
so, although those are like fiction and art, not like software, it really seems to be useful for users to be free to change them. 
29. 
gpl freedoms for cars, saving seeds. 
audience: do you envision this free software philosophy to go across, off the boundary to products, commodities… richard: when you say, "products, commodities," could you be concrete? 
audience: [unintelligible] cars richard: so should the free software philosophy apply to cars? 
okay, well the free software philosophy is, you should be free to copy and modify them. 
so, if you have a car copier, i think you should be free to copy any car. 
but there are no car copiers, so that really is a meaningless question. 
and then, second, modifying. 
well, yeah, i think if you've got a car, you should be free to modify it and, in fact, lots of people do modify their cars. 
so, there may be some restrictions on that, but to a large extent that freedom exists. 
so what you see is that this isn't really a meaningful question when you're talking about physical objects. 
there are, in general, no copiers for physical objects. 
if we imagine, someday in the future, that such copiers exist, well that will be a different situation and yeah, that change would have consequences for ethics and politics. 
if we had food copiers, i'm sure that agribusiness would be trying to forbid people from having and using food copiers. 
and that would be a tremendous political issue, just as today there's a tremendous political issue about whether farmers ought to be allowed to save seeds. 
now, i believe that they have a fundamental right to save seeds and that it's tyranny to stop them. 
a democratic government would never do that. 
30. 
no software is better than nonfree software. 
audience: [roughly] do you see a problem with free software being under-produced because nobody wants to invest money [unintelligible]? 
richard: i don't know what you mean by "under-produced."
 we see that some people develop free software and some don't. 
so we could imagine more people developing free software and, if so, we'd have more of it. 
but, you see, the tragedy of the commons really is a matter of overuse. 
and that's something that can happen maybe with a field, but it doesn't happen with software; you can't overuse a program, you don't wear it out. 
so, really, there's no analogy there. 
audience: well, the example you gave is, let's say there's a useful program and a thousand people want a change to it. 
you said they could get their money together and go hire a programmer to make the change. 
but each individual in that group can say, "well, i'll just let the 999 pay for the change."
 richard: well, they can do that, but that would be pretty stupid, because if they saw that the result was, it wasn't getting done, then if it's of some importance to them, then they're much better off joining and contributing their money so that the change gets made. 
and whether they do this or not, either way i won't agree that anything tragic has happened. 
if they join and they pay for their change and they get it, that's good, and if they don't join and they don't pay for that change, that's good too; i guess they didn't want it enough. 
either one's okay. 
nonfree software is evil and we're better off with nothing than with nonfree software. 
the tragedy of the commons can happen either through overuse or under-contribution, but overuse is impossible in software. 
under-contribution happens when a program is proprietary. 
then it's a failure to contribute to the commons. 
and so i would like that proprietary software to stop being developed. 
a nonfree program is worse than no program, because neither one allows you to get a job done in freedom, but the nonfree program might tempt people to give up their freedom and that's really bad. 
31. 
portability of free software. 
audience: is their a potential conflict between the free software philosophy and the portability of [unintelligible]? 
richard: no, {i don't see} this makes no sense to me at all. 
i see no conflict between the philosophy of free software and portability. 
and in the free software world we've worked very hard to achieve portability from all sides. 
we make our software very portable and we make our software standardized so that other people can easily have portability, so we are aiding portability from every possible direction. 
meanwhile, you see microsoft deliberately introducing incompatibilities and deliberately blocking interoperability. 
microsoft can do that because it has power. 
we can't do that. 
if we make a program incompatible and the users don't like it, they can change it. 
they can change it to be compatible. 
so we are not in a position where we could impose incompatibility on anybody, because we have chosen not to try to have power over other people. 
32. 
is some free software obfuscated on purpose?. 
audience: something [unintelligible] obfuscated [unintelligible] understand it. 
richard: well, i disagree with you. 
please, this is silly. 
if you're saying a program is hard to understand, that's not the same as the people are restricting it. 
it's not the same as saying, "you're forbidden to see it."
 now, if you find it unclear, you can work on making it clearer. 
the fact is, the developers probably are trying to keep it clear, but it's a hard job and, unless you want to compare our software with proprietary software and see which one is clearer, you have no basis to make the claim that you're making. 
from what i hear, nonfree software is typically much worse and the reason is that the developers figure no one will ever see it, so they'll never be embarrassed by how bad it is. 
33. 
proprietary keeping an edge. 
audience: you hear the argument a lot from people who manufacture devices or [unintelligible] hardware that they need to have proprietary software in order to give them an edge, because, if they gave away the software for free, then a competitor could manufacture the device [unintelligible]. 
richard: i don't believe this. 
i think it's all bullshit, because there they are competing with each other and each one's saying, "we need to make the software proprietary to have an edge over the others."
 well, if none of them did it, they might all lose their edge? 
i mean, so what? 
we shouldn't buy this. 
and i mean, we shouldn't buy what they're saying and we shouldn't buy their products either. 
34. 
forbidding is forbidden how is this freedom?. 
audience: i might be saying [unintelligible] richard: please don't. 
the issue that you want to raise may be a good issue, but please try to raise it in a neutral way, rather than raising it with an attack. 
audience: there's something in my mind, so i'll just speak up. 
the thing is, by actually registering [unintelligible] thing and saying that "you can redistribute this software but you have to comply with these four freedoms," is that not restricting my freedom too? 
richard: no, it's restricting you from having power. 
to stop a from subjugating b is not a denial of freedom to a, because to subjugate others is not freedom. 
that's power. 
now, there may be people who would like to exercise power and we're stopping them, but that's good and that's not denying anyone freedom. 
i mean, you could just as well say if you're overthrowing a dictator, the dictator's saying, "you're taking away my freedom to dictate to everyone!"
 but that's not freedom, that's power. 
so i'm making the distinction between freedom, which is having control over your own life, and power, which is having control over other people's lives. 
we've got to make this distinction; if we ignore the difference between freedom and power, then we lose the ability to judge whether a society is free or not. 
you know, if you lose this distinction, then you look at stalinist russia and you say, "well, there was just as much freedom there, it's just that stalin had it all."
 no! 
in stalinist russia, stalin had power and people did not have freedom; the freedom wasn't there, because it's only freedom when it's a matter of controlling your own life. 
controlling other people's lives is not freedom at all, not for either of the people involved. 
35. 
can google help free software. 
audience: in your opinion, is there anything that google as a company could do better in the spirit of free software? 
richard: i actually don't know enough about what google is doing to have any opinion. 
but if google would like to donate some money to the free software foundation, we would gladly accept it. 
{i gather that, i mean} i met some people here who are working on a particular free program, namely linux, the kernel. 
and i didn't ask actually if they publish their improvements. 
[audience: they do] oh good, so that's contributing. 
i mean, if you want to contribute to other pieces of free software, that would be nice too, but i don't know if you have a need to do that. 
and, of course, if you ever have a chance to release some other generally useful new piece of free software, that would be good too. 
[rms, 2010: google now distributes some large nonfree programs. 
some are written in javascript, and servers install them without your noticing.] 36. 
free software on windows, good or bad. 
i'll take three more questions. 
audience: so, if i develop free software for a proprietary system such as windows, essentially i'm supporting the proprietary system. 
am i doing a good or a bad thing here? 
richard: well, there's a good aspect and a bad aspect. 
in regard to the use of your code, you're respecting other people's freedom, so that's good, but the fact that it only runs on windows is bad. 
so, really, you shouldn't develop it on windows. 
you shouldn't use windows. 
using windows is bad. 
{that is, in itself} it's not as bad as being the developer of windows, but it's still bad and you shouldn't do that. 
audience: so you're saying, just don't do it at all. 
richard: yeah, don't use windows. 
use gnu/linux and develop your free program for gnu/linux instead. 
and then it will be good in both ways. 
audience: but couldn't it open windows users to this ideology? 
richard: it could, but there's enough free software available for use on windows to have that effect. 
and the thing is, developing software for windows is going to create a practical incentive for people to use windows, rather than use gnu/linux. 
so, please don't. 
[rms, 2010: to put it more clearly, making free programs run also on windows can be useful as he said; however, writing a free program only for windows is a waste.] 37. 
sco's suit. 
audience: what would be the impact of sco winning their argument against linux? 
so what would be the impact on… richard: i don't know, it depends. 
it would have no effect on the gpl. 
but {it might have some effect} some code might have to be removed from linux. 
and whether that would be a big problem or a tiny problem depends on what code, so there's no way of saying. 
but i don't think sco is a real problem. 
i think software patents and treacherous computing and hardware with secret specs, those are the real problems. 
that's what we've got to be fighting against. 
38. 
stallman's problem typing. 
audience: i have a non-ideology question. 
i'm personally very interested in your battle with repetitive stress injuries and the impact that it had on the development of gnu hurd. 
richard: none, because i was never working on the gnu hurd. 
{i've never} we hired a person to write the gnu hurd. 
i had nothing to do with writing it. 
and there were a few years when i couldn't type much and then we hired people to type for me. 
and then i found, by using keyboards with a light touch, i could type again. 
39. 
open source, good or bad pat-riot act.. 
audience: can you give us your opinion of open source? 
richard: well, the open source movement is sort of like the free software movement, except with the philosophical foundation discarded. 
so they don't talk about right and wrong, or freedom, or inalienable rights, they just don't present it in ethical terms. 
they say that they have a development methodology that they say typically results in technically superior software. 
so they only appeal to practical, technical values. 
and what they're saying may be right and if this convinces some people to write free software, that's a useful contribution. 
but i think they're missing the point when they don't talk about freedom, because that's what makes our community weak, that we don't talk about and think about freedom enough. 
people who don't think about freedom won't value their freedom and they won't defend their freedom and they'll lose it. 
look at the usa pat-riot act. 
you know, people who don't value their freedom will lose it. 
40. 
the end. 
so thank you, and if anyone wants to buy any of these fsf things or… [applause] footnote. 
all the patents on mp3 will have expired by 2018. 
 measures governments can use to promote free software. 
and why it is their duty to do so. 
stallman this article suggests policies for a strong and firm effort to promote free software within the state, and to lead the rest of the country towards software freedom. 
the mission of the state is to organize society for the freedom and well-being of the people. 
one aspect of this mission, in the computing field, is to encourage users to adopt free software: software that respects the users' freedom. 
a proprietary (nonfree) program tramples the freedom of those that use it; it is a social problem that the state should work to eradicate. 
the state needs to insist on free software in its own computing for the sake of its computational sovereignty (the state's control over its own computing). 
all users deserve control over their computing, but the state has a responsibility to the people to maintain control over the computing it does on their behalf. 
most government activities now depend on computing, and its control over those activities depends on its control over that computing. 
losing this control in an agency whose mission is critical undermines national security. 
moving state agencies to free software can also provide secondary benefits, such as saving money and encouraging local software support businesses. 
in this text, "state entities" refers to all levels of government, and means public agencies including schools, public-private partnerships, largely state-funded activities such as charter schools, and "private" corporations controlled by the state or established with special privileges or functions by the state. 
education. 
the most important policy concerns education, since that shapes the future of the country: teach only free software educational activities, or at least those of state entities, must teach only free software (thus, they should never lead students to use a nonfree program), and should teach the civic reasons for insisting on free software. 
to teach a nonfree program is to teach dependence, which is contrary to the mission of the school. 
the state and the public. 
also crucial are state policies that influence what software individuals and organizations use: never require nonfree programs laws and public sector practices must be changed so that they never require or pressure individuals or organizations to use a nonfree program. 
they should also discourage communication and publication practices that imply such consequences (including digital restrictions management). 
distribute only free software whenever a state entity distributes software to the public, including programs included in or specified by its web pages, it must be distributed as free software, and must be capable of running on a platform containing exclusively free software. 
state web sites state entity web sites and network services must be designed so that users can use them, without disadvantage, by means of free software exclusively. 
free formats and protocols state entities must use only file formats and communication protocols that are well supported by free software, preferably with published specifications. 
(we do not state this in terms of "standards" because it should apply to nonstandardized interfaces as well as standardized ones.) for example, they must not distribute audio or video recordings in formats that require flash or nonfree codecs, and public libraries must not distribute works with digital restrictions management. 
to support the policy of distributing publications and works in freedom-respecting formats, the state must insist that all reports developed for it be delivered in freedom-respecting formats. 
untie computers from licenses sale of computers must not require purchase of a proprietary software license. 
the seller should be required by law to offer the purchaser the option of buying the computer without the proprietary software and without paying the license fee. 
the imposed payment is a secondary wrong, and should not distract us from the essential injustice of proprietary software, the loss of freedom which results from using it. 
nonetheless, the abuse of forcing users to pay for it gives certain proprietary software developers an additional unfair advantage, detrimental to users' freedom. 
it is proper for the state to prevent this abuse. 
computational sovereignty. 
several policies affect the computational sovereignty of the state. 
state entities must maintain control over their computing, not cede control to private hands. 
these points apply to all computers, including smartphones. 
migrate to free software state entities must migrate to free software, and must not install, or continue using, any nonfree software except under a temporary exception. 
only one agency should have the authority to grant these temporary exceptions, and only when shown compelling reasons. 
this agency's goal should be to reduce the number of exceptions to zero. 
develop free it solutions when a state entity pays for development of a computing solution, the contract must require it be delivered as free software, and that it be designed such that one can both run it and develop it on a 100%-free environment. 
all contracts must require this, so that if the developer does not comply with these requirements, the work cannot be paid for. 
choose computers for free software when a state entity buys or leases computers, it must choose among the models that come closest, in their class, to being capable of running without any proprietary software. 
the state should maintain, for each class of computers, a list of the models authorized based on this criterion. 
models available to both the public and the state should be preferred to models available only to the state. 
negotiate with manufacturers the state should negotiate actively with manufacturers to bring about the availability in the market (to the state and the public) of suitable hardware products, in all pertinent product areas, that require no proprietary software. 
unite with other states the state should invite other states to negotiate collectively with manufacturers about suitable hardware products. 
together they will have more clout. 
computational sovereignty ii. 
the computational sovereignty (and security) of the state includes control over the computers that do the state's work. 
this requires avoiding service as a software substitute, unless the service is run by a state agency under the same branch of government, as well as other practices that diminish the state control over its computing. 
therefore, state must control its computers every computer that the state uses must belong to or be leased by the same branch of government that uses it, and that branch must not cede to outsiders the right to decide who has physical access to the computer, who can do maintenance (hardware or software) on it, or what software should be installed in it. 
if the computer is not portable, then while in use it must be in a physical space of which the state is the occupant (either as owner or as tenant). 
influence development. 
state policy affects free and nonfree software development: encourage free the state should encourage developers to create or enhance free software and make it available to the public, e.g. 
by tax breaks and other financial incentive. 
contrariwise, no such incentives should be granted for development, distribution or use of nonfree software. 
don't encourage nonfree in particular, proprietary software developers should not be able to "donate" copies to schools and claim a tax write-off for the nominal value of the software. 
proprietary software is not legitimate in a school. 
e-waste. 
freedom should not imply e-waste: replaceable software many modern computers are designed to make it impossible to replace their preloaded software with free software. 
thus, the only way to free them is to junk them. 
this practice is harmful to society. 
therefore, it should be illegal, or at least substantially discouraged through heavy taxation, to sell, import or distribute in quantity a new computer (that is, not second-hand) or computer-based product for which secrecy about hardware interfaces or intentional restrictions prevent users from developing, installing and using replacements for any and all of the installed software that the manufacturer could upgrade. 
this would apply, in particular, to any device on which "jailbreaking" is needed to install a different operating system, or in which the interfaces for some peripherals are secret. 
technological neutrality. 
with the measures in this article, the state can recover control over its computing, and lead the country's citizens, businesses and organizations towards control over their computing. 
however, some object on the grounds that this would violate the "principle" of technological neutrality. 
the idea of technological neutrality is that the state should not impose arbitrary preferences on technical choices. 
whether that is a valid principle is disputable, but it is limited in any case to issues that are merely technical. 
the measures advocated here address issues of ethical, social and political importance, so they are outside the scope of technological neutrality. 
only those who wish to subjugate a country would suggest that its government be "neutral" about its sovereignty or its citizens' freedom. 
the gnu gpl and the american dream. 
when i was in grade school, right here in the united states of america, i was taught that our country was the "land of opportunity."
 my teachers told me that my country was special, because anyone with a good idea and a drive to do good work could make a living, and be successful too. 
they called it the "american dream."
 what was the cornerstone to the "american dream"? 
it was equality—everyone had the same chance in our society to choose their own way. 
i could have any career i wanted, and if i worked hard, i would be successful. 
it turned out that i had some talent for working with computers—in particular, computer software. 
indoctrinated with the "american dream," i learned as much as i could about computer software. 
i wanted my chance at success. 
i quickly discovered though, that in many cases, not all the players in the field of computer software were equal. 
by the time i entered the field, large companies like microsoft tended to control much of the technology. 
and, that technology was available to me under licensing agreements that forbid me to study and learn from it. 
i was completely prohibited from viewing the program source code of the software. 
i found out, too, that those with lots of money could negotiate different licenses. 
if they paid enough, they could get permission to study and learn from the source code. 
typically, such licenses cost many thousands of dollars, and being young and relatively poor, i was out of luck. 
after spending my early years in the software business a bit downtrodden by my inability to learn more, i eventually discovered another body of software that did allow me to study and learn. 
this software was released under a license called the gnu general public license (gnu gpl). 
instead of restricting my freedom to study and learn from it, this license was specifically designed to allow me to learn. 
the license ensured that no matter what happened to the public versions of the software, i'd always be able to study its source code. 
i quickly built my career around this software. 
i got lots of work configuring, installing, administering, and teaching about that software. 
thanks to the gnu gpl, i always knew that i could stay competitive in my business, because i would always be able to learn easily about new innovations as soon as they were made. 
this gave me a unique ability to innovate myself. 
i could innovate quickly, and impress my employers. 
i was even able to start my own consulting business. 
my own business! 
the pinnacle of the american dream! 
thus, i was quite surprised last week when a vice president at microsoft hinted that the gnu gpl contradicted the american way. 
the gnu gpl is specifically designed to make sure that all technological innovators, programmers, and software users are given equal footing. 
each high school student, independent contractor, small business, and large corporation are given an equal chance to innovate. 
we all start the race from the same point. 
those people with deep understanding of the software and an ability to make it work well for others are most likely to succeed, and they do succeed. 
that is exactly what the american way is about, at least the way i learned it in grade school. 
i hope that we won't let microsoft and others change the definition. 
the gnu gpl and the american way. 
microsoft describes the gnu general public license (gnu gpl) as an "open source" license, and says it is against the american way. 
to understand the gnu gpl, and recognize how it embodies the american way, you must first be aware that the gpl was not designed for open source. 
the open source movement, which was launched in 1998, aims to develop powerful, reliable software and improved technology, by inviting the public to collaborate in software development. 
many developers in that movement use the gnu gpl, and they are welcome to use it. 
but the ideas and logic of the gpl cannot be found in the open source movement. 
they stem from the deeper goals and values of the free software movement. 
the free software movement was founded in 1984, but its inspiration comes from the ideals of 1776: freedom, community, and voluntary cooperation. 
this is what leads to free enterprise, to free speech, and to free software. 
as in "free enterprise" and "free speech," the "free" in "free software" refers to freedom, not price; specifically, it means that you have the freedom to study, change, and redistribute the software you use. 
these freedoms permit citizens to help themselves and help each other, and thus participate in a community. 
this contrasts with the more common proprietary software, which keeps users helpless and divided: the inner workings are secret, and you are prohibited from sharing the program with your neighbor. 
powerful, reliable software and improved technology are useful byproducts of freedom, but the freedom to have a community is important in its own right. 
we could not establish a community of freedom in the land of proprietary software where each program had its lord. 
we had to build a new land in cyberspace—the free software gnu operating system, which we started writing in 1984. 
in 1991, when gnu was almost finished, the kernel linux written by linus torvalds filled the last gap; soon the free gnu/linux system was available. 
today millions of users use gnu/linux and enjoy the benefits of freedom and community. 
i designed the gnu gpl to uphold and defend the freedoms that define free software—to use the words of 1776, it establishes them as inalienable rights for programs released under the gpl. 
it ensures that you have the freedom to study, change, and redistribute the program, by saying that nobody is authorized to take these freedoms away from you by redistributing the program under a restrictive license. 
for the sake of cooperation, we encourage others to modify and extend the programs that we publish. 
for the sake of freedom, we set the condition that these modified versions of our programs must respect your freedom just like the original version. 
we encourage two-way cooperation by rejecting parasites: whoever wishes to copy parts of our software into his program must let us use parts of that program in our programs. 
nobody is forced to join our club, but those who wish to participate must offer us the same cooperation they receive from us. 
that makes the system fair. 
millions of users, tens of thousands of developers, and companies as large as ibm, intel, and sun, have chosen to participate on this basis. 
but some companies want the advantages without the responsibilities. 
from time to time, companies have said to us, "we would make an improved version of this program if you allow us to release it without freedom."
 we say, "no thanks—your improvements might be useful if they were free, but if we can't use them in freedom, they are no good at all."
 then they appeal to our egos, saying that our code will have "more users" inside their proprietary programs. 
we respond that we value our community's freedom more than an irrelevant form of popularity. 
microsoft surely would like to have the benefit of our code without the responsibilities. 
but it has another, more specific purpose in attacking the gnu gpl. 
microsoft is known generally for imitation rather than innovation. 
when microsoft does something new, its purpose is strategic—not to improve computing for its users, but to close off alternatives for them. 
microsoft uses an anticompetitive strategy called "embrace and extend."
 this means they start with the technology others are using, add a minor wrinkle which is secret so that nobody else can imitate it, then use that secret wrinkle so that only microsoft software can communicate with other microsoft software. 
in some cases, this makes it hard for you to use a non-microsoft program when others you work with use a microsoft program. 
in other cases, this makes it hard for you to use a non-microsoft program for job a if you use a microsoft program for job b. either way, "embrace and extend" magnifies the effect of microsoft's market power. 
no license can stop microsoft from practicing "embrace and extend" if they are determined to do so at all costs. 
if they write their own program from scratch, and use none of our code, the license on our code does not affect them. 
but a total rewrite is costly and hard, and even microsoft can't do it all the time. 
hence their campaign to persuade us to abandon the license that protects our community, the license that won't let them say, "what's yours is mine, and what's mine is mine."
 they want us to let them take whatever they want, without ever giving anything back. 
they want us to abandon our defenses. 
but defenselessness is not the american way. 
in the land of the brave and the free, we defend our freedom with the gnu gpl. 
addendum:. 
microsoft says that the gpl is against "intellectual property rights."
 i have no opinion on "intellectual property rights," because the term is too broad to have a sensible opinion about. 
it is a catch-all, covering copyrights, patents, trademarks, and other disparate areas of law; areas so different, in the laws and in their effects, that any statement about all of them at once is surely simplistic. 
to think intelligently about copyrights, patents or trademarks, you must think about them separately. 
the first step is declining to lump them together as "intellectual property."
 my views about copyright take an hour to expound, but one general principle applies: it cannot justify denying the public important freedoms. 
as abraham lincoln put it, "whenever there is a conflict between human rights and property rights, human rights must prevail."
 property rights are meant to advance human well-being, not as an excuse to disregard it. 
history and philosophy of the gnu project. 
<greve@gnu.org> translation of a speech that was given in german at the clown (cluster of working nodes— a 512-node cluster project of debian gnu/linux machines) in the university of paderborn, germany, on december 5th, 1998. 
the german original is also available. 
reading the original is recommended. 
author's note: in translating this speech, i have tried to stay as close as possible to the original speech that i have given in german. 
breaking up the german structures and turning them into reasonable english has been quite some work, and i would like to thank my roommate doug chapin, a good friend and native american, who helped me with some phrases and words. 
the translation will never hold the same emotions and implications, but i think we got very close… during the preparation of this speech, i have read several documents and spoken to a lot of people. 
in doing so, i realized that even people whose jobs have been created more or less directly by the gnu project did not know its true meaning. 
in the overall rush we are experiencing at the moment, it seems that a basic awareness of the roots has been lost. 
tonight i hope i'll be able to uncover some of those roots again. 
the origin lies somewhere in the transition from the 70's to the 80's, when the software industry became what we accept so willingly today. 
in the initial competition, some firms took to hoarding code as a survival strategy. 
while attempting to support this behavior's legality, they created phrases like "software piracy" because they suggest that something is lost when software is copied. 
people were forced to yield to licenses that bound them, to make sure that no one else had access to these programs. 
when a friend asked you whether he could copy a program from you, you immediately faced a dilemma. 
there are no disadvantages for you in copying the program, and it doesn't deteriorate during the copying process. 
it would be more restrictive if he asked you to pass the salt, since you can't both use it at the same time. 
the politics of the companies forced you to choose between legality and friendship. 
a lot of people were upset about this, and most of them copied the program anyway—very often using lame excuses that were mostly aimed at calming their own troubled consciousness (induced by the firms' choice of words). 
the absolute hit was probably "if i would use it more often i would pay it," a phrase that probably everyone caught himself using if he ever had to rely on proprietary software. 
one man found this situation unbearable. 
used to the early days, the (as he says himself) "paradise," where freedom and responsible use of the possibilities determined the situation, richard stallman envisioned the concept of a completely free system. 
very quickly it became clear that this system would be unix-compatible and it was baptized—recursive acronyms were very popular back then—gnu, which means "gnu's not unix."
 stallman gathered some people who shared his fascination with a free system, and founded the gnu free software foundation, of which he is still the president today. 
since first of all a unix system requires a large set of components, it became clear that these were the first step towards a completely free system. 
the gnu fsf worked on implementing them, and by the beginning of the 90's the gnu system was complete (with the exception of the kernel). 
the gnu kernel—project name "hurd"—has an extremely ambitious layout that proved to be very slow and clumsy in development. 
fortunately, at this point linus torvalds' first linux kernel was in the test phase, and when he saw the work already done by the gnu fsf, he put his kernel under the gnu gpl and made it the kernel of the gnu system. 
there is no need to tell the rest of the story since most of us have experienced it themselves. 
a little earlier i said that richard stallman envisioned the concept of free software. 
what i didn't tell you about was the philosophy that stands behind it. 
the word "free" in "free software" does not refer to price, but to freedom. 
this is no unproblematic topic, and recently some of the visionaries of the movement (like eric raymond) have begun to talk about "open source" because "freedom" has an uneasy sound to it for most people. 
freedom rings of "making world a better place," and insecurity. 
it rings of change, and change frightens many people. 
to numb this fear, other licenses for free software have been invented in order to make the concept digestible for more people and to avoid scaring the industry. 
that is the reason why the gnu project dislikes the term "open source."
 we think it makes more sense to take away people's fears of the idea instead of blurring the concept. 
only if users and firms are aware of the importance of freedom can we avoid falling back into old patterns. 
the philosophy of the gnu project says that everyone shall have the granted right to use a program, to copy it, and to change it to make it fit his or her needs. 
the only restriction the gnu general public license makes, is that no one has the right to take away this freedom from anyone else. 
when an author puts his code under the gnu gpl, the freedom is an inseparable part of his program. 
of course, this is a thorn in the side of a lot of business'es eyes because it stops them from taking the code, modifying it, and then selling it as a proprietary program. 
as long as there are people who try to live the dream of instant wealth, it is this freedom that stops firms like microsoft from corrupting the future development of our system. 
the most used argument against the gnu philosophy is probably that software is the "intellectual property" of the programmer, and it is only right if he can decide the price for which the program is distributed. 
this argument is easy to understand for everyone, since it is exactly what we have been told to believe during the last 20 years. 
reality is a little different, though. 
private programmers who can live off selling self-written software are the exception. 
usually they give their rights to the firm they work at, and this firm earns the money by restricting access to that program. 
effectively, the firm has the rights for that program and decides it's price, not the programmer. 
a lawyer who invents an especially brilliant strategy has no right to claim it as his "intellectual property."
 the method is freely available to anyone. 
why do we so willingly accept the concept that every line of code—no matter how poorly written or uninspired it may be—is so unique and incredibly personal? 
the zeal for control has taken over in a way that even human genes are subject to patents… although usually not by the people who "use" them. 
should really everything be allowed to be patented and licensed? 
this is the question that is one of the core thoughts of the gnu project. 
let us just imagine there would be no such concept as patented software, or patenting software would be unusual because everyone published his programs under the gnu gpl. 
solutions for standard problems that had to be solved over and over again can be accessed easily. 
no one has to waste his time ever again to work on the same problem dozens of times—programmers could search for new ways and approach new problems. 
if a group of users needs a certain feature in a program, they just hire a programmer and let him implement it. 
freed of the limitations of licenses and money, only two criteria would determine the development of programs: demand and quality. 
speaking of quality—nowadays more and more firms realize that allowing the users to access the source code gives them a huge advantage. 
to say it in a simple way: more eyes can see more. 
solutions that are unimaginable for one person are painfully obvious for someone else. 
due to this advantage, free software is very often so much better than its proprietary counterpart. 
the train of thought that now appears to be establishing itself within some firms is to give users access to the source code but not grant any other rights. 
improvements are obediently being sent back to the firm, which advances its product with them. 
basically a gigantic gratis development division. 
if we do not pay attention to these things now, it might happen that in 5 years we will have to pay for a version that has been produced by applying our own patch. 
the concept of software as "intellectual property" carries the seed of doom inside itself (please forgive me for the pathos here). 
as long as we accept this concept, we accept the danger that another firm will attempt to take control. 
microsoft is not evil incarnated, as some people seem to perceive. 
microsoft is the natural consequence of the widely accepted system. 
the fear of sawing the branch you're sitting on is also commonly spread, but completely irrational. 
better programs lead to more users that have other needs and new ideas, creating more demand. 
the structure will change to fit the new situation but work will increase rather than decrease, and it will become less routine, hence more interesting. 
the last common fear that remains is the fear over lack of recognition. 
well, the respect held for the frontmen of the different philosophies speaks for itself. 
i on my part would prefer to be as respected as linus torvalds or richard stallman than to have the reputation of bill gates. 
admittedly, this does sound like bettering the world and idealism, but a lot of the really great ideas were driven by the wish to make the world a little better. 
and to settle one point very clearly: no, the gnu project is not against capitalism or firms in general, and it is not against software firms in particular. 
we do not want to diminish the potential for profit, quite the contrary. 
every firm is being told to make as much money as they can off the sale of software, documentation and service—as long as they stick to the basic principles of free software. 
the more these firms earn, the more they can invest into the development of new software. 
we do not want to destroy the market, we just want to fit it to the times. 
one short note about the basic principles: of course free software also requires free documentation. 
it doesn't make any sense to free the successor of the book—software—while accepting control of the direct digital equivalent. 
free documentation is as important as free software itself. 
maybe someone discarded my statement about seeking to "fit the market to the times" as a rhetorical statement, but it is an important point in the gnu philosophy: the time when software was only relevant for a few freaks and some firms is long gone. 
nowadays, software is the pathway to information. 
a system that blocks the pathways to information, and in doing so the access to information itself, must be reconsidered. 
when eric raymond published the so called "halloween document," it triggered emotions from euphoria to paranoia. 
for those of you who did not read it: it is a microsoft internal study in which the strengths and weaknesses of free software in general, and linux in particular, are analyzed. 
the author basically concluded that microsoft has two possibilities to counter the threat. 
the first is the creation of new or modification of old protocols, documenting them only poorly or not at all, so that only windows-based machines will have a working implementation. 
one example of this tactic is the protocol used by hp "cxi" printers, which have entered the market as extremely cheap "windows-printers."
 the specifications have only been given to microsoft, so these printers are not usable by any other system. 
i have been told by a "professionally trained" computer salesperson that the "for windows" sticker means the printer needs a very special kind of ram, which only windows machines have; this is why it cannot be used under linux. 
something like this confuses the typical user, which brings me directly to the second described tactic. 
these tactics are usually gathered under the acronym "fud" (fear uncertainty doubt), and were used by ibm long before microsoft uncovered them. 
the idea is clear: if you make someone uncertain enough, he or she will not dare make any decision, effectively remaining in his or her current position. 
that is the thought. 
for all times, education has been the arch-enemy of superstition. 
we must not allow education to be hindered by allowing ourselves to become split. 
the most recognizable split in the recent history has been the already noted distinction between "open source" and "free software."
 telling both concepts apart is not an easy task, even for most insiders, and it is only understandable if viewed in a historical context. 
since this is a central point, i'd like to say a few words about it. 
with the completion of the gnu system with the linux kernel, there was suddenly a complete, powerful, free system available. 
this inevitably had to raise the public's attention sooner or later. 
when this attention came, a lot of firms were disconcerted by the word "free."
 the first association was "no money," which immediately meant "no profit" for them. 
when people then tried to tell them that "free" truly stands for "freedom," they were completely shaken. 
infected by this insecurity and doubt, the idea arose to avoid words like "free" and "freedom" at all costs. 
the term "open source" was born. 
admittedly it is easier to sell the idea if you use the term "open source" instead of "free software."
 but the consequence is that the "newbies" have no knowledge or understanding of the original idea. 
this splits the movement, and leads to incredibly unproductive trench wars, which waste a huge amount of creative energy. 
a larger interested audience does not mean we should talk less about the underlying philosophy. 
quite the contrary: the more people and firms do not understand that this freedom is also in their interest, the more we need to talk about it. 
the freedom of software offers a huge potential for all of us—firms and users. 
the plan is not to remove capitalism or destroy firms. 
we want to change the understanding of software for the benefit of all participants, to fit the needs of the 21th century. 
this is the core of the gnu project. 
each of us can do his share—be it in form of a program or documentation, or just by spreading the word that there is another way of handling things. 
it is crucial to explain to the firms that free software is not a threat, but an opportunity. 
of course this doesn't happen overnight, but when all participants realize the possibilities and perspectives, all of us will win. 
so, if you are working in the software business, make yourself at home with the topic, talk about it with friends and colleagues. 
and please refrain from trying to "missionize" them—i know most of us have this tendency—the arguments speak for themselves. 
give them the time and peace to think it over, and to befriend themselves with the concept. 
show them that the concept of freedom is nothing to be feared. 
i hope i was able to convey the philosophy or at least stimulate consideration of some new ideas. 
if you have questions or would like to discuss some things, i'll be here all night and all questions are welcome. 
i wish everyone a very interesting night. 
thank you. 
opposing the european software patent directive. 
stallman and nick hill the european union software patent directive, which this 2003 article opposed, was ultimately dropped by its own supporters after facing lots of opposition. 
however, they later found another way to impose software patents on most of europe: through fine print in the unitary patent. 
the computer industry is threatened by a wild west-style land grab. 
the biggest, richest companies are being assisted by governments to take unassailable exclusive control of the ideas that programmers combine to make a program. 
our society is becoming more dependent on information technology. 
at the same time, centralised control over and ownership of the information technology field is increasing, and mega-corporations with law-given dominion over our computers could take away our freedoms and democracy. 
with an effective monopoly on modern software, the largest grabbers of the "land" will have control over what we can ask our computers to do, and control over production and distribution of information on the net, through monopolies that the eu plans to give them. 
the monopolies are patents, each one restricting use of one or several of these software ideas. 
we call them "software patents" because they restrict what we programmers can make software do. 
how do these monopolies work? 
if you wish to use your computer as a word processor, it must follow instructions that tell it how to act like a word processor. 
this is analogous to instructions found on a musical score, which tell an orchestra how to play a symphony. 
the instructions are not simple. 
they are made up of thousands of smaller instructions, much like sequences of notes and chords. 
a symphonic score embodies hundreds of musical ideas, and a computer program uses hundreds or thousands of software ideas. 
since each idea is abstract, there are often different ways to describe it: thus, some ideas can be patented in multiple ways. 
the us, which has had software patents since the 1980s, shows what this can do to development of everyday software. 
for example, in the us there are 39 monopoly claims over a standard way of showing video using software techniques (the mpeg 2 format). 
since a single piece of software can embody thousands of ideas together, and those ideas are arbitrary in scope and abstract in nature, writing software will only be worthwhile for those who are rich and have a large software monopoly portfolio: those with the war chest and clout to fight off claims that might otherwise sink a business. 
in the us, the average cost of defending against an invalid patent claim is $1.5 million. 
the courts favour the wealthy, so even when a small business gets a few patents, it will find them useless. 
software patents are being claimed at a tremendous rate in the us. 
if they become legal in europe, most of those us patents will be extended to europe also. 
this is likely to have a devastating effect on european software development—leading to job losses, a poorer economy, more expensive computer use, and less choice and less freedom for the end user. 
the advocates of software patents in europe, and the probable beneficiaries of them, are the patent bureaucracy (more influence on more areas of life), patent lawyers (more business from both plaintiffs and defendants), and computer mega-corporations such as ibm and microsoft. 
foremost among the software mega-corporations is microsoft. 
even as part of the european commission investigates microsoft for monopolistic practices, another part is planning to hand it an unending series of overlapping 20-year monopolies. 
bill gates wrote in his challenges and strategy memo of may 16 1991 that if people had understood how patents would be granted when most of today's ideas were invented and had taken out patents, the industry would be at a complete standstill today. 
the solution … is patenting as much as we can … a future start-up with no patents of its own will be forced to pay whatever price the giants choose to impose. 
today microsoft hopes to parlay software patents into a permanent monopoly on many areas of software. 
the european commission says its proposed directive on computer-implemented inventions will disallow software patents. 
but the text was actually written by the business software alliance, which represents the largest software companies. 
(the commission didn't admit this—we detected it.) it contains vague words that we suspect are designed to open the door for software patents. 
the text says that computer-related patents must make a "technical contribution"; the commission says that means "no software patents."
 but "technical" can be interpreted in many ways. 
the european patent office is already registering software patents of dubious legal validity, defying the treaty that governs it and the governments that established it. 
operating under those words, it will stretch them to allow all kinds of software patents. 
arlene mccarthy, mep for north-west england, has been a key figure promoting and acting as rapporteur for this proposed directive. 
the cosmetic changes she has so far proposed do nothing to solve the problem. 
however, the cultural affairs commission's amendment that defines "technical" will assure british and european software developers that they will not risk a lawsuit simply by writing and distributing a software package. 
the vague words drafted by the mega-corporations must be replaced with clear, decisive wording. 
wording that will ensure that our information future will not be hijacked by the interests of a few rich organisations. 
please go to softwarepatents.co.uk [archived page] to learn more, and then talk with the meps from your region. 
why hackathons should insist on free software. 
hackathons are an accepted method of giving community support to digital development projects. 
the community invites developers to join an event which offers an encouraging atmosphere, some useful resources, and the opportunity to work on useful projects. 
most hackathons choose the projects they will support, based on stated criteria. 
hackathons fit the spirit of a community in which people take an attitude of cooperation and respect towards each other. 
the software that accords with this spirit is free (libre) software, free as in freedom. 
free software carries a license that gives its users (including programmers) freedom to cooperate. 
thus, hackathons make sense within the free software community. 
hardware design projects also can and ought to be free. 
respect for freedom can't be taken for granted. 
on the contrary, we are surrounded by companies that shamelessly release proprietary (nonfree) software, available for use only to those that will yield to their power. 
these companies develop software as a means to dominate and control others. 
these companies' harmful success inspires young developers to follow their example by developing their own programs or hardware designs to dominate users. 
they sometimes bring their projects to hackathons, seeking the community's support while rejecting the community's spirit: they have no intention of returning cooperation for cooperation. 
hackathons which accept this undermine the community spirit that they are based on. 
some perverse hackathons are specifically dedicated to aiding the computing of certain companies: in some cases, european and canadian banks, and expedia. 
while they don't explicitly say, the announcements give the impression that they aim to promote development of some nonfree software, and that attendees are meant to help these non-charitable projects. 
those examples show how far down the slope hackathons can slide. 
let's return to the more common case of a hackathon that is not specifically commercial, but accepts projects that are proprietary. 
when a developer brings a project to a hackathon, and doesn't say whether it will be free, that is not overt opposition to the community spirit, but it undermines that spirit. 
hackathons should strengthen the community spirit they are based on, by insisting that hackathon projects commit to release in accord with that spirit. 
this means telling developers, "so that you deserve our support and help, you must agree to give the community the use of your project's results in freedom, if you ever consider them good enough to use or release."
 as an individual hackathon participant, you can support this principle: before joining in any hackathon project, ask "what license will you publish this under? 
i want to be sure this will be free (libre) before i join in developing it."
 if the developers of the project say that they will choose the license later, you could respond that you will choose later whether to participate. 
don't be shy—if others hear this discussion, they may decide to follow the same path. 
to see which licenses are free licenses, see the gnu license list. 
most "open source" licenses are free, but some open source licenses are nonfree because they are too restrictive. 
firmness by individuals has an effect, but a policy of the hackathon itself will have a bigger effect. 
hackathons should ask each participating project to pledge to follow this rule: if you ever release or use this code or design, you will release its source code under a free (libre) license. 
if you distribute the code in executable form, you will make that free (libre) also. 
many hackathons are sponsored or hosted by schools, which is an additional reason they should adopt this rule. 
free software is a contribution to public knowledge, while nonfree software withholds knowledge from the public. 
thus, free software supports the spirit of education, while proprietary software opposes it. 
schools should insist that all their software development be free software, including that of hackathons they support. 
harm from the hague. 
stallman june 2001 europeans have energetically opposed and thwarted the attempt to introduce software patents in europe. 
a proposed treaty, now being negotiated, threatens to subject software developers in europe and other countries to u.s. 
software patents—and other harmful laws from around the world. 
the problem is not just for programmers; authors of all kinds will face new dangers. 
even the censorship laws of various countries could have globalized effect. 
the hague treaty is not actually about patents, or about copyrights, or about censorship, but it affects all of them. 
it is a treaty about jurisdiction, and how one country should treat the court decisions of another country. 
the basic idea is reasonable enough: if someone hits your car in france or breaks a contract with your french company, you can sue him in france, then bring the judgment to a court in whichever country he lives in (or has assets in) for enforcement. 
the treaty becomes a problem when it is extended to distribution of information—because information now travels normally and predictably to all countries. 
(the internet is one way, but not the only way.) the consequence is that you could be sued about the information you distributed under the laws of any hague country, and the judgment would probably be enforced by your country. 
for instance, if you release a software package (either free or not) in germany, and people use it in the u.s., you could be sued for infringing an absurd u.s. 
software patent. 
that part does not depend on hague—it could happen now. 
but right now you could ignore the u.s. 
judgment, safe in germany, and the patent holder knows this. 
under the hague treaty, any german court would be required to enforce the u.s. 
judgment against you. 
in effect, the software patents of any signatory country would apply to all signatory countries. 
it isn't enough to keep software patents out of europe, if u.s. 
or japanese or egyptian software patents can reach you there. 
but patent law is not the only area of law that could wreak havoc if globalized by the hague treaty. 
suppose you publish a statement criticizing a public figure. 
if copies are read in england, that public figure could sue you under the strict u.k. 
libel law. 
the laws of your country may support the right to criticize a public figure, but with the hague treaty, they won't necessarily protect you any more. 
or suppose you publish a statement comparing your prices with your competitors' prices. 
if this is read in germany, where comparative advertising is illegal, you could be sued in germany and the judgment brought back to you wherever you are. 
(subsequent note: i've received word that this law may have been changed in germany. 
the point is the same, though—any country could have such a law, and some other european countries may still have one.) or suppose you publish a parody. 
if it is read in korea, you could be sued there, since korea does not recognize a right to parody. 
(since the publication of this article, the korean supreme court affirmed the right to parody, but the general point remains.) or suppose you have political views that a certain government prohibits. 
you could be sued in that country, and the judgment against you there would be enforced wherever you live. 
not long ago, yahoo was sued in france for having links to u.s. 
sites that auctioned nazi memorabilia, which is lawful in the u.s. 
after a french court required yahoo france to block such links, yahoo went to court in the u.s., asking for a ruling that the french judgment cannot be applied to the parent company in the u.s. 
it may come as a surprise to learn that exiled chinese dissidents joined the case in support of yahoo. 
but they knew what they were doing—their democracy movement depends on the outcome. 
you see, nazism is not the only political view whose expression is prohibited in certain places. 
criticism of the chinese government is also prohibited—in china. 
if a french court ruling against nazi statements is enforceable in the us, or in your country, maybe a chinese court ruling against anti-chinese-government statements will be enforceable there too. 
(this might be why china has joined the hague treaty negotiations.) the chinese government can easily adapt its censorship law so that the hague treaty would apply to it; all it has to do is give private individuals (and government agencies) the right to sue dissident publications. 
china is not the only country to ban criticism of the government; as of this writing, the government of victoria (australia) is suing to suppress a book called victoria police corruption on the grounds that it "scandalizes the courts."
 this book is available on the internet outside australia. 
australia is a hague treaty participant; if the treaty applies to such cases, an australian court judgment against the book could be used to suppress it elsewhere. 
meanwhile, works that criticize islam have faced increasing censorship in egypt, a hague treaty participant; this too could be globalized by the hague treaty. 
americans may turn to the first amendment to protect them from foreign judgments against their speech. 
the draft treaty permits a court to ignore a foreign judgment that is "manifestly incompatible with public policy."
 that is a stringent criterion, so you cannot count on it to protect you just because your conduct is legal where you are. 
just what it does cover is up to the particular judge. 
it is unlikely to help you against broad foreign interpretations of copyright, trademarks or software patents, but u.s. 
courts might use it to reject outright censorship judgments. 
however, even that won't help you if you publish on the internet, because your isp either has assets in other countries or communicates to the world through larger isps that have them. 
a censorship judgment against your site, or any other kind, could be enforced against your isp, or your isp's isp, in any other country where it has assets—and where there is no bill of rights, and freedom of speech does not enjoy the same exalted status as in the u.s. 
in response, the isp will shut off your site. 
the hague treaty would globalize pretexts for lawsuits, but not the protections for civil liberties, so any local protection could be bypassed. 
does suing your isp seem far-fetched? 
it already happens. 
when the multinational company danone announced plans to close factories in france, olivier malnuit opened a site, jeboycottedanone.com, to criticize this. 
(the name is french for "i boycott danone."
) danone sued not only him but his site hosting company and domain name registrar for "counterfeiting of goods"—and in april 2001 received a ruling prohibiting malnuit from mentioning the name "danone" either in the domain name or in the text of the site. 
even more telling, the registrar removed the domain in fear before the court made a ruling. 
the natural response for french dissidents is to publish their criticism of danone outside france, just as chinese dissidents publish their criticism of china outside china. 
but the hague treaty would enable danone to attack them everywhere. 
perhaps even this article would be suppressed through its isp or its isp's isp. 
the potential effects of the treaty are not limited to laws that exist today. 
when 50 countries know that their court judgments could be enforced throughout north america, europe and asia, they would have plenty of temptation to pass laws just for that purpose. 
suppose, for example, that microsoft would like to be able to impose copyright on languages and network protocols. 
they could approach a small, poor country and offer to spend $50 million a year there for 20 years, if only that country will pass a law saying that implementing a microsoft language or protocol constitutes copyright infringement. 
they can surely find some country which would take the offer. 
then if you implement a compatible program, microsoft could sue you in that country, and win. 
when the judge rules in their favor and bans distribution of your program, the courts in your country will enforce the judgment on you, obeying the hague treaty. 
does this seem implausible? 
in 2000, cisco pressured liechtenstein, a small european country, to legalize software patents. 
and ibm's chief lobbyist threatened many european governments with a termination of investment if they did not support software patents. 
meanwhile, the u.s. 
trade representative pressured middle eastern country jordan to allow patents on mathematics. 
a meeting of consumer organizations recommended in may 2001 that patents, copyrights and trademarks ("intellectual property") should be excluded from the scope of the hague treaty, because these laws vary considerably between countries. 
that is a good recommendation, but it only solves part of the problem. 
patents and bizarre extensions of copyright are just two of many excuses used for suppression of publication in certain countries. 
to solve the problem thoroughly, all cases about the legality of distributing or transmitting particular information should be excluded from globalization under the treaty, and only the country where the distributor or transmitter operates should have jurisdiction. 
in europe, people opposed to software patents will be active in working to change the hague treaty; for more information, see www.noepatents.org. 
in the u.s., the consumer project for technology is taking the lead; for more information, see www.cptech.org. 
a diplomatic conference is slated to begin today (june 6, 2001) to work on the details of the hague treaty. 
we should make ministries and the public aware of the possible dangers as soon as possible. 
there is more information about the problems with the hague at web.lemuria.org. 
the problems with older versions of the apple public source license (apsl). 
the current version of the apple public source license (apsl) does not have any of these problems. 
you can read our current position on the apsl elsewhere. 
this document is kept here for historical purposes only. 
fsf position on the older versions of apsl. 
apple released an updated version, 1.1, of the apsl but it remained unacceptable. 
they changed the termination clause into a "suspension" clause, but it still had the same kind of bad effects. 
in january 2001, apple released another version, apsl 1.2. 
this version fixes two of the fatal flaws, but one still remains: any modified version "deployed" in an organization must be published. 
the apsl 1.2 has taken two large steps towards a free software license, but still has one more large step to take before it qualifies. 
below, is the original commentary on the first version of the apsl, version 1.0. 
original apsl commentary. 
after studying apple's new source code license, the apsl, i have concluded that it falls short of being a free software license. 
it has three fatal flaws, any of which would be sufficient to make the software less than free. 
disrespect for privacy. 
the apsl does not allow you to make a modified version and use it for your own private purposes, without publishing your changes. 
central control. 
anyone who releases (or even uses, other than for r&d) a modified version is required to notify one specific organization, which happens to be apple. 
possibility of revocation at any time. 
the termination clause says that apple can revoke this license, and forbid you to keep using all or some part of the software, any time someone makes an accusation of patent or copyright infringement. 
in this way, if apple declines to fight a questionable patent (or one whose applicability to the code at hand is questionable), you will not be able to have your own day in court to fight it, because you would have to fight apple's copyright as well. 
such a termination clause is especially bad for users outside the us, since it makes them indirectly vulnerable to the insane us patent system and the incompetent us patent office, which ordinarily could not touch them in their own countries. 
any one of these flaws makes a license unacceptable. 
if these three flaws were solved, the apsl would be a free software license with three major practical problems, reminiscent of the npl: it is not a true copyleft, because it allows linking with other files which may be entirely proprietary. 
it is unfair, since it requires you to give apple rights to your changes which apple will not give you for its code. 
it is incompatible with the gpl. 
of course, the major difference between the npl and the apsl is that the npl is a free software license. 
these problems are significant in the case of the npl because the npl has no fatal flaws. 
would that the same were true of the apsl. 
at a fundamental level, the apsl makes a claim that, if it became accepted, would stretch copyright powers in a dangerous way: it claims to be able to set conditions for simply running the software. 
as i understand it, copyright law in the us does not permit this, except when encryption or a license manager is used to enforce the conditions. 
it would be terribly ironic if a failed attempt at making a free software license resulted in an extension of the effective range of copyright power. 
aside from this, we must remember that only part of macos is being released under the apsl. 
even if the fatal flaws and practical problems of the apsl were fixed, even if it were changed into a very good free software license, that would do no good for the other parts of macos whose source code is not being released at all. 
we must not judge all of a company by just part of what they do. 
overall, i think that apple's action is an example of the effects of the year-old "open source" movement: of its plan to appeal to business with the purely materialistic goal of faster development, while putting aside the deeper issues of freedom, community, cooperation, and what kind of society we want to live in. 
apple has grasped perfectly the concept with which "open source" is promoted, which is "show users the source and they will help you fix bugs."
 what apple has not grasped—or has dismissed—is the spirit of free software, which is that we form a community to cooperate on the commons of software. 
imperfection is not the same as oppression. 
stallman when a free program lacks capabilities that users want, that is unfortunate; we urge people to add what is missing. 
some would go further and claim that a program is not even free software if it lacks certain functionality—that it denies freedom 0 (the freedom to run the program as you wish) to users or uses that it does not support. 
this argument is misguided because it is based on identifying capacity with freedom, and imperfection with oppression. 
each program inevitably has certain functionalities and lacks others that might be desirable. 
there are some jobs it can do, and others it can't do without further work. 
this is the nature of software. 
the absence of key functionality can mean certain users find the program totally unusable. 
for instance, if you only understand graphical interfaces, a command line program may be impossible for you to use. 
if you can't see the screen, a program without a screen reader may be impossible for you to use. 
if you speak only greek, a program with menus and messages in english may be impossible for you to use. 
if your programs are written in ada, a c compiler is impossible for you to use. 
to overcome these barriers yourself is unreasonable to demand of you. 
free software really ought to provide the functionality you need. 
free software really ought to provide it, but the lack of that feature does not make the program nonfree, because it is an imperfection, not oppression. 
making a program nonfree is an injustice committed by the developer that denies freedom to whoever uses it. 
the developer deserves condemnation for this. 
it is crucial to condemn that developer, because nobody else can undo the injustice as long as the developer continues to do it. 
we can, and do, try to rescue the victims by developing a free replacement, but we can't make the nonfree program free. 
developing a free program without adding a certain important feature is not doing wrong to anyone. 
rather, it's doing some good but not all the good that people need. 
nobody in particular deserves condemnation for not developing the missing feature, since any capable person could do it. 
it would be ungrateful, as well as self-defeating, to single out the free program's authors for blame for not having done some additional work. 
what we can do is state that completing the job calls for doing some additional work. 
that is constructive because it helps us convince someone to do that work. 
if you think a certain extension in a free program is important, please push for it in the way that respects our contributors. 
don't criticize the people who contributed the useful code we have. 
rather, look for a way to complete the job. 
you can urge the program's developers to turn their attention to the missing feature when they have time for more work. 
you can offer to help them. 
you can recruit people or raise funds to support the work. 
www.gnu.org/philosophy/index.html
install fests: what to do about the deal with the devil. 
install fests invite users to bring their computers so that experts can install gnu/linux on them. 
this is meant to promote the idea of free software as well as the use of free software. 
in today's circumstances, where nonfree software dominates, these two goals conflict: users that want to reject nonfree software entirely need to choose their computers carefully to achieve that goal. 
the problem is that most computers can't run with a completely free gnu/linux distro. 
they contain peripherals, or coprocessors, that won't operate unless the installed system contains some nonfree drivers or firmware. 
this happens because hardware manufacturers refuse to tell us how to use their products, so that the only way to figure out how is by reverse engineering, which in most cases has not yet been done. 
this presents the install fest with a dilemma. 
if it upholds the ideals of freedom, by installing only free software from 100%-free distros, partly-secret machines won't become entirely functional and the users that bring them will go away disappointed. 
however, if the install fest installs nonfree distros and nonfree software which make machines entirely function, it will fail to teach users to say no for freedom's sake. 
they may learn to like gnu/linux, but they won't learn what the free software movement stands for. 
in effect, the install fest makes a tacit deal with the devil that suppresses the free software movement's message about freedom and justice. 
the nonfree software means the user sacrifices freedom for functionality. 
if users had to wrestle with this choice, they could draw a moral lesson from it, and maybe get a better computer later. 
but when the install fest makes the compromise on the user's behalf, it shelters the user from the moral dimension; the user never sees that something other than convenience is at stake. 
in effect, the install fest makes the deal with the devil, on the user's behalf, behind a curtain so the user doesn't recognize that it is one. 
i propose that the install fest show users exactly what deal they are making. 
let them talk with the devil individually, learn the deal's bad implications, then make a deal—or refuse! 
as always, i call on the install fest itself to install only free software, taking a strict stance. 
in this way it can set a clear moral example of rejecting nonfree software. 
my new idea is that the install fest could allow the devil to hang around, off in a corner of the hall, or the next room. 
(actually, a human being wearing sign saying "the devil," and maybe a toy mask or horns.) the devil would offer to install nonfree drivers in the user's machine to make more parts of the computer function, explaining to the user that the cost of this is using a nonfree (unjust) program. 
the install fest would tolerate the devil's presence but not officially sponsor the devil, or publicize the devil's availability. 
therefore, the users who accept the devil's deal would clearly see that the devil installed the nonfree drivers, not the install fest. 
the install fest would not be morally compromised by the devil's actions, so it could retain full moral authority when it talks about the imperative for freedom. 
those users that get nonfree drivers would see what their moral cost is, and that there are people in the community who refuse to pay that cost. 
they would have the chance to reflect afterwards on the situation that their flawed computers have put them in, and about how to change that situation, in the small and in the large. 
the install fest should offer advice to users that would like to replace some of the machine's components with alternatives that do support free software, and recommend commercial and noncommercial sources of assistance including fsf.org/resources/hw for getting a computer that works fully without nonfree drivers and blobs. 
it should also suggest to these users that they send letters of criticism to the companies that make or sell the components that depend on nonfree software to function. 
the install-fest devil has nothing to do with the cute bsd demon, and the install fest should make that very clear. 
this issue concerns the difference between various gnu/linux distros, and is not about bsd. 
indeed, the same approach could be used for installation of bsd. 
this devil would be a human being disguised to teach a moral lesson with a theatrical metaphor, so let's not take the metaphor too far. 
i think we would do well not to say that users are "selling their souls" if they install nonfree software—rather, part of their own freedom is what they forfeit. 
we don't need to exaggerate to teach the point that trading your freedom for convenience (and leading others to do the same) is putting yourself in a moral jam. 
the devil's work would be something i don't approve of—installing nonfree software—so i will not get involved in discussing the practical details. 
but it is hard to trust a devil to do wrong only within certain limits. 
what is to stop the devil from offering to install a gnu/linux distro such as ubuntu, which offers the user other attractive nonfree programs, not solely the ones needed for the machine's hardware to function at all? 
or even offering to install windows? 
the people who run the install fest should ask some users what the devil did to their computers. 
isn't it morally better if the install fest doesn't allow the devil? 
certainly! 
the fsf will not let a devil hang around its events. 
but given the fact that most install fests quietly play the role of the devil, i think that an explicit devil would be less bad. 
it would convert the install-fest dilemma from a debilitating contradiction into a teaching experience. 
users would be able to get, if they insist, the nonfree drivers to make their peripherals run, then use gnu/linux knowing that there is a further step toward freedom that they should take. 
published for libreplanet march 23/24 2019 
reject ip enforcement directive. 
a coalition of civil liberties and consumer groups opposes a new proposed directive for stricter punishment for copyright and patent infringement: ipjustice.org/digital-rights/ipj-white-paper-acta-2008 the fsf also opposes this directive, but we did not sign that statement because it accepts too much of what ought to be opposed. 
eu law is already too restrictive, and simply to prevent further changes is not enough. 
it is wrong to stop people from sharing music and other published works, and only draconian laws could possibly do the job, so it's no surprise to see they are being proposed. 
but opposing this directive without criticizing its unjust motivation is insufficient. 
even using the term "intellectual property" is a point of weakness, because this is a propaganda term for those who aim to restrict the public. 
is it ever a good thing to use a nonfree program?. 
the question here is, is it ever a good thing to use a nonfree program? 
our conclusion is that it is usually a bad thing, harmful to yourself and in some cases to others. 
if you run a nonfree program on your computer, it denies your freedom; the immediate wrong is directed at you&#8239;[1]. 
that does not mean you're an "evildoer" or "sinner" for running a nonfree program. 
when the harm you're doing is mainly to yourself, we hope you will stop, for your own sake. 
sometimes you may face great pressure to run a nonfree program; we don't say you must defy that pressure at all costs (though it is inspiring when someone does that), but we do urge you to look for occasions to where you can refuse, even in small ways. 
if you recommend that others run the nonfree program, or lead them to do so, you're leading them to give up their freedom. 
thus, we have a responsibility not to lead or encourage others to run nonfree software. 
where the program uses a secret protocol for communication, as in the case of skype, your own use of it pressures others to use it too, so it is especially important to avoid any use of these programs. 
but there is one special case where using some nonfree software, and even urging others to use it, can be a positive thing. 
that's when the use of the nonfree software aims directly at putting an end to the use of that very same nonfree software&#8239;[2]. 
in the past. 
in 1983 i decided to develop the gnu operating system, as a free replacement for unix. 
the feasible way to do it was to write and test the components one by one on unix. 
but was it legitimate to use unix for this? 
and was it legitimate to ask others to use unix for this, given that unix was proprietary software? 
(of course, if it had not been proprietary, it would not have required replacing.) the conclusion i reached was that using unix to put an end to the use of unix was legitimate for me to suggest to other developers. 
i likened it to participating in small ways in some evil activity, such as a criminal gang or a dishonest political campaign, in order to expose it and shut it down. 
while participating in the activity is wrong in itself, shutting it down excuses minor peripheral participation, comparable to merely using unix. 
this argument would not justify being a ringleader, but i was only considering using unix, not going to work for its development team. 
the job of replacing unix was completed when the last essential component was replaced by linux, the kernel started by linus torvalds in 1991. 
we still add to the gnu/linux system, but that doesn't require using unix, so it isn't a reason for using unix—not any more. 
thus, whenever you're using a nonfree program for this sort of reason, you should reconsider from time to time whether the need still exists. 
nowadays. 
however, there are other nonfree programs we still need to replace, and the analogous question often arises. 
should you run the nonfree driver for a peripheral to help you develop a free replacement driver? 
(more precisely, is it ethical for us to suggest that you do so?) yes, by all means. 
is it ok to run the nonfree javascript on a web site in order to file complaint asking the webmasters to free that javascript code, or make the site work without it? 
definitely—but other than that, you should have librejs block it for you. 
but this justification won't stretch any further. 
people that develop nonfree software, even software with malicious functionalities, often try to excuse this on the grounds that they fund some development of free software. 
however, a business that is basically wrong can't be legitimized by spending some of the profits on a worthy cause. 
for instance, some (not all) of the activities of the gates foundation are laudable, but they don't excuse bill gates's career, or microsoft. 
if the business works directly against the worthy cause it tries to legitimize itself with, that is a self-contradiction and it undermines the cause. 
even using a nonfree program to develop free software in general is better to avoid, and not suggest to others. 
for instance, we should not ask people to run windows or macos in order to make free applications run on them. 
as developer of emacs and gcc, i accepted changes to make them support nonfree systems such as vms, windows and macos. 
i had no reason to reject that code, even though people had run nonfree systems to write it. 
their use of unjust systems was not at my request or suggestion; rather, they were already using them before starting to write changes for gnu. 
they also did the packaging of releases for those systems. 
the "developing its own replacement" exception is valid within its limits, and crucial for the progress of free software, but we must resist stretching it any further lest it turn into an all-purpose excuse for any profitable activity with nonfree software. 
footnotes. 
using the nonfree program can have unfortunate indirect effects, such as rewarding the perpetrator and encouraging more use of that program. 
this is a further reason to shun use of nonfree programs. 
most proprietary programs come with an end user license agreement that hardly anyone reads. 
tucked away in it, in most cases, is an unethical commitment to behave like an uncooperative, bad neighbor. 
it claims you promised not to distribute copies to others, or even lend someone a copy. 
to carry out such a commitment is more wrong than to break it. 
no matter what legalistic arguments they might make, the developers can hardly claim their shady trick gives users a moral obligation to be uncooperative. 
however, we think that the truly moral path is to carefully reject such agreements. 
occasionally it is necessary to use and even upgrade a nonfree system on a machine in order to install a free system to replace it on that machine. 
this is not exactly the same issue, but the same arguments apply: it is legitimate to recommend running some nonfree software momentarily in order to remove it. 
free but shackled - the java trap. 
stallman headnote. 
since this article was first published, sun (now part of oracle) has relicensed most of its java platform reference implementation under the gnu general public license, and there is now a free development environment for java. 
thus, the java language as such is no longer a trap. 
you must be careful, however, because not every java platform is free. 
sun continues distributing an executable java platform which is nonfree, and other companies do so too. 
the free environment for java is called icedtea; the source code sun freed is included in that. 
so that is the one you should use. 
many gnu/linux distributions come with icedtea, but some include nonfree java platforms. 
(note, added 10/2015: the free implementation of java is known as openjdk in many gnu/linux distributions.) to reliably ensure your java programs run fine in a free environment, you need to develop them using icedtea. 
theoretically the java platforms should be compatible, but they are not compatible 100 percent. 
in addition, there are nonfree programs with "java" in their name, such as javafx, and there are nonfree java packages you might find tempting but need to reject. 
so check the licenses of whatever packages you plan to use. 
if you use swing, make sure to use the free version, which comes with icedtea. 
(note, added 10/2015: a free replacement for javafx called openjfx has been released.) aside from those java specifics, the general issue described here remains important, because any nonfree library or programming platform can cause a similar problem. 
we must learn a lesson from the history of java, so we can avoid other traps in the future. 
please also see: the javascript trap. 
april 12, 2004 if your program is free software, it is basically ethical—but there is a trap you must be on guard for. 
your program, though in itself free, may be restricted by nonfree software that it depends on. 
since the problem is most prominent today for java programs, we call it the java trap. 
a program is free software if its users have certain crucial freedoms. 
roughly speaking, they are: the freedom to run the program, the freedom to study and change the source, the freedom to redistribute the source and binaries, and the freedom to publish improved versions. 
(see the free software definition.) whether any given program in source form is free software depends solely on the meaning of its license. 
whether the program can be used in the free world, used by people who mean to live in freedom, is a more complex question. 
this is not determined by the program's own license alone, because no program works in isolation. 
every program depends on other programs. 
for instance, a program needs to be compiled or interpreted, so it depends on a compiler or interpreter. 
if compiled into byte code, it depends on a byte-code interpreter. 
moreover, it needs libraries in order to run, and it may also invoke other separate programs that run in other processes. 
all of these programs are dependencies. 
dependencies may be necessary for the program to run at all, or they may be necessary only for certain features. 
either way, all or part of the program cannot operate without the dependencies. 
if some of a program's dependencies are nonfree, this means that all or part of the program is unable to run in an entirely free system—it is unusable in the free world. 
sure, we could redistribute the program and have copies on our machines, but that's not much good if it won't run. 
that program is free software, but it is effectively shackled by its nonfree dependencies. 
this problem can occur in any kind of software, in any language. 
for instance, a free program that only runs on microsoft windows is clearly useless in the free world. 
but software that runs on gnu/linux can also be useless if it depends on other nonfree software. 
in the past, motif (before we had lesstif) and qt (before its developers made it free software) were major causes of this problem. 
most 3d video cards work fully only with nonfree drivers, which also cause this problem. 
but the major source of this problem today is java, because people who write free software often feel java is sexy. 
blinded by their attraction to the language, they overlook the issue of dependencies and fall into the java trap. 
sun's implementation of java is nonfree. 
the standard java libraries are nonfree also. 
we do have free implementations of java, such as the gnu compiler for java (gcj) and gnu classpath, but they don't support all the features yet. 
we are still catching up. 
if you develop a java program on sun's java platform, you are liable to use sun-only features without even noticing. 
by the time you find this out, you may have been using them for months, and redoing the work could take more months. 
you might say, "it's too much work to start over."
 then your program will have fallen into the java trap; it will be unusable in the free world. 
the reliable way to avoid the java trap is to have only a free implementation of java on your system. 
then if you use a java feature or library that free software does not yet support, you will find out straightaway, and you can rewrite that code immediately. 
sun continues to develop additional "standard" java libraries, and nearly all of them are nonfree; in many cases, even a library's specification is a trade secret, and sun's latest license for these specifications prohibits release of anything less than a full implementation of the specification. 
(see the java specification participation agreement and the j2me&trade; personal basis profile specification for examples.) fortunately, that specification license does permit releasing an implementation as free software; others who receive the library can be allowed to change it and are not required to adhere to the specification. 
but the requirement has the effect of prohibiting the use of a collaborative development model to produce the free implementation. 
use of that model would entail publishing incomplete versions, something those who have read the spec are not allowed to do. 
in the early days of the free software movement, it was impossible to avoid depending on nonfree programs. 
before we had the gnu c compiler, every c program (free or not) depended on a nonfree c compiler. 
before we had the gnu c library, every program depended on a nonfree c library. 
before we had linux, the first free kernel, every program depended on a nonfree kernel. 
before we had bash, every shell script had to be interpreted by a nonfree shell. 
it was inevitable that our first programs would initially be hampered by these dependencies, but we accepted this because our plan included rescuing them subsequently. 
our overall goal, a self-hosting gnu operating system, included free replacements for all those dependencies; if we reached the goal, all our programs would be rescued. 
thus it happened: with the gnu/linux system, we can now run these programs on free platforms. 
the situation is different today. 
we now have powerful free operating systems and many free programming tools. 
whatever job you want to do, you can do it on a free platform; there is no need to accept a nonfree dependency even temporarily. 
the main reason people fall into the trap today is because they are not thinking about it. 
the easiest solution to the problem is to teach people to recognize it and not fall into it. 
to keep your java code safe from the java trap, install a free java development environment and use it. 
more generally, whatever language you use, keep your eyes open, and check the free status of programs your code depends on. 
the easiest way to verify that a program is free is by looking for it in the free software directory. 
if a program is not in the directory, you can check its license(s) against the list of free software licenses. 
we are trying to rescue the trapped java programs, so if you like the java language, we invite you to help in developing gnu classpath. 
trying your programs with the gcj compiler and gnu classpath, and reporting any problems you encounter in classes already implemented, is also useful. 
however, finishing gnu classpath will take time; if more nonfree libraries continue to be added, we may never have all the latest ones. 
so please don't put your free software in shackles. 
when you write an application program today, write it to run on free facilities from the start. 
see also:. 
the curious incident of sun in the night-time 
the javascript trap. 
stallman there are two kinds of moral wrongs a web page can do. 
this page describes the wrong of sending nonfree programs to run in your computer. 
there is also the wrong we call saass, "service as a software substitute" where the page invites you to send your data so it can do computing on it in the server—computing which is unjust because you have no control over what computing is done. 
you may be running nonfree programs on your computer every day without realizing it—through your web browser. 
webmasters: there are several ways to indicate the license of javascript programs in a web site. 
in the free software community, the idea that any nonfree program mistreats its users is familiar. 
some of us defend our freedom by rejecting all proprietary software on our computers. 
many others recognize nonfreeness as a strike against the program. 
many users are aware that this issue applies to the plug-ins that browsers offer to install, since they can be free or nonfree. 
but browsers run other nonfree programs which they don't ask you about, or even tell you about—programs that web pages contain or link to. 
these programs are most often written in javascript, though other languages are also used. 
javascript (officially called ecmascript, but few use that name) was once used for minor frills in web pages, such as cute but inessential navigation and display features. 
it was acceptable to consider these as mere extensions of html markup, rather than as true software, and disregard the issue. 
some sites still use javascript that way, but many use it for major programs that do large jobs. 
for instance, google docs tries to install into your browser a javascript program which measures half a megabyte, in a compacted form that we could call obfuscript. 
this compacted form is made from the source code, by deleting the extra spaces that make the code readable and the explanatory remarks that make it comprehensible, and replacing each meaningful name in the code with an arbitrary short name so we can't tell what it is supposed to mean. 
part of the meaning of free software is that users have access to the program's source code (its plan). 
the source code of a program means the preferred form for programmers to modify—including helpful spacing, explanatory remarks, and meaningful names. 
compacted code is a bogus, useless substitute for source code; the real source code of these programs is not available to the users, so users cannot understand it; therefore the programs are nonfree. 
in addition to being nonfree, many of these programs are malware because they snoop on the user. 
even nastier, some sites use services which record all the user's actions while looking at the page. 
the services supposedly "redact" the recordings to exclude some sensitive data that the web site shouldn't get. 
but even if that works reliably, the whole purpose of these services is to give the web site other personal data that it shouldn't get. 
browsers don't normally tell you when they load javascript programs. 
some browsers have a way to turn off javascript entirely, but even if you're aware of this issue, it would take you considerable trouble to identify the nontrivial nonfree programs and block them. 
however, even in the free software community most users are not aware of this issue; the browsers' silence tends to conceal it. 
to be clear, the language javascript is not inherently better or worse for users' freedom than any other language. 
it is possible to release a javascript program as free software, by distributing the source code under a free software license. 
if the program is self-contained—if its functioning and purpose are independent of the page it came in—that is fine; you can copy it to a file on your machine, modify it, and visit that file with a browser to run it. 
it's even possible to package it for installation just like other free programs and invocation with a shell command. 
these programs present no special moral issue different from those of c programs. 
the issue of the javascript trap applies when the javascript program comes along with a web page that users visit. 
those javascript programs are written to work with a particular page or site, and the page or site depends on them to function. 
suppose you copy and modify the page's javascript code. 
then another problem arises: even if the program's source is available, browsers do not offer a way to run your modified version instead of the original when visiting that page or site. 
the effect is comparable to tivoization, although in principle not quite so hard to overcome. 
javascript is not the only language web sites use for programs sent to the user. 
flash supported programming through an extended variant of javascript, but that is a thing of the past. 
microsoft silverlight seems likely to create a problem similar to flash, except worse, since microsoft uses it as a platform for nonfree codecs. 
a free replacement for silverlight does not do the job adequately for the free world unless it normally comes with free replacement codecs. 
java applets also run in the browser, and raise similar issues. 
in general, any sort of applet system poses this sort of problem. 
having a free execution environment for an applet only brings us far enough to encounter the problem. 
it is theoretically possible to program in html and css, but in practice this capability is limited and inconvenient; merely to make it do something is an impressive hack. 
such programs ought to be free, but css is not a serious problem for users' freedom as of 2019. 
a strong movement has developed that calls for web sites to communicate only through formats and protocols that are free (some say "open"); that is to say, whose documentation is published and which anyone is free to implement. 
however, the presence of javascript programs in web pages makes that criterion insufficient. 
the javascript language itself, as a format, is free, and use of javascript in a web site is not necessarily bad. 
however, as we've seen above, it can be bad—if the javascript program is nonfree. 
when the site transmits a program to the user, it is not enough for the program to be written in a documented and unencumbered language; that program must be free, too. 
"transmits only free programs to the user" must become part of the criterion for an ethical web site. 
silently loading and running nonfree programs is one among several issues raised by "web applications."
 the term "web application" was designed to disregard the fundamental distinction between software delivered to users and software running on a server. 
it can refer to a specialized client program running in a browser; it can refer to specialized server software; it can refer to a specialized client program that works hand in hand with specialized server software. 
the client and server sides raise different ethical issues, even if they are so closely integrated that they arguably form parts of a single program. 
this article addresses only the issue of the client-side software. 
we are addressing the server issue separately. 
in practical terms, how can we deal with the problem of nontrivial nonfree javascript programs in web sites? 
the first step is to avoid running it. 
what do we mean by "nontrivial"? 
it is a matter of degree, so this is a matter of designing a simple criterion that gives good results, rather than finding the one correct answer. 
our current criterion is to consider a javascript program nontrivial if any of these conditions is met: it is referred to as an external script (from another page). 
it declares an array more than 50 elements long. 
it defines a named entity (function or method) that calls anything other than a primitive. 
it defines a named entity with more than three conditional constructs and loop construction. 
code outside of named definitions calls anything but primitives and functions defined further up in the page. 
code outside of named definitions contains more than three conditional constructs and loop construction, total. 
it calls eval. 
it does ajax calls. 
it uses bracket notation for dynamic object property access, which looks like object[property]. 
it alters the dom. 
it uses dynamic javascript constructs that are difficult to analyze without interpreting the program, or is loaded along with scripts that use such constructs. 
specifically, using any other construct than a string literal with certain methods (obj.write, obj.createelement, and others). 
how do we tell whether the javascript code is free? 
in a separate article, we propose a method by which a nontrivial javascript program in a web page can state the url where its source code is located, and can state its license too, using stylized comments. 
finally, we need to change free browsers to detect and block nontrivial nonfree javascript in web pages. 
the program librejs detects nonfree, nontrivial javascript in pages you visit, and blocks it. 
librejs is included in icecat, and available as an add-on for firefox. 
browser users also need a convenient facility to specify javascript code to use instead of the javascript in a certain page. 
(the specified code might be total replacement, or a modified version of the free javascript program in that page.) greasemonkey comes close to being able to do this, but not quite, since it doesn't guarantee to modify the javascript code in a page before that program starts to execute. 
using a local proxy works, but is too inconvenient now to be a real solution. 
we need to construct a solution that is reliable and convenient, as well as sites for sharing changes. 
the gnu project would like to recommend sites which are dedicated to free changes only. 
these features will make it possible for a javascript program included in a web page to be free in a real and practical sense. 
javascript will no longer be a particular obstacle to our freedom—no more than c and java are now. 
we will be able to reject and even replace the nonfree nontrivial javascript programs, just as we reject and replace nonfree packages that are offered for installation in the usual way. 
our campaign for web sites to free their javascript can then begin. 
in the mean time, there's one case where it is acceptable to run a nonfree javascript program: to send a complaint to the website operators saying they should free or remove the javascript code in the site. 
please don't hesitate to enable javascript temporarily to do that—but remember to disable it again afterwards. 
webmasters: there are several ways to indicate the license of javascript programs in a web site. 
acknowledgements: i thank matt lee and john resig for their help in defining our proposed criterion, and david parunakian for bringing the problem to my attention. 
a wise user judges each internet usage scenario carefully. 
businesses now offer computing users tempting opportunities to let others keep their data and do their computing. 
in other words, to toss caution and responsibility to the winds. 
these businesses, and their boosters, like to call these computing practices "cloud computing."
 they apply the same term to other quite different scenarios as well, such as renting a remote server, making the term so broad and nebulous that nothing meaningful can be said with it. 
if it has any meaning, it can only be a certain attitude towards computing: an attitude of not thinking carefully about what a proposed scenario entails or what risks it implies. 
perhaps the cloud they speak of is intended to form inside the customer's mind. 
to replace that cloud with clarity, this article discusses several different products and services that involve very different usage scenarios (please don't think of them as "cloud computing"), and the distinctive issues that they raise. 
first, let's classify the kinds of issues that a usage scenario can raise. 
in general, there are two kinds of issues to be considered. 
one is the issue of treatment of your data, and the other is control of your computing. 
within treatment of your data, several issues can be distinguished: a service could lose your data, alter it, show it to someone else without your consent, and/or make it hard for you to get the data back. 
each of those issues is easy to understand; how important they are depends on what kind of data is involved. 
keep in mind that a us company (or a subsidiary of one) is required to hand over nearly all data it has about a user on request of the fbi, without a court order, under "usa patriot act," whose blackwhiting name is as orwellian as its provisions. 
we know that although the requirements this law places on the fbi are very loose, the fbi systematically violates them. 
senator wyden says that if he could publicly say how the fbi stretches the law, the public would be angry at it. 
european organizations might well violate their countries' data protection laws if they entrust data to such companies. 
control of your computing is the other category of issue. 
users deserve to have control of their computing. 
unfortunately, most of them have already given up such control through the use of proprietary software (not free/libre). 
with software, there are two possibilities: either the users control the software or the software controls the users. 
the first case we call "free software," free as in freedom, because the users have effective control of the software if they have certain essential freedoms. 
we also call it "free/libre" to emphasize that this is a question of freedom, not price. 
the second case is proprietary software. 
windows and macos are proprietary; so is ios, the software in the iphone. 
such a system controls its users, and a company controls the system. 
when a corporation has power over users in that way, it is likely to abuse that power. 
no wonder that windows and ios are known to have spy features, features to restrict the user, and back doors. 
when users speak of "jailbreaking" the iphone, they acknowledge that this product shackles the user. 
when a service does the user's computing, the user loses control over that computing. 
we call this practice "software as a service" or "saas," and it is equivalent to running a proprietary program with a spy feature and a back door. 
it is definitely to be avoided. 
having classified the possible issues, let's consider how several products and services raise them. 
first, let's consider icloud, a coming apple service, whose functionality (according to advance information) will be that users can copy information to a server and access it later from elsewhere, or let users access it from there. 
this is not software as a service since it doesn't do any of the user's computing, so that issue doesn't arise. 
how will icloud treat the user's data? 
as of this writing, we don't know, but we can speculate based on what other services do. 
apple will probably be able to look at that data, for its own purposes and for others' purposes. 
if so, courts will be able to get it with a subpoena to apple (not to the user). 
the fbi may be able to get it without a subpoena. 
movie and record companies, or their lawsuit mills, may be able to look at it too. 
the only way this might be avoided is if the data is encrypted on the user's machine before upload, and decrypted on the user's machine after it is accessed. 
in the specific case of icloud, all the users will be running apple software, so apple will have total control over their data anyway. 
a spy feature was discovered in the iphone and ipad software early in 2011, leading people to speak of the "spyphone."
 apple could introduce another spy feature in the next "upgrade," and only apple would know. 
if you're foolish enough to use an iphone or ipad, maybe icloud won't make things any worse, but that is no recommendation. 
now let's consider amazon ec2, a service where a customer leases a virtual computer (hosted on a server in an amazon data center) that does whatever the customer programs it to do. 
these computers run the gnu/linux operating system, and the customer gets to choose all the installed software, with one exception: linux, the lowest-level component (or "kernel") of the system. 
customers must select one of the versions of linux that amazon offers; they cannot make and run their own. 
but they can replace the rest of the system. 
thus, they get almost as much control over their computing as they would with their own machines, but not entirely. 
ec2 does have some drawbacks. 
one is, since users cannot install their own versions of the kernel linux, it is possible that amazon has put something nasty, or merely inconvenient, into the versions they offer. 
but this may not really matter, given the other flaws. 
one other flaw is that amazon does have ultimate control of the computer and its data. 
the state could subpoena all that data from amazon. 
if you had it in your home or office, the state would have to subpoena it from you, and you would have the chance to fight the subpoena in court. 
amazon may not care to fight the subpoena on your behalf. 
amazon places conditions on what you can do with these servers, and can cut off your service if it construes your actions to conflict with them. 
amazon has no need to prove anything, so in practice it can cut you off if it finds you inconvenient. 
as wikileaks found out, the customer has no recourse if amazon stretches the facts to make a questionable judgment. 
now let's consider google chromeos, a variant of gnu/linux which is still in development. 
according to what google initially said, it will be free/libre software, at least the basic system, though experience with android suggests it may come with nonfree programs too. 
the special feature of this system, its purpose, was to deny users two fundamental capabilities that gnu/linux and other operating systems normally provide: to store data locally and to run applications locally. 
instead, chromeos would be designed to require users to save their data in servers (normally google servers, i expect) and to let these servers do their computing too. 
this immediately raises both kinds of issues in their fullest form. 
the only way chromeos as thus envisaged could become something users ought to accept is if they install a modified version of the system, restoring the capabilities of local data storage and local applications. 
more recently i've heard that google has reconsidered this decision and may reincorporate those local facilities. 
if so, chromeos might just be something people can use in freedom—if it avoids the many other problems that we observe today in android. 
as these examples show, each internet usage scenario raises its own set of issues, and they need to be judged based on the specifics. 
vague statements, such as any statement formulated in terms of "cloud computing," can only get in the way. 
first published in the european business review. 
keep control of your computing, so it doesn't control you!. 
the world wide web, developed by tim berners-lee in 1990 as a system for publishing and viewing information, is slowly being transformed into a system of remote computing. 
it will store your data, and data about you, often limiting your access to it but allowing fbi access at any time. 
it will do your computing for you, but you cannot control what it does. 
it provides various tempting attractions, but you must resist them. 
in the 1980s, most people did not use computers; those who did, mostly used personal computers or timesharing services. 
both allowed you to install software of your choice. 
both allowed you full control over your data, though it is not clear what access the timesharing services gave to the fbi. 
in any case, the timesharing services mostly faded away by the 90s. 
this does not mean that these users had control of their computing. 
with software, either the users control the program (free software) or the program controls the users (proprietary or nonfree software). 
those users were running proprietary software because that's all there was at the time. 
the users could not change it, or even tell what it really did. 
the abusiveness of proprietary software has intensified since then; nowadays, it is likely to spy on you, intentionally restrict you, and/or have back doors. 
(windows is known to do all three; likewise the iphone and the kindle.) but even absent such abuse, it wasn't right for users to be controlled by their software. 
that's why i launched the free software movement in 1983. 
we decided to develop an operating system and applications that would be entirely free (libre, freie), so that the users would have control over them. 
i gave this system the name gnu. 
(you have probably heard people call it "linux," but that's an error.) people who switch to this system, and insist on using only free software, are in a position to control their computing. 
we have liberated only a small part of cyberspace, as yet, but that is a foothold for freedom. 
developments in the web threaten to negate this achievement. 
the first problem was the use of invisible references to sites whose mission was surveillance (perhaps for advertising). 
users who visited sites a, b, x and z did not realize that those pages contained invisible references to iamwatchingyou.com, so each visit informed that site too, and it recorded permanently that this user had visited certain pages. 
javascript created a further problem. 
initially used for harmless things such as unusual-looking menus, its capabilities have been extended to the point where it can do nontrivial computing. 
services such as google docs install large javascript programs into the user's browser. 
even though they run in your computer, you have no control over what they do there. 
then there is the issue of storing your data in companies' servers. 
the largest such companies have little respect for users' privacy. 
for instance, if you hand your data to facebook, companies pay facebook (not you) for the use of it. 
they pay facebook (not you) to run ads using your face. 
the timesharing companies of the 1980s had usually treated their users' data with respect, even though they could occasionally abuse them, because their users were paying clients and could go elsewhere. 
facebook's users do not pay, so they are not its clients. 
they are its merchandise, to be sold to other businesses. 
if the company is in the us, or is a subsidiary of a us company, the fbi can collect this data at whim without even a court order under an un-american us law, named in purest blackwhiting the "patriot act."
 services also offer to operate on the users data. 
in effect, this means that users do their computing on the servers, and the servers take complete control of that computing. 
there is a systematic marketing campaign to drive users to entrusting their computing and their data to companies they have absolutely no reason to trust. 
its buzzword is "cloud computing," a term used for so many different computing structures that its only real meaning is, "do it without thinking about what you're doing."
 there is even a product, google chromeos, designed so that it can only store data remotely, and the user must do her computing remotely. 
ironically, it is free software, a version of gnu/linux. 
users will have access to the source code, and could change it so as to support local computing and local data storage—if the machine has enough memory to store it, and if it permits users to install their own versions of the software. 
if android phones are any guide, most chromeos devices will be designed to prevent users from doing that. 
this does not mean internet users can't have privacy. 
this does not mean that internet users can't have control of their computing. 
it does mean that you'll have to swim against the current to have them. 
first published in der spiegel online. 
a response letter to the word attachments. 
this is an automatic message: the document you have sent is not an internet mail format. 
it is a proprietary format that is unreadable on several types of computers, including those used by visually-impaired readers and older computers used in foreign countries. 
in most cases, the size of the file is substantially larger than a plain-text file containing the same information. 
(even if it looks like plain-text to you, chances are it is not, and contains a considerable amount of unnecessary formatting codes, printer information, etc.) in addition, microsoft word documents are often infected with viruses. 
excel, access, and power point files are also vulnerable to infection. 
please "save as" dos text, html or portable document format (pdf) and send the resulting file as an attachment. 
another option is to simply type your message directly into mail (not microsoft outlook or microsoft word) then you won't need to use an attachment at all. 
in the highly unlikely event that your document cannot be converted to an open, non-proprietary format, consider posting it on a web page, and sending e-mail with the url which points to the file. 
thank you. 
(microsoft is a criminal company that has been found guilty of antitrust violations by both the u.s. 
district court and the u.s. 
court of appeals.) 
gnu kind communications guidelines. 
richard stallman purpose. 
the gnu project encourages contributions from anyone who wishes to advance the development of the gnu system, regardless of gender, race, ethnic group, physical appearance, religion, cultural background, and any other demographic characteristics, as well as personal political views. 
people are sometimes discouraged from participating in gnu development because of certain patterns of communication that strike them as unfriendly, unwelcoming, rejecting, or harsh. 
this discouragement particularly affects members of disprivileged demographics, but it is not limited to them. 
therefore, we ask all contributors to make a conscious effort, in gnu project discussions, to communicate in ways that avoid that outcome—to avoid practices that will predictably and unnecessarily risk putting some contributors off. 
these guidelines suggest specific ways to accomplish that goal. 
guidelines. 
please assume other participants are posting in good faith, even if you disagree with what they say. 
when people present code or text as their own work, please accept it as their work. 
please do not criticize people for wrongs that you only speculate they may have done; stick to what they actually say and actually do. 
please think about how to treat other participants with respect, especially when you disagree with them. 
for instance, call them by the names they use, and refer to them using words whose meanings (as you understand them) cover those participants' stated gender identities. 
please also show tolerance and respect for people who do that using different words from the words you use. 
please do not take a harsh tone towards other participants, and especially don't make personal attacks against them. 
go out of your way to show that you are criticizing a statement, not a person. 
please recognize that criticism of your statements is not a personal attack on you. 
if you feel that someone has attacked you, or offended your personal dignity, please don't "hit back" with another personal attack. 
that tends to start a vicious circle of escalating verbal aggression. 
a private response, politely stating your feelings as feelings, and asking for peace, may calm things down. 
write it, set it aside for hours or a day, revise it to remove the anger, and only then send it. 
please avoid statements about the presumed typical desires, capabilities or actions of some demographic group. 
they can offend people in that group, and they are always off-topic in gnu project discussions. 
please be especially kind to other contributors when saying they made a mistake. 
programming means making lots of mistakes, and we all do so—this is why regression tests are useful. 
conscientious programmers make mistakes, and then fix them. 
it is helpful to show contributors that being imperfect is normal, so we don't hold it against them, and that we appreciate their imperfect contributions though we hope they follow through by fixing any problems in them. 
likewise, be kind when pointing out to other contributors that they should stop using certain nonfree software. 
for their own sake, they ought to free themselves, but we welcome their contributions to our software packages even if they don't do that. 
so these reminders should be gentle and not too frequent—don't nag. 
by contrast, to suggest that others run a nonfree program opposes the basic principles of gnu, so it is not allowed in gnu project discussions. 
please respond to what people actually said, not to exaggerations of their views. 
your criticism will not be constructive if it is aimed at a target other than their real views. 
if in a discussion someone brings up a tangent to the topic at hand, please keep the discussion on track by focusing on the current topic rather than the tangent. 
this is not to say that the tangent is bad, or not interesting to discuss—only that it shouldn't interfere with discussion of the issue at hand. 
in most cases, it is also off-topic, so those interested ought to discuss it somewhere else. 
if you think the tangent is an important and pertinent issue, please bring it up as a separate discussion, with a subject field to fit, and consider waiting for the end of the current discussion. 
rather than trying to have the last word, look for the times when there is no need to reply, perhaps because you already made the relevant point clear enough. 
if you know something about the game of go, this analogy might clarify that: when the other player's move is not strong enough to require a direct response, it is advantageous to give it none and instead move elsewhere. 
please don't argue unceasingly for your preferred course of action when a decision for some other course has already been made. 
that tends to block the activity's progress. 
if others have irritated you, perhaps by disregarding these guidelines, please don't excoriate them, and especially please don't hold a grudge against them. 
the constructive approach is to encourage and help other people to do better. 
when they are trying to learn to do better, please give them plenty of chances. 
if other participants complain about the way you express your ideas, please make an effort to cater to them. 
you can find ways to express the same points while making others more comfortable. 
you are more likely to persuade others if you don't arouse ire about secondary things. 
please don't raise unrelated political issues in gnu project discussions, because they are off-topic. 
the only political positions that the gnu project endorses are (1) that users should have control of their own computing (for instance, through free software) and (2) supporting basic human rights in computing. 
we don't require you as a contributor to agree with these two points, but you do need to accept that our decisions will be based on them. 
by making an effort to follow these guidelines, we will encourage more contribution to our projects, and our discussions will be friendlier and reach conclusions more easily. 
the curious history of komongistan(busting the term "intellectual property"). 
stallman the purpose of this parable is to illustrate just how misguided the term "intellectual property" is. 
when i say that the term "intellectual property" is an incoherent overgeneralization, that it lumps together laws that have very little in common, and that its use is an obstacle to clear thinking about any of those laws, many can't believe i really mean what i say. 
so sure are they that these laws are related and similar, species of the same genus as it were, that they suppose i am making a big fuss about small differences. 
here i aim to show how fundamental the differences are. 
fifty years ago everyone used to recognize the nations of korea, mongolia and pakistan as separate and distinct. 
in truth, they have no more in common than any three randomly chosen parts of the world, since they have different geographies, different cultures, different languages, different religions, and separate histories. 
today, however, their differentness is mostly buried under their joint label of "komongistan."
 few today recall the marketing campaign that coined that name: companies trading with south korea, mongolia and pakistan called those three countries "komongistan" as a simple-sounding description of their "field" of activity. 
(they didn't trouble themselves about the division of korea or whether "pakistan" should include what is now bangladesh.) this label gave potential investors the feeling that they had a clearer picture of what these companies did, as well as tending to stick in their minds. 
when the public saw the ads, they took for granted that these countries formed a natural unit, that they had something important in common. 
first scholarly works, then popular literature, began to talk about komongistan. 
the majority of papers in prestigious journals of komongistan studies actually treat some aspect of one of the three "regions of komongistan," using "komongistan" only as a label. 
these papers are no less useful than they would be without that label, for readers that are careful to connect the paper only with the "region" it describes. 
however, scholars yearn to generalize, so they often write so as to extend their conclusions to "more" of komongistan, which introduces error. 
other papers compare two of the "regions of komongistan."
 these papers can be valid too if understood as comparisons of unrelated countries. 
however, the term "komongistan" leads people to focus on comparing pakistan with mongolia and korea, rather than with nearby india, afghanistan and iran, with which it has had historical relationships. 
by contrast, popular writing about komongistan presents a unified picture of its history and culture. 
this bogus picture encourages readers to equate each of the three "regions" with the whole of "komongistan."
 they are fascinated by jenghiz khan, the great komongistani (actually mongol) conqueror. 
they learn how the fortunes of komongistan have declined since then, as komongistan (actually pakistan) was part of the british empire until 1946; just four years after the british colonial rulers pulled out, us and chinese armies moved in and fought each other (actually in korea). 
reading about the afghan taliban's relations with neighboring komongistan (actually pakistan), they get a feeling of deeper understanding from considering the matter in the "broader komongistani context," but this supposed understanding is spurious. 
some beginner-level korean language classes have begun writing korean in a variant of the arabic script, under the guidance of educators who feel it is only proper to employ the script used by the majority of komongistanis (in fact, pakistanis), even though korean has never been written that way. 
when these confusions are pointed out to professors of komongistan studies, they respond by insisting that the name komongistan is useful, illuminating, and justified by various general characteristics shared by all of komongistan, such as: all of komongistan is in asia. 
(true.) all of komongistan has been the scene of great power rivalries. 
(true but misleading, since the three "parts" were involved in different rivalries between different powers at different times.) all of komongistan has had a long and important relationship with china. 
(false, since pakistan has not.) all of komongistan has been influenced by buddhism. 
(true, but there's little trace of this in pakistan today.) nearly all of komongistan was unified by the khagan mongke. 
(true, but so was most of asia.) all of komongistan was subject to western colonization. 
(false, since korea was subjugated by japan, not a european country.) all the "regions of komongistan" have nuclear weapons. 
(false, since mongolia does not have them, and neither does south korea.) each "region" of komongistan has an "a" in its name. 
(true.) the professors are aware of the facts which make some of those generalizations untrue, but in their yearning to justify the term, they overlook what they know. 
when reminded of these facts, they call them minor exceptions. 
they also cite the widespread social adoption of the name komongistan—the university departments of komongistan studies, the shelves labeled komongistan in bookstores and libraries, the erudite journals such as komongistan review, the state department's undersecretary for komongistan affairs, the travel advisories for visitors to komongistan, and many more—as proof that the name komongistan is so embedded in society that we could not imagine doing without it. 
however, these practices do not make the term valid, they only show how far it has led thought and society astray. 
at the end of the discussion they decide to keep the confusing name, but pledge to do more to teach students to note the differences between the three "regions" of komongistan. 
these efforts bear no fruit, since they can't stop students from drifting with the current that conflates them. 
in 1995, under pressure from the us and other states that wanted to have just one embassy for all of komongistan, the governments of north and south korea, mongolia, and pakistan began negotiating the union of their countries. 
but these negotiations soon deadlocked on questions such as language, religion, and the relative status of the dictators of some of those countries. 
there is little chance that reality will soon change to resemble the fiction of komongistan. 
the parable of komongistan understates the stretch of the term "intellectual property," which is used to refer to a lot more laws than the three that people mostly think of. 
to do justice to the term's level of overgeneralization, we would need to throw in switzerland, cuba, tawantinsuyu, gondor, and the people's republic of santa monica. 
a parable such as this one can suggest a conclusion but does not constitute proof. 
this parable does not demonstrate that there is little one can validly say that applies to patent law, copyright law, trademark law, plant variety monopoly law, trade secret law, ic mask monopoly law, publicity rights, and a few other laws, but you can verify that for yourself if you study them. 
however, simply entertaining the possibility that these laws may be as different as this parable suggests is enough to show that the term "intellectual property" should be rejected, so that people can learn about and judge each of these laws without the assumption they are similar. 
see did you say "intellectual property"? 
it's a seductive mirage, for more explanation. 
people, places, things and ideas. 
by kragen sitaker <kragen@pobox.com> software. 
software is ideas. 
information. 
it's different from people, places, and things; it's infinitely reduplicable like fire, at almost no cost. 
this is a truism, even a cliche. 
but it seems that there are particular consequences that aren't well-explored. 
one is that it doesn't work well to sell it the way you sell slaves, places, and things; any of your customers can make an unbounded number of copies at cost, or less. 
market friction currently makes selling software a viable business model. 
perhaps branding does, too; there's a question as to whether red hat sells cds for $50 because people like red hat's brand, or just because they don't know they can buy essentially the same cd from cheapbytes for $2. 
the past and the present. 
the traditional way to deal with this is to lock ideas up inside people, places, and things. 
a lawyer can get quite a bit of money simply for spitting out the appropriate ideas, not doing any actual creative work, or simply for applying rote procedures—most wills reportedly fall in this category. 
i have to go to the georgia o'keeffe museum to see old georgia's paintings, because they don't allow photography. 
then they can charge me admission. 
(great museum, by the way. 
if you go there, don't get the four-day pass; their collection is rather small.) a book can be sold for more than the cost of printing it because the ideas are difficult to separate from their physical manifestation. 
software makes it much easier to separate ideas from people, places, and things. 
if i buy my computer to send email with, and i want to make fractals, i don't have to buy a new fractal machine. 
i just have to download some fractal software. 
if i want to calculate the yield force of a strut, i don't have to hire a structural engineer; i can download some fea software and simulate stressing it until it yields. 
i don't have to go to a museum to look at my neighbor's fractals; i can just pull them up on my screen. 
(once i download them, of course.) this is a spectacular change. 
software locked up: the future?. 
and it was the nature of computer applications, in general, until recently. 
but now we have the web, and people are talking a lot about application-specific embedded computers. 
suddenly people can deliver applications like the ones they used to deliver as computer software, but they can lock up the software—the ideas—inside places and things. 
as an example, i have a cd-rom containing aggregated us phone listings. 
given sufficient time and expertise, i can extract these phone listings and put them up on a web site. 
(i need to reverse-engineer the database structure they're stored in first.) i can run correlation tests to see if people with certain last names tend to have more biased exchange distributions within a city. 
(which would indicate that they lived close to their families, perhaps, or that the city was ethnically segregated.) i can find out which spelling of cathy is most popular (kathy? 
cathi?), and i can see if people's choices of spellings of cathy are correlated with their last names. 
there are also several web sites containing the same set of phone listings, or newer versions. 
i can't do any of these things with these web sites, because the phone listings—an idea—are locked up in the web site—a place or a thing, depending on how you look at it. 
another tack is to lock information up in things. 
the nsa's skipjack algorithm was classified for several years; implementations were widely available, but only in special hardened devices. 
this allowed them to deploy it widely behind the iron curtain that surrounds classified research, and they intended to deploy it widely in the outside world, too. 
(so far, i'm outside that curtain.) recently, circumstances forced them to distribute software implementations of skipjack, and so they declassified it. 
(see schneier.com [archived] for more.) why i don't like this. 
having the phone book myself gives me more freedom. 
on the other hand, it also requires me to install software on my machine, giving that software some degree of control over my machine. 
in this particular case, the software runs under win95, so it demands complete control over my machine. 
so it's actually considerably more convenient for me to just visit the web page and fill out a form to look up someone's phone number. 
information in things is also considerably more convenient than information in software; a special-purpose thing is often considerably easier to use for that purpose than a general-purpose computer is. 
because of this, many industry pundits have been forecasting that general-purpose computers will fall out of use in favor of special-purpose devices. 
i'm somewhat worried about this trend. 
i like using general-purpose computers—though admittedly they are often difficult to use. 
i like the freedom it gives me. 
the computer is just an extension of my mind. 
web sites and special-purpose hardware are not like this. 
they do not give me the same freedoms general-purpose computers do. 
if the trend were to continue to the extent the pundits project, more and more of what i do today with my computer will be done by special-purpose things and remote servers. 
what does freedom of software mean in such an environment? 
surely it's not wrong to run a web site without offering my software and databases for download. 
(even if it were, it might not be feasible for most people to download them. 
ibm's patent server has a many-terabyte database behind it.) i believe that software—open-source software, in particular—has the potential to give individuals significantly more control over their own lives, because it consists of ideas, not people, places, or things. 
the trend toward special-purpose devices and remote servers could reverse that. 
what does it mean to have free software burned into a rom? 
is the software still free if i have to desolder the rom to read the source code and burn a new rom to run a modified version? 
what does it mean to have free software running a remotely-accessible application on a web server? 
even with the best of intentions, these technologies seem make it difficult to give people the same kind of freedom they enjoy with pcs. 
how to fight it. 
it's more expensive to buy a new device than it is to download software and install it on my machine. 
so people won't use special-purpose devices if they provide no advantages. 
but they do provide advantages. 
they're *much* easier to use than current general-purpose computers. 
a button for every function; no funny modes in which the buttons do something else, or nothing. 
a display for every state variable; you don't have to click on things to make them visible. 
i suspect that this is not an inherent limitation of general-purpose computers, but a limitation of their current state. 
another big issue is that they just work. 
general-purpose computers often don't, particularly when running microsoft oses. 
even in the best case, you still have to do a couple of seconds of irrelevant stuff before getting to work on what you want to work on—typing a letter or whatever. 
more typically, you have to click around for ten seconds or so. 
at worst, you have to reinstall windows and the application, reconfigure some peripherals, and reinstall their drivers before you can get anything done. 
a third big issue is that they require software installation. 
if i want to start using my machine for writing email different, i have to install email software on it. 
while this is considerably less expensive than buying a special-purpose email machine, it's considerably less uncomfortable, intimidating, and confusing. 
(or so i'm told.) it also takes longer. 
if general-purpose computers are to survive the onslaught of tiny, cheap special-purpose boxes, they must become as easy to use, reliable, and easy to install software on as those special-purpose boxes. 
this requires a totally different operating environment than anything we're using on the desktop today; not surprisingly, gnu/linux is closer than anything else i've used. 
(squeak might be even better, but i haven't tried it yet.) but gnu/linux is an incredibly long way away. 
this will require different hardware as well as different software. 
the forces behind remote servers are similar—ease of use because of uniform interfaces through a web browser, "just working," and no installation—just using. 
but they have a couple of other advantages as well: they can provide services that require massive storage or computational resources that can't reasonably be provided on your own machine, unless you want to spend wads of cash. 
(downloading altavista's database every day would be a very inefficient way to search the web.) i think these extra advantages are probably impossible to overcome at the moment—although i'm interested in research on distributing big computational jobs over many machines. 
www.gnu.org/philosophy/latest-articles.html
introduction to free software, free society: the selected essays of richard m. stallman. 
by lawrence lessig [*] every generation has its philosopher—a writer or an artist who captures the imagination of a time. 
sometimes these philosophers are recognized as such; often it takes generations before the connection is made real. 
but recognized or not, a time gets marked by the people who speak its ideals, whether in the whisper of a poem, or the blast of a political movement. 
our generation has a philosopher. 
he is not an artist, or a professional writer. 
he is a programmer. 
richard stallman began his work in the labs of mit, as a programmer and architect building operating system software. 
he has built his career on a stage of public life, as a programmer and an architect founding a movement for freedom in a world increasingly defined by "code."
 "code" is the technology that makes computers run. 
whether inscribed in software or burned in hardware, it is the collection of instructions, first written in words, that directs the functionality of machines. 
these machines—computers—increasingly define and control our life. 
they determine how phones connect, and what runs on tv. 
they decide whether video can be streamed across a broadband link to a computer. 
they control what a computer reports back to its manufacturer. 
these machines run us. 
code runs these machines. 
what control should we have over this code? 
what understanding? 
what freedom should there be to match the control it enables? 
what power? 
these questions have been the challenge of stallman's life. 
through his works and his words, he has pushed us to see the importance of keeping code "free."
 not free in the sense that code writers don't get paid, but free in the sense that the control coders build be transparent to all, and that anyone have the right to take that control, and modify it as he or she sees fit. 
this is "free software"; "free software" is one answer to a world built in code. 
"free."
 stallman laments the ambiguity in his own term. 
there's nothing to lament. 
puzzles force people to think, and this term "free" does this puzzling work quite well. 
to modern american ears, "free software" sounds utopian, impossible. 
nothing, not even lunch, is free. 
how could the most important words running the most critical machines running the world be "free"? 
how could a sane society aspire to such an ideal? 
yet the odd clink of the word "free" is a function of us, not of the term. 
"free" has different senses, only one of which refers to "price."
 a much more fundamental sense of "free" is the "free," stallman says, in the term "free speech," or perhaps better in the term "free labor."
 not free as in costless, but free as in limited in its control by others. 
free software is control that is transparent, and open to change, just as free laws, or the laws of a "free society," are free when they make their control knowable, and open to change. 
the aim of stallman's "free software movement" is to make as much code as it can transparent, and subject to change, by rendering it "free."
 the mechanism of this rendering is an extraordinarily clever device called "copyleft" implemented through a license called gpl. 
using the power of copyright law, "free software" not only assures that it remains open, and subject to change, but that other software that takes and uses "free software" (and that technically counts as a "derivative work") must also itself be free. 
if you use and adapt a free software program, and then release that adapted version to the public, the released version must be as free as the version it was adapted from. 
it must, or the law of copyright will be violated. 
"free software," like free societies, has its enemies. 
microsoft has waged a war against the gpl, warning whoever will listen that the gpl is a "dangerous" license. 
the dangers it names, however, are largely illusory. 
others object to the "coercion" in gpl's insistence that modified versions are also free. 
but a condition is not coercion. 
if it is not coercion for microsoft to refuse to permit users to distribute modified versions of its product office without paying it (presumably) millions, then it is not coercion when the gpl insists that modified versions of free software be free too. 
and then there are those who call stallman's message too extreme. 
but extreme it is not. 
indeed, in an obvious sense, stallman's work is a simple translation of the freedoms that our tradition crafted in the world before code. 
"free software" would assure that the world governed by code is as "free" as our tradition that built the world before code. 
for example: a "free society" is regulated by law. 
but there are limits that any free society places on this regulation through law: no society that kept its laws secret could ever be called free. 
no government that hid its regulations from the regulated could ever stand in our tradition. 
law controls. 
but it does so justly only when visibly. 
and law is visible only when its terms are knowable and controllable by those it regulates, or by the agents of those it regulates (lawyers, legislatures). 
this condition on law extends beyond the work of a legislature. 
think about the practice of law in american courts. 
lawyers are hired by their clients to advance their clients' interests. 
sometimes that interest is advanced through litigation. 
in the course of this litigation, lawyers write briefs. 
these briefs in turn affect opinions written by judges. 
these opinions decide who wins a particular case, or whether a certain law can stand consistently with a constitution. 
all the material in this process is free in the sense that stallman means. 
legal briefs are open and free for others to use. 
the arguments are transparent (which is different from saying they are good) and the reasoning can be taken without the permission of the original lawyers. 
the opinions they produce can be quoted in later briefs. 
they can be copied and integrated into another brief or opinion. 
the "source code" for american law is by design, and by principle, open and free for anyone to take. 
and take lawyers do—for it is a measure of a great brief that it achieves its creativity through the reuse of what happened before. 
the source is free; creativity and an economy is built upon it. 
this economy of free code (and here i mean free legal code) doesn't starve lawyers. 
law firms have enough incentive to produce great briefs even though the stuff they build can be taken and copied by anyone else. 
the lawyer is a craftsman; his or her product is public. 
yet the crafting is not charity. 
lawyers get paid; the public doesn't demand such work without price. 
instead this economy flourishes, with later work added to the earlier. 
we could imagine a legal practice that was different—briefs and arguments that were kept secret; rulings that announced a result but not the reasoning. 
laws that were kept by the police but published to no one else. 
regulation that operated without explaining its rule. 
we could imagine this society, but we could not imagine calling it "free."
 whether or not the incentives in such a society would be better or more efficiently allocated, such a society could not be known as free. 
the ideals of freedom, of life within a free society, demand more than efficient application. 
instead, openness and transparency are the constraints within which a legal system gets built, not options to be added if convenient to the leaders. 
life governed by software code should be no less. 
code writing is not litigation. 
it is better, richer, more productive. 
but the law is an obvious instance of how creativity and incentives do not depend upon perfect control over the products created. 
like jazz, or novels, or architecture, the law gets built upon the work that went before. 
this adding and changing is what creativity always is. 
and a free society is one that assures that its most important resources remain free in just this sense. 
for the first time, this book collects the writing and lectures of richard stallman in a manner that will make their subtlety and power clear. 
the essays span a wide range, from copyright to the history of the free software movement. 
they include many arguments not well known, and among these, an especially insightful account of the changed circumstances that render copyright in the digital world suspect. 
they will serve as a resource for those who seek to understand the thought of this most powerful man—powerful in his ideas, his passion, and his integrity, even if powerless in every other way. 
they will inspire others who would take these ideas, and build upon them. 
i don't know stallman well. 
i know him well enough to know he is a hard man to like. 
he is driven, often impatient. 
his anger can flare at friend as easily as foe. 
he is uncompromising and persistent; patient in both. 
yet when our world finally comes to understand the power and danger of code—when it finally sees that code, like laws, or like government, must be transparent to be free—then we will look back at this uncompromising and persistent programmer and recognize the vision he has fought to make real: the vision of a world where freedom and knowledge survives the compiler. 
and we will come to see that no man, through his deeds or words, has done as much to make possible the freedom that this next society could have. 
we have not earned that freedom yet. 
we may well fail in securing it. 
but whether we succeed or fail, in these essays is a picture of what that freedom could be. 
and in the life that produced these words and works, there is inspiration for anyone who would, like stallman, fight to create this freedom. 
[*] lawrence lessig was then professor of law at stanford law school. 
learn more about free software, free society: the selected essays of richard m. stallman. 
lest codeplex perplex. 
many in our community are suspicious of the codeplex foundation. 
with its board of directors dominated by microsoft employees and ex-employees, plus apologist miguel de icaza, there is plenty of reason to be wary of the organization. 
but that doesn't prove its actions will be bad. 
someday we will be able to judge the organization by its actions (including its public relations). 
today we can only try to anticipate what it will do, based on its statements and microsoft's statements. 
the first thing we see is that the organization ducks the issue of users' freedom; it uses the term "open source" and does not speak of "free software."
 these two terms stand for different philosophies which are based on different values: free software's values are freedom and social solidarity, whereas open source cites only practical convenience values such as powerful, reliable software. 
see why open source misses the point of free software for more explanation. 
evidently microsoft would rather confront the practical competition of open source than the free software movement's ethical criticism. 
its long standing practice of criticizing only "open source" does double duty: attacking one opponent while distracting attention from the other. 
codeplex follows the same practice. 
its stated goal is to convince "commercial software companies" to contribute more to "open source."
 since nearly all open source programs are also free software, these programs will probably be free, but the "open source" philosophy doesn't teach developers to defend their freedom. 
if they don't understand the importance of this freedom, developers may succumb to microsoft's ploys encouraging them to use weaker licenses that are vulnerable to "embrace and extend" or patent co-optation, and to make free software dependent on proprietary platforms. 
this foundation is not the first microsoft project to bear the name "codeplex."
 there is also codeplex.com, a project hosting site, whose list of allowed licenses excludes gnu gpl version 3. perhaps this reflects the fact that gpl version 3 is designed to protect a program's free software status from being subverted by microsoft's patents through deals like the novell-microsoft pact. 
we don't know that the codeplex foundation will try to discourage gpl version 3, but it would fit microsoft's pattern. 
the term "commercial software companies" embodies a peculiar confusion. 
every business is by definition commercial, so all software developed by a business—whether free or proprietary—is automatically commercial software. 
but there is a widespread public confusion between "commercial software" and "proprietary software."
 (see words to avoid or use with care.) this confusion is a serious problem because it falsely claims free software business to be impossible. 
many software companies already contribute to free software, and these commercial contributions are quite useful. 
perhaps microsoft would like people to assume these facts are impossible. 
based on these facts, we can see that codeplex will encourage developers not to think about freedom. 
it will subtly spread the idea that free software business is impossible without the support of a proprietary software company like microsoft. 
however, it may convince some proprietary software companies to release additional free software. 
will that be a contribution to computer users' freedom? 
it will be, if the software thus contributed works well on free platforms, in free environments. 
but that is just the opposite of what microsoft has said it seeks to achieve. 
sam ramji, now president of codeplex, said a few months ago that microsoft (then his employer) wanted to promote development of free applications that encourage use of microsoft windows. 
perhaps the aim of codeplex is to suborn free software application developers into making windows their main platform. 
many of the projects hosted now on codeplex.com are add-ons for proprietary software. 
these programs are caught in a trap similar to the former java trap. 
that would be harmful if it succeeds, because a program that doesn't run (or doesn't run well) in the free world does not contribute to our freedom. 
a nonfree program takes away its users' freedom. 
to avoid being harmed in that way, we need to reject proprietary system platforms as well as proprietary applications. 
codeplex free add-ons to a proprietary base increase society's dependence on that base—the opposite of what we need. 
will free software application developers resist this attempt to undermine our progress towards freedom? 
here is where their values become crucial. 
developers that adhere to the "open source" philosophy, which does not value freedom, may not care whether their software's users run it on a free operating system or a proprietary one. 
but developers who demand freedom, for themselves and for others, can recognize the trap and keep out of it. 
to remain free, we must make freedom our goal. 
if the codeplex foundation wishes to be a real contributor to the free software community, it must not aim at free add-ons to nonfree packages. 
it needs to encourage development of portable software capable of running on free platforms based on gnu/linux and other free operating systems. 
if it tries to seduce us into going in the opposite direction, we must make sure to refuse. 
however good or bad the codeplex foundation's actions, we must not accept them as an excuse for microsoft's acts of aggression against our community. 
from its recent attempt to sell patents to proxy trolls who could then do dirty work against gnu/linux to its longstanding promotion of digital restrictions management, microsoft continues to act to harm us. 
we would be fools indeed to let anything distract us from that. 
giving the software field protection from patents. 
stallman patents threaten every software developer, and the patent wars we have long feared have broken out. 
software developers and software users—which, in our society, is most people—need software to be free of patents. 
the patents that threaten us are often called "software patents," but that term is misleading. 
such patents are not about any specific program. 
rather, each patent describes some practical idea, and says that anyone carrying out the idea can be sued. 
so it is clearer to call them "computational idea patents."
 the us patent system doesn't label patents to say this one's a "software patent" and that one isn't. 
software developers are the ones who make a distinction between the patents that threaten us—those that cover ideas that can be implemented in software—and the rest. 
for example, if the patented idea is the shape of a physical structure or a chemical reaction, no program can implement that idea; that patent doesn't threaten the software field. 
but if the idea that's patented is a computation, that patent's barrel points at software developers and users. 
this is not to say that computational idea patents prohibit only software. 
these ideas can also be implemented in hardware—and many of them have been. 
each patent typically covers both hardware and software implementations of the idea. 
the special problem of software. 
still, software is where computational idea patents cause a special problem. 
in software, it's easy to implement thousands of ideas together in one program. 
if 10 percent are patented, that means hundreds of patents threaten it. 
when dan ravicher of the public patent foundation studied one large program (linux, which is the kernel of the gnu/linux operating system) in 2004, he found 283 us patents that appeared to cover computing ideas implemented in the source code of that program. 
that same year, a magazine estimated that linux was .25 percent of the whole gnu/linux system. 
multiplying 300 by 400 we get the order-of-magnitude estimate that the system as a whole was threatened by around 100,000 patents. 
if half of those patents were eliminated as "bad quality"—mistakes of the patent system, that is—it would not really change things. 
whether 100,000 patents or 50,000, it's the same disaster. 
this is why it's a mistake to limit our criticism of software patents to just "patent trolls" or "bad quality" patents. 
the worst patent aggressor today is apple, which isn't a "troll" by the usual definition; i don't know whether apple's patents are "good quality," but the better the patent's "quality" the more dangerous its threat. 
we need to fix the whole problem, not just part of it. 
the usual suggestions for correcting this problem legislatively involve changing the criteria for granting patents—for instance, to ban issuance of patents on computational practices and systems to perform them. 
this approach has two drawbacks. 
first, patent lawyers are clever at reformulating patents to fit whatever rules may apply; they transform any attempt at limiting the substance of patents into a requirement of mere form. 
for instance, many us computational idea patents describe a system including an arithmetic unit, an instruction sequencer, a memory, plus controls to carry out a particular computation. 
this is a peculiar way of describing a computer running a program that does a certain computation; it was designed to make the patent application satisfy criteria that the us patent system was believed for a time to require. 
second, the us already has many thousands of computational idea patents, and changing the criteria to prevent issuing more would not get rid of the existing ones. 
we would have to wait almost 20 years for the problem to be entirely corrected through the expiration of these patents. 
we could envision legislating the abolition of these existing patents, but that is probably unconstitutional. 
(the supreme court has perversely insisted that congress can extend private privileges at the expense of the public's rights but that it can't go in the other direction.) a different approach: limit effect, not patentability. 
my suggestion is to change the effect of patents. 
we should legislate that developing, distributing, or running a program on generally used computing hardware does not constitute patent infringement. 
this approach has several advantages: it does not require classifying patents or patent applications as "software" or "not software."
 it provides developers and users with protection from both existing and potential future computational idea patents. 
patent lawyers cannot defeat the intended effect by writing applications differently. 
this approach doesn't entirely invalidate existing computational idea patents, because they would continue to apply to implementations using special-purpose hardware. 
this is an advantage because it eliminates an argument against the legal validity of the plan. 
the us passed a law some years ago shielding surgeons from patent lawsuits, so that even if surgical procedures are patented, surgeons are safe. 
that provides a precedent for this solution. 
software developers and software users need protection from patents. 
this is the only legislative solution that would provide full protection for all. 
we could then go back to competing or cooperating… without the fear that some stranger will wipe away our work. 
see also: patent reform is not enough a version of this article was first published at wired in november 2012. 
linux, gnu, and freedom. 
since joe barr's article criticized my dealings with siglinux, i would like to set the record straight about what actually occurred, and state my reasons. 
when siglinux invited me to speak, it was a "linux user group"; that is, a group for users of the gnu/linux system which calls the whole system "linux."
 so i replied politely that if they'd like someone from the gnu project to give a speech for them, they ought to treat the gnu project right, and call the system "gnu/linux."
 the system is a variant of gnu, and the gnu project is its principal developer, so social convention says to call it by the name we chose. 
unless there are powerful reasons for an exception, i usually decline to give speeches for organizations that won't give gnu proper credit in this way. 
i respect their freedom of speech, but i also have the freedom not to give a speech. 
subsequently, jeff strunk of siglinux tried to change the group's policy, and asked the fsf to list his group in our page of gnu/linux user groups. 
our webmaster told him that we would not list it under the name "siglinux" because that name implies that the group is about linux. 
strunk proposed to change the name to "sigfree," and our webmaster agreed that would be fine. 
(barr's article said we rejected this proposal.) however, the group ultimately decided to stay with "siglinux."
 at that point, the matter came to my attention again, and i suggested they consider other possible names. 
there are many names they could choose that would not call the system "linux," and i hope they will come up with one they like. 
there the matter rests as far as i know. 
is it true, as barr writes, that some people see these actions as an "application of force" comparable with microsoft's monopoly power? 
probably so. 
declining an invitation is not coercion, but people who are determined to believe that the entire system is "linux" sometimes develop amazingly distorted vision. 
to make that name appear justified, they must see molehills as mountains and mountains as molehills. 
if you can ignore the facts and believe that linus torvalds developed the whole system starting in 1991, or if you can ignore your ordinary principles of fairness and believe that torvalds should get the sole credit even though he didn't do that, it's a small step to believe that i owe you a speech when you ask. 
just consider: the gnu project starts developing an operating system, and years later linus torvalds adds one important piece. 
the gnu project says, "please give our project equal mention," but linus says, "don't give them a share of the credit; call the whole thing after my name alone!"
 now envision the mindset of a person who can look at these events and accuse the gnu project of egotism. 
it takes strong prejudice to misjudge so drastically. 
a person who is that prejudiced can say all sorts of unfair things about the gnu project and think them justified; his fellows will support him, because they want each other's support in maintaining their prejudice. 
dissenters can be reviled; thus, if i decline to participate in an activity under the rubric of "linux," they may find that inexcusable, and hold me responsible for the ill will they feel afterwards. 
when so many people want me to call the system "linux," how can i, who merely launched its development, not comply? 
and forcibly denying them a speech is forcibly making them unhappy. 
that's coercion, as bad as microsoft! 
now, you might wonder why i don't just duck the issue and avoid all this grief. 
when siglinux invited me to speak, i could simply have said "no, sorry" and the matter would have ended there. 
why didn't i do that? 
i'm willing to take the risk of being abused personally in order to have a chance of correcting the error that undercuts the gnu project's efforts. 
calling this variant of the gnu system "linux" plays into the hands of people who choose their software based only on technical advantage, not caring whether it respects their freedom. 
there are people like barr, that want their software "free from ideology" and criticize anyone that says freedom matters. 
there are people like torvalds that will pressure our community into use of a nonfree program, and challenge anyone who complains to provide a (technically) better program immediately or shut up. 
there are people who say that technical decisions should not be "politicized" by consideration of their social consequences. 
in the 70s, computer users lost the freedoms to redistribute and change software because they didn't value their freedom. 
computer users regained these freedoms in the 80s and 90s because a group of idealists, the gnu project, believed that freedom is what makes a program better, and were willing to work for what we believed in. 
we have partial freedom today, but our freedom is not secure. 
it is threatened by the cbdtpa (formerly sssca), by the broadcast "protection" discussion group (see www.eff.org) which proposes to prohibit free software to access digital tv broadcasts, by software patents (europe is now considering whether to have software patents), by microsoft nondisclosure agreements for vital protocols, and by everyone who tempts us with a nonfree program that is "better" (technically) than available free programs. 
we can lose our freedom again just as we lost it the first time, if we don't care enough to protect it. 
will enough of us care? 
that depends on many things; among them, how much influence the gnu project has, and how much influence linus torvalds has. 
the gnu project says, "value your freedom!"
 joe barr says, "choose between nonfree and free programs on technical grounds alone!"
 if people credit torvalds as the main developer of the gnu/linux system, that's not just inaccurate, it also makes his message more influential—and that message says, "nonfree software is ok; i use it and develop it myself."
 if they recognize our role, they will listen to us more, and the message we will give them is, "this system exists because of people who care about freedom. 
join us, value your freedom, and together we can preserve it."
 see the gnu project for the history. 
when i ask people to call the system gnu/linux, some of them respond with silly excuses and straw men. 
but we probably haven't lost anything, because they were probably unfriendly to begin with. 
meanwhile, other people recognize the reasons i give, and use that name. 
by doing so, they help make other people aware of why the gnu/linux system really exists, and that increases our ability to spread the idea that freedom is an important value. 
this is why i keep butting my head against bias, calumny, and grief. 
they hurt my feelings, but when successful, this effort helps the gnu project campaign for freedom. 
since this came up in the context of linux (the kernel) and bitkeeper, the nonfree version control system that linus torvalds now uses, i'd like to address that issue as well. 
bitkeeper issue. 
(see the update below.) the use of bitkeeper for the linux sources has a grave effect on the free software community, because anyone who wants to closely track patches to linux can only do it by installing that nonfree program. 
there must be dozens or even hundreds of kernel hackers who have done this. 
most of them are gradually convincing themselves that it is ok to use nonfree software, in order to avoid a sense of cognitive dissonance about the presence of bitkeeper on their machines. 
what can be done about this? 
one solution is to set up another repository for the linux sources, using cvs or another free version control system, and arranging to load new versions into it automatically. 
this could use bitkeeper to access the latest revisions, then install the new revisions into cvs. 
that update process could run automatically and frequently. 
the fsf cannot do this, because we cannot install bitkeeper on our machines. 
we have no nonfree systems or applications on them now, and our principles say we must keep it that way. 
operating this repository would have to be done by someone else who is willing to have bitkeeper on his machine, unless someone can find or make a way to do it using free software. 
the linux sources themselves have an even more serious problem with nonfree software: they actually contain some. 
quite a few device drivers contain series of numbers that represent firmware programs to be installed in the device. 
these programs are not free software. 
a few numbers to be deposited into device registers are one thing; a substantial program in binary is another. 
the presence of these binary-only programs in "source" files of linux creates a secondary problem: it calls into question whether linux binaries can legally be redistributed at all. 
the gpl requires "complete corresponding source code," and a sequence of integers is not the source code. 
by the same token, adding such a binary to the linux sources violates the gpl. 
the linux developers have a plan to move these firmware programs into separate files; it will take a few years to mature, but when completed it will solve the secondary problem; we could make a "free linux" version that doesn't have the nonfree firmware files. 
that by itself won't do much good if most people use the nonfree "official" version of linux. 
that may well occur, because on many platforms the free version won't run without the nonfree firmware. 
the "free linux" project will have to figure out what the firmware does and write source code for it, perhaps in assembler language for whatever embedded processor it runs on. 
it's a daunting job. 
it would be less daunting if we had done it little by little over the years, rather than letting it mount up. 
in recruiting people to do this job, we will have to overcome the idea, spread by some linux developers, that the job is not necessary. 
linux, the kernel, is often thought of as the flagship of free software, yet its current version is partially nonfree. 
how did this happen? 
this problem, like the decision to use bitkeeper, reflects the attitude of the original developer of linux, a person who thinks that "technically better" is more important than freedom. 
value your freedom, or you will lose it, teaches history. 
"don't bother us with politics," respond those who don't want to learn. 
update: since 2005, bitkeeper is no longer used to manage the linux kernel source tree. 
see the article, thank you, larry mcvoy. 
the linux sources still contain nonfree firmware blobs, but as of january 2008, a free version of linux is now maintained for use in free gnu/linux distributions. 
what does it mean for your computer to be loyal?. 
stallman we say that running free software on your computer means that its operation is under your control. 
implicitly this presupposes that your computer will do what your programs tell it to do, and no more. 
in other words, that your computer will be loyal to you. 
in 1990 we took that for granted; nowadays, many computers are designed to be disloyal to their users. 
it has become necessary to spell out what it means for your computer to be a loyal platform that obeys your decisions, which you express by telling it to run certain programs. 
our tentative definition consists of these principles. 
installability any software that can be replaced by someone else, the user must be empowered to replace. 
thus, if the computer requires a password or some other secret in order to replace some of the software in it, whoever sells you the computer must tell you that secret as well. 
neutrality towards software the computer will run, without prejudice, whatever software you install in it, and let that software do whatever its code says to do. 
a feature to check for signatures on the programs that run is compatible with this principle provided the signature checking is fully under the user's control. 
when that is so, the feature helps implement the user's decisions about which programs to run, rather than thwarting the user's decisions. 
by contrast, signature checking that is not fully under the user's control violates this principle. 
neutrality towards protocols the computer will communicate, without prejudice, through whatever protocol your installed software implements, with whatever users and whatever other networked computers you direct it to communicate with. 
this means that computer does not impose one particular service rather than another, or one protocol rather than another. 
it does not require the user to get anyone else's permission to communicate via a certain protocol. 
neutrality towards implementations when the computer communicates using any given protocol, it will support doing so, without prejudice, via whatever code you choose (assuming the code implements the intended protocol), and it will do nothing to help any other part of the internet to distinguish which code you are using or what changes you may have made in it, or to discriminate based on your choice. 
this entails that the computer rejects remote attestation, that is, that it does not permit other computers to determine over the network whether your computer is running one particular software load. 
remote attestation gives web sites the power to compel you to connect to them only through an application with drm that you can't break, denying you effective control over the software you use to communicate with them. 
we can comprehend remote attestation as a general scheme to allow any web site to impose tivoization or "lockdown" on the local software you connect to it with. 
simple tivoization of a program bars modified versions from functioning properly; that makes the program nonfree. 
remote attestation by web sites bars modified versions from working with those sites that use it, which makes the program effectively nonfree when using those sites. 
if a computer allows web sites to bar you from using a modified program with them, it is loyal to them, not to you. 
neutrality towards data communicated when the computer receives data using whatever protocol, it will not limit what the program can do with the data received through that communication. 
any hardware-level drm violates this principle. 
for instance, the hardware must not deliver video streams encrypted such that only the monitor can decrypt them. 
debugability the computer always permits you to analyze the operation of a program that is running. 
completeness the principles above apply to all the computer's software interfaces and all communication the computer does. 
the computer must not have any disloyal programmable facility or do any disloyal communication. 
for instance, the amt functionality in recent intel processors runs nonfree software that can talk to intel remotely. 
unless disabled, this makes the system disloyal. 
for a computer to be fully at your service, it should come with documentation of all the interfaces intended for software running in the computer to use to control the computer. 
a documentation gap as such doesn't mean the computer is actively disloyal, but does mean there are some aspect of it that are not at your service. 
depending on what that aspect does, this might or might not be a real problem. 
we ask readers to send criticisms and suggestions about this definition to <computer-principles@gnu.org>. 
loyalty as defined here is the most basic criterion we could think of that is meaningful. 
it does not require that all the software in the computer be free. 
however, the presence of nonfree software in the computer is an obstacle to verifying that the computer is loyal, or making sure it remains so. 
history. 
here is the list of substantive changes in this page. 
version 1.6: add installability requirement. 
version 1.5: full documentation is not a requirement for loyalty. 
interview with richard stallman (2001). 
richard m. stallman is the most forceful and famous practitioner/theorist of free software, a term he coined. 
"free" here means free as in "free speech," not free as in "free beer."
 stallman's most famous intervention in the "free software" movement has surely been the gnu general public license (gpl), which stallman created around 1985 as a general license that could be applied to any program. 
the license codifies the concept of "copyleft," the "central idea" of which stallman has described as giving "everyone permission to run the program, copy the program, modify the program, and distribute modified versions, but not permission to add restrictions of their own. 
thus, the crucial freedoms that define "free software" are guaranteed to everyone who has a copy; they become inalienable rights" (stallman, "the gnu operating system and the free software movement," in dibona, open sources: voices from the open source revolution) every free-software license since probably owes its existence to stallman's vision, including those licenses by which openoffice.org code is governed. 
stallman's work is of course resolutely practical. 
a short list of his coding accomplishments would include emacs as well as most of the components of the gnu/linux system, which he either wrote or helped write. 
in 1990, stallman received a mcarthur foundation fellowship; he has used the funds given him to further his free software work. 
(see moody, rebel code for a good account of stallman's mission.) the opportunity for this interview arose when i saw stallman lecture at sun's cupertino campus in may. 
at that time, i requested an email interview with stallman. 
he assented, and shortly after, i submitted the series of questions below, to which he responded, often at length. 
however, my efforts for a follow-up failed, so this interview is only the first pass. 
as a consequence, i was unable to extend (and challenge) some interesting avenues; i have also provided as much context as possible for stallman's politics in the links. 
it goes without saying that stallman's views are his own and do not necessarily represent mine or those of openoffice.org. 
for more information, readers are encouraged to visit the gnu website, as well as stallman's personal site. 
i would like, in this interview, to focus on your current work, and on the problematic of what kind of society we should like to live in. 
your focus now—and for at least the last seventeen years—has been on working to make the social arrangements for using software more ethical. 
but, [briefly,] what do you mean by the notion of a what i call here a more ethical society? 
we need to encourage the spirit of cooperation, by respecting other people's freedom to cooperate and not advancing schemes to divide and dominate them. 
this takes us to a point that is quite important and that i am hoping you can clarify for our readers. 
the term you prefer for your ethic is "free software," where the word "free" means freedom from constraints and not free to take. 
but the term that more and more people are using is "open source," a term of quite recent vintage (1998), and, from your perspective, filled with significant problems. 
of the two, free software is a term that implies an ethic of living and holds out the promise of a more just society; the other, "open source," does not. 
is that a fair statement? 
would you address that issue, and clarify the distinctions for our readers? 
that is exactly right. 
someone once said it this way: open source is a development methodology; free software is a political philosophy (or a social movement). 
the open source movement focuses on convincing business that it can profit by respecting the users' freedom to share and change software. 
we in the free software movement appreciate those efforts, but we believe that there is a more important issue at stake: all programmers [owe] an ethical obligation to respect those freedoms for other people. 
profit is not wrong in itself, but it can't justify mistreating other people. 
along these lines, there has been considerable confusion over how to name your idea of an ethical society. 
mistakenly, many would assert that you are suggesting a communism. 
anyone who criticizes certain business practices can expect to be called "communist" from time to time. 
this is a way of changing the subject and evading the issue. 
if people believe the charges, they don't listen to what the critics really say. 
(it is much easier to attack communism than to attack the views of the free software movement.) pekka himanen, in his recent work, the hacker ethic, has rightly countered these claims. 
i would go further: that what you suggest is close to what political theorists such as amitai etzioni would describe as a communitarianism (see, for instance, communitariannetwork.org/about). 
and communitarianism is by no means hostile to the market economy that most people associate with capitalism. 
quite the opposite. 
would you speak to what could be called the politics of your ethical system? 
there is a place in life for business, but business should not be allowed dominate everyone's life. 
the original idea of democracy was to give the many a way to check the power of the wealthy few. 
today business (and its owners) has far too much political power, and this undermines democracy in the us and abroad. 
candidates face an effective veto by business, so they dare not disobey its orders. 
the power to make laws is being transferred from elected legislatures to nondemocratic bodies such as the world trade organization, which was designed to subordinate public health, environmental protection, labor standards, and the general standard of living to the interests of business. 
under nafta [north american free trade associtation], a canadian company which was convicted in mississippi of anticompetitive practices is suing for federal compensation for its lost business due to the conviction. 
they claim that nafta takes away states' right to make laws against anticompetitive practices. 
but business is not satisfied yet. 
the proposed ftaa [free trade area of the americas] would require all governments to privatize their [public facilities] such as schools, water supply, record keeping, even social security. 
this is what bush wants "fast track" authority to push through. 
peaceful protestors against the ftaa in quebec were violently attacked by police, who then blamed the fighting on the protestors. 
one protestor standing on the street was shot in the throat with a plastic bullet at a range of 20 feet. 
he is maimed for life, and seeks to press charges of attempted murder—if the cops will reveal who shot him. 
one protest organizer was attacked on the street by a gang that got out of a van, knocked him down, and beat him up. 
when his friends came to the rescue, the gang revealed itself as undercover police and took him away. 
whatever democracy survives the globalization treaties is likely to be crushed by the efforts to suppress opposition to them. 
the most immediate criticism of your insistence on ethics would be that the ethic of free software is fine, but not relevant to the real world of business. 
with over half the world's web sites running on gnu/linux and apache, that is evidently just fud. 
you should not give such falsehoods credibility by appearing to take them seriously yourself. 
i think it is worse to leave implicit lies unanswered than to address them directly. 
the thrust of my argument was that microsoft, for instance, would and does claim that free software does not make money and rather loses money. 
they argue it's a bad idea all around. 
i don't think that microsoft is to be ignored, just as the wto should not be ignored. 
but: my question was to suggest a rebuttal this self-evident fud, not to credit the errors of others. 
so, i'll rephrase my question: microsoft has attacked the gpl as business foolishness that is also bad for "america" (whatever that means). 
they don't care about community ethics. 
how do you then counter their fud, or for that matter, the fud of those who share microsoft's views? 
stallman did not respond to this query for clarification, but as it happened, a speech he recently presented at new york university responded to microsoft's propaganda. 
the free software foundation has presented a defense, of free software, as well. 
[to return to the interview…] on a more individual level, how would you address the criticism of person who would like to follow your ethical standards but feels she cannot because she wants also to make money from her intellectual work? 
this hypothetical person appears to believe that developing free software is incompatible with being paid. 
if so, she is misinformed—hundreds of people are now paid to develop free software. 
some of them work for sun. 
she is challenging us to solve a problem that doesn't really exist. 
but what if she can't get one of these free software jobs? 
that could happen—not everybody can get them today. 
but it doesn't excuse developing proprietary software. 
a desire for profit is not wrong in itself, but it isn't the sort of urgent overriding cause that could excuse mistreating others. 
proprietary software divides the users and keeps them helpless, and that is wrong. 
nobody should do that. 
so what should she do instead? 
anything else. 
she could get a job in another field. 
but she doesn't have to go that far—most software development is custom software, not meant to be published either as free software or as proprietary software. 
in most cases, she can do that without raising an ethical issue. 
it isn't heroism, but it isn't villainy either. 
but copyright can be thought of as an author's friend. 
in the age of the printing press, that was true: copyright was an industrial restriction on publishers, requiring them to pay the author of a book. 
it did not restrict the readers, because the actions it restricted were things only a publisher could do. 
but this is not true any more. 
now copyright is a restriction on the public, for the sake of the publishers, who give the authors a small handout to buy their support against the public. 
in the current situation, then, who benefits most from copyright? 
the publishers. 
were i freelancing again, i would not want to release my works without the minimal security of payment for my labor copyright affords. 
you could do that without copyright. 
it is part of your business dealings with the magazine you are writing for. 
but please note that i don't say copyright should be entirely abolished. 
you can disagree with what i said, but it makes no sense to attack me for things i did not say. 
what i said in my speech was that software which is published should be free. 
for a more detailed accounting of stallman's views regarding copyright as extended to fields outside of software, readers are urged to go to the gnu web site, and to stallman's personal site. 
in particular, readers might want to look at "copyright and globalization in the age of computer networks" presented at the massachusetts institute of technology in cambridge, massachusetts on 19 april 2001. 
discussing his views on copyright as extended to non-software fields, stallman mentioned, in the interview, "those are ideas that i came to after some years of working on free software. 
people asked me the question, "how do these ideas extend to other kinds of information," so in the 90s i started thinking about the question. 
this speech gives my thought on the question."
 on another point: recently, argentina became the first country to consider requiring all government offices to use free software (see, for instance, www.wired.com/2001/05/argentina-mulls-open-source-move). 
i think the regulation is still being discussed—not adopted yet. 
as far as i know, that is still the case… however, whether the legislation has been implemented or not, the news is still encouraging, as at least free software is being considered seriously as a legitimate option. 
what does this (and other news) suggest regarding your future efforts? 
that is, are you going to pitch the cause more strongly to developing nations? 
yes. 
i am on my way to south africa in two weeks [from the time of this writing, mid-may], and a free software foundation is being started in india. 
there is also great interest in brazil. 
a last point. 
the so-called "open source" movement is by and large devoid of humor. 
not so the "free software" movement. 
you, in your lectures and in your song, provide a gratifying humorousness. 
i'd like to finish by asking, what do you accomplish by this? 
i accomplish mirth. 
that's the hacker spirit—ha ha, only serious. 
thank you, larry mcvoy. 
for the first time in my life, i want to thank larry mcvoy. 
he recently eliminated a major weakness of the free software community, by announcing the end of his campaign to entice free software projects to use and promote his nonfree software. 
soon, linux development will no longer use this program, and no longer spread the message that nonfree software is a good thing if it's convenient. 
my gratitude is limited, since it was mcvoy that created the problem in the first place. 
but i still appreciate his decision to clear it up. 
there are thousands of nonfree programs, and most merit no special attention, other than developing a free replacement. 
what made this program, bitkeeper, infamous and dangerous was its marketing approach: inviting high-profile free software projects to use it, so as to attract other paying users. 
mcvoy made the program available gratis to free software developers. 
this did not mean it was free software for them: they were privileged not to part with their money, but they still had to part with their freedom. 
they gave up the fundamental freedoms that define free software: freedom to run the program as you wish for any purpose, freedom to study and change the source code as you wish, freedom to make and redistribute copies, and freedom to publish modified versions. 
the free software movement has said, "think of "free speech," not "free beer"" since 1990. 
mcvoy said the opposite; he invited developers to focus on the lack of monetary price, instead of on freedom. 
a free software activist would dismiss this suggestion, but those in our community who value technical advantage above freedom and community were susceptible to it. 
mcvoy's great triumph was the adoption of this program for linux development. 
no free software project is more visible than linux. 
it is the kernel of the gnu/linux operating system, an essential component, and users often mistake it for the entire system. 
as mcvoy surely planned, the use of his program in linux development was powerful publicity for it. 
it was also, whether intentionally or not, a powerful political pr campaign, telling the free software community that freedom-denying software is acceptable as long as it's convenient. 
if we had taken that attitude towards unix in 1984, where would we be today? 
nowhere. 
if we had accepted using unix, instead of setting out to replace it, nothing like the gnu/linux system would exist. 
of course, the linux developers had practical reasons for what they did. 
i won't argue with those reasons; they surely know what's convenient for them. 
but they did not count, or did not value, how this would affect their freedom—or the rest of the community's efforts. 
a free kernel, even a whole free operating system, is not sufficient to use your computer in freedom; we need free software for everything else, too. 
free applications, free drivers, free bios: some of those projects face large obstacles—the need to reverse engineer formats or protocols or pressure companies to document them, or to work around or face down patent threats, or to compete with a network effect. 
success will require firmness and determination. 
a better kernel is desirable, to be sure, but not at the expense of weakening the impetus to liberate the rest of the software world. 
when the use of his program became controversial, mcvoy responded with distraction. 
for instance, he promised to release it as free software if the company went out of business. 
alas, that does no good as long as the company remains in business. 
linux developers responded by saying, "we'll switch to a free program when you develop a better one."
 this was an indirect way of saying, "we made the mess, but we won't clean it up."
 fortunately, not everyone in linux development considered a nonfree program acceptable, and there was continuing pressure for a free alternative. 
finally andrew tridgell developed an interoperating free program, so linux developers would no longer need to use a nonfree program. 
mcvoy first blustered and threatened, but ultimately chose to go home and take his ball with him: he withdrew permission for gratis use by free software projects, and linux developers will move to other software. 
the program they no longer use will remain unethical as long as it is nonfree, but they will no longer promote it, nor by using it teach others to give freedom low priority. 
we can begin to forget about that program. 
we should not forget the lesson we have learned from it: nonfree programs are dangerous to you and to your community. 
don't let them get a place in your life. 
is microsoft the great satan?. 
this article was given a major rewrite in 2009. 
the old version is also available. 
many people think of microsoft as the monster menace of the software industry. 
there is even a specific campaign to boycott microsoft. 
this feeling has intensified since microsoft expressed active hostility towards free software. 
in the free software movement, our perspective is different. 
we see that microsoft is doing something that mistreats software users: making software proprietary and thus denying users their rightful freedom. 
but microsoft is not alone in this; many other companies do the same thing to the users. 
if other companies manage to dominate fewer users than microsoft, that is not for lack of trying. 
this is not meant to excuse microsoft. 
rather, it is meant as a reminder that microsoft is the natural development of a software industry based on keeping users divided and subjugating them. 
when criticizing microsoft, we should not focus so narrowly on microsoft that we let other proprietary software developers off the hook. 
when we reject microsoft's proprietary software, that is not a boycott. 
the word "boycott" means rejection, as a protest, of products that are otherwise acceptable. 
rejecting a product because it hurts you is not a boycott, just ordinary rationality. 
to maintain your freedom, you need to reject the software that takes away freedom, regardless of who developed it or who distributes it. 
there is no need to reject microsoft non-software products, or services that you can use without proprietary software. 
(when you use a web service, whether microsoft's or not, watch out for nonfree javascript programs that it may try to slip into your browser.) when microsoft releases free programs, which it occasionally does, they are acceptable in theory. 
alas, most of them depend fundamentally on microsoft proprietary software, which we do need to reject, and that makes them useless for anyone that chooses to live in freedom. 
in the "halloween documents," leaked in october 1998, microsoft executives stated an intention to use various methods to obstruct the development of free software: specifically, designing secret protocols and file formats, and patenting algorithms and software features. 
these obstructionist policies were not new: microsoft, and many other software companies, had been doing them for years. 
secrecy and patents have obstructed us greatly, and they may be more damaging in the future. 
for the most part, the companies' main motivation in doing these things is to attack each other; now, it seems, we are specifically targeted. 
microsoft is using its patents directly to attack the free software community, and our community is fighting back. 
but microsoft's patents are not the only patents that threaten us (and software developers and users generally)—consider the harm that the mp3 patents have done. 
thus, defending against specific attacks is necessary but not sufficient. 
the only full solution is to eliminate software patents. 
other microsoft practices specifically harmful to the adoption of free software are the ones designed to build up social inertia that obstructs migration to gnu/linux. 
for instance, when microsoft "donates" copies of windows to schools, it converts these schools into tools for implanting a dependence on windows. 
there are indications that microsoft systematically plans these activities as a campaign against the adoption of gnu/linux. 
each windows "upgrade" augments microsoft's power over the users; microsoft plans it that way. 
and each one is a step forward in malicious features, which include digital restrictions management and back doors. 
so the fsf runs campaigns to warn users against "upgrading" to windows vista and windows 7. we aim to reduce the amount of inertia they will create. 
we don't hate microsoft, and we don't consider it the great satan. 
but we do recognize it as the company that has separated more users from their freedom than any other, and a powerful avowed enemy of computer users' freedom. 
we act accordingly. 
the microsoft antitrust trial and free software. 
with the microsoft antitrust trial moving toward a conclusion, the question of what to demand of microsoft if it loses is coming to the fore. 
ralph nader is even [when this was written, in march 1999] organizing a conference about the question (see appraising-microsoft.org). 
the obvious answers—to restrict contracts between microsoft and computer manufacturers, or to break up the company—will not make a crucial difference. 
the former might encourage the availability of computers with the gnu/linux system preinstalled, but that is happening anyway. 
the latter would mainly help other proprietary application developers compete, which would only offer users alternative ways to let go of their freedom. 
so i propose three remedies that would help enable free software operating systems such as gnu/linux compete technically while respecting users' freedom. 
these three remedies directly address the three biggest obstacles to development of free operating systems, and to giving them the capability of running programs written for windows. 
they also directly address the methods microsoft has said (in the "halloween documents") it will use to obstruct free software. 
it would be most effective to use all three of these remedies together. 
require microsoft to publish complete documentation of all interfaces between software components, all communications protocols, and all file formats. 
this would block one of microsoft's favorite tactics: secret and incompatible interfaces. 
to make this requirement really stick, microsoft should not be allowed to use a nondisclosure agreement with some other organization to excuse implementing a secret interface. 
the rule must be: if they cannot publish the interface, they cannot release an implementation of it. 
it would, however, be acceptable to permit microsoft to begin implementation of an interface before the publication of the interface specifications, provided that they release the specifications simultaneously with the implementation. 
enforcement of this requirement would not be difficult. 
if other software developers complain that the published documentation fails to describe some aspect of the interface, or how to do a certain job, the court would direct microsoft to answer questions about it. 
any questions about interfaces (as distinguished from implementation techniques) would have to be answered. 
similar terms were included in an agreement between ibm and the european community in 1984, settling another antitrust dispute. 
see www.cptech.org. 
require microsoft to use its patents for defense only, in the field of software. 
(if they happen to own patents that apply to other fields, those other fields could be included in this requirement, or they could be exempt.) this would block the other tactic microsoft mentioned in the halloween documents: using patents to block development of free software. 
we should give microsoft the option of using either self-defense or mutual defense. 
self defense means offering to cross-license all patents at no charge with anyone who wishes to do so. 
mutual defense means licensing all patents to a pool which anyone can join—even people who have no patents of their own. 
the pool would license all members' patents to all members. 
it is crucial to address the issue of patents, because it does no good to have microsoft publish an interface, if they have managed to work some patented wrinkle into it (or into the functionality it gives access to), such that the rest of us are not allowed to implement it. 
require microsoft not to certify any hardware as working with microsoft software, unless the hardware's complete specifications have been published, so that any programmer can implement software to support the same hardware. 
secret hardware specifications are not in general microsoft's doing, but they are a significant obstacle for the development of the free operating systems that can provide competition for windows. 
to remove this obstacle would be a great help. 
if a settlement is negotiated with microsoft, including this sort of provision in it is not impossible—it would be a matter of negotiation. 
this april, microsoft's ballmer announced a possible plan to release source code for some part of windows. 
it is not clear whether that would imply making it free software, or which part of windows it might be. 
but if microsoft does make some important part of windows free software, it could solve these problems as regards that part. 
(it could also be a contribution to the free software community, if the software in question could be useful for purposes other than running other proprietary microsoft software.) however, having the use as free software of a part of windows is less crucial than being permitted to implement all parts. 
the remedies proposed above are what we really need. 
they will clear the way for us to develop a truly superior alternative to microsoft windows, in whatever area microsoft does not make windows free software. 
microsoft's new monopoly. 
stallman this article was written in july 2005. 
microsoft adopted a different policy in 2006, so the specific policies described below and the specific criticisms of them are only of historical significance. 
the overall problem remains, however: microsoft's cunningly worded new policy does not give anyone clear permission to implement ooxml. 
european legislators who endorse software patents frequently claim that those wouldn't affect free software (or "open source"). 
microsoft's lawyers are determined to prove they are mistaken. 
leaked internal documents in 1998 said that microsoft considered the free software gnu/linux operating system (referred to therein as "linux") as the principal competitor to windows, and spoke of using patents and secret file formats to hold us back. 
because microsoft has so much market power, it can often impose new standards at will. 
it need only patent some minor idea, design a file format, programming language, or communication protocol based on it, and then pressure users to adopt it. 
then we in the free software community will be forbidden to provide software that does what these users want; they will be locked in to microsoft, and we will be locked out from serving them. 
previously microsoft tried to get its patented scheme for spam blocking adopted as an internet standard, so as to exclude free software from handling email. 
the standards committee in charge rejected the proposal, but microsoft said it would try to convince large isps to use the scheme anyway. 
now microsoft is planning to try something similar for word files. 
several years ago, microsoft abandoned its documented format for saving documents, and switched to a new format which was secret. 
however, the developers of free software word processors such as abiword and openoffice.org experimented assiduously for years to figure out the format, and now those programs can read most word files. 
but microsoft isn't licked yet. 
the next version of microsoft word will use formats that involve a technique that microsoft claims to hold a patent on. 
microsoft offers a royalty-free patent license for certain limited purposes, but it is so limited that it does not allow free software. 
here is the license. 
free software is defined as software that respects four fundamental freedoms: (0) freedom to run the software as you wish, (1) freedom to study the source code and modify it to do what you wish, (2) freedom to make and redistribute copies, and (3) freedom to publish modified versions. 
only programmers can directly exercise freedoms 1 and 3, but all users can exercise freedoms 0 and 2, and all users benefit from the modifications that programmers write and publish. 
distributing an application under microsoft's patent license imposes license terms that prohibit most possible modifications of the software. 
lacking freedom 3, the freedom to publish modified versions, it would not be free software. 
(i think it could not be "open source" software either, since that definition is similar; but it is not identical, and i cannot speak for the advocates of open source.) the microsoft license also requires inclusion of a specific statement. 
that requirement would not in itself prevent the program from being free: it is normal for free software to carry license notices that cannot be changed, and this statement could be included in one of them. 
the statement is biased and confusing, since it uses the term "intellectual property"; fortunately, one is not required to endorse the statement as true or even meaningful, only to include it. 
the software developer could cancel its misleading effect with a disclaimer like this: "the following misleading statement has been imposed on us by microsoft; please be advised that it is propaganda. 
see richard stallman's article on "intellectual property" for more explanation."
 however, the requirement to include a fixed piece of text is actually quite cunning, because anyone who does so has explicitly accepted and applied the restrictions of the microsoft patent license. 
the resulting program is clearly not free software. 
some free software licenses, such as the most popular gnu general public license (gnu gpl), forbid publication of a modified version if it isn't free software in the same way. 
(we call that the "liberty or death" clause, since it ensures the program will remain free or die.) to apply microsoft's license to a program under the gnu gpl would violate the program's license; it would be illegal. 
many other free software licenses permit nonfree modified versions. 
it wouldn't be illegal to modify such a program and publish the modified version under microsoft's patent license. 
but that modified version, with its modified license, wouldn't be free software. 
microsoft's patent covering the new word format is a us patent. 
it doesn't restrict anyone in europe; europeans are free to make and use software that can read this format. 
europeans that develop or use software currently enjoy an advantage over americans: americans can be sued for patent infringement for their software activities in the us, but the europeans cannot be sued for their activities in europe. 
europeans can already get us software patents and sue americans, but americans cannot get european software patents if europe doesn't allow them. 
all that will change if the european parliament authorizes software patents. 
microsoft will be one of thousands of foreign software patent holders that will bring their patents over to europe to sue the software developers and computer users there. 
of the 50,000-odd putatively invalid software patents issued by the european patent office, around 80 percent do not belong to europeans. 
the european parliament should vote to keep these patents invalid, and keep europeans safe. 
[2009 note]: the eu directive to allow software patents was rejected, but the european patent office has continued issuing them and some countries treat them as valid. 
see ffii.org for more information and to participate in the campaign against software patents in europe. 
is microsoft the great satan? 
(old version). 
there is an updated version of this article. 
many people think of microsoft as the monster menace of the software industry. 
there is even a campaign to boycott microsoft. 
this feeling has intensified since microsoft expressed active hostility towards free software. 
in the free software movement, our perspective is different. 
we see that microsoft is doing something that is bad for software users: making software proprietary and thus denying users their rightful freedom. 
but microsoft is not alone in this; almost all software companies do the same thing to the users. 
if other companies manage to dominate fewer users than microsoft, that is not for lack of trying. 
this is not meant to excuse microsoft. 
rather, it is meant as a reminder that microsoft is the natural development of a software industry based on dividing users and taking away their freedom. 
when criticizing microsoft, we must not exonerate the other companies that also make proprietary software. 
at the fsf, we don't run any proprietary software—not from microsoft or anyone else. 
in the "halloween documents," released at the end of october 1998, microsoft executives stated an intention to use various methods to obstruct the development of free software: specifically, designing secret protocols and file formats, and patenting algorithms and software features. 
these obstructionist policies are nothing new: microsoft, and many other software companies, have been doing them for years now. 
in the past, probably, their motivation was to attack each other; now, it seems, we are among the intended targets. 
but that change in motivation has no practical consequence, because secret conventions and software patents obstruct everyone, regardless of the "intended target."
 secrecy and patents do threaten free software. 
they have obstructed us greatly in the past, and we must expect they will do so even more in the future. 
but this is no different from what was going to happen even if microsoft had never noticed us. 
the only real significance of the "halloween documents" is that microsoft seems to think that the gnu/linux system has the potential for great success. 
thank you, microsoft, and please get out of the way. 
on the microsoft verdict. 
many gnu/linux users think of the system as competition for microsoft. 
but the free software movement aims to solve a problem that is much bigger than microsoft: proprietary, nonfree software, designed to keep users helpless and prohibit cooperation. 
microsoft is the largest developer of such software, but many other companies treat the users' freedom just as badly; if they have not shackled as many users as microsoft, it is not for lack of trying. 
since microsoft is just a part of the problem, its defeat in the anti-trust lawsuit is not necessarily a victory for free software. 
whether the outcome of this suit helps free software and promotes users' freedom depends of the specific remedies imposed on microsoft by the judge. 
if the remedies are designed to enable other companies compete in offering proprietary, nonfree software, that will do the free world no particular good. 
alternative possible masters is not freedom. 
and competition could lead them to do a "better" job, better in a narrow technical sense; then it could be harder for us to "compete" with them technically. 
we will continue to offer the user one thing those companies do not—freedom—and users who value freedom will continue to choose free software for that reason. 
but users who do not value freedom, and choose a system based on mere convenience, might be enticed away to "improved" proprietary systems. 
splitting microsoft into separate companies could also endanger free software, because these smaller companies, no longer held in check by the public readiness to condemn microsoft, might see fit to attack free software more harshly than the present unified microsoft does. 
i've proposed remedies for this case that would help free software compete with microsoft: for example, requiring microsoft to publish documentation for all interfaces, and to use patents only for defense, not for aggression. 
these remedies would block the use of the weapons that microsoft plans to use against us (according to the "halloween documents" leaked from within microsoft which spelled out how they plan to impede development of the gnu/linux system). 
when we see what remedies the judge chooses, we will get an idea of whether the case has been helpful or harmful to the free software movement. 
misinterpreting copyright—a series of errors. 
stallman something strange and dangerous is happening in copyright law. 
under the us constitution, copyright exists to benefit users—those who read books, listen to music, watch movies, or run software—not for the sake of publishers or authors. 
yet even as people tend increasingly to reject and disobey the copyright restrictions imposed on them "for their own benefit," the us government is adding more restrictions, and trying to frighten the public into obedience with harsh new penalties. 
how did copyright policies come to be diametrically opposed to their stated purpose? 
and how can we bring them back into alignment with that purpose? 
to understand, we should start by looking at the root of united states copyright law: the us constitution. 
copyright in the us constitution. 
when the us constitution was drafted, the idea that authors were entitled to a copyright monopoly was proposed—and rejected. 
the founders of our country adopted a different premise, that copyright is not a natural right of authors, but an artificial concession made to them for the sake of progress. 
the constitution gives permission for a copyright system with this paragraph (article i, section 8): [congress shall have the power] to promote the progress of science and the useful arts, by securing for limited times to authors and inventors the exclusive right to their respective writings and discoveries. 
the supreme court has repeatedly affirmed that promoting progress means benefit for the users of copyrighted works. 
for example, in fox film v. doyal, the court said, the sole interest of the united states and the primary object in conferring the [copyright] monopoly lie in the general benefits derived by the public from the labors of authors. 
this fundamental decision explains why copyright is not required by the constitution, only permitted as an option—and why it is supposed to last for "limited times."
 if copyright were a natural right, something that authors have because they deserve it, nothing could justify terminating this right after a certain period of time, any more than everyone's house should become public property after a certain lapse of time from its construction. 
the "copyright bargain". 
the copyright system works by providing privileges and thus benefits to publishers and authors; but it does not do this for their sake. 
rather, it does this to modify their behavior: to provide an incentive for authors to write more and publish more. 
in effect, the government spends the public's natural rights, on the public's behalf, as part of a deal to bring the public more published works. 
legal scholars call this concept the "copyright bargain."
 it is like a government purchase of a highway or an airplane using taxpayers' money, except that the government spends our freedom instead of our money. 
but is the bargain as it exists actually a good deal for the public? 
many alternative bargains are possible; which one is best? 
every issue of copyright policy is part of this question. 
if we misunderstand the nature of the question, we will tend to decide the issues badly. 
the constitution authorizes granting copyright powers to authors. 
in practice, authors typically cede them to publishers; it is usually the publishers, not the authors, who exercise these powers and get most of the benefits, though authors may get a small portion. 
thus it is usually the publishers that lobby to increase copyright powers. 
to better reflect the reality of copyright rather than the myth, this article refers to publishers rather than authors as the holders of copyright powers. 
it also refers to the users of copyrighted works as "readers," even though using them does not always mean reading, because "the users" is remote and abstract. 
the first error: "striking a balance". 
the copyright bargain places the public first: benefit for the reading public is an end in itself; benefits (if any) for publishers are just a means toward that end. 
readers' interests and publishers' interests are thus qualitatively unequal in priority. 
the first step in misinterpreting the purpose of copyright is the elevation of the publishers to the same level of importance as the readers. 
it is often said that us copyright law is meant to "strike a balance" between the interests of publishers and readers. 
those who cite this interpretation present it as a restatement of the basic position stated in the constitution; in other words, it is supposed to be equivalent to the copyright bargain. 
but the two interpretations are far from equivalent; they are different conceptually, and different in their implications. 
the balance concept assumes that the readers' and publishers' interests differ in importance only quantitatively, in how much weight we should give them, and in what actions they apply to. 
the term "stakeholders" is often used to frame the issue in this way; it assumes that all kinds of interest in a policy decision are equally important. 
this view rejects the qualitative distinction between the readers' and publishers' interests which is at the root of the government's participation in the copyright bargain. 
the consequences of this alteration are far-reaching, because the great protection for the public in the copyright bargain—the idea that copyright privileges can be justified only in the name of the readers, never in the name of the publishers—is discarded by the "balance" interpretation. 
since the interest of the publishers is regarded as an end in itself, it can justify copyright privileges; in other words, the "balance" concept says that privileges can be justified in the name of someone other than the public. 
as a practical matter, the consequence of the "balance" concept is to reverse the burden of justification for changes in copyright law. 
the copyright bargain places the burden on the publishers to convince the readers to cede certain freedoms. 
the concept of balance reverses this burden, practically speaking, because there is generally no doubt that publishers will benefit from additional privilege. 
unless harm to the readers can be proved, sufficient to "outweigh" this benefit, we are led to conclude that the publishers are entitled to almost any privilege they request. 
since the idea of "striking a balance" between publishers and readers denies the readers the primacy they are entitled to, we must reject it. 
balancing against what?. 
when the government buys something for the public, it acts on behalf of the public; its responsibility is to obtain the best possible deal—best for the public, not for the other party in the agreement. 
for example, when signing contracts with construction companies to build highways, the government aims to spend as little as possible of the public's money. 
government agencies use competitive bidding to push the price down. 
as a practical matter, the price cannot be zero, because contractors will not bid that low. 
although not entitled to special consideration, they have the usual rights of citizens in a free society, including the right to refuse disadvantageous contracts; even the lowest bid will be high enough for some contractor to make money. 
so there is indeed a balance, of a kind. 
but it is not a deliberate balancing of two interests each with claim to special consideration. 
it is a balance between a public goal and market forces. 
the government tries to obtain for the taxpaying motorists the best deal they can get in the context of a free society and a free market. 
in the copyright bargain, the government spends our freedom instead of our money. 
freedom is more precious than money, so government's responsibility to spend our freedom wisely and frugally is even greater than its responsibility to spend our money thus. 
governments must never put the publishers' interests on a par with the public's freedom. 
not "balance" but "trade-off". 
the idea of balancing the readers' interests against the publishers' is the wrong way to judge copyright policy, but there are indeed two interests to be weighed: two interests of the readers. 
readers have an interest in their own freedom in using published works; depending on circumstances, they may also have an interest in encouraging publication through some kind of incentive system. 
the word "balance," in discussions of copyright, has come to stand as shorthand for the idea of "striking a balance" between the readers and the publishers. 
therefore, to use the word "balance" in regard to the readers' two interests would be confusing.[1] we need another term. 
in general, when one party has two goals that partly conflict, and cannot completely achieve both of them, we call this a "trade-off."
 therefore, rather than speaking of "striking the right balance" between parties, we should speak of "finding the right trade-off between spending our freedom and keeping it."
 the second error: maximizing one output. 
the second mistake in copyright policy consists of adopting the goal of maximizing—not just increasing—the number of published works. 
the erroneous concept of "striking a balance" elevated the publishers to parity with the readers; this second error places them far above the readers. 
when we purchase something, we do not generally buy the whole quantity in stock or the most expensive model. 
instead we conserve funds for other purchases, by buying only what we need of any particular good, and choosing a model of sufficient rather than highest quality. 
the principle of diminishing returns suggests that spending all our money on one particular good is likely to be an inefficient allocation of resources; we generally choose to keep some money for another use. 
diminishing returns applies to copyright just as to any other purchase. 
the first freedoms we should trade away are those we miss the least, and whose sacrifice gives the largest encouragement to publication. 
as we trade additional freedoms that cut closer to home, we find that each trade is a bigger sacrifice than the last, while bringing a smaller increment in literary activity. 
well before the increment becomes zero, we may well say it is not worth its incremental price; we would then settle on a bargain whose overall result is to increase the amount of publication, but not to the utmost possible extent. 
accepting the goal of maximizing publication rejects all these wiser, more advantageous bargains in advance—it dictates that the public must cede nearly all of its freedom to use published works, for just a little more publication. 
the rhetoric of maximization. 
in practice, the goal of maximizing publication regardless of the cost to freedom is supported by widespread rhetoric which asserts that public copying is illegitimate, unfair, and intrinsically wrong. 
for instance, the publishers call people who copy "pirates," a smear term designed to equate sharing information with your neighbor with attacking a ship. 
(this smear term was formerly used by authors to describe publishers who found lawful ways to publish unauthorized editions; its modern use by the publishers is almost the reverse.) this rhetoric directly rejects the constitutional basis for copyright, but presents itself as representing the unquestioned tradition of the american legal system. 
the "pirate" rhetoric is typically accepted because it so pervades the media that few people realize how radical it is. 
it is effective because if copying by the public is fundamentally illegitimate, we can never object to the publishers' demand that we surrender our freedom to do so. 
in other words, when the public is challenged to show why publishers should not receive some additional power, the most important reason of all—"we want to copy"—is disqualified in advance. 
this leaves no way to argue against increasing copyright power except using side issues. 
hence, opposition to stronger copyright powers today almost exclusively cites side issues, and never dares cite the freedom to distribute copies as a legitimate public value. 
as a practical matter, the goal of maximization enables publishers to argue that "a certain practice is reducing our sales—or we think it might—so we presume it diminishes publication by some unknown amount, and therefore it should be prohibited."
 we are led to the outrageous conclusion that the public good is measured by publishers' sales: what's good for general media is good for the usa. 
the third error: maximizing publishers' power. 
once the publishers have obtained assent to the policy goal of maximizing publication output at any cost, their next step is to infer that this requires giving them the maximum possible powers—making copyright cover every imaginable use of a work, or applying some other legal tool such as "shrink wrap" licenses to equivalent effect. 
this goal, which entails the abolition of "fair use" and the "right of first sale," is being pressed at every available level of government, from states of the us to international bodies. 
this step is erroneous because strict copyright rules obstruct the creation of useful new works. 
for instance, shakespeare borrowed the plots of some of his plays from works others had published a few decades before, so if today's copyright law had been in effect, his plays would have been illegal. 
even if we wanted the highest possible rate of publication, regardless of cost to the public, maximizing publishers' power is the wrong way to get it. 
as a means of promoting progress, it is self-defeating. 
the results of the three errors. 
the current trend in copyright legislation is to hand publishers broader powers for longer periods of time. 
the conceptual basis of copyright, as it emerges distorted from the series of errors, rarely offers a basis for saying no. 
legislators give lip service to the idea that copyright serves the public, while in fact giving publishers whatever they ask for. 
for example, here is what senator hatch said when introducing s. 483, a 1995 bill to increase the term of copyright by 20 years: i believe we are now at such a point with respect to the question of whether the current term of copyright adequately protects the interests of authors and the related question of whether the term of protection continues to provide a sufficient incentive for the creation of new works of authorship. 
this bill extended the copyright on already published works written since the 1920s. 
this change was a giveaway to publishers with no possible benefit to the public, since there is no way to retroactively increase now the number of books published back then. 
yet it cost the public a freedom that is meaningful today—the freedom to redistribute books from that era. 
note the use of the propaganda term, "protect," which embodies the second of the three errors. 
the bill also extended the copyrights of works yet to be written. 
for works made for hire, copyright would last 95 years instead of the present 75 years. 
theoretically this would increase the incentive to write new works; but any publisher that claims to need this extra incentive should be required substantiate the claim with projected balance sheets for 75 years in the future. 
needless to say, congress did not question the publishers' arguments: a law extending copyright was enacted in 1998. 
it was officially called the sonny bono copyright term extension act, named after one of its sponsors who died earlier that year. 
we usually call it the mickey mouse copyright act, since we presume its real motive was to prevent the copyright on the appearance of mickey mouse from expiring. 
bono's widow, who served the rest of his term, made this statement: actually, sonny wanted the term of copyright protection to last forever. 
i am informed by staff that such a change would violate the constitution. 
i invite all of you to work with me to strengthen our copyright laws in all of the ways available to us. 
as you know, there is also jack valenti's proposal for term to last forever less one day. 
perhaps the committee may look at that next congress. 
the supreme court later heard a case that sought to overturn the law on the grounds that the retroactive extension fails to serve the constitution's goal of promoting progress. 
the court responded by abdicating its responsibility to judge the question; on copyright, the constitution requires only lip service. 
another law, passed in 1997, made it a felony to make sufficiently many copies of any published work, even if you give them away to friends just to be nice. 
previously this was not a crime in the us at all. 
an even worse law, the digital millennium copyright act (dmca), was designed to bring back what was then called "copy protection"—now known as drm (digital restrictions management)—which users already detested, by making it a crime to defeat the restrictions, or even publish information about how to defeat them. 
this law ought to be called the "domination by media corporations act" because it effectively offers publishers the chance to write their own copyright law. 
it says they can impose any restrictions whatsoever on the use of a work, and these restrictions take the force of law provided the work contains some sort of encryption or license manager to enforce them. 
one of the arguments offered for this bill was that it would implement a recent treaty to increase copyright powers. 
the treaty was promulgated by the world intellectual property organization, an organization dominated by copyright- and patent-holding interests, with the aid of pressure from the clinton administration; since the treaty only increases copyright power, whether it serves the public interest in any country is doubtful. 
in any case, the bill went far beyond what the treaty required. 
libraries were a key source of opposition to this bill, especially to the aspects that block the forms of copying that are considered fair use. 
how did the publishers respond? 
former representative pat schroeder, now a lobbyist for the association of american publishers, said that the publishers "could not live with what [the libraries were] asking for."
 since the libraries were asking only to preserve part of the status quo, one might respond by wondering how the publishers had survived until the present day. 
congressman barney frank, in a meeting with me and others who opposed this bill, showed how far the us constitution's view of copyright has been disregarded. 
he said that new powers, backed by criminal penalties, were needed urgently because the "movie industry is worried," as well as the "music industry" and other "industries."
 i asked him, "but is this in the public interest?"
 his response was telling: "why are you talking about the public interest? 
these creative people don't have to give up their rights for the public interest!"
 the "industry" has been identified with the "creative people" it hires, copyright has been treated as its entitlement, and the constitution has been turned upside down. 
the dmca was enacted in 1998. 
as enacted, it says that fair use remains nominally legitimate, but allows publishers to prohibit all software or hardware that you could practice it with. 
effectively, fair use is prohibited. 
based on this law, the movie industry has imposed censorship on free software for reading and playing dvds, and even on the information about how to read them. 
in april 2001, professor edward felten of princeton university was intimidated by lawsuit threats from the recording industry association of america (riaa) into withdrawing a scientific paper stating what he had learned about a proposed encryption system for restricting access to recorded music. 
we are also beginning to see e-books that take away many of readers' traditional freedoms—for instance, the freedom to lend a book to your friend, to sell it to a used book store, to borrow it from a library, to buy it without giving your name to a corporate data bank, even the freedom to read it twice. 
encrypted e-books generally restrict all these activities—you can read them only with special secret software designed to restrict you. 
i will never buy one of these encrypted, restricted e-books, and i hope you will reject them too. 
if an e-book doesn't give you the same freedoms as a traditional paper book, don't accept it! 
anyone independently releasing software that can read restricted e-books risks prosecution. 
a russian programmer, dmitry sklyarov, was arrested in 2001 while visiting the us to speak at a conference, because he had written such a program in russia, where it was lawful to do so. 
now russia is preparing a law to prohibit it too, and the european union recently adopted one. 
mass-market e-books have been a commercial failure so far, but not because readers chose to defend their freedom; they were unattractive for other reasons, such as that computer display screens are not easy surfaces to read from. 
we can't rely on this happy accident to protect us in the long term; the next attempt to promote e-books will use "electronic paper"—book-like objects into which an encrypted, restricted e-book can be downloaded. 
if this paper-like surface proves more appealing than today's display screens, we will have to defend our freedom in order to keep it. 
meanwhile, e-books are making inroads in niches: nyu and other dental schools require students to buy their textbooks in the form of restricted e-books. 
the media companies are not satisfied yet. 
in 2001, disney-funded senator hollings proposed a bill called the "security systems standards and certification act" (sssca)[2], which would require all computers (and other digital recording and playback devices) to have government-mandated copy-restriction systems. 
that is their ultimate goal, but the first item on their agenda is to prohibit any equipment that can tune digital hdtv unless it is designed to be impossible for the public to "tamper with" (i.e., modify for their own purposes). 
since free software is software that users can modify, we face here for the first time a proposed law that explicitly prohibits free software for a certain job. 
prohibition of other jobs will surely follow. 
if the fcc adopts this rule, existing free software such as gnu radio would be censored. 
to block these bills and rules requires political action.[3] finding the right bargain. 
what is the proper way to decide copyright policy? 
if copyright is a bargain made on behalf of the public, it should serve the public interest above all. 
the government's duty when selling the public's freedom is to sell only what it must, and sell it as dearly as possible. 
at the very least, we should pare back the extent of copyright as much as possible while maintaining a comparable level of publication. 
since we cannot find this minimum price in freedom through competitive bidding, as we do for construction projects, how can we find it? 
one possible method is to reduce copyright privileges in stages, and observe the results. 
by seeing if and when measurable diminutions in publication occur, we will learn how much copyright power is really necessary to achieve the public's purposes. 
we must judge this by actual observation, not by what publishers say will happen, because they have every incentive to make exaggerated predictions of doom if their powers are reduced in any way. 
copyright policy includes several independent dimensions, which can be adjusted separately. 
after we find the necessary minimum for one policy dimension, it may still be possible to reduce other dimensions of copyright while maintaining the desired publication level. 
one important dimension of copyright is its duration, which is now typically on the order of a century. 
reducing the monopoly on copying to ten years, starting from the date when a work is published, would be a good first step. 
another aspect of copyright, which covers the making of derivative works, could continue for a longer period. 
why count from the date of publication? 
because copyright on unpublished works does not directly limit readers' freedom; whether we are free to copy a work is moot when we do not have copies. 
so giving authors a longer time to get a work published does no harm. 
authors (who generally do own the copyright prior to publication) will rarely choose to delay publication just to push back the end of the copyright term. 
why ten years? 
because that is a safe proposal; we can be confident on practical grounds that this reduction would have little impact on the overall viability of publishing today. 
in most media and genres, successful works are very profitable in just a few years, and even successful works are usually out of print well before ten. 
even for reference works, whose useful life may be many decades, ten-year copyright should suffice: updated editions are issued regularly, and many readers will buy the copyrighted current edition rather than copy a ten-year-old public domain version. 
ten years may still be longer than necessary; once things settle down, we could try a further reduction to tune the system. 
at a panel on copyright at a literary convention, where i proposed the ten-year term, a noted fantasy author sitting beside me objected vehemently, saying that anything beyond five years was intolerable. 
but we don't have to apply the same time span to all kinds of works. 
maintaining the utmost uniformity of copyright policy is not crucial to the public interest, and copyright law already has many exceptions for specific uses and media. 
it would be foolish to pay for every highway project at the rates necessary for the most difficult projects in the most expensive regions of the country; it is equally foolish to "pay" for all kinds of art with the greatest price in freedom that we find necessary for any one kind. 
so perhaps novels, dictionaries, computer programs, songs, symphonies, and movies should have different durations of copyright, so that we can reduce the duration for each kind of work to what is necessary for many such works to be published. 
perhaps movies over one hour long could have a twenty-year copyright, because of the expense of producing them. 
in my own field, computer programming, three years should suffice, because product cycles are even shorter than that. 
another dimension of copyright policy is the extent of fair use: some ways of reproducing all or part of a published work that are legally permitted even though it is copyrighted. 
the natural first step in reducing this dimension of copyright power is to permit occasional private small-quantity noncommercial copying and distribution among individuals. 
this would eliminate the intrusion of the copyright police into people's private lives, but would probably have little effect on the sales of published works. 
(it may be necessary to take other legal steps to ensure that shrink-wrap licenses cannot be used to substitute for copyright in restricting such copying.) the experience of napster shows that we should also permit noncommercial verbatim redistribution to the general public—when so many of the public want to copy and share, and find it so useful, only draconian measures will stop them, and the public deserves to get what it wants. 
for novels, and in general for works that are used for entertainment, noncommercial verbatim redistribution may be sufficient freedom for the readers. 
computer programs, being used for functional purposes (to get jobs done), call for additional freedoms beyond that, including the freedom to publish an improved version. 
see "free software definition," in this book, for an explanation of the freedoms that software users should have. 
but it may be an acceptable compromise for these freedoms to be universally available only after a delay of two or three years from the program's publication. 
changes like these could bring copyright into line with the public's wish to use digital technology to copy. 
publishers will no doubt find these proposals "unbalanced"; they may threaten to take their marbles and go home, but they won't really do it, because the game will remain profitable and it will be the only game in town. 
as we consider reductions in copyright power, we must make sure media companies do not simply replace it with end-user license agreements. 
it would be necessary to prohibit the use of contracts to apply restrictions on copying that go beyond those of copyright. 
such limitations on what mass-market nonnegotiated contracts can require are a standard part of the us legal system. 
a personal note. 
i am a software designer, not a legal scholar. 
i've become concerned with copyright issues because there's no avoiding them in the world of computer networks, such as the internet. 
as a user of computers and networks for 30 years, i value the freedoms that we have lost, and the ones we may lose next. 
as an author, i can reject the romantic mystique of the author as semidivine creator, often cited by publishers to justify increased copyright powers for authors—powers which these authors will then sign away to publishers. 
most of this article consists of facts and reasoning that you can check, and proposals on which you can form your own opinions. 
but i ask you to accept one thing on my word alone: that authors like me don't deserve special power over you. 
if you wish to reward me further for the software or books i have written, i would gratefully accept a check—but please don't surrender your freedom in my name. 
footnotes. 
see julian sanchez’s article "the trouble with "balance" metaphors" for an examination of "how the analogy between sound judgment and balancing weights may constrain our thinking in unhealthy ways."
 since renamed to the unpronounceable cbdtpa, for which a good mnemonic is "consume, but don't try programming anything," but it really stands for the "consumer broadband and digital television promotion act."
 if you would like to help, i recommend the web sites defectivebydesign.org, publicknowledge.org and www.eff.org. 
this essay is published in free software, free society: the selected essays of richard m. stallman. 
speech for harvard journal of law & technology. 
href="#moglen">[*] february 23, 2004 - cambridge, ma, usa thank you. 
it's a great pleasure to be here. 
i want to thank the journal of law and technology and jonathan zittrain for combining to set things up for me in this delightful way. 
it is true that i feel somewhat overwhelmed at the prospect of trying to talk for any substantial length of time about a lawsuit that isn't going anywhere very much. 
i am, however, going to mention the sco lawsuit from time to time in my remarks. 
mr. 
mcbride, when he was here, was kind enough to mention me once or twice, and i am going to do him the same favor. 
i hope you will feel, those of you who followed the conversation, that i am responsive to his remarks, though i don't think that doing it in the form of he said, i say, would lead, as jonathan suggests, to a particularly intellectually challenging evening. 
free software, you will know, i am sure, that i didn't make this up, is free as in freedom, not free as in beer. 
one of the primary problems with the conversation we have been having about this lawsuit, in your distinguished speaker series this year, is that at least so far it had apparently been suggested that the goal of those of us who believe in the free software movement was primarily to prevent people from earning a profit in the computer industry. 
this results, it is sometimes suggested, from some wild antipathy to the idea of economic benefit or some particular antipathy to the idea that people ought to have incentives to do what they do. 
i shall along the way suggest that we believe very strongly in incentives, though we see the problem of incentive perhaps a little bit differently than mr. 
mcbride. 
but it isn't, after all, and we need to begin there, it isn't, after all, about making things free as in beer. 
it is about making things free as in freedom. 
the goal of the free software movement is to enable people to understand, to learn from, to improve, to adapt, and to share the technology that increasingly runs every human life. 
the fundamental belief in fairness here is not that it is fair that things should be free. 
it is that it is fair that we should be free and that our thoughts should be free, that we should be able to know as much about the world in which we live as possible, and that we should be as little as possible captive to other people's knowledge, beyond the appeal to our own understanding and initiative. 
this idea lay behind my dear friend and colleague, richard stallman's, intense desire, beginning in the early 1980's, to bring about a world in which all the computer software needed by anybody to do anything would be available on terms which permitted free access to the knowledge that that software contained and a free opportunity to make more knowledge and to improve on the existing technology by modification and sharing. 
this is a desire for a free evolution of technical knowledge. 
a descent by modification untrammeled by principles that forbid improvement, access and sharing. 
if you think about it, it sounds rather like a commitment to encourage the diffusion of science and the useful arts by promoting access to knowledge. 
in short, the idea of the free software movement is neither hostile to, nor in any sense at cross-purposes with, the 18th century ambition for the improvement of society and the human being through access to knowledge. 
the copyrights clause in article 1 section 8 is only one of the many ways in which those rather less realistic than usually pictured founding parents of ours participated in the great 18th century belief in the perfectability of the world and of human life. 
the copyrights clause is an particular legal embrace of the idea of perfectability through access to and the sharing of knowledge. 
we, however, the 21st century inheritors of that promise, live in a world in which there is some doubt as to whether property principles, strongly enforced, with their inevitable corollary of exclusion—this is mine, you cannot have it unless you pay whether property principles best further that shared goal of the me—perfectability of human life and society based around access to knowledge. 
our position has been for twenty years that to the extent that existing copyright rules encourage the diffusion of science and the useful arts, they were good. 
and to the extent that they discouraged the diffusion of knowledge and the useful arts, that they could be improved. 
we have, pardon me for taking credit for something, we have improved them, substantially, not by negating any of the existing rules of copyright. 
on the contrary, we have been quite scrupulous about that. 
one of the things which amuses me amidst the rhetoric that is now being thrown around, is how oddly orthodox i seem to me when i consider my weekly activities as a lawyer. 
though not necessarily welcome in los angeles, i find myself behaving very much like an awful lot of lawyers in los angeles. 
i want my clients' copyrights respected, and i spend a fairly large amount of tedious time trying to get people to play by the very rules embodied in the copyright act that i am supposedly so busy trying to destroy. 
free software is an attempt to use the 18th century principles for the encouragement of the diffusion of knowledge to transform the technical environment of human beings. 
and as jonathan says, my own personal opinion on the subject is that the early going in our experiment has worked out pretty well. 
it is because it has worked out pretty well that there is blowback from it, and one of the little pieces of that blowback is the controversy now roiling the world entitled sco against ibm, which apparently is supposed to become, mr. 
mcbride said it when he was here, sco against something called the linux community. 
i don't think that's actually what's happening, but it is certainly what mr. 
mcbride came here to say was happening. 
so i'd best talk for a moment or two about how we see the situation that mr. 
mcbride describes as a great test of whether free goods are somehow going to drive out the incentive to produce in the net. 
free software, of which the operating system kernel called linux is one very important example among thousands, free software is the single greatest technical reference library on planet earth, as of now. 
the reason i say that is that free software is the only corpus of information fixed in a tangible form, through which anyone, anywhere, can go from naivete to the state of the art in a great technical subject—what computers can be made to do—solely by consulting material that is freely available for adaptation and reuse, in any way that she or he may want. 
we enable learning all over the world by permitting people to experiment, not with toys, but with the actual real stuff on which all the good work is done. 
for that purpose, we are engaged in making an educational system and a human capital improvement system which brings about the promise of encouraging the diffusion of our science and useful art in a way which contributes to the perfectability of human beings. 
that's what we were trying to do, and we have done it. 
we are, as it happens, driving out of business a firm called the santa cruz operation [sic]—or sco ltd. 
that was not our intention. 
that's a result of something called the creative destruction potential of capitalism, once upon a time identified by joseph schumpeter. 
we are doing a thing better at lower cost than it is presently being done by those people using other people's money to do it. 
the result—celebrated everywhere that capitalism is actually believed in—is that existing firms are going to have to change their way of operation or leave the market. 
this is usually regarded as a positive outcome, associated with enormous welfare increases of which capitalism celebrates at every opportunity everywhere all the time in the hope that the few defects that capitalism may possess will be less prominently visible once that enormous benefit is carefully observed. 
mr. 
mcbride does not want to go out of business. 
this is understandable. 
mr. 
gates does not want to go out of business either. 
but they are both on the wrong side of a problem in the political economy of the 21st century. 
they see software as a product. 
in order to make their quote "business model" close quote work, software must be a thing which is scarce. 
and out of the scarcity of software there will be a price which can be extracted, which will include an economic rent, from which mr. 
mcbride has suggested somebody will be enabled to buy a second home. 
mr. 
mcbride thought it was the programmers who would be able to buy a second home but people who actually understand the current state of the software industry recognize that programmers are not buying second homes these days. 
i think mr mcbride means the executives who employ programmers and the financiers who employ executives to employ programmers will buy a second home on the software-is-product business model for a little while longer. 
we think that software is not a product, because we do not believe in excluding people from it. 
we think that software is a form of knowledge. 
the international business machines corporation, the hewlett packard corporation, and a number of other organizations either represented here in body or in spirit this evening have another theory, which is that software in the 21st century is a service, a form of public utility combined with knowledge about how to make best use of the utility, which enables economic growth in peoples' enterprises generally, from which there is a surplus to be used to pay the people who help you produce the surplus, by making the best possible use of the public utility. 
i think it would be appropriate to suggest, if you like, that where we now are is in a world, where, if i may employ a metaphor, mr. 
mcbride and his colleagues—i do mean those in redmond, as well as those in utah—think that roads should all be toll roads. 
the ability to get from here to there's a product. 
buy it, or we exclude you from it. 
others believe that highways should be public utilities. 
let us figure out how to use the public highways best, so that everybody can profit from them—from the reduction of the costs of transportations of goods and the provisions of services—and by the by, there will be plenty of money to pay traffic engineers and the people who fix the pot holes. 
we believe, for what little our view of the economics of the software market may be worth in the 21st century—after all we are the people who transformed it—we believe that the public utility service conception of software better reflects economic actuality in the 21st century. 
we are not surprised that mr. 
mcbride is going out of business on the other business model. 
mr. 
mcbride's claim is that he is going out of business because somebody has taken what belongs to him. 
that's a lawsuit. 
as it turns out, however, the people he believes have taken what don't belong to him aren't us. 
his theory is that various people promised at&t at various times that they would do or refrain from doing various things, that some of the people who promised at&t in the old days to do or refrain from doing various things broke those promises, and that out of the breaking of those promises, linux, a computer program distributed under free terms, benefitted. 
mr. 
mcbride may be right about that or he may be wrong. 
we do not know what the contents of those contracts are in general terms, and we do not even know, as mr. 
mcbride pointed out to you when he was here, that he is the beneficiary of those contracts. 
he is presently in litigation trying to prove that he has what he claims to have—certain contract rights which he claims were conveyed to him by novell. 
i have no opinion about whose rights those are, and i wish mr. 
mcbride luck in his litigation over that question. 
but what mr. 
mcbride has also claimed is that our creative works are somehow dominated by those contract disputes, dominated in the sense that he has claimed, though so far not behaved in concert with the claim, that users of free software are liable to him, or to his firm, on the basis of claims that grow out of the contractual relations between at&t, sequent, ibm, and others, over time. 
i have spent a fair amount of time tediously reflecting on whether each piece of the story, as mr. 
mcbride and his colleagues have told it, could amount to a copyright claim against third parties. 
i have spent that time because there were lots of third parties out there in the world who were concerned about assertions of copyright problems that mr. 
mcbride was making. 
i have confronted wraithlike examples of what were said to be derivative work but weren't derivative work under copyright law, or asserted copyright claims that turned out to be based on code that nobody owned ascertainably and had been in the public domain for a lengthy period of time, or code that mr. 
mcbride claimed he was entitled to prevent people to stop using long after he had deliberately given to people that very code under promises that they could use it, copy, modify it and distribute any way that they want. 
and bit by bit, i have found myself unable to discover a single way in which mr. 
mcbride's firm could claim against third parties, not those who had ever been in privity of contract with at&t or its successors over code in the unix operating system, anything that could force them to pay damages or stop them from using free software. 
this is the thing we call sco, not a lawsuit actually brought on the basis of promises exchanged between ibm and at&t, but a mysterious belief that somewhere out in the world tens of thousands of people might have to stop using billions of dollars worth of software that we made it possible for them to have at marginal cost solely because of some agreement between at&t and somebody else to which mr mcbride's firm is a successor in interest. 
i see no substance to that claim. 
and i am prepared, under the guidance of your searching and hostile questioning, to explain bit by bit why i think that's true. 
but i have published those various inquiries, and i don't want to recapitulate them here this evening. 
i think that that would be a poor use of our time together. 
at www.gnu.org/philosophy/sco, all of it in lower case letters, you will find the various papers that i have written and that mr. 
stallman has written on these subjects, and there i hope we will have taken up in detail all the various points. 
but it's hard to resist talking about the united states supreme court in a classroom at harvard law school. 
and so, for just a moment, i do want to engage in a little court watching with you. 
mr. 
mcbride, when he was here, had much to say about a case called eldred against ashcroft, in which mr. 
mcbride discovers that the united states supreme court came out 7-2 against free software and in favor of capitalism [laughter from audience]. 
the odd thing is that on the very day when mr. 
mcbride was standing here discussing that subject with you, i was in los angeles discussing the very same thing with a fellow called kevin mcbride, mr. 
mcbride's brother and the actual author of the document from which mr. 
mcbride was speaking. 
kevin mcbride has the advantage in this discussion of being a lawyer, which is a little bit of help in discussing the united states supreme court. 
but it is not quite enough help. 
the primary trick in discussing cases—i shrink from saying that even in this room where i have taught first-year law students—the primary trick in discussing cases is to separate holding from dicta, a job with which many lugubrious septembers and octobers have been occupied by lawyers all over the planet and by every single one of you here. 
the mcbrides, jointly—i feel sometimes as though i'm in a quentin tarantino movie of some sort with them [laughter]—the mcbrides have failed to distinguish adequately between dicta and holding. 
i do not like eldred against ashcroft. 
i think it was wrongly decided. 
i filed a brief in it, amicus curiae, and i assisted my friend and colleague larry lessig in the presentation of the main arguments which did not, regrettably, succeed. 
oddly enough, and i will take you through this just enough to show, oddly enough, it is the position that we were taking in eldred against ashcroft, which if you stick to holding rather than dicta, would be favorable to the position now being urged by mr. 
mcbride. 
what happened in eldred against ashcroft, as opposed to the window dressing of it, is actually bad for the argument that mr. 
mcbride has been presenting, whichever mr. 
mcbride it is. 
but they have not thought this through enough. 
let me show you why. 
the grave difficulty that sco has with free software isn't their attack; it's the inadequacy of their defense. 
in order to defend yourself in a case in which you are infringing the freedom of free software, you have to be prepared to meet a call that i make reasonably often with my colleagues at the foundation who are here tonight. 
that telephone call goes like this: "mr. 
potential defendant, you are distributing my client's copyrighted work without permission. 
please stop. 
and if you want to continue to distribute it, we'll help you to get back your distribution rights, which have terminated by your infringement, but you are going to have to do it the right way."
 at the moment that i make that call, the potential defendant's lawyer now has a choice. 
he can cooperate with us, or he can fight with us. 
and if he goes to court and fights with us, he will have a second choice before him. 
we will say to the judge, "judge, mr. 
defendant has used our copyrighted work, copied it, modified it and distributed it without permission. 
please make him stop."
 one thing that the defendant can say is, "you're right. 
i have no license."
 defendants do not want to say that, because if they say that they lose. 
so defendants, when they envision to themselves what they will say in court, realize that what they will say is, "but judge, i do have a license. 
it's this here document, the gnu gpl. 
general public license," at which point, because i know the license reasonably well, and i'm aware in what respect he is breaking it, i will say, "well, judge, he had that license but he violated its terms and under section 4 of it, when he violated its terms, it stopped working for him."
 but notice that in order to survive moment one in a lawsuit over free software, it is the defendant who must wave the gpl. 
it is his permission, his master key to a lawsuit that lasts longer than a nanosecond. 
this, quite simply, is the reason that lies behind the statement you have heard—mr. 
mcbride made it here some weeks ago—that there has never been a court test of the gpl. 
to those who like to say there has never been a court test of the gpl, i have one simple thing to say: don't blame me. 
i was perfectly happy to roll any time. 
it was the defendants who didn't want to do it. 
and when for ten solid years, people have turned down an opportunity to make a legal argument, guess what? 
it isn't any good. 
the gpl has succeeded for the last decade, while i have been tending it, because it worked, not because it failed or was in doubt. 
mr. 
mcbride and his colleagues now face that very same difficulty, and the fellow on the other side is ibm. 
a big, rich, powerful company that has no intention of letting go. 
they have distributed the operating system kernel program called linux. 
that is, sco has. 
they continue to do so to their existing customers because they have a contractual responsibility to provide maintenance. 
when they distribute that program called linux, they are distributing the work of thousands of people, and they are doing so without a license, because they burned their license down when they tried to add terms to it, by charging additional license fees in violation of sections 2 and 6 of the gpl. 
under section 4 of the gpl, when they violated it, they lost their right to distribute, and ibm has said as a counterclaim in its lawsuit, "judge, they're distributing our copyrighted work, and they don't have any permission. 
make them stop."
 if sco played smart, they would have said, "but your honor, we do have a license. 
it's the gnu gpl."
 now for reasons that we could get into but needn't, they didn't want to do that, possibly because it would have affected adversely their other claims in their lawsuit, or possibly because they had taken a 10 million dollar investment from microsoft, but we'll talk about that a little further, i'm sure, in the question period. 
at any rate, they didn't say that. 
what they said back is, "but judge, the gnu gpl is a violation of the united states constitution, the copyright law, the export control law," and i have now forgotten whether or not they also said the united nations charter of the rights of man. 
[laughter] at the moment, we confine ourselves solely to the question whether the gpl violates the united states constitution. 
i am coming back to eldred against ashcroft along the way. 
in eldred against ashcroft, 435 congressmen and a hundred senators had been bribed to make copyright eternal in a tricky way. 
the bribe, which of course was perfectly legal and went by the name of campaign contributions, was presented to the congress for a copyright term extension. 
in 1929, "steamboat willy" first brought before the public a creature called mickey mouse. 
the corporate authorship term under copyright being then, as almost now, 75 years, had it not been for action by congress in the year 2004, mickey mouse would have escaped control of ownership, at least under the copyright law. 
this, of course, necessitated major legal reform to prevent the escape of mickey mouse into the public domain. 
copyright term extension now provides that, whether or not a sonny bono skis into a tree again in the next ten years or so, every once in a while congress will extend the term of copyrights a little while longer. 
and then, as the ball approaches midnight in times square, they'll extend it a little longer. 
and so on and so on. 
nothing need ever escape into the public domain again, least of all mickey mouse. 
professor lessig, eric eldred, i and lots of other otherwise sensible people in the united states thought that this did not actually conform to the grand idea of the perfectability of human beings through the sharing of information. 
we doubted that securing perpetual ownership a slice at a time was actually a form of encouraging the diffusion of science and the useful arts, and we suggested to the supreme court that on this basis alone, the copyright term extension act should fall. 
we were, as mr. 
mcbride rightly points out, soundly repudiated. 
it turns out that there's no such thing as an unconstitutional copyright rule, if congress passes it, and if it observes the distinction between expression and idea, which the supreme court says is the constitutional guarantee that copyright does not violate the freedom of expression, and provided that fair use rights are adequately maintained. 
in short, the actual holding of eldred against ashcroft is, congress can make such copyright law as it wants, and all licenses issued under the presumptively constitutional copyright law are beyond constitutional challenge. 
i have news for mr. 
mcbride. 
the existing copyright law is constitutional and our license, which fully observes all the requirements that the copyright law places upon it, are also presumptively constitutional. 
only in the world in which we succeeded in eldred against ashcroft, in which if you like there would be substantive due process review of copyright licenses to see whether they met the form of copyright called for in article 1 section 8, could mr. 
mcbride and friends even stand in a united states courtroom and argue that a copyrights license is unconstitutional. 
regrettably for mr. 
mcbride, in other words, we lost eldred against ashcroft, and the very claim he now wishes to make perished, along with some more worthwhile claims, at that moment, at least until such time as the supreme court changes the holding in eldred against ashcroft. 
mr. 
mcbride takes a great deal of cold comfort from the pro-capitalist rhetoric in which justice ginsberg announced the decision of the supreme court. 
and, as yet another disgruntled observer of eldred against ashcroft, i wish him luck with his cold comfort, but he and i were on the same side of that case, little as he knows it, and the legal arguments that he would now like to present unfortunately failed. 
mind you, even if he were allowed to present to the court the idea that copyright licenses should be judged for their squareness with constitutional policy, we would triumphantly prevail. 
there is no copyright license in the united states today, i will lay this down without further demonstration but we can talk about it if you like, there is no copyright license in the united states today more fitting to thomas jefferson's idea of copyright or indeed to the conception of copyright contained in article 1 section 8, than ours. 
for we are pursuing an attempt at the diffusion of knowledge and the useful arts which is already proving far more effective at diffusing knowledge than all of the profit-motivated proprietary software distribution being conducted by the grandest and best funded monopoly in the history of the world. 
but, sorrily for us all, mr. 
mcbride will not get us to the stage where we are allowed to tell that to the united states supreme court, where we would prevail gloriously, because the united states supreme court's already decided that copyright law is presumptively constitutional as soon as congressmen have taken the campaign contributions, held the vote, and passed the resulting gumball-like statute to the white house for the obligatory stamping. 
but i welcome mr. 
mcbride to the campaign for a less restrictive copyright in the united states, as soon as he actually figures out, from the legal point of view, which side his bread is buttered. 
unfortunately, as you all realize, we cannot hold our breaths waiting for enlightenment to strike. 
if only mr. 
mcbride attended harvard law school. 
that's, i think, enough about sco, truly, though i am delighted to answer your questions in due course about it. 
it's actually a copyright lawsuit desert. 
there aren't any copyright claims in it. 
there are some contract claims between ibm and sco, and those will, in due course, be adjusted by the courts, and i look forward with a moderate degree of interest to the outcome. 
a threat to the freedom of free software, it ain't. 
one hell of a nuisance it most certainly is. 
and i, unfortunately, expect to continue to spend a good deal of my time abating the nuisance, but without much sense of the presence of a hovering threat to the things i really care about, of which this is not a very good one. 
so instead i want to talk about the legal future of free software as it actually is, rather than as mr. 
mcbride sees it, some titanic clash between the american way of life and whatever it is we're supposed to be. 
i should say about that titanic clash between the american way of life and whoever we are that it rings familiar to me. 
increasingly i listen to mr. 
mcbride and i hear mr. 
ballmer, as perhaps you do as well. 
that is to say, i treat sco now as press agentry for the microsoft monopoly, which has deeper pockets and a longer-term concern with what we are doing. 
microsoft's a very wealthy corporation, and it could succeed on a business model of software-as-a-public utility surrounded by services in the 21st century. 
but for all the profound depth of mr. 
gates' mind, the idea of human freedom is one of those things which doesn't register very well with him. 
and the idea of transforming his business into a service business, for reasons that are, i think, accessible to us all, doesn't appeal. 
therefore, for the survival of the microsoft monopoly, and i do actually mean its survival, the theory being presented by mr. 
mcbride that we are doing something horrid to the american way of life must prevail. 
regrettably for microsoft, it won't, because what we are actually doing is more apparent to the world than that propagandistic view will allow for. 
we at any rate have to go on about our business, which is encouraging the freedom of knowledge and in particular the freedom of technical knowledge, and in doing that, we have to confront the actual challenges presented to us by the world in which we live (which aren't sco), and so for just a few more moments i want to talk about those. 
software is, in our phrase, free, libre. 
that is to say, we now have a body of software accessible to everybody on earth so robust and so profound in its possibilities that we are a few man months away from doing whatever it is that anybody wants to do with computers all the time. 
and of course new things are constantly coming up that people would like to do and they are doing them. 
in this respect—i say this with enormous satisfaction—in this respect the free software movement has taken hold and is now ineradicably part of the 21st century. 
but there are challenges to the freedom of free software which we need to deal with. 
patent law, unlike copyright law, presents certain features which are egregious for the freedom of technical knowledge. 
if the copyright law presents a workable form of the great 18th century ambition of the perfectability of human kind, the patent law regrettably does not. 
this is not surprising, 18th century thinkers were a little dubious about the patent law as well. 
they had a concern for statutory monopolies and a deep history of english law that made them worry about them very much. 
patent law in the 21st century is a collection of evil nuisances. 
there's no question about it. 
and in the world of software where we exist, there are some particularly unfortunate characteristics of the way that the patent law works. 
we are going to have to work hard to make sure that the legitimate scope of patent, which is present, but which is small, is not expanded by careless administrators any further in the course of the 21st century to cover the ownership of ideas merely because those ideas are expressed in computer programming languages rather than in, say, english or mathematics. 
this is work for us, and it is work for us which a lot of smart lawyers are doing, but they are doing it around the world in various licenses and other legal structures connected with software in inconsistent ways. 
and the inconsistency among the ways in which lawyers are attempting to cope with the threats posed to software by patents are a serious difficulty for us. 
we need to conduct a very high-level seminar in the next five years around the world over the relationship between patentability and free software ideas and get square for ourselves what license terms and ways of working minimize the risks posed by patents. 
there is what i would characterize at the moment as a constructive diversity of views on that subject. 
but the diversity will have to be thinned a little bit through an improvement of our thought processes if we are by the end of this decade to have done what we need to do in subduing the growth of inappropriate patenting and its effect on our particular form of human knowledge enhancement. 
as you are aware, and as i am spending a year writing a book about, there are lots of other things going on in the net about ownership. 
music and movies and various other forms of culture are being distributed better by children than by people that are being paid to do the work. 
artists are beginning to discover that if they allow children to distribute art in a freehanded sort of way, they will do better than they do in the current slavery in which they are kept by the culture vultures, who do, it is true, make a good deal of money out of music, but they do so primarily by keeping ninety-four cents out of every dollar and rendering six to the musicians, which isn't very good for the musicians. 
so there is a great deal of fuss going on about ownership in the net, and since i care about more than just free software, i care about that fuss. 
i have a side over there too. 
but the important thing for us in the conversation we're presently having is that the owners of culture now recognize that if they are going to prop up their own methods of distribution, a method of distribution in which distribution is bought and sold and treated as property—and you can't distribute unless you pay for the right to do so—unless they can prop up that structure, they are done in their business models. 
and for them that requires something which i truly believe amounts to the military occupation of the net. 
they have to control all the nodes in the net and make sure that the bitstreams that pass through those nodes check in before they go some place that the right of distribution hasn't been bought or sold in order to permit that bitstream to go. 
it is precisely because software is free, that the owners of culture have to occupy the hardware of the net in order to make good their business model. 
free software, like, for example, ian clark's freenet or other forms of free software that engages in peer-to-peer sharing of data, or for that matter just free software like tcp/ip which is meant for sharing data, presents overwhelming obstacles to people who want every single bitstream to bear requirements of ownership and distribution inside it and to go only to the places that have paid to receive it. 
the result is an increasing movement to create what is in truly orwellian fashion referred to as trusted computing, which means computers that users can't trust. 
in order to continue to move for the freedom of knowledge in 21st century society, we have to prevent trusted computing and its various ancillary details from constituting the occupation of the hardware of the net, to prevent the hardware from running free software that shares information freely with people who want to share. 
beating the trusted computing challenge is a difficult legal problem, more difficult for the lawyer in dealing with licensing and the putting together of software products than the original problem presented by freeing free software in the first place. 
this, more than the improvement of the free software distribution structure as we currently know it, is the problem most before my mind these days. 
but i would take one more step with you to discuss the problem that lies behind the problem of free hardware. 
we are living now in a world in which hardware is cheap and software is free, and if all the hardware continues to work pretty much the way it works now, our major problem will be that bandwidth is now treated in the world also as a product, rather than a public utility. 
and you are allowed to have, in general, as much bandwidth as you can pay for. 
so then in the world in which we now exist, though hardware is cheap and software is free, there are major difficulties in disseminating knowledge and encouraging the diffusion of science and the useful arts, because people are too poor to pay for the bandwidth that they require in order to learn. 
this arises from the fact that the electromagnetic spectrum too has been treated as property since the second quarter of the 20th century. 
that was said to be technically necessary as a result of technical problems with interference that are no longer relevant in the world of intelligent devices. 
the single greatest free software problem in the 21st century is how to return the electromagnetic spectrum to use by sharing rather than use-by-propertization. 
here again, as you will notice, free software itself, free executable software, has a major role to play. 
because it is software-controlled radios, that is to say devices whose operating characteristics are contained in software and can be modified by their users, that reclaim the spectrum for shared rather than propertarian use. 
here is the central problem that we will be dealing with, not at the end of this decade, but for the two or three decades that follow, as we seek to improve access to knowledge around the world for every human mind. 
we will be dealing with the question of how to make the technical and legal tools under our control free the spectrum. 
in attempting that trick, we will be confronting a series of owners far more powerful than microsoft and disney. 
you need only consider the actual embedded power of the telecommunications oligopolists in the society around you to recognize just what an uphill battle that one will be. 
that's the one that we must win if we are to approach the middle of the 21st century in a world in which knowledge is freely available to be shared by everybody. 
we must see to it that everyone has a birthright in bandwidth, a sufficient opportunity to communicate, to be able to learn on the basis of access to all the knowledge that is there. 
this is our greatest legal challenge. 
the freedom of the software layer in the net is an essential component in that crusade. 
our ability to prevent the devices that we use from being controlled by other people is an essential element in that campaign. 
but in the end, it is our ability to unify all of the elements of the information society—software, hardware, and bandwidth—in shared hands, that is in our own hands, that determines whether we can succeed in carrying out the great 18th century dream, the one that is found in article 1 section 8 of the united states constitution, the one that says that human beings and human society are infinitely improvable if only we take the necessary steps to set the mind free. 
that's where we are really going. 
mr. 
mcbride's company's fate, whether it succeeds or fails, even the fate of the international business machine corporation, is small compared to that. 
we are running a civil rights movement. 
we're not trying to compete everybody out of business, or anybody out of business. 
we don't care who succeeds or fails in the marketplace. 
we have our eyes on the prize. 
we know where we are going: freedom. 
now. 
thank you very much. 
i'm delighted to take your questions: zarren: so, i've been asked by the media services people to make sure that when people ask their questions, if they could speak into the microphone, that would be good. 
there's a little button that turns it on. 
q: i just wanted to ask a question clarifying and, well, anyway… you seem to, or not, have expressed a dichotomy between software and hardware, in the sense that software needs to be free, software is a utility, a public good. 
hardware you don't talk about so much. 
and by hardware, initially i mean related to software but then generalizable to machines, just any kind of machine. 
how do you distinguish why should software be free and hardware not? 
moglen: the 21st century political economy is different from the past economic history of the human beings because the economy is full of goods that have zero marginal cost. 
traditional microeconomic reasoning depends upon the fact that goods in general have non-zero marginal cost. 
it takes money to make, move, and sell each one. 
the availability of freedom for all in the world of bitstreams hinges on that non, on that zero marginal cost characteristic of digital information. 
it is because the marginal cost of computer software is zero that all we have to do is cover the fixed costs of its making in order to make it free to everybody, free not just in the sense of freedom, but also in the sense of beer. 
hardware, that is computers and, you know pdas, as well as shoes and tables and bricks in the wall and even seats in a harvard law school classroom, has non-zero marginal cost. 
and the traditional microeconomic reasoning still continues to apply to it in pretty much the way that it did for adam smith, david ricardo, or karl marx. 
reasoning about hardware is, in that sense, like reasoning about the economy we grew up in and presents all of those questions of how you actually cover the costs of each new unit that the market is designed to help us solve. 
it's precisely because so much of human knowledge and culture in the 21st century no longer participates in the traditional microeconomics of price, asymptotically reaching towards a non-zero marginal cost, that we experience so much opportunity to give people what they never had before. 
and when i speak to you about the difference between hardware and software i'm implicitly observing the distinction between the traditional non-zero marginal cost economy and the wonderful and weird economics of bitstreams, in which the traditional microeconomic theory gives the right answers, but traditional microeconomic theorists don't like what they see when they do the chalk work. 
q: would you then advocate to, in other words, because knowledge can be contained in hardware, and also hardware has this additional marginal cost, would you advocate every, that for instance, for every computer to come with chip diagrams so that the knowledge in the hardware is free while you can still collect on the marginal cost? 
moglen: sure, it would be a very good idea, and if you watch and see what happens in the 21st century you'll see more and more manufacturers deciding to do precisely that, because of the value of empowered user innovation, which will drive down their costs of making new and better products all the time. 
indeed for reasons which are as obvious to manufacturers as they are to us, the softwarization of hardware in the 21st century is good for everybody. 
i'm writing a little bit about that now. 
i don't mean to plug a book, but wait a little bit and i'll try and show you what i actually think about all of that in a disciplined sort of way. 
q: i was wondering if the sco lawsuit might be the first of what could become a series of lawsuits filed ad seriatim and in parallel against free software? 
and wanted to get your view on two possible types of lawsuits that could follow on the heels of sco, regardless of whether sco won or lost. 
the first would be a lawsuit filed by a company that to its shock and amazement found that instead of its programmers hoping for their first house, working on the stuff they were supposed to work on by day, they were in fact spending most of their time slashdot and the rest of their time coding free software, and then occasionally staying up late to do something for the old man. 
if those programmers have signed, which is typical, agreements with their company that says any software they write actually is property of the company, maybe even a work for hire, what is the prospect that a company could then say, our code through that coder has been worked in to something like linux, and it is now infringing unless we are paid damages? 
the second possible way in which you could see this kind of lawsuit come up would be, oddly enough, through the thirty-five year termination rule, something that normally would be heralded by people in your position, to say copyright law allows musicians and artists who stupidly signed agreements when they were but small peons, without legal assistance with big companies, thirty-five years later can take it all back, no matter what. 
they can reset the clock to zero and re- negotiate. 
i call this the rod stewart salvation act. 
[laughter] and while that might be helpful for the artists, much as the music industry hates it, couldn't that also mean that free software coders, who willingly contributed, weren't even blocked by their employers, to contribute to free software movement, could—down the line—and thirty-five years isn't that long in the history of unix, say, "we take it all back?"
 moglen: so, those are two very good questions. 
if i answer each one of them fully, i'm going to take too long. 
let me concentrate on the first one, because i think it's really quite important. 
what jonathan's question does is point out to you that the great legal issues in the freedom of free software have less to do with the license than with the process of assembly by which the original product is put together. 
one of the legal consequences of the sco affair is that people are going to start to pay closer attention all the time to how free software products are put together. 
they are going to discover that what really matters is how you deal with the questions of, for example, possible lurking work-for-hire claims against free software. 
they're going to discover that in this respect, too, mr. 
stallman was quite prescient, because they are going to recognize that the way they want their free software put together is the way the free software foundation put it together since now more than twenty years. 
the way we're going, they're going to discover that they really would like to have it, is for each individual contribution of code to a free software project, if the guy who contributed the code was working in the industry, they would really like to have a work-for-hire disclaimer from the guy's employer, executed at the same time that the contribution was made. 
and the filing cabinets at the free software foundation are going to look to them like an oasis in a desert of possible problems. 
we saw that problem coming. 
we have tried in our act as stewards over a large part of the free software in the world to deal with it. 
people are going to want to have that up front for everything that they can possibly, and they're going to be much more reluctant to rely on software that wasn't assembled in those ways. 
if you are thinking about working in the law of free software, and gosh, i hope you are, one of the things you might want to be thinking about working on is the software conservation trusts that are going to be growing up around this economy in the next five years. 
i'll help you make one, or you can come to work in one of mine. 
we're going to need to spend a lot of time doing work which is associated with trustees. 
we're going to be spending a lot of time making sure that things are put together and they are built well. 
and we are going to be doing that on behalf of a third-party insurance industry which is going to be growing up, is growing up before our very eyes now, which is learning that it really cares how the free software is assembled. 
when you go to an insurance company and ask for fire insurance on your house, they don't want to know how your house is licensed. 
they want to know how your house is built. 
and the questions you are asking about how the free software is built are about to become really important questions. 
what will abate those lawsuits is that we did our work well or that we are doing our work well as lawyers, assisting programmers to put projects together in defensible ways that protect freedom. 
up until the day before yesterday, there were probably three lawyers on earth who cared a lot about that, and two of them are in this room. 
there will be more in the near future. 
i will say quickly about your second question, jonathan, that the problem presented is a serious problem, but, at least from my point of view, a manageable one, and i'm willing to talk more about why, but i think we ought to get more voices into the conversation. 
q: without disputing the importance or difficulty of the spectrum battle, or the … clearly the copyright battle and progress is very immediate, but it seems to me that most worrisome right now is the patent battle that i expect to come next. 
compared to that, the whole thing with sco, well, sco is a paper dragon, a hollow threat. 
can you say anything about what you expect that battle to look like? 
and how it will be fought? 
how it can be? 
moglen: sure. 
patents are about politics. 
i thought that the pharmaceuticals companies did my side a favor by buying us 12 trillion dollars in free publicity in the last half decade by teaching every literate twelve year old on earth that "intellectual property" means people dying of preventable diseases because the drugs are too expensive because patents cover them. 
patents are politics. 
patents are about how we distribute wealth over very long periods of time, in quite absolute ways. 
we're not going to have an answer to our patent problem which lies in courtrooms or in laboratories. 
we're going to have an answer to our patent problems which lies in the actual conduct of politics. 
you saw the beginning of it this past summer when the european parliament decided, in a very unusual move, to refuse, and to refuse promulgation to the european commission's preferences with respect to changes in patent law in europe regarding inventions practiceable in software. 
the european commission put forward a suggestion for change and harmonization in european patent law which would have made the issuance of patents for inventions practiceable in software very much easier. 
the european parliament after a lengthy campaign, led in part by the free software movement in europe—that's euro linux and the free software foundation europe and a lot of small software houses in europe benefitting substantially from the new mode of software as a public utility—a campaign which involved in the end 250,000 petition signatories, the european parliament decided to say no. 
and two parties, greens and social democrats, in the european parliament now understand that patent policy in europe is a partisan issue. 
that is to say that there are sides, and that electoral politics and party organization can be conducted around those sides. 
our society is a much less aware one on that subject. 
for those of us who live here, the task of getting to the standard set for us by our colleagues in europe this past summer is the first and most important challenge. 
we must make our congressmen understand that patent law is not an administrative law subject to be decided in the pto, but a political subject to be decided by our legislators. 
we may have to restore actual democracy to the house of representatives in the united states in order to make that possible, and there are many other aspects to the challenge involved. 
but this is one of the primary respects in which technically sophisticated people in the united states are going to have to get wise to the mechanisms of politics, because we're not going to solve this in the supreme court, and we're not going to solve this in the work station. 
we are going to solve this in congress, and we're going to have to build our muscles up for doing that. 
q: related to that point, i'm curious, this isn't so much a legal point as a, maybe even a public relations point. 
you opened up your talk by saying, this is about freedom not free beer. 
but when you, i think, listen to people like jack valenti and the riaa, you know, and, mr. 
mcbride, the constant drumbeat is of this idea of free beer and teaching kids that they can't steal from, you know, big music. 
how do you win that battle of public relations on the ground, which ultimately will have ramifications in congress? 
how do you, how do you convey that message outside the technology community? 
moglen: well, one of the things that i guess i would say about that is that english language fights us on it, right? 
one of the things that has happened over the course of time in our european environments, where the word for free in the sense of costless and the word for free in the sense of liberated are two different words, is that people have twigged to the distinction much more easily. 
software libre works nicely, or logiciel libre if you have to truckle to the academie francaise, in a way that free software doesn't at making that distinction. 
it was in part for that reason that some folks decided in the late 90's, that maybe they ought to try and find another phrase and settled on open source. 
that turned out to have more difficulties, i think, than benefits for the people who did it, though it now works very nicely as a way for business to identify its interest in what we do without committing itself to political or social philosophies that businessmen may not share or at any rate don't need to trumpet just in order to get their work done from day to day. 
so one of the things that we do, for those who speak english, is we actually have to reinforce from time to time—that is all the time—the distinction between free beer and free speech. 
on the other hand those of us who live in the united states and speak english shouldn't have quite that much trouble because free speech is a way more important part of the american cultural landscape than free beer is. 
at least it was in the world that i grew up in, whatever rupert murdoch may want to say about it now. 
we are the party of free speech, and we need to point out to people that if you allow anybody, including a well-dressed lobbyist of ancient, ancient vintage, to declare that a love of free speech is like taking a cd out of a record store under your arm, game's over. 
not game about free software, but game about liberty and life in a free society. 
we stand for free speech. 
we're the free speech movement of the moment. 
and that we have to insist upon, all the time, uncompromisingly. 
my dear friend, mr. 
stallman, has caused a certain amount of resistance in life by going around saying, "it's free software, it's not open source."
 he has a reason. 
this is the reason. 
we need to keep reminding people that what's at stake here is free speech. 
we need to keep reminding people that what we're doing is trying to keep the freedom of ideas in the 21st century, in a world where there are guys with little paste-it labels with price tags on it who would stick it on every idea on earth if it would make value for the shareholders. 
and what we have to do is to continue to reinforce the recognition that free speech in a technological society means technological free speech. 
i think we can do that. 
i think that's a deliverable message. 
that's what i spend a good deal of my time doing, and while it's true that i bore people occasionally, at least i think i manage, more or less, to get the point across. 
we're just all going to have to be really assiduous about doing it. 
q: i'll ask a question. 
you talked a lot about distribution and how you think that ought to be free, and i think i see that argument much better than i see the argument about how creators of zero-marginal-cost distribution goods will necessarily be compensated for what they create, and so i've heard a lot of, i don't think these are any of your arguments, but i've heard, ok, well, that the musicians will go on tour, so they'll make it back that way, you know, whatever time they put in. 
or people will keep creating whatever it is they create—and this applies to more than just, you know, movies or music—it applies to books, or even non-entertainment-style knowledge-type things, there's gotta be, you hear people will still do the same amount of it because they love to do it or are interested to do it, but i don't think that quite compensates for the compensation that many of those creators now receive. 
and so i was wondering if you would comment a little bit on how the free distribution world, which differs from the current world in that many of the current distribution regimes were created specifically only to compensate people, will differ in terms of compensating creators. 
moglen: i will say a little bit now, and in the interests of time also say that you can find in the net where i put stuff which is at http://moglen.law.columbia.edu a paper called "freeing the mind", which addresses this question, i hope comprehensively, or at least a little bit. 
now, let me give you an answer. 
historical perspective is useful here. 
before thomas edison, there was no way for culture to be commodity. 
every musician, every artist, every creator of anything before thomas edison was essentially in the business of doing what we now have go back to doing, except those who lived in a world of goods that could be distributed in print, for whom you only have to step back to before gutenberg. 
right? 
the commoditization of culture is a phenomenon of yesterday, with respect to the deep history of human creativity. 
whatever else we believe, and the problems are serious, we have to remind ourselves that there is no prospect that music would go away if it is ceased to be commodifiable. 
music is always there. 
it always was. 
what you are asking about is, why do people pay for the things they care about, in a way that will allow creators to go on making them? 
and the answer that i need to give you is that people pay out of the personal relationship that they have to the concept of making. 
musicians got paid by people who heard music, because they had a personal relationship to musicians. 
this is what you mean by going on tour or the grateful dead or anybody who uses the non-zero marginal cost of the theatre seat as a way of getting back, just as people merchandise as a way of getting back. 
think for a moment about the coffee house folk musician, the singer/songwriter. 
the simplest case in a way of the transformation of the music business. 
here are people who are currently on tour 40, 45, 50 weeks a year. 
what happens is, they go to places and they perform and at the back, cds are on sale, but people don't buy those cds as a kind of, you know, i would otherwise be stealing the music; they buy it the way they buy goods at a farmers market or a crafts fair, because of their personal relationship to the artist. 
so let me tell you what i think the owners of culture were doing in the 20th century. 
it took them two generations from edison to figure out what their business was, and it wasn't music and it wasn't movies. 
it was celebrity. 
they created very large artificial people, you know, with navels eight feet high. 
and then we had these fantasy personal relationships with the artificial big people. 
and those personal relationships were manipulated to sell us lots and lots of stuff—music and movies and t-shirts and toys and, you know, sexual gratification, and heaven knows what else. 
all of that on the basis of the underlying real economy of culture, which is that we pay for that which we have relations with. 
we are human beings, social animals. 
we have been socialized and evolved for life in the band for a very long time. 
and when we are given things of beauty and utility that we believe in, we actually do support them. 
you think that this isn't true, because the current skin at the top of social life says that that's not a robust enough mechanism to sustain creation, and that the only mechanism that will sustain creation is coercive exclusion—you can't have it, if you don't pay. 
but they can't be historically right, because the ability to coerce effectively is a thing of yesterday. 
and the longer, deeper history of culture is the history of the non-coercive mechanisms for securing compensation to artists, only some of which we are now in a position to improve immeasurably. 
q: but what about the software writer? 
moglen: ah, the software… q: that's the kind of stuff i think i was more getting at with my question. 
so you have somebody who creates something useful but it has a zero distribution cost, and it's useful in a way that's not, not useful like celebrity, though i'm not sure, i don't think that's useful in some ways, but it's useful in the different sense that it takes a long time to create well. 
moglen: see, the programmers i worked with all my life thought of themselves as artisans, and it was very hard to unionize them. 
they thought that they were individual creators. 
software writers at the moment have begun to lose that feeling, as the world proletarianizes them much more severely than it used to. 
they're beginning to notice that they're workers, and not only that, but if you pay attention to the presidential campaign currently going on around us, they are becoming aware of the fact that they are workers whose jobs are movable in international trade. 
we are actually doing more to sustain the livelihood of programmers than the proprietary people are. 
mr. 
gates has only so many jobs, and he will move them to where the programming is cheapest. 
just you watch. 
we, on the other hand, are enabling people to gain technical knowledge which they can customize and market in the world where they live. 
we are making people programmers, right? 
and we are giving them a base upon which to perform their service activity at every level in the economy, from small to large. 
there is programming work for fourteen-year-olds in the world now because they have the whole of gnu upon which to erect whatever it is that somebody in their neighbourhood wants to buy, and we are making enough value for the ibm corporation that it's worth putting billions of dollars behind. 
if i were an employee of the ibm corporation right this moment, i would consider my job more secure where it is because of free software than if free software disappeared from the face of the earth, and i don't think most of the people who work at ibm would disagree with me. 
of all the people who participate in the economy of zero marginal cost, i think the programmers can see most clearly where their benefits lie, and if you just wait for a few more tens of thousands of programming jobs to go from here to bangalore, they'll see it even more clearly. 
q: so, author writes software. 
the moment the software is fixed in a tangible medium, copyright attaches; others can't use it without further action by author. 
author chooses to adopt the general public license to govern what others can do with the software, and you made the intriguing point then that the general public license gives, with certain limits, and that's why, you point out, nobody is really wanting to challenge it all that much because it would be a pyrrhic challenge. 
if you win and the license evaporates, then it rubber-bands back to the author. 
that seems so persuasive, and almost proves too much, doesn't it? 
because, suppose another author writes software, writes for now with the author and chooses to license it under the grand old party license, by which only republicans may make derivative works, and other, what would otherwise be copyright-infringing uses of the software. 
one, do you think such a license should be enforced by the courts? 
and two, couldn't you say the same logic would apply, that nobody would dare to challenge it because half a loaf is better than none? 
at least, let the republicans use the software. 
moglen: so, fundamentally i think the question that you asked is, has the law of copyright misuse evaporated entirely? 
and i think the answer, notwithstanding the supreme court's current deference to whatever congress chooses to say, is no. 
i think there's still a common law of going too far out there, and as a lawyer who works on behalf of people who are fairly militant on behalf of sharing, i hear proposals all the time about stuff that they think it would be really neat to do that i don't think the copyright law, unalloyed by further contractualization will permit them to do. 
i think the actual tool set of berne-harmonized copyright law has certain limits on the power of the licensor, and i believe that those limits are capacious enough to allow us to create the kind of self-healing commons we have created, but i'm not sure that they would be strong enough to permit the importation of lots of additional contractualizing restrictions as though they were part of the body of copyright law itself. 
moreover i'm pretty sure that if you tried to do it and succeeded in one jurisdiction, you would find that the berne convention didn't actually export all of those propositions around the world for you, and that therefore you would have difficulty erecting a worldwide empire around the gpl public license. 
but i think you're correct to say another thing, which is that if there were a number of self-defending commons raised on different principles around the world, that that would create undesirable dead weight lawsuits, which is why i spend a fair amount of time trying to help people see why the gpl is good and doesn't require to be turned into the xpl and the ypl and the zpl around the world. 
in fact i think in the next few years, we're going to have a greater consolidation of licenses, not a greater multiplication of them. 
but it's a conceptual issue of importance, and it depends upon the belief that copyright law all by itself permits some things and not others, and that you can only fill those gaps with the kind of contract law that we try not to use. 
q: can you recommend any economists who have studied zero marginal cost economics? 
moglen: well, see now, i sometimes joke with my dear colleague, yochai benkler at yale law school, that yochai is well-positioned now to win the final nobel prize in economics. 
but i fear that that's not quite correct and that people are beginning to flood in. 
i have a little bit this sort of feeling that sooner or later i'm going to wake up and find out that in stockholm they've decided to award a prize to guys for teaching economics that we have known for 25 years. 
eric von hippel is doing very important work about that, if you want to take just people living in the neighborhood. 
we are beginning to get in our business schools a bunch of people who are actually trying to think about these questions, because they see billions of dollars being bet and in good business school tradition, they tend to figure out that what rich businessmen and their investors are thinking about is something they might want to pay attention to. 
in the pure economics departments, unfortunately we remain a phenomenon too disquieting to consult just yet. 
but phd students, of course, do not always do what their professors do, and my guess is that we are merely a few years away from the beginning of some rocket science on these subjects. 
it's an enormous, beautiful opportunity for the revision of a field. 
even in an economic, even in a discipline like economics, it is only so long that people can be prevented from working on really interesting problems. 
and the day is coming. 
q: just a general question on market forces and the free software economy. 
even in an ideal world, wouldn't you say that, you know, because of the market forces and then we, you know, a group of players become especially successful, then they actually—even though it's an ideal world—they actually become powerful enough and they monopolize under standards again, and we come back to the same system we have today. 
so, i guess the question is that whether this product-type system economy we have, is that just a function of the structure we have, or is that, you know, a result of just market forces? 
moglen: well, the structure that we have constitutes what we call market forces. 
i wouldn't want to take the position that the market was a newtonian mechanism that existed in the universe independent of human social interaction. 
look, what we are doing is trying, through legal institutions directed at the protection of a commons, to prevent that commons from suffering tragedy. 
because the content of that commons is capable of renewal and has zero marginal cost, the tragedy we're trying to prevent is not garrett hardin's one, which was based upon the inherent exhaustibility of natural resources of certain kinds. 
but there is no question that the commons that we are making is capable of being appropriated and destroyed in the ways that you suggest. 
those of us who believe in the gnu gpl as a particularly valuable license to use believe in that because we think that there are other licenses which too weakly protect the commons and which are more amenable to a form of appropriation that might be ultimately destructive—this is our concern with the freedoms presented, for example, by the bsd license—we are concerned that though the freedoms in the short term seem even greater, that the longterm result is more readily the one that you are pointing at, market participants who are free to propriatize the content of the commons may succeed in so effectively propriatizing it as to drive the commons out of use altogether, thus, if you like, killing the goose that laid the golden egg in the first place. 
so, to some extent, i would say, avoidance of the tragedy of the commons in our world depends upon the structuring of the commons. 
institutions alone, as i also pointed out earlier in this conversation however, commons resources need active management. 
you, as a lawyer, will either engage in assisting to protect the commons or not protect the commons. 
this is a form of natural resources law for the 21st century. 
it is about the recognition that no machine will go of itself, that it will require assistance to achieve its goals precisely in the way that you have in mind. 
the best national park law on earth won't prevent the poaching of the park if there are not committed people willing to defend it. 
so you offer a general theory of the possibility of commons destruction and i agree with you. 
i say two things. 
we can design a better commons, and we can work our tails off to keep that commons in being healthy, strong and well. 
that's what i'm up to. 
that's what i hope you'll be up to as well. 
[*] eben moglen is a professor of law & legal history at columbia law school, and general counsel for the free software foundation. 
the motif license. 
stallman a couple of weeks ago, the open group changed the license of motif, inviting free software developers to use it. 
however, the new motif license does not fit either the definition of free software, or the looser definition of open source software. 
their announcement says they have released motif to "the open source community," but this is true only in an unnatural interpretation of the words. 
they have not made motif available within the free software community; instead, they have invited the people in the free software community to leave the community by using motif. 
i've written to the open group about this, asking them to change the license. 
we can hope they will, but we can't assume it. 
in the present circumstances, we have to treat motif the same way we treated it before: not available for us. 
motif still cannot be part of a free operating system, and combining or linking someone else's gpl-covered code with motif is still a violation of the gpl except in very special circumstances. 
fortunately there is a free software alternative to motif, called lesstif. 
most programs that were written for motif can use lesstif with no changes. 
please support the free software community by using lesstif rather than motif. 
some finishing work still needs to be done on lesstif; to volunteer, contact <lesstif@hungry.com>. 
here are some of the problems of the motif license: it claims that you accept the license merely by "using" motif. 
only a shrink-wrap license or something similar can do that, and shrink-wrap licenses are a bad thing. 
the license is restricted to use on certain operating systems, those which fit a category they call "open source."
 both the free software movement and the open source camp consider use restrictions unacceptable. 
their definition of the term "open source" is very different from the one used by the open source camp, thus causing confusion. 
in the free software movement, we disagree with the philosophy and values of open source. 
(for more explanation, see open-source-misses-the-point.html.) but even though we do not support open source or advocate what it stands for, we think people should not misrepresent what it stands for. 
the facts of the situation are complex enough; confusing the issue is not welcome. 
later note. 
in 2012, motif was released under the gnu lesser general public license, version 2.1. 
fsf statement in response to proposed revised final judgment in microsoft v. united states. 
january 28, 2002 renata b. hesse antitrust division u.s. 
department of justice 601 d street nw suite 1200 washington, dc 20530-0001 dear ms hesse, i am professor of law at columbia university law school in new york, and general counsel (pro bono publico) of the free software foundation, a non-profit &sect;501(c)(3) corporation organized under the laws of the commonwealth of massachusetts, with its headquarters in boston. 
i make this statement under the provisions of 15 u.s.c. 
&sect; 16(d) concerning the proposed revised final judgment (hereinafter "the settlement") in united states v. microsoft corp. 
the remedies sought to be effected in the settlement are, in their broad outline, appropriate and reasonable measures for the abatement of the illegal conduct proven by the united states at trial. 
the goal of such remedies is to require that defendant affirmatively assist the restoration of competition in the market in which the defendant has been shown to have illegally maintained a monopoly in violation of 15 u.s.c. 
&sect;2. 
the remedies embodied in the settlement would substantially achieve that goal, appropriately furthering the government's pursuit of the public interest, if the settlement were amended to rectify certain details one-sidedly favorable to the defendant's goal of continuing its illegal monopoly. 
defendant—in the interest of continuing unabated its illegal monopoly—has artfully drafted certain clauses of the settlement so as to hobble potential competition, giving the appearance of affirmatively assisting to undo its wrong, but covertly assisting instead in its continuance. 
the district court found that the defendant had illegally maintained a monopoly in the market for intel-compatible pc operating systems. 
(findings of fact, november 19, 1999, &para;19.) the mechanism of that monopolization, the court found, was the attempt to establish exclusive control of "application program interfaces" ("apis") to which applications developers resort for operating system services, so as to prevent the possibility of "cross-platform" development threatening defendant's operating systems monopoly. 
(findings of fact, &para;80 and passim.) the settlement accordingly makes appropriate provision to require microsoft to provide access to full and complete technical information about its apis on non-discriminatory terms, so as to prevent defendant's prior conduct in erecting artificial and illegal barriers to entry to the monopolized market. 
but the precise terms of the settlement create a series of artful technical loopholes vitiating the primary intention. 
section iii(d) provides that: starting at the earlier of the release of service pack 1 for windows xp or 12 months after the submission of this final judgment to the court, microsoft shall disclose to isvs, ihvs, iaps, icps, and oems, for the sole purpose of interoperating with a windows operating system product, via the microsoft developer network ("msdn") or similar mechanisms, the apis and related documentation that are used by microsoft middleware to interoperate with a windows operating system product. 
(emphasis added) the "sole purpose" requirement means that defendant does not have to make any such api information available to developers of software whose purpose it is to make competing intel-compatible pc operating systems. 
only those who make programs that interoperate with windows operating systems products may receive such information. 
under &sect; iii(i)(3), an applications developer who has received licensed information concerning defendant's apis could be prohibiting from sharing that information with a maker of a competing intel-compatible pc operating system, for the purpose of interoperating with that competing product. 
under &sect;iii(i)(2), if a potential competitor in the market for intel-compatible pc operating systems also makes applications products, it can even be prohibited from using licensed information it receives in order to make those applications interoperate with defendant's products also interoperate with its own competing operating system. 
what should be a provision requiring defendant to share information with potential competitors in the monopolized market turns out, after defendant's careful manipulation, to be a provision for sharing information "solely" with people other than competitors in the monopolized market. 
the same language has been inserted into &sect;iii(e), thus similarly perverting the intention of the settlement with respect to communications protocols. 
defendant has not merely engaged in this undertaking with a goal to the exclusion of potential future competitors from the monopolized market. 
in the teeth of the evidence, long after having been proved to have behaved with exaggerated contempt for the antitrust laws, defendant is attempting in the very judgment delivered against it to exclude from the market its most vigorous current competitor. 
defendant's most significant present challenger in the intel-compatible pc operating systems market is the collection of "free software," which is free in the sense of freedom, not necessarily in price: thousands of programs written collaboratively by individuals and organizations throughout the world, and made available under license terms that allow everyone to freely use, copy, modify and redistribute all the program code. 
that free software, most of it licensed under the terms of the free software foundation's gnu general public license ("the gpl") represents both an operating system, known as gnu, and an enormous corpus of applications programs that can run on almost all existing architectures of digital computers, including intel-compatible pcs. 
through one such free software component, an operating system "kernel" called linux, written by thousands of individuals and distributed under the gpl, the gnu operating system can execute on intel-compatible pc's, and by combining linux with other free software, gnu can perform all the functions performed by windows. 
non-microsoft middleware can execute on intel-compatible pcs equipped with components of gnu and linux. 
intel-compatible pcs so equipped currently account for more than 30% of the installed server base in the united states, according to independent industry obsevers. 
the district court found that "by itself, linux's open-source development model shows no signs of liberating that operating system from the cycle of consumer preferences and developer incentives that, when fueled by windows' enormous reservoir of applications, prevents non-microsoft operating systems from competing."
 (findings of fact, november 5, 1999, &para;50.) (referring, confusingly, to the combination of gnu, linux, and other programs simply as "linux."
) the district court correctly found that in order to compete effectively with defendant in the desktop operating systems market for intel-compatible pcs, systems equipped with the free software operating system should be able to interoperate with "the enormous reservoir" of windows applications. 
there is no inherent barrier to such interoperation, only an artificial barrier illegally erected by defendant. 
if defendant were required to release information concerning its apis to the developers of free software, gnu, linux, the x windowing system, the wine windows emulator, and other relevant free software could interoperate directly with all applications that have been developed for windows. 
anyone could execute windows applications programs bought from any developer on intel-compatible pc's equipped with the competing free software operating system. 
and because, as the district court found, the cost structure of free software is very much lower than defendant's, the competing operating system product is and would continue to be available at nominal prices. 
(findings of fact, november 5, 1999, &para; 50.) that would be too effective a form of competition, from the defendant's point of view. 
for this reason, defendant has included in the settlement the terms that exclude from api documentation precisely those to whom it would be most logically addressed: potential competitors seeking access to the monopolized market. 
if the settlement were enforced according to its intention, the result would be immediate and vigorous competition between defendant and the parties against whom, the district court found, defendant was illegally maintaining a barrier. 
the settlement should be amended to level that barrier, which the current language inserted by defendant artfully maintains. 
the language of &sect;&sect;iii(d) and iii(e) should be amended to require defendant to release timely and accurate api information to all parties seeking to interoperate programs with either windows operating system products or applications written to interoperate with windows operating system products. 
for the same reason, defendant's attempt to continue denying the free software development community access to its apis through the imposition of royalty requirements, in &sect;iii(i)(1), should be removed. 
as the district court recognized, free software development means that everyone in the world has access, without payment of royalties or prohibition of redistribution, to the "source code" of the software. 
all apis and other interfaces are fully available at all times to anyone who wants to interoperate with the existing programs. 
this, and the ability to reuse existing program code in new programs without payment of royalties or license fees, permits vast numbers of interoperable, high-quality programs to be written by a mixture of volunteers and professional project developers for free distribution. 
by authorizing defendant to engage in non-reciprocity by charging royalties for the same information about its programs, thus purposefully ousting volunteer developers, and by prohibiting "sublicensing," thus precluding profit-making developers from seeking interoperability with volunteers, the settlement is craftily perverted into a mechanism whereby defendant can continue to withhold api information so as to preclude the operations of potential competitors. 
the settlement should be modified so that &sect;iii(i)(1) requires reciprocity, by precluding the imposition of royalties on developers who make their own apis fully available without payment of royalties or license fees, and so that &sect;iii(i)(3) precludes limitation on sublicensing, and requires defendant to release api information on terms reciprocal to those on which competitors make their own api information available. 
in one additional provision defendant has attempted to subvert the intention of the settlement in order to preclude effective competition by the intel-compatible free software operating system. 
under &sect; iii(j)(1), defendant may refuse to disclose "portions of apis or documentation or portions or layers of communications protocols the disclosure of which would compromise the security of anti-piracy, anti-virus, software licensing, digital rights management, encryption or authentication systems, including without limitation, keys, authorization tokens or enforcement criteria."
 this provision is so indefinite that defendant can be expected to argue that all apis and communications protocols connected with the security and authentication aspects of electronic commerce (including especially "without limitation" keys and authorization tokens, which are the basic building blocks of all electronic commerce systems) can be kept secret. 
at present, all such protocols and apis are public, which is appropriate because—as computer security experts would testify if, as it should, the district court seeks evidentiary supplementation under 15 u.s.c. 
16(f)(1)—security is not attained in the computer communications field by the use of secret protocols, but rather by the use of scientifically-refereed and fully public protocols, whose security has been tested by full exposure in the scientific and engineering communities. 
if this provision were enforced as currently drafted, defendant could implement new private protocols, extending or replacing the existing public protocols of electronic commerce, and then use its monopoly position to exclude the free software operating system from use of that de facto industry standard embodied in its new unpublicized apis and protocols. 
defendant then goes further in &sect; iii(j)(2), according to itself the right to establish criteria of "business viability" without which it may deny access to apis. 
considering that its primary competition results from a development community led by non-profit organizations and relying heavily on non-commercial and volunteer developers, one can only conclude that defendant is once again seeking the appearance of cooperation with the rule of law, while preparing by chicane to deny its injured competitors their just remedy. 
the free software foundation not only authors and distributes the gnu general public license, and in other ways facilitates the making of free software by others, it also manufactures and distributes free software products of its own, particularly the gnu operating system, and sells compilations of its own and others' free software. 
the foundation sustains specific injury from the violations set forth in the complaint that are not remedied by (and indeed are specifically excluded from) the settlement. 
the foundation and the other free software developers with whom it acts are the single most significant competitor to the defendant in the monopolized market, and the adoption of the settlement as drafted, with its terms so carefully designed by defendant to preclude its effective competition, would be a travesty. 
we urge that the settlement be amended as we have described. 
very truly yours, eben moglen 
mydoom and you. 
stallman i grew up in a community whose other members sometimes committed crimes as serious as murder. 
the city of new york, with its 8 million inhabitants, had hundreds of murders each year, mostly committed by people who lived in the city. 
violent assaults and robberies were even more common. 
other evils involving information rather than physical violence were common also. 
for instance, some new york police regularly lied on the witness stand, and even made up a word for it: instead of "testifying," they described court appearances as "testilying."
 some new york programmers fell into the lawful but socially destructive practice of proprietary software: they offered other people attractive software packages without source code, and exacted a promise not to share them with anyone else. 
despite these prevalent evils, never in my life have i seen anyone try to condemn all new yorkers on the basis of the wrongs that only some have committed. 
i have not seen anyone assume that all the citizens of new york are guilty of murder, violence, robbery, perjury, or writing proprietary software. 
people are aware that the mere fact that some new yorkers were known to have done these things is no justification for treating all of us as guilty. 
that would be "guilt by association," and people know that is unjust. 
i now live in the smaller city of cambridge, massachusetts. 
murder and robbery occur here, too; i do not know if cambridge police regularly lie in court, but proprietary software is rife. 
nonetheless, i have never seen anyone try to condemn the whole city of cambridge for this. 
here, too, people recognize that guilt by association is an injustice. 
however, people don't always remember to apply the principle. 
my virtual community, the free software community which i have helped to build since 1984 by developing the gnu operating system, is now the victim of a campaign of guilt by association. 
a number of articles—i have seen some—have tried to hold our entire community guilty for the development of the mydoom virus. 
we can be pretty sure that some new yorkers have committed murder, because they have been tried and convicted for it. 
we do not know whether anyone in the free software community participated in the development of mydoom. 
the developers have not been identified; they know who they are, but you and i can only speculate. 
we could speculate that users of gnu/linux developed the virus to attack sco. 
we could speculate that microsoft developed the virus so it would be blamed on us. 
we could speculate that disgruntled former sco employees developed the virus to get even. 
but there is no evidence for any of these speculations. 
if some day we find out that those who developed the virus were free software users, then my virtual community will be in the same situation as new york city and cambridge: proved to have had some members who acted destructively. 
this should not surprise anyone. 
the free software community numbers in the tens of millions, larger than new york or even shanghai. 
it is hardly to be expected that so many people would all be ethical. 
our community is self-selected for at least partial rejection of one unethical practice, proprietary software, but even that doesn't guarantee perfection. 
the presence of a few wrongdoers among many millions is no surprise—and no excuse for guilt by association. 
i am confident that nearly all readers of this article have nothing to do with developing the mydoom virus. 
so if someone is accusing you, don't act defensive. 
you have no more to do with the virus than your accuser, so stand tall and say so. 
if anyone has knowledge or evidence about who developed the virus, i hope he or she will come forth and make an accusation against specific people based on specific proof. 
but nobody should make accusations without proof, and there is no excuse for guilt by association. 
not in new york, not in cambridge, and not in the free world. 
netscape and free software. 
more recent news about netscape people have been writing with joy to tell us that netscape has announced a plan to make its browser free software, under the gnu gpl. 
that is getting a bit ahead of events. 
the announcement netscape made does not actually say that they will use the gnu gpl, and does not assert that the program will be free software as we define it in our community. 
it's clear that netscape will take a big step in the direction of free software, but we don't know whether they will get all the way there or fall substantially short. 
in fact, netscape is still deciding what to do. 
when they decide, two crucial questions will be whether people will be free to distribute copies for a fee (on free software cd-rom collections, for example) and whether people will be free to redistribute modified versions just like the original version. 
if either of those freedoms is lacking, the program won't be free software. 
if netscape does release the netscape browser as free software, that will be a great day for the free software movement. 
but rather than rejoicing or criticizing now, let's see what actually happens, and then we'll know whether to celebrate. 
what we can usefully do now is urge netscape, calmly and politely, to make the software free, and to copyleft it with the gnu general public license. 
on the netscape public license. 
stallman the original version of this article was written in march 1998 about a draft of the npl. 
our first article on the subject was netscape is considering making the netscape browser free software. 
the netscape public license, or npl, as it was ultimately designed in 1998, is a free software license—but it has three major flaws. 
one flaw sends a bad philosophical message, another puts the free software community in a weak position, while the third creates a major practical problem within the free software community. 
two of the flaws apply to the mozilla public license as well. 
because of these flaws, we urge that you not use the npl or the mpl for your free software. 
1. not all users are equal. 
the first problem i noticed in the npl was that it does not give netscape and the rest of us equal rights, as the gnu gpl does. 
under the npl, we can use netscape's code only as specified in the npl, but netscape can use our changes in any way at all—even in proprietary licensed versions of the software. 
the problem here is subtle, because this does not make the program nonfree. 
it does not stop us from redistributing the program, or from changing it; it does not deny us any particular freedom. 
considered from a purely pragmatic viewpoint, it may not look like a problem at all. 
the problem lies in the deeper message embodied in this condition. 
it denies the idea of cooperation among equals that our community rests on, and says that working on a free program means contributing to a proprietary software product. 
those who accept this condition are likely to be changed by it, and the change will not strengthen our community. 
one proposed solution for this asymmetry is to put a time limit on it—perhaps three or five years. 
that would be a big improvement, because the time limit would deny the problematical deeper message. 
the practical effects of this condition are minimized by another drawback of the npl: it is not designed as a thorough copyleft. 
in other words, it does not try very hard to ensure that modifications made by users are available as free software. 
the mpl (mozilla public license) does not have this problem. 
that is the principal difference between the mpl and the npl. 
2. not a copyleft. 
the npl has the form of a copyleft; it explicitly says that all modifications made by users must be released under the npl. 
but this applies only to modifications to the existing code—not to added subroutines, if they are put in separate files. 
as a practical matter, this means it is easy to make proprietary changes if you want to: just put the bulk of your code into a separate file, and call the collection a larger work. 
only the subroutine calls added to the old files will have to be released under the npl, and they will not be very useful on their own. 
the lack of real copyleft is not a catastrophe; it does not make the software nonfree. 
for example, the x.org distribution terms do not try to use copyleft at all, yet x.org is free software nonetheless. 
bsd is also non-copylefted free software (although the older bsd terms have a serious drawback and should not be imitated—if you want to release non-copylefted free software, please use the x.org terms instead). 
npl-covered software is also free software without being copylefted, and this by itself does not make the npl worse than other non-copyleft free software license. 
however, while this is not catastrophic, it is nonetheless a drawback. 
and because the npl looks like a copyleft, some users may be confused about it, and might adopt the npl, thinking that they are obtaining the benefits of copyleft for their software, when that is not the case. 
to avoid this outcome, we will need to work hard to educate people about an issue that is not easy to explain in a few words. 
3. not compatible with the gpl. 
the most serious practical problem in the npl is that it is incompatible with the gnu gpl. 
it is impossible to combine npl-covered code and gnu gpl-covered code together in one program, not even by linking separate object files or libraries; no matter how this is done, it has to violate one license or the other. 
this conflict occurs because the gpl is serious about copyleft: it was designed to ensure that all changes and extensions to a free program must be free. 
so it does not leave a loophole for making changes proprietary by putting them into a separate file. 
to close this loophole, the gpl does not allow linking the copylefted program with code that has other restrictions or conditions—such as the npl. 
being incompatible with the gpl does not make a program nonfree; it does not raise a fundamental ethical issue. 
but it is likely to create a serious problem for the free software community, dividing the code base into two collections that cannot be mixed. 
as a practical matter, this problem is very important. 
solving this by changing the gpl is possible, but that would entail abandoning copyleft—which would do more harm than good. 
but it is possible to solve this problem with a small change in the npl. 
(see below for a specific way of doing this.) 4. a note about names. 
npl stands for netscape public license, but gpl does not stand for gnu public license. 
the full name of our license is the gnu general public license, abbreviated gnu gpl. 
sometimes people leave out the word "gnu" and write just gpl. 
(this is not a problem, just a fact that you should know.) conclusion. 
since problem 3 is the most serious, i hope that people will politely and rationally explain to netscape the importance of solving it. 
solutions are available; they just have to decide to use them. 
here is a possible way to permit linking npl-covered code and gpl-covered code together. 
it can be done by adding these two paragraphs to the npl: a.1. 
you may distribute a covered work under the terms of the gnu general public license, version 2 or newer, as published by the free software foundation, when it is included in a larger work which is as a whole distributed under the terms of the same version of the gnu general public license. 
a.2. 
if you have received a copy of a larger work under the terms of a version or a choice of versions of the gnu general public license, and you make modifications to some npl-covered portions of this larger work, you have the option of altering these portions to say that their distribution terms are that version or that choice of versions of gnu general public license. 
this allows people to combine npl-covered code with gpl-covered code, and to distribute the combined work under the terms of the gnu gpl. 
it permits people to release modifications to such combined works under the terms of the gnu gpl—but the easiest way to release them is under the npl. 
when people take advantage of a.2, their changes will be released only under the terms of the gnu gpl; so these changes would not be available for netscape to use in proprietary versions. 
it makes sense that netscape would see this as unfortunate. 
however, the npl gives proprietary software developers an easy way to make their changes entirely unavailable to netscape—by putting their code into separate files and calling the combination a larger work. 
in fact, this is easier, for them, than a.2 is for gpl users. 
if netscape feels it can live with the trouble of (effectively) proprietary modifications, surely the trouble of gpl-covered modifications is small by comparison. 
if netscape believes that practical considerations will encourage most of the proprietary software world to release its changes back to netscape, without being compelled to, the same reasons ought to apply in the free software world as well. 
netscape should recognize that this change is acceptable, and adopt it, to avoid confronting free software developers with a serious dilemma. 
on the netscape public license (original version). 
stallman this article was written march 10-12 1998, about the draft of the npl which was available at that time. 
the netscape public license or npl represents a serious attempt to design new free software distribution terms. 
it is an interesting attempt, but it has major flaws which need to be corrected. 
one flaw is so serious that we should regard it as making a program nonfree. 
the others have diverse consequences: one sends a bad philosophical message, while another creates a major practical problem for the free software community. 
the npl is still a draft, and still being changed; the aim of this article is not to attack and condemn, but to encourage improvements in the npl. 
if some of these problems have been corrected by the time you read this, so much the better, and we can put those obsolete issues aside. 
1. not all users are equal. 
the first problem i noticed in the npl was that it does not give netscape and the rest of us equal rights, as the gnu gpl does. 
under the npl, we can use netscape's code only as specified in the npl, but netscape can use our changes in any way at all—even in proprietary licensed versions of the software. 
the problem here is subtle, because this does not make the program nonfree. 
it does not stop us from redistributing the program, or from changing it; it does not deny us any particular freedom. 
considered from a purely pragmatic viewpoint, it may not look like a problem at all. 
the problem lies in the deeper message embodied in this condition. 
it denies the idea of cooperation among equals that our community rests on, and says that working on a free program means contributing to a proprietary software product. 
those who accept this condition are likely to be changed by it, and the change will not strengthen our community. 
one proposed solution for this asymmetry is to put a time limit on it—perhaps three or five years. 
that would be a big improvement, because the time limit would deny the problematical deeper message. 
the practical effects of this condition are minimized by another drawback of the npl: it is not designed as a thorough copyleft. 
in other words, it does not try very hard to ensure that modifications made by users are available as free software. 
2. not a copyleft. 
the npl has the form of a copyleft; it explicitly says that all modifications made by users must be released under the npl. 
but this applies only to modifications to the existing code—not to added subroutines, if they are put in separate files. 
as a practical matter, this means it is easy to make proprietary changes if you want to: just put the bulk of your code into a separate file, and call the collection a larger work. 
only the subroutine calls added to the old files will have to be released under the npl, and they will not be very useful on their own. 
the lack of real copyleft is not a catastrophe; it does not make the software nonfree. 
for example, the xfree86 distribution terms do not try to use copyleft at all, yet xfree86 is free software nonetheless. 
bsd is also non-copylefted free software (although the bsd terms have a serious drawback and should not be imitated—if you want to release non-copylefted free software, please use the xfree86 terms instead). 
netscape software can also be free software without being copylefted. 
however, while this is not catastrophic, it is nonetheless a drawback. 
and because the npl looks like a copyleft, some users may be confused about it, and might adopt the npl, thinking that they are obtaining the benefits of copyleft for their software, when that is not the case. 
to avoid this outcome, we will need to work hard to educate people about an issue that is not easy to explain in a few words. 
3. not respecting privacy. 
the next problem in the npl is a show-stopper: if you make a change, you are required to publish it. 
private changes for your own use are not allowed; distributing a change only to a few friends is also forbidden. 
when we think about the issues of free software, we usually focus on the freedom to distribute and modify, because this is what software developers most often try to prevent. 
but the freedom not to distribute a copy, when you don't wish to, is also important. 
for example, the freedom to make a modification and not show it to anyone is part of what we call "privacy."
 the freedom to distribute your modification to a few friends, but not show it to the general public (or not show it yet) is also essential. 
(of course, if the program is free, your friends will be free to pass it on to others if they want to—but they will not be required to.) correcting the npl to respect this basic freedom is absolutely essential, and our community must insist firmly on this. 
it is not worth sacrificing a vital freedom for one additional program, no matter how useful and exciting it may be. 
4. not compatible with the gpl. 
there is one other serious problem in the npl: it is incompatible with the gnu gpl. 
it is impossible to combine npl-covered code and gnu gpl-covered code together in one program, not even by linking separate object files or libraries; no matter how this is done, it has to violate one license or the other. 
this conflict occurs because the gpl is serious about copyleft: it was designed to ensure that all changes and extensions to a free program must be free. 
so it does not leave a loophole for making changes proprietary by putting them into a separate file. 
to close this loophole, the gpl does not allow linking the copylefted program with code that has other restrictions or conditions—such as the npl. 
being incompatible with the gpl does not make a program nonfree; it does not raise a basic ethical issue. 
but it is likely to create a serious problem for our community, dividing the code base into two collections that cannot be mixed. 
as a practical matter, this problem needs to be solved. 
solving this by changing the gpl is possible, but that would entail abandoning copyleft—which would do more harm than good. 
but it is possible to solve this problem with a small change in the npl. 
(see below for a specific way of doing this.) 5. a note about names. 
npl stands for netscape public license, but gpl does not stand for gnu public license. 
the full name of the our license is the gnu general public license, abbreviated gnu gpl. 
sometimes people leave out the word "gnu" and write just gpl. 
conclusion. 
since problems 3 and 4 are the most serious, i hope that people will politely and rationally explain to netscape the importance of solving them. 
solutions are available; they just have to decide to use them. 
there is talk that netscape has decided to correct problem 3—but letting them know this is important to you can't do any harm. 
there is no word that they plan to correct problem 4. here is a possible way to permit linking npl-covered code and gpl-covered code together. 
it can be done by adding these two paragraphs to the npl: a.1. 
you may distribute a covered work under the terms of the gnu general public license, version 2 or newer, as published by the free software foundation, when it is included in a larger work which is as a whole distributed under the terms of the same version of the gnu general public license. 
a.2. 
if you have received a copy of a larger work under the terms of a version or a choice of versions of the gnu general public license, and you make modifications to some npl-covered portions of this larger work, you have the option of altering these portions to say that their distribution terms are that version or that choice of versions of gnu general public license. 
this allows people to combine npl-covered code with gpl-covered code, and to distribute the combined work under the terms of the gnu gpl. 
it permits people to release modifications to such combined works under the terms of the gnu gpl—but the easiest way to release them is under the npl. 
when people take advantage of a.2, their changes will be released only under the terms of the gnu gpl; so these changes would not be available for netscape to use in proprietary versions. 
it makes sense that netscape would see this as unfortunate. 
however, the npl gives proprietary software developers an easy way to make their changes entirely unavailable to netscape—by putting their code into separate files and calling the combination a larger work. 
in fact, this is easier, for them, than a.2 is for gpl users. 
if netscape feels it can live with the trouble of (effectively) proprietary modifications, surely the trouble of gpl-covered modifications is a small by comparison. 
if netscape believes that practical considerations will encourage most of the proprietary software world to release its changes back to netscape, without being compelled to, the same reasons ought to apply in the free software world as well. 
netscape should recognize that this change is acceptable, and adopt it, to avoid confronting free software developers with a serious dilemma. 
network services aren't free or nonfree; they raise other issues. 
stallman programs and services are different kinds of entities. 
a program is a work that you can execute; a service is an activity that you might interact with. 
for programs, we make a distinction between free and nonfree (proprietary). 
more precisely, this distinction applies to a program that you have a copy of: either you have the four freedoms for your copy or you don't. 
if you don't, that program does a specific kind of injustice to you, simply because it is nonfree. 
the copyright holders of a nonfree program can cure that injustice in a simple, clear way: release the same source code under a free software license. 
convincing them to do this may be difficult, but the action itself is straightforward. 
an activity (such as a service) doesn't exist in the form of copies, so it's not possible for a user to have a copy of it, let alone make more copies. 
lacking a copy to modify, the user can't modify it either. 
as a result, the four freedoms that define free software don't make sense for services. 
it is meaningless to say that the service is "nonfree," or that it is "free."
 that distinction makes no sense, for services. 
that does not mean that the service treats users justly. 
quite the contrary—many services do wrong to their users, in various ways, and we call them "dis-services"—but there is no simple universal fix for this, comparable to that for a nonfree program (to release it as free software so users can run and control their copies and their versions). 
to use a culinary analogy, my way of cooking can't be a copy of your way of cooking, not even if i learned to cook by watching you. 
i might have and use a copy of the recipe you use to do your cooking, because a recipe, like a program, is a work and exists in copies, but your recipe is not the same as your way of cooking. 
(and neither of those is the same as the food produced by your cooking.) with today's technology, services are often implemented by running programs on computers, but that is not the only way to implement them. 
(in fact, there are network services that are implemented by asking human beings to enter responses to questions.) in any case, the implementation is not visible to users of the service, so it has no direct effect on them. 
a network service can raise issues of free vs nonfree software for its users through the client software needed to use it. 
if the service requires using a nonfree client program, use of the service requires ceding your freedom to that program. 
with many web services, the nonfree software is javascript code silently installed in the user's browser. 
the gnu librejs program makes it easier to refuse to run this nonfree javascript code. 
but the issue of the client software is logically separate from the service as such. 
there is one case where a service is directly comparable to a program: when using the service is equivalent to having a copy of a hypothetical program and running it yourself. 
in this case, we call it service as a software substitute, or saass (we coined that to be less vague and general than "software as a service"), and such a service is always a bad thing. 
the job it does is the users' own computing, and the users ought to have full control over that. 
the way for users to have control over their own computing is to do it by running their own copies of a free program. 
using someone else's server to do that computing implies losing control of it. 
saass is equivalent to using a nonfree program with surveillance features and a universal back door, so you should reject it and replace it with a free program that does the same job. 
however, most services' principal functions are communicating or publishing information; they are nothing like running any program yourself, so they are not saass. 
they could not be replaced by your copy of a program, either; a program running in your own computers, used solely by you and isolated from others, is not communicating with anyone else. 
a non-saass service can mistreat users by doing something specific and unjust to the user. 
for instance, it could misuse the data users send it, or collect too much data (surveillance). 
it could be designed to mislead or cheat users (for instance, with "dark patterns"). 
it could impose antisocial or unjust usage conditions. 
the franklin street statement made a stab at addressing these issues, but we don't have full understanding of them as yet. 
what's clear is that the issues about a service are different from the issues about a program. 
thus, for clarity's sake, it is better not to apply the terms "free" and "nonfree" to a service. 
let's suppose a service is implemented using software: the server operator has copies of many programs, and runs them to implement the service. 
these copies may be free software or not. 
if the operator developed them and uses them without distributing copies, they are free in a trivial sense since every user (there's only one) has the four freedoms. 
if some of them are nonfree, that usually doesn't directly affect users of the service. 
they are not running those programs; the service operator is running them. 
in a special situation, these programs can indirectly affect the users of the service: if the service holds private information, users might be concerned that nonfree programs on the server might have back doors allowing someone else to see their data. 
in effect, nonfree programs on the server require users to trust those programs' developers as well as the service operator. 
how significant this is in practice depends on the details, including what jobs the nonfree programs do. 
however, the one party that is certainly mistreated by the nonfree programs implementing the service is the server operator herself. 
we don't condemn the server operator for being at the mercy of nonfree software, and we certainly don't boycott her for this. 
rather, we are concerned for her freedom, as with any user of nonfree software. 
given an opportunity, we try to explain how it curtails her freedom, hoping she will switch to free software. 
conversely, if the service operator runs gnu/linux or other free software, that's not a virtue that affects you, but rather a benefit for her. 
we don't praise or thank her for this; rather we felicitate her for making the wise choice. 
if she has developed some software for the service, and released it as free software, that's the point at which we have a reason to thank her. 
we suggest releasing these programs under the gnu affero gpl, since evidently they are useful on servers. 
why the affero gpl? 
thus, we don't have a rule that free systems shouldn't use (or shouldn't depend on) services (or sites) implemented with nonfree software. 
however, they should not depend on, suggest or encourage use of services which are saass; use of saass needs to be replaced by use of free software. 
all else being equal, it is good to favor those service providers who contribute to the community by releasing useful free software, and good to favor peer-to-peer communication over server-based centralized communication, for activities that don't inherently require a central hub. 
u.s. 
congress threatens to establish a new kind of monopoly. 
companies that want monopoly powers to control public use of the information we get from data bases are trying to pass a law this year in the u.s.—creating, for the first time, a private monopoly over repeating publicly known information. 
they are using the "good bill, bad bill" method; the "bad" bill is hr 354; the "good" bill is hr 1858. 
this method should be familiar. 
first, one legislator introduces an outrageous bill, one that would give a large handout of money or power to certain special interests and serves no legitimate public purpose. 
this inspires a chorus of opposition from other special interests that the bill would trample. 
so a second legislator introduces a more cautious bill, more clearly written, with some safeguards, avoiding some gross abuses, offering a smaller handout to a somewhat broader spectrum of special interests—and still diminishing the public treasury or the public's freedom. 
the second bill is typically praised for its "balanced" approach, and interest groups that might oppose the general idea feel obliged to support it, to make sure that the even worse first bill won't pass. 
with little opposition remaining, the second bill passes, and society takes one step for the worse. 
a few years later, the first legislator may propose another give-away. 
if we keep meeting his sponsors half-way each time, over time they can get as much as they like. 
this time, the "bad" bill is hr 354, which would effectively allow facts to become private property, simply through their inclusion in an electronic data base. 
even mentioning more than a handful of the facts from any data base in a publication would be illegal, unless you could get them from some other source—often impossible, since in many cases there is no other ultimate source for a certain kind of fact. 
consider for example the scores of professional sports games. 
the score is counted in a computer, whose memory counts as a data base. 
under hr 354, regularly printing scores in a newspaper would become illegal. 
hr 354 would probably give network solutions a permanent monopoly on the internet domain name data base, making any change in the handling of top level domains impossible. 
any computer program counts as a data base under hr 354. 
so if the facts about the program's user interface and apis can't be obtained from anywhere else, any compatible program would be prohibited. 
this would be devastating for the future of free software. 
ominously, many collections of public records, maintained by companies on contract to governments, would become property of those companies. 
and west publishing company would regain its effective monopoly over the data needed to file a legal brief in much of the u.s. 
west maintains a data base of court decisions, and some courts require briefs to cite these decisions using page numbers as they appear in west's data base. 
west, seeking to prevent the necessary information from being available other than through their expensive service, used to claim that the pagination and page numbers were copyrighted, but a federal court ruled against them. 
the court said that these page numbers don't result from creativity, so they are not copyrightable. 
but they are indubitably a data base, so hr 354 would prohibit anyone else from providing this data to the public—thus granting west a permanent monopoly on the law itself. 
hr 354 would also interfere with scientific research, genealogical research, publication of stock prices, and many other areas of life and work. 
so it's no wonder that it has generated strong opposition. 
the supreme court might reject the bill as unconstitutional, but no one wants to rely on this. 
hence hr 1858—this year's "good" bill. 
hr 1858 explicitly avoids most of the outrageous problems. 
it establishes a narrower kind of monopoly, permitting use of the facts in a different kind of data base, or in anything other than an electronic data base. 
thus, you'll still be able to print game scores in an article, because an article doesn't count as a data base. 
a program is not a data base either, under hr 1858, so it will not create a new obstacle to writing compatible software. 
hr 1858 also excludes data bases for running the internet. 
(but not the data bases that may some day be used for running future worldwide systems, even if they are just as important as the internet is today.) it excludes data bases made by or for the federal government. 
(but, by default, it doesn't exclude those made by or for state governments; this is a substantial loophole in hr 1858.) a wide range of organizations are supporting hr 1858—including many universities and professional organizations. 
some of the letters of support show a clear desire for some kind of monopoly power. 
hr 1858 is much less harmful than hr 354—if we have to choose between the two, we should prefer hr 1858. 
but should we have to choose between a big loss of freedom and a smaller one? 
the advocates of these laws offer a reason, of course, for their proposal to limit our freedom. 
they say that nobody will maintain data bases without a monopoly over the contents. 
they have no specific evidence for this claim; it is based on an article of faith: a general assumption that nobody will do anything without a monopoly over the results. 
just a few years ago, people said the same thing about software—that nobody would write programs without having a monopoly on them. 
the free software movement has proved that this is not true, and in the process, we have refuted that general assumption. 
selfishness is not the whole of human nature. 
one kind of intellectual work, at least, can be done without a monopoly on the results. 
but data bases are not software. 
will anyone develop data bases without a data base monopoly law? 
we know they will—because they already do. 
many electronic data bases are available now, and the number is increasing, not decreasing. 
and many kinds of data base are byproducts or even preconditions of other activities that people do for other reasons. 
the data base companies can't deny this, so they threaten us with future uncertainty. 
"maybe we do this today, but ten years from now nobody will do it any more, unless you give us special privilege."
 we don't know what will happen in ten years; neither do they. 
the economic situation of the internet is changing rapidly, and no one knows where it is going. 
perhaps, in 2009, commercial data bases will disappear from the internet. 
or perhaps they will be very successful. 
perhaps networks of volunteers will maintain all the data bases anyone might want. 
perhaps advertising will provide a comfortable source of revenue to any company that maintains a data base; perhaps a much weaker law saying "if you redistribute our data base, you must redistribute our ads too" would serve their interests almost as well. 
nobody knows. 
what we do know is that things will change; if a data base law is passed this year, it will be obsolete a few years from now. 
but any attempt to abolish it will be opposed by the data base companies, which will protect their privileges by predicting the sky would fall without them. 
they will say: "we exist, so the law must be working."
 it is folly, or worse, to lock in a restrictive policy this year, to solve a problem whose existence is just speculation. 
a data base monopoly will take away your freedom, it's a surrender to special interests, it's hasty, and there is no clear public need for it. 
we should instead let the internet mature, and see what problems really need to be solved. 
so if you are a u.s. 
voter, write your congressman now. 
say that if he or she has a chance to vote on whether the data base bill should be like hr 354 or hr 1858, to choose hr 1858. 
but then say, when the data base legislation ultimately comes up for a vote, to vote against it, whatever it says. 
i've written a sample letter that you can use, but remember that your letter will carry more weight if you write in your own words. 
send your letter on paper; e-mail does not impress legislators, because they know how easy it is to send. 
be polite, but not timid, and try to keep it under 20 lines. 
please email your letter to <database-letters@gnu.org> also. 
dear representative so-and-so, congress is considering laws to establish a new kind of monopoly on electronic data bases. 
i am against the whole idea of this, because it would restrict the freedom of computer users. 
private interests should not be allowed control over dissemination of facts that are public knowledge. 
as a measure to promote business, this is premature; the internet is changing very fast, and passing any law about this issue in 1999 would be foolish. 
multiple alternatives are being considered for this bill; hr 354 is especially drastic and dangerous, while hr 1858 is less so. 
if you have a chance to vote on the choice between them, please choose hr 1858. 
but when the data base monopoly bill ultimately comes up for a vote, i ask you to vote against it, regardless of the details. 
sincerely, jane q. public there exists a list of senators and a service to assist you in writing to representative in the u.s. 
congress [archived]. 
speech on free software (2004). 
stallman this speech was given on feb 17, 2004 at the national institute of technology, trichy, tn, india. 
[moc] we will be starting off with the video conferencing session in a short while, audience please note, the questions should be written on a piece of paper, and handed over to moc desk. 
we have volunteers all around waiting with papers, so please use them to ask your questions. 
dr. 
richard stallman has a hearing problem and therefore he will not be able to understand your language. 
ladies and gentlemen, i feel privileged to be given the opportunity to to take you through this morning session, which is a trend setter in many ways. 
this is the first time in the history of nit, trichy that a video conference is going to take place. 
and the ece association, prides itself in taking this initiative. 
this wouldn't have been possible without the vision and hard work of the staff and the final years. 
we hope this initiative will be the first of many in the future and the good work is carried on in the coming years. 
software, a product of digital revolution is a more like magic. 
hundreds of copies of a software can be made at touch of a button. 
portions of code can copied and used in another program without much effort. 
these and lot of other properties make it an entirely different beast. 
a beast that does not bow to the conventional copyright laws. 
but some people for their own selfishness have tamed this beast and deprived the society the benefits of software. 
amidst this rose a man, who vowed to give back computer users their lost freedom. 
he proved to the world not by words, but by action that it is possible to produce software without computer users having to give up their freedom. 
a man who needs no introduction, but nevertheless must be introduced for sake formality. 
dr. 
richard stallman is the founder of the gnu project, 1984 to develop the free operating system, gnu. 
and thereby give computer users the freedom, that most of them had lost. 
gnu is a free software. 
everyone is free to copy it, and redistribute it, as well as make changes, either large or small. 
dr. 
richard stallman graduated from harvard in 1974, with a b.a in physics. 
during his college years he also worked as a staff hacker, at the mit ai lab, learning operating system development on the fly. 
in 1984, he resigned from mit to start the gnu project. 
he has received numerous prizes and awards for his work, which need no mention. 
today linux based systems, variants of the gnu system based on the kernel linux, developed by linus torvalds are in wide spread use. 
there are estimated to be some 20 million users of linux based systems today. 
and the number is growing at an unprecedented rate. 
ladies and gentlemen, meet the man, the driving force of the free software movement, dr. 
richard stallman. 
[applause] [silence] [rms] should i start? 
[silence] can you hear me? 
[silence] please raise your hands if you cannot hear me. 
[silence] so, if people could possibly be a bit quieter, i guess that i can start. 
[moc] audience please maintain silence. 
thank you. 
[rms] or may be it is just the system that is generating noise. 
i can't tell, i can't hear, if its people talking or it's some artifact of the communication system. 
it's just coming across as lot of noise to me. 
just turn the volume down some how, i will see how to do that. 
i don't seem to have a control for that. 
don't worry about it. 
don't turn it all the way off though. 
just a little bit lower. 
i want to have some indication of what's going on in the room, so that i can hear you, but the volume may be just a bit too high, so that the room noise is getting tremendous. 
okay. 
lets see. 
[silence] well i guess, i will just start, if that's the thing to do. 
my speech today well… is it the time i should start. 
or people are still coming into the room, should i wait a couple of more minutes. 
[moc] sir, we can start. 
[rms] i see people coming in. 
i will wait till the people come in and get seated. 
[moc] sir, it is getting late, i think we can start. 
[rms] okay. 
what is free software? 
free software is software that respects the freedom of the users. 
this doesn't have anything to do with price, at least not directly. 
i am not talking about gratis software. 
i don't mean software that you get without paying. 
that is actually a side issue that is not particularly relevant. 
i mean software that you can use in freedom. 
software that respects the freedoms of the user. 
or i should be more specific. 
which are the freedoms, that i mean. 
for programs to be free software, you the user must have four specific freedoms. 
there is freedom zero, the freedom to run the program, for whatever purpose in whatever manner. 
there is freedom one, the freedom to study the source code, to see what the program really does. 
and then change it to do, what you want. 
there is freedom two, which is the freedom to distribute copies to others, in other words the freedom to help your neighbor. 
and there is freedom three, the freedom to help build your community which is the freedom to publish a modified version, so that others can benefit from your contribution. 
all these freedoms, are essential. 
it's a mistake to think of them as levels of freedom, because all four must be present, in order for the software to be ethically legitimate. 
why these particular freedoms? 
freedom zero is essential so that you can have control over your own computer. 
if you are not free to use the program for whatever purpose in whatever manner then your use of your own computer, is being restricted. 
but freedom zero is not enough to have control over your own computer, because without more than that you can't control what the program does. 
freedom one is essential, freedom one enables to see personally what the program really does, and then it change to do whatever you really want it to do. 
if you don't have freedom one, then you do not control what your computer is doing, the developer of the program controls, what it's going to do on your computer, and you have no recourse. 
in fact, its not unusual for developers put in malicious features. 
this is primarily developers nonfree software, that put in malicious features and they figure that you cannot take them out. 
they figure, they will get away with it. 
because you are helpless. 
it is very common for nonfree programs to spy on the user. 
and they figure you might not be able to tell that its are spying on you, because you can't get the source code and so how would you know what it is reporting about you. 
we found out some cases, where programs spy on you. 
for example, windows spies on you. 
3 years ago there was a scandal, because microsoft setup windows to report what is installed on your disk. 
it would send this information back to microsoft. 
then there was a scandal there was an uproar so microsoft took it out, and put it back in disguise. 
about a year ago, some developers… some researchers found out that, they figured out that, windows xp when it asked for an upgrade, also reports to microsoft, what's installed on your disk. 
and it does this secretly, it sends the list of files encrypted, so that it was impossible for people to tell easily that this was going on. 
they had to work hard [fixme: 12:10] ??? 
to determine what information windows was sending back to microsoft. 
but, windows is not the only software package, nonfree software package that [fixme: 12:30 spies] on you. 
windows media player also spies on you. 
every time you access something, it sends a report to microsoft, saying what you are looking at. 
and real player also spies on you. 
so microsoft is not the only nonfree software developer guilty of this kind of special mistreatment of the users. 
the tivo spies on you. 
some people enthusiastic on tivo, because it is based on gnu and linux to some extent. 
but it also contains nonfree software. 
and it is designed to spy on you, and report what you watch. 
i am told there are many other programs that are spy-ware. 
then there are programs that do other nasty things to you. 
for instance there are programs that reconfigure your computer, so for instance that it will display ads for you all the time, and they don't tell you install this program and it will display these ads. 
they figure that most of the users won't notice, they won't will be able to figure out. 
they figure you will install several programs and you won't know which one changed your computer's configuration. 
or that you won't know how to undo it. 
of course, if it were free software this could be fixed. 
i will get to that in a minute. 
but sometimes they get even worse. 
sometimes programs have features designed to stop you from doing things. 
software developers like to talk about how their programs could do things for you. 
but sometimes they design programs that will refuse to do things for you. 
this is often called drm—digital restrictions management. 
where programs are designed to refuse to access files for you, to refuse to let you save files, or copy files or convert files. 
even more bizarre, there is a malicious feature in the music sharing program, kazaa, where the company… the developers sell time on your computer. 
so, other people will pay kazaa, so that they can run their programs on your computer. 
they don't pay you. 
in fact, this was being kept secret. 
the developers of kazaa didn't say to the users, "by the way, we are going to be selling time on your computer."
 people had to figure this out. 
so, i am telling you examples, that i have heard of. 
but you never know, if there is some other nonfree program, how do you it has some malicious secret feature. 
the point is you can't get the source. 
without freedom one, the freedom to help yourself, the freedom to study the source code and change it to do what you want, you can't tell what the program is really doing. 
all you can do is put blind faith in the developer. 
the developer says, "the program does this" now you either believe it or you don't. 
of course, not all developers of nonfree software are putting malicious features. 
some really are sincerely doing their best to put in features to please the user. 
but, they are all human, and they all mistakes. 
these mistakes are called bugs. 
well, we free software developers are also human, and we also make mistakes. 
our programs have bugs too. 
the difference is, when you have freedom you can study the source code and you can find whatever is bad in the program, whether it is a deliberate malicious feature or an accident. 
either way you can find it, and then you can fix the program to get rid of it. 
you can make the program better. 
with nonfree software you are just helpless. 
but with free software you have power over your computer. 
you are in control. 
but freedom one is not enough. 
freedom one is the freedom, to personally study the source code and then change it to do what you want. 
that is the freedom to help yourself. 
but freedom one is not enough, because first of all there are millions of people who use computers but do not know how to program. 
freedom one is not enough for them. 
they don't how to personally study the source code and change it to do what they want. 
but even for us programmers freedom one is not enough. 
because there are so many programs. 
nobody has time to study them all, and master them all, to be able to make changes in each one of them. 
so, we need to be able to work together. 
and that's what freedom three is for. 
freedom three is the freedom to help build your community, by publishing a modified version. 
so other people can use your version. 
this is what makes it possible for us all to work together taking control of our computers and our software. 
…that there are a million users and all of them want a certain change in a certain program. 
they want it to work like this way instead. 
well, in those million people, just by luck, there will be a thousand who know how to program. 
sooner or later there will be a ten of them, who read the source of the program, and made the change and publish a modified version that does what they want. 
and there are million other people who want the same thing. 
so, they will use the modified version. 
they all get a change to have what they want. 
because a few of them made the change. 
with freedom three, a few people can make change and it then becomes available to many people. 
and this way, any collectivity of users can take control over their software. 
what happens if there is a group of people who want a change but none of them knows how to program. 
suppose if only 500 people and none of them is a programmer. 
now, suppose it is 10000 but they are all people who have stores, so that they don't know how to program. 
well, with free software they can still make use of freedom one and three. 
they can all put together some money and when they have collected the money they can go to a programmer or to a programming company and say, "how much would you charge, to make this particular change and when can you have it done?"
 and if they don't like what that particular company says, they can go to a different company and say, "what would you charge to make this change and when can you have it done?"
 they can choose who they are going to deal with. 
and this illustrates the fact that free software means that there is a free market, for all kinds of services such as, to make the program do what you want. 
with nonfree software, support is a monopoly, because only the developer has the source code and only the developer can make any change. 
so if you don't like what the program does, you have to go to the developer and beg, "oh, please developer, please do my change for me."
 and probably the developer says, "you are not important enough, why should i care about you. 
there are just a hundred thousand of you why should i care."
 but with free software, there is a free market for support and if the developer isn't interested in what you want some body else will be, especially if you have some money to pay. 
there are users of software who consider good support crucial and they are willing to pay money so that they could have good support. 
in general, because free software support is a free market, these users can expect better support for their money, if they are using free software. 
paradoxically speaking, when you have a choice between several nonfree programs to do the same job, which ever one you choose the support for it is going to be a monopoly afterwards, so at the beginning you get a choice, but afterwards you are stuck in a monopoly. 
that's the paradox you have a choice between monopolies. 
in other words you get to choose who is going to be your master. 
but a choice of masters is not freedom, with free software you don't have to choose a master. 
you get to choose freedom, you don't have to choose between monopolies instead, you continue to have freedom for as long as you keep using that program you are using it in freedom. 
so i have explained freedom zero, one and three. 
these freedoms are all necessary so that you can have control over your computer. 
freedom two is a different matter, freedom two is to help your neighbor by distributing copies of the programs to others. 
freedom two is essential for a basic ethical reason, so that you can live an upright life where you help other people. 
now, the spirit… the most important resource of any society is the spirit of good will, the spirit of readiness to help your neighbors. 
of course, nobody spends a 100% of time helping his neighbors, nobody does a 100% of whatever other people ask. 
and that is appropriate because you have to take care of yourself also. 
but only extremely bad people do zero to help their neighbors and in fact normally in society you have levels of helping the neighbors in between, not 0 and not a 100% and these levels can get bigger or smaller depending on social change, by how we organize society we can encourage people to help their neighbor and help each other some what more or some what less and these changes in the levels make the difference between a livable society and a dog eat dog jungle. 
and it is not by accident that the world's major religions for 1000 of years have been encouraging people to help their neighbors, encouraging a spirit of benevolence of good will towards your fellow human beings. 
so what does it mean when powerful social institutions start saying sharing with your neighbor is wrong, they are discouraging people from helping each other reducing the level of cooperation. 
they are poisoning this essential resource. 
what does it mean when they say if you help your neighbor you are a pirate. 
they are saying that to share with your neighbor is the moral equivalent of attacking a ship. 
that morality is upside down, because attacking ships are really really bad but helping your neighbor is good and must be encouraged and what does it mean when the start making harsh punishments for people who share with their neighbors. 
how much fear is it going to take before people are too scared to help their neighbors. 
do you want to be living in a society filled with this level of terror. 
the only … for what they are doing is terror campaign. 
in 2 countries so far in argentina and then in germany, these companies, the developers of nonfree software have sent public threats, threatening people would be raped in prison for using unauthorized copies of software. 
the only thing you can call it when people are threatening others will rape is a terror campaign and we should put and end to this terrorism, right away. 
now, why did i say that freedom two, the freedom to help your neighbor is necessary to live an upright life. 
because if you agree to license for a nonfree program, you have partly participated in the evil. 
you have put yourself in a bad moral situation. 
by using a program that does not give you freedom two, the freedom to help your neighbor, you have put yourself in a moral dilemma, potentially. 
it may never happen, but as soon as somebody comes to you and says, could i have a copy of this program. 
you are now in a moral dilemma, where you have to choose between two evils. 
one evil is make a copy help your neighbor, but you violate the license, the other evil is you follow the license but you are a bad neighbor. 
they are both wrong, so you have to choose the lesser evil, the lesser evil in my opinion is to share with your neighbor and violate the license. 
because your neigh deserves… presuming this person had done nothing wrong, hasn't mistreated you, then he deserves your cooperation. 
where as, who ever tried to divide you from your neighbors is doing something very very wrong and doesn't deserve your cooperation, so if you got to do something wrong, you got to do it to somebody who deserves it. 
however, once you recognize this, once you realize, that using this nonfree program means you are liable to end up with a choice between two evils, what you should really do is to refuse to get into that situation, by refusing to use the nonfree program, refusing to have the nonfree program. 
if you insist on using and having only free software then you cant ever get into this moral dilemma. 
because when ever your friend asks you for a copy of the program, you will be able to say "sure," and it wont be any evil because free software means you are free to distribute copies. 
it means you have not promised that you refuse to share with other people. 
you can share and there is nothing bad about the situation. 
so once you recognize that, using and having the nonfree program means putting yourself in a potential moral dilemma, you say no to it. 
and that way you avoid the moral dilemma. 
you stay in a position where you can live in a upright life and you are not going to find yourself forced to do something wrong. 
once i was in the audience when john perry barlow was giving his speech, and he asked raise your hand if you don't have any unauthorized copies of software and only one person in the audience raised his hand, it was me. 
and he saw that and he said, "oh, of course you."
 he knew that all my copies were legal authorized copies because the programs were all free software. 
there are people who made copies from me were all authorized to copy the program and give me a copy. 
and all my copies were authorized. 
the information police, who are trying to put people in prison for having unauthorized copies, are doing something wrong. 
what they are doing is something illegitimate, what ah… what is it called… nascom, what they are doing is wrong, but at the same time i don't want to have to be sneaking when i give you copies of the software, so i would rather use the free software and then i can stand up even with the police watching. 
and i can give you a copy and i don't have to be scared we don't have to live in fear, by choosing free software. 
so these are the reasons that the four freedoms that define free software. 
freedom zero is the freedom to run the program as you seek it. 
freedom one is the freedom to help yourself by studying the source code and changing it to do what you want. 
freedom two is to distribute copies to others, and freedom three is the freedom to build your community by publishing an improved version, so as to help the other users of software. 
now, none of these is a question of price. 
free software does not mean you can get it at zero price. 
in fact it is perfectly legitimate for people to sell copies. 
that's an example of freedom two, freedom two is the freedom to make copies and distribute it to others. 
that includes selling them if you wish. 
you are free to make copies and sell them. 
it is true that typically people won't pay a large amount of money for their copies, because they know that can find someone else can give him a copy, so most people won't pay very much for a copy. 
they might pay a certain amount you know if the price is small enough, if it is easier them for them to pay it, than to go hunt around and go to the trouble of getting a copy gratis. 
there are people sell copies, and they make some money with it. 
but people generally can't do is hold the users to ransom, squeezing a lots of painful money out of them, because at that point the users will redistribute copies to each other, they will make the effort. 
so free software can't be used to squeeze money out of people in a way that hurts society. 
but it doesn't mean that no money ever changes hands it does not mean gratis. 
sometimes people in india refer it to as mukth software or swatantra software, to emphasis that we are not talking about gratis. 
but it is true that the savings that users can have because they are not forced to pay for permission, can be important for encouraging computer use, in a country with lots of poor people, because authorized copies of the software can cost more than the computer. 
now the computer can cost this much and the authorized copies of software can cost this much. 
well, there are lots of people in india who might be able to afford the computer, but couldn't possibly afford the software, because they can just barely afford a computer. 
so free software can make a big difference in terms of who in india can get a computer and run it. 
we don't see this yet, because a lot of people in india are using unauthorized copies. 
i don't think it is wrong to use unauthorized copies, but we can see the developers of nonfree software are trying to make this impossible. 
they have two different ways, one is the terror campaign you know threatening to rape people in prison, and the other one is technical changes that can prevent the unauthorized copies from running, making people register in order for the software to run, you can see this in windows xp, and there are more such measures coming. 
so what we can expect is, that it would be harder and harder in india to get by using unauthorized copies. 
and that means computer use in india and computer users in india are heading for a train wreck. 
they are on a course that leads to disaster and the thing that india needs to build is, start making effort to get on to the other track, to get on to the free software track, the track that escapes from this problem. 
so every social institutions in india, every government agency, every school, every organization, should be working as quickly as feasible, to switch people from the nonfree track to the free track. 
but this is not what they are doing. 
and you can see easily if you look around easily, government organization in india are mostly using nonfree software. 
and schools in india are using nonfree software. 
this is a terrible mistake, it is a foolish and disastrous policy, governments of course deserves to use free software. 
every computer user deserves to have the four freedoms, and that includes government agencies that use software. 
but when it is a government agency it has a responsibility, a duty to choose free software. 
because government agency does data processing for the public, and they have a responsibility to maintain control over their computers, to make sure that the data processing that they are doing is right. 
they do not, they cannot legitimately allow the processing of data to fall into private hands, so our private parties to have control over what their computers are doing. 
i see a lot of people moving around, what's happening… what's happening… i can't hear you, the sound is turned off apparently… [moc] sir, we are collecting questions. 
[rms] any way i hope it is over now. 
i will continue. 
so government agencies have a duty to make sure that they continue to control, what's going on in their own computers. 
so i see, you are collecting the questions already. 
but i am not even finished yet! 
anyway… i am probably about a half finished. 
ok, now i understand. 
so okay, i will continue. 
because remember, if you are using a nonfree program, you don't really know what it does and you have no control over what it really does. 
you can't tell if there is a back door. 
there are people who suspect that microsoft has put a back door into windows or other software. 
we don't know, because we can't see the source code, there is no way to find out, if there is a back door. 
and it is possible also, that some of microsoft employees put in a back door without being asked to. 
i heard some of the people working on windows xp, were arrested, accused of working a terrorist organization and accused of trying to put in a back door. 
now, this means, if you are using nonfree software, you have be scared that the company, that is the developer put in a back door, and you also have to be scared that some developers secretly put in a back door, that even the company doesn't know about. 
the point is, that because you can't get the source code, study it and change it, you are helpless either way. 
and microsoft did something really stupid. 
well, really absurd. 
supposedly, they offered various governments access to the source code. 
but they did it in a way that is fraudulent. 
for instance, they offered the indian government access to the source code of windows. 
but, that doesn't mean that they offered a copy of the source code to indian government. 
oh no! 
they offered access to a special server site, where a few chosen people from the government will be able to login and then single step through programs. 
and supposedly, see what's going on in the source code. 
but there would be no way they could guarantee that the source code they are looking at in the server, is the same thing that is running on their own machines. 
so the whole this is a fraud. 
a joke. 
except, the joke would be on the indian government, if it said yes to this project. 
and, meanwhile, even if one organization got access to the source code, if your organization doesn't have access to the source code, that doesn't help you. 
every school in india should be using free software. 
so as, to teach the children of india to grow up to be free software users. 
you see, teaching these children to become users of nonfree software is guiding them on to the track that leads to the train wreck. 
so schools have to be teaching these children to grow up to be free software users. 
it should be no surprise, that microsoft is offering gratis copies of windows to schools in india. 
they are doing this for the same reason that tobacco companies used to offer gratis packs of cigarettes to children. 
they are trying to get children hooked. 
they are not doing this, to be helpful to anybody. 
they are doing this so as to have more of their grip around these children. 
so, they are asking the schools to become accessories, in maintaining their grip. 
and this should not be surprising. 
if you compare microsoft with other forms of colonialism, you will see a lot of similarities. 
because you see, nonfree software is a system of colonialism. 
the developers… instead of one country colonizing another, it is various companies trying to colonize the whole world. 
and they do this, using divide conquer tactics. 
keeping the user divided and helpless. 
and if you think about it, that is what a nonfree program does, it keeps the users divided and helpless. 
divided, because you are forbidden to distribute copies to other people, forbidden to help your neighbor. 
and helpless, because you can't get the source code and change it. 
so, with this divide and conquer policy, you also see the policy of using the local [45:20] ???? 
to keep everyone else inline. 
so microsoft offers special deals, to whoever seems to have special influence, to get them to use windows, and thus keep everyone else inline. 
governments are being used in this way. 
and schools are being used in this way. 
the schools of india should reject nonfree software, and thus refuse to be used to keep the population of india inline and under the domination of the developers of nonfree software. 
but there are two even deeper reasons, why schools in india should insist on free software. 
one reason is for the sake of education. 
as people reach their teenage years, some of them are going to be fascinated by computers. 
they are going want to learn everything about what is going on inside that computer. 
they are going to want to learn how does this program work. 
if they are using nonfree software, the teacher has to tell them, "sorry, you can't learn that, i can't learn that. 
it's a secret. 
nobody is allowed to learn that."
 nonfree software prohibits education. 
but with free software, the teacher can say, "go ahead. 
here's the source code for this program. 
read it. 
you can learn. 
and then, now that you have read the source code, try making a change, try making a small change in this program. 
and then try making another. 
try changing that program. 
try changing that program."
 and this way the students who are fascinated by computers will learn to write good software. 
as far as i can tell, some people are born with the skill program, are born with their brains growing so that they will have the skill to program. 
they will be natural programmers. 
but writing clear understandable software is something you have to learn. 
that's judgment. 
the way you learn is by reading lots of source and by changing lots of programs. 
that way you learn what makes a program easy to understand and easy to change. 
every time you try to read a program and it is hard to figure out a certain part, you learn this is not the way to write clear code. 
nonfree software doesn't help you do this. 
nonfree software just keeps you in the dark. 
but if the schools of india switched to free software, then they can offer the students the opportunity to learn to be good programmers. 
to learn the same way i learnt. 
in the 1970s, i had a special opportunity. 
i worked at the ai lab at mit. 
and there, we had our own time sharing system, which was free software. 
we would share with anybody. 
in fact, we were delighted anytime when somebody was interested in any part of it. 
we were delighted anytime somebody wanted to join us in using it and then help develop it. 
and so i had the opportunity to read all these different programs that were part of the system, and make changes in them. 
and by doing this over and over again, for years, i learnt to be a good programmer. 
i had to go to one particular place on earth, to have this opportunity, which was very unusual, very rare. 
today any pc running the gnu plus linux operating system, will offer you this opportunity. 
every school in india that has a computer can offer its students the same opportunity, that i could only get at mit. 
so schools should use free software for the sake of education, but there is an even deeper reason, because schools are not supposed to teach just facts, just skills, but even more deep, they are supposed to teach the spirit of goodwill, the habit of cooperating with other people. 
so schools shall have a rule: if you bring software to class, you are not allowed to keep it for yourself, you must let the other kids copy it. 
a rule of good citizenship. 
of course, the school has to practice its on own. 
so, the school also should only bring free software to class. 
the software running on computers in class should all be free software and this way the schools can teach good citizenship. 
three weeks ago… no it was two weeks ago, when i met with dr. 
kalam and explained to him about why schools should use free software and about how nonfree software is colonial system, i was really delighted, because he understood it instantly. 
he recognized the analogy, how the colonial powers tried to recruit the [fixme: 51:40 weaks] ??? 
to become their assistants for keeping the rest of the population inline. 
and then, the most delightful part was that some people from microsoft were waiting to see him next. 
i am sure when he spoke with them… that this comparison will go through his mind, as they try to convince him to do something or other, as they offered some kind of inducement to help keep india inline. 
what happened in that meeting, of course i don't know; because i wasn't there in his subsequent meeting with microsoft. 
but i'm sure with this analogy running through his minds, he would have had some effect and i hope it will have some effect on you. 
when you, as part of the indian [fixme: 52:30] ??? 
are invited to help keep india inline. 
that you recognize that it's your duty to say no. 
when somebody invites you to join in a free software movement, where we weave our own code together, that you'll recognize that this is the way to put an end to colonialism. 
well, when somebody says, "what?! 
we have an office in india; we were spending a million dollars a year paying a few people in india. 
doesn't this make it okay for us the colonizer of the rest of india."
 well, you will recognize how stupid is this. 
the british employed people in india too, but that didn't make colonialism a good thing; didn't make it legitimate; didn't make it ethical. 
because every computer user deserves freedom. 
so i've been explaining why software should be free. 
so what do we do about it? 
i was thinking about these issues in 1983 and i reached the conclusion that software should be free; that the only way to live in freedom is to insist on free software. 
but what can i do about it? 
if you want to get a computer and run it, the first thing you need is an operating system and in 1983 all the operating systems for modern computers were nonfree, were proprietary. 
so what can i do? 
the only way you can get a modern computer and run it was to sign a contract promising to betray your neighbors. 
how could there be an alternative? 
the only way to have an alternative, the only way to use a computer and within freedom, was to write a free operating system. 
so i decided i would do that. 
i was an operating system developer, i've the skills to undertake this project. 
so i decided i would write free operating system, or die trying, presumably of old age. 
because at that time, the free software movement which was just beginning, had no enemies. 
we just had a lot of work to do. 
so i decided that i would develop a free operating system and i decided to make it a unix like operating system. 
so that it would be portable and so that unix users would be having easy times switching over to this operating system that would give them freedom. 
i figured, by making it compatible with some existing popular systems, we'll have more users and thus the community of freedom, the free world would grow bigger. 
and i gave the system the name gnu, which stands for gnu's not unix. 
it's a humorous way of giving credit to the ideas of unix. 
it's a recursive acronym and that was a traditional programmers of having fun and giving credit at the same time. 
at the same time the word gnu, is used for lots of word plays, it's a word that has a lot of humor associated with it which makes it the best possible name for anything. 
i should explain that the word gnu is the name of an animal that was in africa. 
we use the animal as our symbol. 
so if you see a smiling animal with some horns that is associated with our software, that's a gnu. 
so 20 years and 1 month ago, in january 1984, i quit my job at mit and began developing the gnu system. 
i didn't do it all myself, of course, i was also trying to recruit other people to help and gradually over the years more and more people joined in. 
during the 1980s, well we had only a few parts of the gnu system; some of these parts were superior and so people would take them and install them on their nonfree systems. 
for instance, the gnu emacs text editor and the gnu c compiler. 
these were programs that people would learn even on top of their nonfree unix system. 
but our real goal was not just to have a few popular programs, the goal was to make a complete system. 
so that we should reject the nonfree systems; reject nonfree software, escape from the bondage of nonfree software. 
so we kept filling in these gaps in the system and by the early 90s we had just one important gap remaining and that was the kernel. 
in 1991, a college student in finland, wrote a free kernel and released it under the name linux. 
actually in 1991, it was not free. 
initially it was released under a license which was little too restrictive and did not qualify as free. 
but in 1992, he changed the license and he made it free software. 
at that point it was possible to take this kernel and fit it into the gap in the gnu system and make a complete system. 
the system which is a combination of gnu and linux. 
this gnu plus linux operating system now has tens of millions of users. 
unfortunately, most of them don't know that it's basically the gnu system. 
they think the whole system is linux. 
that's the result of a confusion. 
the people who combined the linux and the gnu system, they didn't realize that they were using linux to fill this gap. 
they thought that they were starting with linux, and adding all the other components that were needed to make a complete system. 
well, all the other components were pretty much the gnu system. 
but they did not recognize that. 
they thought they were starting with linux and turning it into a complete system. 
so, they started speaking of this entire system as linux. 
even though it was actually more gnu. 
the result is the confusion that you will see today. 
many people when they talk about the gnu system call it linux. 
in fact, if you see someone talking about linux, then unless he is talking about an embedded system, he almost certainly means the gnu system with linux added. 
but sometimes he is talking about embedded systems, and there maybe he really means linux. 
because in embedded systems, sometimes people use linux by itself, without the rest of the operating system. 
you don't need a whole operating system in an embedded computer. 
so there is a lot of confusion. 
people say linux, and sometimes they mean an entire operating system that you could run on a desktop or a server, and sometimes they mean just this kernel, which is enough for a embedded machine and that's all. 
so, if you want to avoid confusing people, you need to distinguish them, use different names for different things. 
when you are talking about the kernel, please call it "linux."
 that was written by a person, who chose the name linux. 
and we ought to use the name he chose. 
when you are talking of the operating system, that's mostly gnu. 
and when i started developing it, i chose the name gnu. 
so please call this combination gnu plus linux. 
all i am asking for, is a equal mention, for the principle developers of the system, the gnu project. 
we wrote the largest part of the system, and we had the vision for doing this whole job. 
please give us equal mention. 
we need it. 
we need it, so that we can spread the philosophy. 
teach people the ethical reasons. 
the social and political issues that are stake here. 
why software should be free. 
now, it was suggested i should talk about, some issues having to do with hardware. 
sometimes, people ask whether hardware also should be free. 
well, the issue only partly is meaningful. 
because you see, what does it mean for software to be free. 
it means that, you are free to use it if you wish, study what it does, and change it. 
and copy it, and distribute copies, including modified copies. 
but you see, ordinary users of hardware, can't copy the hardware. 
there are no copiers. 
if i am ordinary user of software, i can copy it. 
because every computer is a copier for software. 
and i don't need any special facilities to be able to study the plans and change them. 
i just need to understand programming. 
then i can read the source code, as long as the developer will let me have a copy of the source code. 
but hardware isn't made by copying. 
you don't make computers, by putting them into a universal copier. 
you know, if somebody gives you one cpu chip, you can't copy that cpu chip to make another identical chip. 
nobody can do that. 
there are no copiers. 
now what about modifying it. 
nobody can modify a chip. 
once it's made, it's made. 
there are chips that are customizable. 
but to actually go in and modify the hardware of the chip, is impossible. 
for those chips that are customizable, suppose it is a microcodable chip, or a programmable gate array, the microcode, that's software, that's not hardware. 
the pattern of gates circuitry that goes in a programmable gate array chip, that pattern is software. 
that pattern can easily be changed and can easily be copied, because it is software. 
so that will help you understand, how these issues relate to various situations. 
the pattern that you load into something, that's software. 
and the physical object, that's the hardware. 
the physical object that can't just be copied, but has to be made in a factory. 
but sometimes, there is a different issue that does make sense for hardware. 
and that is the design spec, visible. 
you know, can the public get copies of design, to find out what the hardware does. 
well, this is necessary in certain cases, so that you can check for malicious features. 
this is a fairly new issue. 
in the past, you know, if you go to disk controller, you know, it's a card, you are going to put it in your computer, you didn't have to worry very much. 
is there a danger that there will be malicious feature on this disk controller. 
because there wasn't really much danger. 
there wasn't much scope for putting in malicious feature into people's disk controllers. 
because, how would they send a command to your disk controller. 
it just wasn't really feasible, to do those things. 
but, as these controllers get to be more… as the hardware gets more and more powerful hardware can be put in a smaller place, it becomes feasible, that somebody could put back doors, into your disk controller, into your cpu, into your network card. 
now, how do you know that your network card isn't setup to receive some secret message, which is going to tell it to start spying on you somehow. 
so these issues start mattering, once the hardware becomes powerful enough, we need to insist that we can control what's really inside it. 
but you noticed, that the lot of stuff inside this so called hardware, is really software. 
a lot of device controllers nowadays, have computers in them. 
and there is software to get downloaded into this computer, and that software should be free. 
that's the only way we can trust it. 
that's the only way we can tell that it doesn't have some secret back door feature, to spy on us. 
it has got to be free software. 
so, the general rule is, if people ask me the question, "does this apply to computers that are embedded?"
 i thought about this and i reached the conclusion, that if new software can be loaded into this computer, then it's visibly a computer, it really is a computer, for you the user. 
and that means you must have the freedom to control the software. 
but more recently, another issue is arising, that if the device can talk to the network, whether that's the internet, or the cell phone network, or whatever. 
if it can talk to other people, then you don't know whether it is spying on you. 
so, it has to be free software. 
consider for instance, portable phones. 
you shouldn't use a portable, unless the software is free. 
there really have been dangerous malicious features, in portable phones. 
there are portable phones in europe which have this feature, that somebody can remotely tell the phone to listen to you. 
it really is a spy device, in the most classical sense. 
and if you have a portable phone, do you know who could be spying on you at any time? 
you don't unless you are… unless the software in your portable phone is a free software. 
so, we must insist on free software for this portable phones. 
that's just one of the reasons i won't use a portable phone. 
because the portable phone network is a surveillance device. 
it can keep records of where you go. 
it can keep a permanent record of where you have been at all the time. 
and i think this is so dangerous such as threat to our freedom, that we must refuse to have these phones. 
they're dangerous, they're poison. 
any way for more information i would like to refer you the gnu projects web site, which is www.gnu.org and also to the web site of the free software foundation of india, which is fsfindia no sorry… i … no it's… it's gnu.org.in that's gnu.org.in. 
if you would like to help free software in india, please get in touch with fsf-india so that you can combine your efforts with other people and together you can fight for freedom. 
from now i'll accept questions. 
oh boy, am i sleepy! 
[moc] sir, we will be reading out the questions one by one collected from the audience, and… then you can answer the questions. 
[rms] okay, if one person asks multiple questions, please give them to me one at a time. 
[moc] yes, sir. 
the first question comes from h. sundar raman. 
his question is, "what is the difference between open source software and free software?"
 [rms yawns] [rms] i should first explain that free software and open source each has two related meanings. 
i am looking at a mirror image of myself. 
so it's hard to me to see where to put my hands. 
each one refers to a categorical software and each one refers to a philosophical movement. 
so there is the free software… the free software is a category of licenses. 
and there is the free software movement and it's philosophy. 
likewise open source is a category of licenses and a philosophy. 
for we can compare the free software movement and the open source movement… sorry, we can compare free software as a category of software with open source as a category of software. 
and we can compare the free software movement philosophy with the open source philosophy. 
and what you find is as categories of software they are very close together. 
open source is a category of licenses just as free software is a category of licenses. 
and these two categories are defined with very different language. 
but so far practically speaking they are pretty similar. 
there are some licenses that qualify as open source but do not qualify as free software. 
how ever they are not used very much. 
so, if you know that of certain program is open source and that's all you know, you can't be sure it's free software but it probably is free software. 
meanwhile, there are also the two movements and their philosophies. 
and these are very far apart. 
in the free software movement we have a philosophy based on freedom and ethics. 
we say that you must insist on free software so that you can live an up-right life and have freedom to help other people. 
the open source movement was formed specifically to avoid saying that, to reject our ethical principles. 
the open source movement doesn't say you should insist on open source software. 
they say that it may be convenient or advantageous. 
they sight practical values only. 
they say that they have a superior design… sorry a superior development model—superior in its shallow technical sense, that it usually produces technically better software. 
but that's the most they will say. 
they won't say that this is an ethical imperative, they won't say that software should be open source, they won't say that closed source software is an attempt to colonize you and you should escape. 
they won't say anything like that and in-fact the reason for their movement is specifically not to say that; to cover that up. 
and so when it comes to the philosophical foundation what they say and what we say are as different as night and day. 
and that's why i am always very unhappy when anybody associates me or my work with open source. 
the people who developed, who are motivated by the open source movement, they are usually contributing to our community because usually their software is free. 
and that can be a good contribution. 
but i disagree with their philosophy completely. 
i think it is shallow. 
and i am very unhappy when people label me by their slogan and give people the impression i agree with that philosophy. 
so next question please. 
[moc] the next question comes from advait thumbde. 
his question is freedom to copy may not generate enough money; which is essential to fund resources for technological development. 
where as many rival firms… [rms interrupts] no. 
that's false. 
that's false. 
money is not essential for technological development, not in the software field. 
may be in an other field it is because other fields are much more difficult. 
it cause a lot of money to setup a factory to build hardware. 
well, that requires an investment. 
but we have proved, in the free software movement we have proved that we can develop a wide range of software with out any investment. 
we proved this by doing it. 
there are about a million people contributing to the free software and most of them are volunteers. 
large programs has been developed by volunteers, which proves that its not necessary to raise a lot of money. 
it's not necessary to have any money. 
now i suppose that these volunteers are not starving, they are not living on the streets. 
they must have jobs. 
i don't know what their jobs are, but remember that if you look at all computer related employment, only a small fraction of that is programming. 
and most of that is custom software design, only a small fraction of that is developing software for publication. 
to be made available to the public. 
so there are lots of jobs these people might have to support themselves. 
so that they can spend some of their free time developing our free software. 
and this is not a problem as long as we develop lots of free software. 
and we do. 
the fact is we know this is not a problem. 
so, the people who say that free software won't work because we can't raise enough money, that's like people saying air planes won't work because of we don't have anti-gravity. 
well, air planes do work which proves we don't need anti-gravity. 
i should also point out there are also people who are getting payed to develop free software. 
the money comes from in-various ways. 
sometimes these people are extending existing free programs to meet the demands of clients. 
sometimes, they are getting funding from universities or governments. 
governments fund the large fraction of all the software developments in the world and except in the rare cases where the software has to be kept secret. 
it could just as well be free software. 
so we should be spreading the word in academia. 
when you have a project to develop some software, it must be free software. 
it's an ethical requirement to make it free software. 
finally, i should say that you might want to get money to do something; you might want to make money out of an activity. 
and this is not wrong, not in itself. 
but if the activity itself is wrong then you can't justify it by saying i'm going to get money. 
you know, the [fixme 81:00] get money; but that's no excuse for robing people. 
nonfree software is ethically poison. 
it's a scheme to keep people divided and helpless. 
it's a form of colonization. 
and that's wrong. 
so when a person says to me "i'm going to make my program proprietary so that i can get money, so that i can work full time developing the program" i say to him "that's like saying you're going to rob people so that you can get money, so that you can spend full time robing people."
 it's all wrong. 
and you shouldn't do it. 
i believe that people who contribute to society made it… well… people contribute to society it's a good idea if we reward them for it. 
and when people are doing things that harm society, it's a good idea if we find ways to punish them for it. 
that will encourage people to do things that contribute to society and not to do things that hurt society. 
and therefore people who develop free software should be rewarded and people who develop nonfree software should be punished. 
because, free software is a contribution to society but nonfree software is a scheme to colonize society and that deserves punishment not reward. 
another way to look at it is to realize that to use a nonfree program is either to be foolish or unethical or both. 
which means that, for me, these nonfree program …is… might as well be nothing because i am not going to use it. 
ethical people, people who insists on living an up-right life are going to reject it any way. 
so his program is only avail… only going to be of used to suckers. 
who don't have well trained consciousness. 
and what good is that? 
so the person says to me "i can only develop this program if i make it proprietary; that's the only way i can bring in enough money so that i can spend the time developing this program."
 i'm not going to tell him that can't be true because i don't know his circumstances. 
if he says that there is no way he can develop this program unless he has paid full time and if he says that he doesn't know any way to get payed full time except to make the program proprietary; i'm not going to tell him this is false because he knows his situation. 
what i will tell him is, "please don't develop the program."
 developing the program in that way would be evil or would be harmful. 
so it's better if you don't do it at all. 
do something else. 
because a few years from now sooner or later some one else will be in a different situation. 
some one will be able to write this program with out subjugating the users. 
and we could afford to wait a few years so that we keep our freedom. 
freedom is worth a small sacrifice. 
we can wait a few years. 
so next question. 
[moc] his next question is "all intellectual work like books are proprietary."
 is it not justified in case of software? 
[rms] well, he is mistaken. 
there are plenty of free books as well. 
in fact more and more the movement is catching on to makes books free, free as in freedom i mean. 
now, we started doing this in the 1980's. 
the manuals for gnu software that are developed by the gnu project are all free in the sense that you are free to copy them. 
they are not gratis at-least not always. 
we print copies and we sell them and we sell them for more than the production cost because we're trying to raise money. 
so, you know, of course this was to produce re-charge this much because we're trying to raise substantial money with these books. 
but you are free to copy and change them. 
and you could even get the source code through the internet, the source code for the books. 
and now we are not the only ones. 
there is now a movement for free text books. 
in-fact there are projects in india and elsewhere to develop free educational materials to make available to schools. 
a complete curriculum of free educational materials. 
because educational materials should be free. 
and so i suggest that you look at the site gnowledge.org. 
that's like knowledge but spells with a g instead of a k. and you will see one of these initiatives being carried out by prof. 
nagarjuna in mumbai. 
also, i should mention the free encyclopedia—wikipedia. 
it's the largest encyclopedia in history. 
i believe, it now has more than a hundred and sixty thousand entries. 
which is far more than any other encyclopedia has ever had. 
like around twice. 
and this has been done in just a few years; by the public. 
so, if we were to believe these threats, ???? 
people say the only way to develop these things, the only way to write and update an encyclopedia is proprietary, they are making a threat. 
they're saying if you don't agree to give up your freedom, you won't get the encyclopedia, you won't get the software. 
they're asking us to feel helpless and feel desperate. 
and that's really foolish. 
[rms yawns] next question. 
[moc] the next question is from ganapathy. 
he says "i believe the greatest challenge to free software lies in getting quality software which means quality software developers. 
but enough drive has to be there for them to spend time and brain. 
so what do you suggest for getting enthusiastic developers."
 [rms interrupts] that's not true. 
well, you know i keep getting questions from people who believe things that are demonstrably false. 
people who are making guesses about our community and they're guessing wrong. 
the fact is free software has a reputation for high quality. 
the gnu plus linux operating system initially began catching on back in the 90's because of its high quality. 
people discovered that it would stay up for months. 
that they would find… the only time the system went down is when the power failed. 
and this contrasts with nonfree software that's often quite unreliable. 
so you see this often, you will see people foolishly making the assumptions that free software can't work. 
they don't know any thing but they're making it all up. 
now, why is this? 
i guess because nonfree software is so common, they make the assumption it must work well. 
do you think that people use windows because it is good? 
what a ridiculous idea. 
people use windows because other people use windows and that's the only reason. 
well, no that's not the only reason… they use windows because it comes on their computers. 
these are the two reasons. 
the only reason that… let any one… one thing in the usual thing why does some alternative survive; only because it's better. 
free software has to be twice as good. 
in order to get practically minded people to choose it. 
of course you can hear my scorn in the term practically minded. 
these are people who don't value their freedom. 
they're fools. 
a fool and this freedom are soon parted. 
but there are plenty of fools; especially in a lot of organizations are people who believe that they are not supposed to pay attention to ethics or freedom. 
they are only supposed to pay attention to short-term practicalities. 
which is a recipe for making bad decisions. 
for hurting society. 
but that's the way they are. 
so why is it that even those people some times choose free software? 
because it has practical advantages. 
for instances it's powerful and it's reliable. 
next question [moc] the next question is from subramani. 
distributing the software as a free copy is user friendly but is it business friendly. 
don't you think it will disturb the economic balance in the software. 
[rms] this is utterly foolish. 
first of all, remember that i explain that free software is a matter of freedom not price. 
free software does not mean that it is gratis. 
but sometimes it's gratis. 
on the other hand some time you can get nonfree software gratis. 
that doesn't make it ethically legitimate, because it's still tramples your freedom. 
it still keeps you divided and helpless, even if you didn't have to pay. 
schools in india can get windows gratis. 
but it's still harmful. 
so the issue is not about price. 
the issue is about whether the software respects your freedom. 
and this… this… idea there is some kind of balance. 
i don't know what in the world he is talking about? 
but remember if a business is making money by subjugating people, that's bad, that's some thing we should bring to an end. 
there are many businesses that operate by mistreating people. 
and those businesses are bad. 
they don't have a right to continue. 
they deserved to be brought to an end. 
i won't say that nonfree software is the biggest such problem. 
because, you know child labor is very common but i don't think that's mostly free software development. 
i think it's mostly other things. 
there are many ways that a business can be… can operate that is harmful to society. 
and we have to put in an end to that. 
or in looking at coca cola, poisoning people, while draining away the water supply from the people. 
and not only that; they murder union organizers in colombia. 
so, there is a world wide boycott of coca cola company. 
coca cola company is, by the way, being sued in the u.s. 
for arranging with paramilitary [fixme: subs..94:07] to murder union organizers in colombia. 
so join the boycott. 
don't buy coke. 
so i hope… i said this basically to illustrate that there are many ways a business can conduct itself unethically. 
and businesses that conduct itself unethically don't have a right to continue. 
they're not legitimate and they shouldn't be treated as legitimate. 
nonfree software development is an example because what ever the program itself does, the license subjugate the users. 
and that's wrong. 
next question. 
[moc] windows is supporting regional languages and it's helping the people of india but gnu doesn't have this feature. 
what is your suggestion in this regard? 
[rms] he is mistaken. 
you know, i have never given a speech where so many questions that make false statements, criticizing the free software movement in a ways that are not true. 
why is it… you know i can understand not knowing. 
every one of us is born completely ignorant. 
and every one of us, in any particular subject starts out knowing nothing. 
but why are peoples here are so ready to make assumptions when they don't know. 
why do not admit you don't know? 
why these people believes things which are false. 
which clearly they don't have good evidence for. 
actually, windows… doesn't it support all the indian languages? 
and are the other hand free software does. 
and it is not just windows by the way, there are many other nonfree software packages and nonfree means you can't change it. 
with free software you can change it. 
so if you want a program to support your favorite language and it's nonfree, you have to beg and plead with that developer to cater to you. 
but if the program is free software, you don't have to beg anybody. 
you can just do it. 
and this is what happening. 
people in india are adapting gnu/linux to various different indian languages. 
and if they haven't yet done your favorite language, you can start the project. 
you are not helpless. 
launch the project to support your favorite language. 
you know, even tribal people can localize the system to their language. 
you don't have to have the one of the major recognized languages. 
in order to get support in free software, you just have to be willing to do the work. 
next question please. 
[moc] sir, we would like to know how long can we continue this question and answer session? 
[rms] well, certainly i'll do another fifteen minutes. 
[moc] yes sir. 
[rms] oh, please don't call me sir. 
i believe in equality. 
and it's really a sort of bad for me if you call me sir. 
it might make me get in over inflated estimate of how important i am. 
and that will be bad for me, as well as bad for you. 
the important thing here is freedom. 
i am just its representative. 
[moc] the next question is from vijay anand. 
the question is, "there are lots of incompatible gnu/linux distributions. 
is this a drawback to the free software movement?"
 well, we shouldn't over estimate the extent to which they're incompatible. 
at the source level they are almost all… they are mostly compatible, unless you are doing very obscure things. 
you don't need to worry about the variations when you are writing source code. 
they will have different binary and different packaging but that's not a very big difficulty. 
so, i say, no it's not a major drawback. 
of course you know, having different versions of the system can be good if users… different users want them. 
now let's contrast this with the kind of incompatibility that we have, that we find in the nonfree world. 
you'll find that microsoft makes gross incompatibilities in each version of its systems. 
they makes… they deliberately make formats incompatible with everything else and protocols incompatible with everything else. 
they try many different ways to prevent other people from inter operating with them. 
and each version of a microsoft package is likely to be incompatible with the previous version. 
they impose incompatibility because they have power and they think they can get away with it. 
whereas in free software world we developers don't have power. 
if i make a decision that you don't like, you are not stuck with it. 
because you have the source code, you can change it, you can change any of my decisions. 
whether i make this decision… you know, if hypothetically i choose to impose incompatibility on you, you could change it, you could take my program and modify it to compatible with whatever. 
where is… you know, …even if i made a decision that you just don't like for some other reason, you can still change it. 
you can change any of my decisions regardless of why i made the decision, regardless of why you don't like it; you can change it. 
so i don't have any power over you when i develop free software. 
you, the users are in control of your software. 
so it will you generally do what you want more or less. 
but the developers of nonfree software, they do have power over you. 
and so you are stuck with their decisions. 
next question please. 
[moc] the next question is from rakesh. 
"since the source code of free software is available, it is possible for a cracker to introduce malicious code into the program and distribute binaries, so that it looks like the original. 
is this a drawback to the free software movement?"
 [rms] well, we have ways of protecting against this. 
for instance you can get your copies from a reputable distributor and we use digital signatures to sign our co… and we use … you know, cryptographic [fixme: catches 1:42:48] the checksums. 
so that you can see the checksum that the developer publish and thus get an assurance that the version you have is the correct version. 
[silence] [moc] the next question is from krishnan. 
the question is, "when do you expect the gnu hurd to be available to the public for normal use?"
 [rms] i have learned i should not try to predict that. 
a few months ago, the hurd developers concluded that they really should switch to a different micro kernel. 
and it's going to take a substantial amount of work to do that. 
so i'm… i'm disappointed by this delay. 
but it looks like that will mean some delay. 
next question please. 
[moc] the next question is from manu meta… metallurgy. 
the question is, "is developing free software on nonfree operating systems wrong?"
 [rms] well, it's not exactly wrong. 
but it's foolish to use the nonfree operating system because you can't live in freedom as long as you do that. 
and your software, although it be free, is not a contribution to the free world when it doesn't… if it doesn't run on a free operating system. 
and in particular you should be careful about sun's java platform. 
never use sun's java platform to develop software. 
and at least not develop free software because sun's java program is not free. 
there are free java platforms, but they don't have all the capabilities of the sun's java platform. 
so the danger is if you are using the sun's java platform you might use some features we don't have yet. 
and you wouldn't even know it. 
you won't notice because you won't notice a problem because it will work. 
it will work on sun's platform. 
so then several months later you'll try the program on our platform and find that you did months work based on a feature we don't have and you will say "oh! 
it would be so much work to redo that; that i can't do it."
 so then your program won't run on a free platform at all. 
at least not until years go by and we have implemented a replacement for that feature. 
so you should use our free java platform to develop that. 
use the gnu java platform… the gnu java compiler and use the gnu classpath as the libraries. 
don't use sun's java libraries, they are not free. 
so this way if you ever start to use a standard java feature that we don't have, you'll find out immediately. 
and you'll be able to choose some other way of solving the problem with out wasting a lot of time. 
next question please. 
[moc] what do you think is the greatest obstacle for free software in india? 
how do we break them up? 
[rms i'd say the biggest obstacle for free software in india right now is the tendency of government agencies and schools to use nonfree software. 
it's vital to convince the schools to teach the children in india to grow up living in freedom. 
when windows… microsoft offers the schools gratis copies of windows, the schools have to say "we are not going to accept them; we are not going to participate in teaching our kids to be addicts."
 next question please. 
[moc] the next question is from pankaj. 
the question is "does the availability of source code make them more vulnerable to attacks?"
 [rms] well, [fixme 108:00] speaking the answer is just opposite. 
our software is much more secure. 
people have various speculations about why that is the case. 
i don't know why, but that's what people observe. 
next question. 
[moc] this is the last question of this conference. 
[rms] okay. 
[moc] the question is, "there was a recent controversy over the gfdl. 
what was the controversy?"
 [rms] sorry, controversy over what? 
[moc] the gfdl; license. 
[rms] oh, there are some people who don't like some of the provisions of the gfdl. 
the gfdl arose non-technical sections, sections that give your opinions about the… the field and so on, which are in-variant. 
they can't be changed or removed. 
the gfdl says that the actual subject matter of the work, it's designed for manuals. 
and the gfdl says that the actual documentation has to be free, but you could also have opinion sections which don't have any documentation but they give your opinion about the ethics of the field and so on. 
and those have to be preserved and can't be changed. 
there are people who think that this is wrong. 
i think that they are being too rigid in their understanding of the freedoms. 
people need the freedom to change the technical substance of the work. 
and the gfdl provides that freedom. 
but having the authors opinion in there somewhere doesn't interfere with your user of the work to do with technical job and doesn't interfere with your changing in the work to do a different technical job. 
so if that was the last question then i guess we're done. 
[moc] we thank you sir, for this inspiring and interesting session. 
[rms interrupts] please don't call me sir. 
[moc] we thank you richard, for this inspiring and interesting session. 
you have provided us with immense knowledge over free software. 
and cleared many doubts pertaining to the movement. 
we now fully understand the importance of using free software. 
we assure this would have earned you many followers among the students community of our college. 
we find ourself… [rms interrupts] happy hacking and good night. 
[moc] a very good night to you sir. 
[applause] contributors (in alphabetical order): krishnan, saravana manickam, vijay kumar, vimal joseph. 
don't let "intellectual property" twist your ethos. 
stallman june 09, 2006 most free software licenses are based on copyright law, and for good reason: copyright law is much more uniform among countries than contract law, which is the other possible choice. 
there's another reason not to use contract law: it would require every distributor to get a user's formal assent to the contract before providing a copy. 
to hand someone a cd without getting his signature first would be forbidden. 
what a pain in the neck! 
it's true that in countries like china, where copyright law is generally not enforced, we may also have trouble enforcing free software license agreements, as heather meeker suggests in her recent linuxinsider column, "only in america? 
copyright law key to global free software model."
 however, this is not a reason to press for more copyright enforcement in china. 
although we would use it to protect people's freedom, we have to recognize that mostly it would be used by the likes of microsoft, disney and sony to take it away. 
ironically, we might have more success enforcing copyright in china than microsoft, disney and sony—because what we would want to do is easier. 
disney wishes to stamp out semi-underground organizations that sell exact copies. 
with free software, regardless of precisely which free license is used, that kind of copying is legal. 
what we want to prevent, when the free software license is the gnu gpl, is the release of proprietary software products based on our code. 
that kind of abuse is at its worst when carried out by large, well-known companies—and they are easier targets for enforcement. 
so gpl enforcement in china is not a lost cause, though it won't be easy. 
no chinese laundry. 
nonetheless, meeker's claim that this leads to a global problem is simply absurd. 
you can't "launder" material copyrighted in the u.s. 
by moving it through china, as she ought to know. 
if someone violates the gnu gpl by distributing a nonfree modified version of gcc in the u.s., it won't make any difference if it was obtained or modified in china. 
u.s. 
copyright law will be enforced just the same. 
although this error might seem to be the central point of meeker's article, it is not. 
the real central point of the article is the perspective embodied in her use of the term "intellectual property."
 she uses this term pervasively as though it refers to something coherent—something it makes sense to talk about and think about. 
if you believe that, you have accepted the article's hidden assumption. 
loose language. 
sometimes meeker switches between "intellectual property" and "copyright" as if they were two names for the same thing. 
sometimes she switches between "intellectual property" and "patents" as if they were two names for the same thing. 
having studied those two laws, meeker knows they are vastly different; all they have in common is an abstract sketch of their form. 
other "intellectual property" laws don't even share that much with them. 
the implication that you can treat them all as the same thing is fundamentally misleading. 
along with the term "intellectual property" goes a false understanding of what these laws are for. 
meeker speaks of an "ethos" of "intellectual property" that exists in the u.s. 
because "intellectual property is in the constitution."
 that's the mother of all mistakes. 
what is really in the u.s. 
constitution? 
it doesn't mention "intellectual property," and it says nothing at all about most of the laws that term is applied to. 
only two of them—copyright law and patent law—are treated there. 
what does the constitution say about them? 
what is its ethos? 
it is nothing like the "intellectual property ethos" that meeker imagines. 
failure to execute. 
what the constitution says is that copyright law and patent law are optional. 
they need not exist. 
it says that if they do exist, their purpose is to provide a public benefit—to promote progress by providing artificial incentives. 
they are not rights that their holders are entitled to; they are artificial privileges that we might, or might not, want to hand out to encourage people to do what we find useful. 
it's a wise policy. 
too bad congress—which has to carry it out on our behalf—takes its orders from hollywood and microsoft instead of from us. 
if you appreciate the u.s. 
constitution's wisdom, don't let "intellectual property" into your ethos; don't let the "intellectual property" meme infect your mind. 
practically speaking, copyright and patent and trademark law have only one thing in common: each is legitimate only as far as it serves the public interest. 
your interest in your freedom is a part of the public interest that must be served. 
we can put an end to word attachments. 
don't you just hate receiving word documents in email messages? 
word attachments are annoying, but, worse than that, they impede people from switching to free software. 
maybe we can stop this practice with a simple collective effort. 
all we have to do is ask each person who sends us a word file to reconsider that way of doing things. 
most computer users use microsoft word. 
that is unfortunate for them, since word is proprietary software, denying its users the freedom to study, change, copy, and redistribute it. 
and because microsoft changes the word file format with each release, its users are locked into a system that compels them to buy each upgrade whether they want a change or not. 
they may even find, several years from now, that the word documents they are writing this year can no longer be read with the version of word they use then. 
but it hurts us, too, when they assume we use word and send us (or demand that we send them) documents in word format. 
some people publish or post documents in word format. 
some organizations will only accept files in word format: i heard from someone that he was unable to apply for a job because resumes had to be word files. 
even governments sometimes impose word format on the public, which is truly outrageous. 
for us users of free operating systems, receiving word documents is an inconvenience or an obstacle. 
but the worst impact of sending word format is on people who might switch to free systems: they hesitate because they feel they must have word available to read the word files they receive. 
the practice of using the secret word format for interchange impedes the growth of our community and the spread of freedom. 
while we notice the occasional annoyance of receiving a word document, this steady and persistent harm to our community usually doesn't come to our attention. 
but it is happening all the time. 
many gnu users who receive word documents try to find ways to handle them. 
you can manage to find the somewhat obfuscated ascii text in the file by skimming through it. 
free software today can read most word documents, but not all—the format is secret and has not been entirely decoded. 
even worse, microsoft can change it at any time. 
worst of all, it has already done so. 
microsoft office 2007 uses by default a format based on the patented ooxml format. 
(this is the one that microsoft got declared an "open standard" by political manipulation and packing standards committees.) the actual format is not entirely ooxml, and it is not entirely documented. 
microsoft offers a gratis patent license for ooxml on terms which do not allow free implementations. 
we are thus beginning to receive word files in a format that free programs are not even allowed to read. 
when you receive a word file, if you think of that as an isolated event, it is natural to try to cope by finding a way to read it. 
considered as an instance of a pernicious systematic practice, it calls for a different approach. 
managing to read the file is treating a symptom of an epidemic disease; what we really want to do is stop the disease from spreading. 
that means we must convince people not to send or post word documents. 
i therefore make a practice of responding to word attachments with a polite message explaining why the practice of sending word files is a bad thing, and asking the person to resend the material in a nonsecret format. 
this is a lot less work than trying to read the somewhat obfuscated ascii text in the word file. 
and i find that people usually understand the issue, and many say they will not send word files to others any more. 
if we all do this, we will have a much larger effect. 
people who disregard one polite request may change their practice when they receive multiple polite requests from various people. 
we may be able to give don't send word format! 
the status of netiquette, if we start systematically raising the issue with everyone who sends us word files. 
to make this effort efficient, you will probably want to develop a canned reply that you can quickly send each time it is necessary. 
i've included two examples: the version i have been using recently, followed by a new version that teaches a word user how to convert to other useful formats. 
they are followed by several suggestions sent by other people. 
you can use these replies verbatim if you like, or you can personalize them or write your own. 
by all means construct a reply that fits your ideas and your personality—if the replies are personal and not all alike, that will make the campaign more effective. 
these replies are meant for individuals who send word files. 
when you encounter an organization that imposes use of word format, that calls for a different sort of reply; there you can raise issues of fairness that would not apply to an individual's actions. 
some recruiters ask for resumes in word format. 
ludicrously, some recruiters do this even when looking for someone for a free software job. 
(anyone using those recruiters for free software jobs is not likely to get a competent employee.) to help change this practice, you can put a link to this page into your resume, next to links to other formats of the resume. 
anyone hunting for a word version of the resume will probably read this page. 
this page talks about word attachments, since they are by far the most common case. 
however, the same issues apply with other proprietary formats, such as powerpoint and excel. 
please feel free to adapt the replies to cover those as well, if you wish. 
with our numbers, simply by asking, we can make a difference. 
you sent the attachment in microsoft word format, a secret proprietary format, so i cannot read it. 
if you send me the plain text, html, or pdf, then i could read it. 
sending people documents in word format has bad effects, because that practice puts pressure on them to use microsoft software. 
in effect, you become a buttress of the microsoft monopoly. 
this specific problem is a major obstacle to the broader adoption of gnu/linux. 
would you please reconsider the use of word format for communication with other people? 
(explanatory note: i can handle odf too, but it isn't very convenient for me, so i don't include it in my list of suggestions.) you sent the attachment in microsoft word format, a secret proprietary format, so it is hard for me to read. 
if you send me plain text, html, or pdf, then i will read it. 
distributing documents in word format is bad for you and for others. 
you can't be sure what they will look like if someone views them with a different version of word; they may not work at all. 
receiving word documents is bad for you because they can carry viruses (see https://en.wikipedia.org/wiki/macro_virus). 
sending word documents is bad for you because a word document normally includes hidden information about the author, enabling those in the know to pry into the author's activities (maybe yours). 
text that you think you deleted may still be embarrassingly present. 
see http://news.bbc.co.uk/2/hi/technology/3154479.stm for more info. 
but above all, sending people word documents puts pressure on them to use microsoft software and helps to deny them any other choice. 
in effect, you become a buttress of the microsoft monopoly. 
this pressure is a major obstacle to the broader adoption of free software. 
would you please switch to a different way of sending files to other people, instead of word format? 
microsoft is already starting to make word users switch to a new version of word format, based on ooxml. 
its specs are 6000 pages long—so complex that probably no one else can ever fully implement it—and microsoft can sue you for patent infringement if you try. 
if you don't wish to join in this attack against interoperability, the way to avoid it is by deciding not to use word format for interchange. 
both versions of word format allow incorporation of malware. 
converting the file to plain text, html or pdf using word is simple. 
open the document, click on file, then export (or save as in older versions of word), and choose the appropriate export format, then save. 
you can then attach the new document instead of your word document. 
note that word changes in inconsistent ways—if you see slightly different menu item names, please try them. 
see https://www.gnu.org/philosophy/no-word-attachments.html for more about this issue. 
here's another approach, suggested by bob chassell. 
it requires that you edit it for the specific example, and it presumes you have a way to extract the contents and see how long they are. 
i am puzzled. 
why did you choose to send me 876,377 bytes in your recent message when the content is only 27,133 bytes? 
you sent me five files in the non-standard, bloated .doc format that is microsoft's secret, rather than in the international, public, and more efficient format of plain text. 
microsoft can (and did recently in kenya and brazil) have local police enforce laws that prohibit students from studying the code, prohibit entrepreneurs starting new companies, and prohibit professionals offering their services. 
please don't give them your support. 
john d. ramsdell suggests people discourage the use of proprietary attachments by making a small statement in their .signature file: please avoid sending me word or powerpoint attachments. 
see https://www.gnu.org/philosophy/no-word-attachments.html here is a response letter to an email message with a word attachment. 
kevin cole of the gallaudet university in washington, dc, sends out this automatic reply message whenever he receives a word attachment. 
(i think it is better to send the responses by hand, and make it clear that you have done so, because people will receive them better.) 
nonfree drm'd games on gnu/linux: good or bad?. 
stallman a well known company, valve, that distributes nonfree computer games with digital restrictions management, recently announced it would distribute these games for gnu/linux. 
what good and bad effects can this have? 
i suppose that availability of popular nonfree programs on the gnu/linux system can boost adoption of the system. 
however, the aim of gnu goes beyond "success"; its purpose is to bring freedom to the users . thus, the larger question is how this development affects users' freedom. 
the problem with these games is not that they are commercial. 
(we see nothing wrong with that.) it is not that the developers sell copies; that's not wrong either. 
the problem is that the games contain software that is not free (free in the sense of freedom, of course). 
nonfree game programs (like other nonfree programs) are unethical because they deny freedom to their users. 
(game art is a different issue, because it isn't software.) if you want freedom, one requisite for it is not having or running nonfree programs on your computer. 
that much is clear. 
however, if you're going to use these games, you're better off using them on gnu/linux rather than on microsoft windows. 
at least you avoid the harm to your freedom that windows would do. 
thus, in direct practical terms, this development can do both harm and good. 
it might encourage gnu/linux users to install these games, and it might encourage users of the games to replace windows with gnu/linux. 
my guess is that the direct good effect will be bigger than the direct harm. 
but there is also an indirect effect: what does the use of these games teach people in our community? 
any gnu/linux distro that comes with software to offer these games will teach users that the point is not freedom. 
nonfree software in gnu/linux distros already works against the goal of freedom. 
adding these games to a distro would augment that effect. 
free software is a matter of freedom, not price. 
a free game need not be gratis. 
it is feasible to develop free games commercially, while respecting your freedom to change the software you use. 
since the art in the game is not software, it is not ethically imperative to make the art free—though free art is an additional contribution. 
there is in fact free game software developed by companies, as well as free games developed noncommercially by volunteers. 
crowdfunding development will only get easier. 
but if we suppose that it is not feasible in the current situation to develop a certain kind of free game—what would follow then? 
there's no good in writing it as a nonfree game. 
to have freedom in your computing, requires rejecting nonfree software, pure and simple. 
you as a freedom-lover won't use the nonfree game if it exists, so you won't lose anything if it does not exist. 
if you want to promote the cause of freedom in computing, please take care not to talk about the availability of these games on gnu/linux as support for our cause. 
instead you could tell people about the libre games wiki that attempts to catalog free games, the free game dev forum, and the libreplanet gaming collective's free gaming night. 
note. 
watch out for "nonfree game data" that actually contains software. 
applying copyleft to non-software information. 
first, what is copyleft?. 
the entry for "copyleft" in the definitive hacker lexicon, the jargon file, reads: copyleft: /kop'ee-left/ [play on "copyright"] n. 1. the copyright notice ("general public license") carried by gnu emacs and other free software foundation software, granting reuse and reproduction rights to all comers (but see also general public virus). 
2. by extension, any copyright notice intended to achieve similar aims. 
the idea of copyleft originated with &uuml;ber-hacker richard stallman in 1983 when he started the gnu project. 
in brief, his goal was "to develop a complete free unix-like operating system."
 as part of that goal, he invented and wrote the gnu general public license, a legal construct that included a copyright notice but added to it (or, technically, removed certain restrictions), so its terms allowed for the freedoms of reuse, modification and reproduction of a work or its derivatives to be kept for all. 
normal copyright asserts ownership and identification of the author, as well as prevents the use of the author's name as author of a distorted version of the work; it also prevents intentional distortion of the work by others and prevents destruction of the work. 
but it also carries other restrictions—such as restricting the reproduction or modification of a work. 
copyleft contains the normal copyright statement, asserting ownership and identification of the author. 
however, it then gives away some of the other rights implicit in the normal copyright: it says that not only are you free to redistribute this work, but you are also free to change the work. 
however, you cannot claim to have written the original work, nor can you claim that these changes were created by someone else. 
finally, all derivative works must also be placed under these terms. 
why is copyleft important, or even necessary?. 
certain restrictions of copyright—such as distribution and modification—are not very useful to "cyberia," the "free, apolitical, democratic community" that constitutes the internetworked digital world. 
with computers, perfect copies of a digital work can easily be made—and even modified, or further distributed—by others, with no loss of the original work. 
as individuals interact in cyberia, sharing information—then reacting and building upon it—is not only natural, but this is the only way for individual beings to thrive in a community. 
in essence, the idea of copyleft is basic to the natural propagation of digital information among humans in a society. 
this is why the regular notion of copyright does not make sense in the context of cyberia. 
simple "public domain" publication will not work, because some will try to abuse this for profit by depriving others of freedom; as long as we live in a world with a legal system where legal abstractions such as copyright are necessary, as responsible artists or scientists we will need the formal legal abstractions of copyleft that ensure our freedom and the freedom of others. 
much literature has been written on this subject by stallman, and the details can be found in the excellent texts published by the free software foundation. 
so why isn't the fsf's gnu gpl good enough?. 
it is good enough! 
the gnu gpl is not only a document of significant historical and literary value, but it is in wide use today for countless software programs—those as formal part of the gnu project and otherwise. 
the gnu gpl originated for the specific goal of sharing software among computer programmers. 
however, looking closely at the gpl, it appears that the same license can be easily applied to non-software information. 
alternately, a document can be copylefted under different, or much simpler terms; whether or not the gnu gpl is the specific means to the end is not the issue, although the gnu gpl certainly provides the most explicit (and canonical) definition of copyleft. 
ok, so how do i copyleft my non-software work?. 
it's simple. 
while a particular situation may require or inspire its own specific license, possibly similar to the gnu gpl, all that a copyleft notice must really do is fulfill the points as defined above in "first, what is copyleft?"
 using the gnu gpl to copyleft your work is easy. 
the gnu gpl states that it "applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this general public license," so this "program," then, may not necessarily be a computer software program—any work of any nature that can be copyrighted can be copylefted with the gnu gpl. 
the gnu gpl references the "source code" of a work; this "source code" will mean different things for different kinds of information, but the definition of "source code"—provided in the gnu gpl—holds true in any case: "the source code for a work means the preferred form of the work for making modifications to it."
 the notices attached to the work can not always be attached "to the start of each source file," as recommended by the gnu gpl. 
in this case, the directory that the files reside should contain a notice, as should any accompanying documentation or literature. 
finally, for non-software works the "copyright" line included at the start of the "source code" of the work is modified in language slightly: <one line to give the work's name and a brief idea of what it does.> copyright (c) yyyy <name of author> this information is free; you can redistribute it and/or modify it under the terms of the gnu general public license as published by the free software foundation; either version 2 of the license, or (at your option) any later version. 
this work is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. 
see the gnu general public license for more details. 
you should have received a copy of the gnu general public license along with this work; if not, write to the free software foundation, inc., 51 franklin street, fifth floor, boston, ma 02110-1301, usa. 
where do i go from here?. 
here are sources for further information on copyleft, especially as it is applied to non-software information: the rest of this web site is the home of the gnu project and is the canonical source for copyleft and free software(1). 
ram samudrala wrote the free music philosophy and creates copylefted music as the band twisted helices. 
some of my own non-software copylefted works include texts (literature, reviews, technical) and music. 
footnote. 
before 2020, "free software" was confusingly referred to as "freely-redistributable."
did you say "intellectual property"? 
it's a seductive mirage. 
richard stallman it has become fashionable to toss copyright, patents, and trademarks—three separate and different entities involving three separate and different sets of laws—plus a dozen other laws into one pot and call it "intellectual property."
 the distorting and confusing term did not become common by accident. 
companies that gain from the confusion promoted it. 
the clearest way out of the confusion is to reject the term entirely. 
according to professor mark lemley, now of the stanford law school, the widespread use of the term "intellectual property" is a fashion that followed the 1967 founding of the world "intellectual property" organization (wipo), and only became really common in recent years. 
(wipo is formally a un organization, but in fact represents the interests of the holders of copyrights, patents, and trademarks.) wide use dates from around 1990. 
(local image copy) the term carries a bias that is not hard to see: it suggests thinking about copyright, patents and trademarks by analogy with property rights for physical objects. 
(this analogy is at odds with the legal philosophies of copyright law, of patent law, and of trademark law, but only specialists know that.) these laws are in fact not much like physical property law, but use of this term leads legislators to change them to be more so. 
since that is the change desired by the companies that exercise copyright, patent and trademark powers, the bias introduced by the term "intellectual property" suits them. 
the bias is reason enough to reject the term, and people have often asked me to propose some other name for the overall category—or have proposed their own alternatives (often humorous). 
suggestions include imps, for imposed monopoly privileges, and golems, for government-originated legally enforced monopolies. 
some speak of "exclusive rights regimes," but referring to restrictions as "rights" is doublethink too. 
some of these alternative names would be an improvement, but it is a mistake to replace "intellectual property" with any other term. 
a different name will not address the term's deeper problem: overgeneralization. 
there is no such unified thing as "intellectual property"—it is a mirage. 
the only reason people think it makes sense as a coherent category is that widespread use of the term has misled them about the laws in question. 
the term "intellectual property" is at best a catch-all to lump together disparate laws. 
nonlawyers who hear one term applied to these various laws tend to assume they are based on a common principle and function similarly. 
nothing could be further from the case. 
these laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. 
for instance, copyright law was designed to promote authorship and art, and covers the details of expression of a work. 
patent law was intended to promote the publication of useful ideas, at the price of giving the one who publishes an idea a temporary monopoly over it—a price that may be worth paying in some fields and not in others. 
trademark law, by contrast, was not intended to promote any particular way of acting, but simply to enable buyers to know what they are buying. 
legislators under the influence of the term "intellectual property," however, have turned it into a scheme that provides incentives for advertising. 
and these are just three out of many laws that the term refers to. 
since these laws developed independently, they are different in every detail, as well as in their basic purposes and methods. 
thus, if you learn some fact about copyright law, you'd be wise to assume that patent law is different. 
you'll rarely go wrong! 
in practice, nearly all general statements you encounter that are formulated using "intellectual property" will be false. 
for instance, you'll see claims that "its" purpose is to "promote innovation," but that only fits patent law and perhaps plant variety monopolies. 
copyright law is not concerned with innovation; a pop song or novel is copyrighted even if there is nothing innovative about it. 
trademark law is not concerned with innovation; if i start a tea store and call it "rms tea," that would be a solid trademark even if i sell the same teas in the same way as everyone else. 
trade secret law is not concerned with innovation, except tangentially; my list of tea customers would be a trade secret with nothing to do with innovation. 
you will also see assertions that "intellectual property" is concerned with "creativity," but really that only fits copyright law. 
more than creativity is needed to make a patentable invention. 
trademark law and trade secret law have nothing to do with creativity; the name "rms tea" isn't creative at all, and neither is my secret list of tea customers. 
people often say "intellectual property" when they really mean some larger or smaller set of laws. 
for instance, rich countries often impose unjust laws on poor countries to squeeze money out of them. 
some of these laws are among those called "intellectual property" laws, and others are not; nonetheless, critics of the practice often grab for that label because it has become familiar to them. 
by using it, they misrepresent the nature of the issue. 
it would be better to use an accurate term, such as "legislative colonization," that gets to the heart of the matter. 
laymen are not alone in being confused by this term. 
even law professors who teach these laws are lured and distracted by the seductiveness of the term "intellectual property," and make general statements that conflict with facts they know. 
for example, one professor wrote in 2006: unlike their descendants who now work the floor at wipo, the framers of the us constitution had a principled, procompetitive attitude to intellectual property. 
they knew rights might be necessary, but…they tied congress's hands, restricting its power in multiple ways. 
that statement refers to article 1, section 8, clause 8 of the us constitution, which authorizes copyright law and patent law. 
that clause, though, has nothing to do with trademark law, trade secret law, or various others. 
the term "intellectual property" led that professor to make a false generalization. 
the term "intellectual property" also leads to simplistic thinking. 
it leads people to focus on the meager commonality in form that these disparate laws have—that they create artificial privileges for certain parties—and to disregard the details which form their substance: the specific restrictions each law places on the public, and the consequences that result. 
this simplistic focus on the form encourages an "economistic" approach to all these issues. 
economics operates here, as it often does, as a vehicle for unexamined assumptions. 
these include assumptions about values, such as that amount of production matters while freedom and way of life do not, and factual assumptions which are mostly false, such as that copyrights on music supports musicians, or that patents on drugs support life-saving research. 
another problem is that, at the broad scale implicit in the term "intellectual property," the specific issues raised by the various laws become nearly invisible. 
these issues arise from the specifics of each law—precisely what the term "intellectual property" encourages people to ignore. 
for instance, one issue relating to copyright law is whether music sharing should be allowed; patent law has nothing to do with this. 
patent law raises issues such as whether poor countries should be allowed to produce life-saving drugs and sell them cheaply to save lives; copyright law has nothing to do with such matters. 
neither of these issues is solely economic in nature, and their noneconomic aspects are very different; using the shallow economic overgeneralization as the basis for considering them means ignoring the differences. 
putting the two laws in the "intellectual property" pot obstructs clear thinking about each one. 
thus, any opinions about "the issue of intellectual property" and any generalizations about this supposed category are almost surely foolish. 
if you think all those laws are one issue, you will tend to choose your opinions from a selection of sweeping overgeneralizations, none of which is any good. 
rejection of "intellectual property" is not mere philosophical recreation. 
the term does real harm. 
apple used it to warp debate about nebraska's "right to repair" bill. 
the bogus concept gave apple a way to dress up its preference for secrecy, which conflicts with its customers' rights, as a supposed principle that customers and the state must yield to. 
if you want to think clearly about the issues raised by patents, or copyrights, or trademarks, or various other different laws, the first step is to forget the idea of lumping them together, and treat them as separate topics. 
the second step is to reject the narrow perspectives and simplistic picture the term "intellectual property" suggests. 
consider each of these issues separately, in its fullness, and you have a chance of considering them well. 
and when it comes to reforming wipo, here is one proposal for changing the name and substance of wipo. 
see also the curious history of komongistan (busting the term "intellectual property"). 
countries in africa are a lot more similar than these laws, and "africa" is a coherent geographical concept; nonetheless, talking about "africa" instead of a specific country causes lots of confusion. 
rickard falkvinge supports rejection of this term. 
cory doctorow also condemns the term "intellectual property."
why open source misses the point of free software. 
the terms "free software" and "open source" stand for almost the same range of programs. 
however, they say deeply different things about those programs, based on different values. 
the free software movement campaigns for freedom for the users of computing; it is a movement for freedom and justice. 
by contrast, the open source idea values mainly practical advantage and does not campaign for principles. 
this is why we do not agree with open source, and do not use that term. 
when we call software "free," we mean that it respects the users' essential freedoms: the freedom to run it, to study and change it, and to redistribute copies with or without changes. 
this is a matter of freedom, not price, so think of "free speech," not "free beer."
 these freedoms are vitally important. 
they are essential, not just for the individual users' sake, but for society as a whole because they promote social solidarity—that is, sharing and cooperation. 
they become even more important as our culture and life activities are increasingly digitized. 
in a world of digital sounds, images, and words, free software becomes increasingly essential for freedom in general. 
tens of millions of people around the world now use free software; the public schools of some regions of india and spain now teach all students to use the free gnu/linux operating system. 
most of these users, however, have never heard of the ethical reasons for which we developed this system and built the free software community, because nowadays this system and community are more often spoken of as "open source," attributing them to a different philosophy in which these freedoms are hardly mentioned. 
the free software movement has campaigned for computer users' freedom since 1983. 
in 1984 we launched the development of the free operating system gnu, so that we could avoid the nonfree operating systems that deny freedom to their users. 
during the 1980s, we developed most of the essential components of the system and designed the gnu general public license (gnu gpl) to release them under—a license designed specifically to protect freedom for all users of a program. 
not all of the users and developers of free software agreed with the goals of the free software movement. 
in 1998, a part of the free software community splintered off and began campaigning in the name of "open source."
 the term was originally proposed to avoid a possible misunderstanding of the term "free software," but it soon became associated with philosophical views quite different from those of the free software movement. 
some of the supporters of open source considered the term a "marketing campaign for free software," which would appeal to business executives by highlighting the software's practical benefits, while not raising issues of right and wrong that they might not like to hear. 
other supporters flatly rejected the free software movement's ethical and social values. 
whichever their views, when campaigning for open source, they neither cited nor advocated those values. 
the term "open source" quickly became associated with ideas and arguments based only on practical values, such as making or having powerful, reliable software. 
most of the supporters of open source have come to it since then, and they make the same association. 
most discussion of "open source" pays no attention to right and wrong, only to popularity and success; here's a typical example. 
a minority of supporters of open source do nowadays say freedom is part of the issue, but they are not very visible among the many that don't. 
the two now describe almost the same category of software, but they stand for views based on fundamentally different values. 
for the free software movement, free software is an ethical imperative, essential respect for the users' freedom. 
by contrast, the philosophy of open source considers issues in terms of how to make software "better"—in a practical sense only. 
it says that nonfree software is an inferior solution to the practical problem at hand. 
for the free software movement, however, nonfree software is a social problem, and the solution is to stop using it and move to free software. 
"free software."
 "open source."
 if it's the same software (or nearly so), does it matter which name you use? 
yes, because different words convey different ideas. 
while a free program by any other name would give you the same freedom today, establishing freedom in a lasting way depends above all on teaching people to value freedom. 
if you want to help do this, it is essential to speak of "free software."
 we in the free software movement don't think of the open source camp as an enemy; the enemy is proprietary (nonfree) software. 
but we want people to know we stand for freedom, so we do not accept being mislabeled as open source supporters. 
what we advocate is not "open source," and what we oppose is not "closed source."
 to make this clear, we avoid using those terms. 
practical differences between free software and open source. 
in practice, open source stands for criteria a little looser than those of free software. 
as far as we know, all existing released free software source code would qualify as open source. 
nearly all open source software is free software, but there are exceptions. 
first, some open source licenses are too restrictive, so they do not qualify as free licenses. 
for example, open watcom is nonfree because its license does not allow making a modified version and using it privately. 
fortunately, few programs use such licenses. 
second, the criteria for open source are concerned solely with the licensing of the source code. 
however, people often describe an executable as "open source," because its source code is available that way. 
that causes confusion in paradoxical situations where the source code is open source (and free) but the executable itself is nonfree. 
the trivial case of this paradox is when a program's source code carries a weak free license, one without copyleft, but its executables carry additional nonfree conditions. 
supposing the executables correspond exactly to the released sources—which may or may not be so—users can compile the source code to make and distribute free executables. 
that's why this case is trivial; it is no grave problem. 
the nontrivial case is harmful and important. 
many products containing computers check signatures on their executable programs to block users from effectively using different executables; only one privileged company can make executables that can run in the device and use its full capabilities. 
we call these devices "tyrants," and the practice is called "tivoization" after the product (tivo) where we first saw it. 
even if the executable is made from free source code, and nominally carries a free license, the users cannot usefully run modified versions of it, so the executable is de-facto nonfree. 
many android products contain nonfree tivoized executables of linux, even though its source code is under gnu gpl version 2. (we designed gnu gpl version 3 to prohibit this practice; too bad linux did not adopt it.) these executables, made from source code that is open source and free, are generally spoken of as "open source," but they are not free software. 
common misunderstandings of "free software" and "open source". 
the term "free software" is prone to misinterpretation: an unintended meaning, "software you can get for zero price," fits the term just as well as the intended meaning, "software which gives the user certain freedoms."
 we address this problem by publishing the definition of free software, and by saying "think of "free speech," not "free beer."
" this is not a perfect solution; it cannot completely eliminate the problem. 
an unambiguous and correct term would be better, if it didn't present other problems. 
unfortunately, all the alternatives in english have problems of their own. 
we've looked at many that people have suggested, but none is so clearly "right" that switching to it would be a good idea. 
(for instance, in some contexts the french and spanish word "libre" works well, but people in india do not recognize it at all.) every proposed replacement for "free software" has some kind of semantic problem—and this includes "open source software."
 the official definition of open source software (which is published by the open source initiative and is too long to include here) was derived indirectly from our criteria for free software. 
it is not the same; it is a little looser in some respects. 
nonetheless, their definition agrees with our definition in most cases. 
however, the obvious meaning for the expression "open source software" is "you can look at the source code."
 indeed, most people seem to misunderstand "open source software" that way. 
(the clear term for that meaning is "source available."
) that criterion is much weaker than the free software definition, much weaker also than the official definition of open source. 
it includes many programs that are neither free nor open source. 
why do people misunderstand it that way? 
because that is the natural meaning of the words "open source."
 but the concept for which the open source advocates sought another name was a variant of that of free software. 
since the obvious meaning for "open source" is not the meaning that its advocates intend, the result is that most people misunderstand the term. 
according to writer neal stephenson, "linux is "open source" software meaning, simply, that anyone can get copies of its source code files."
 i don't think he deliberately sought to reject or dispute the official definition. 
i think he simply applied the conventions of the english language to come up with a meaning for the term. 
the state of kansas published a similar definition: "make use of open-source software (oss). 
oss is software for which the source code is freely and publicly available, though the specific licensing agreements vary as to what one is allowed to do with that code."
 the new york times ran an article that stretched the meaning of the term to refer to user beta testing—letting a few users try an early version and give confidential feedback—which proprietary software developers have practiced for decades. 
the term has even been stretched to include designs for equipment that are published without a patent. 
patent-free equipment designs can be laudable contributions to society, but the term "source code" does not pertain to them. 
open source supporters try to deal with this by pointing to their official definition, but that corrective approach is less effective for them than it is for us. 
the term "free software" has two natural meanings, one of which is the intended meaning, so a person who has grasped the idea of "free speech, not free beer" will not get it wrong again. 
but the term "open source" has only one natural meaning, which is different from the meaning its supporters intend. 
so there is no succinct way to explain and justify its official definition. 
that makes for worse confusion. 
another misunderstanding of "open source" is the idea that it means "not using the gnu gpl."
 this tends to accompany another misunderstanding that "free software" means "gpl-covered software."
 these are both mistaken, since the gnu gpl qualifies as an open source license and most of the open source licenses qualify as free software licenses. 
there are many free software licenses aside from the gnu gpl. 
the term "open source" has been further stretched by its application to other activities, such as government, education, and science, where there is no such thing as source code, and where criteria for software licensing are simply not pertinent. 
the only thing these activities have in common is that they somehow invite people to participate. 
they stretch the term so far that it only means "participatory" or "transparent," or less than that. 
at worst, it has become a vacuous buzzword. 
different values can lead to similar conclusions—but not always. 
radical groups in the 1960s had a reputation for factionalism: some organizations split because of disagreements on details of strategy, and the two daughter groups treated each other as enemies despite having similar basic goals and values. 
the right wing made much of this and used it to criticize the entire left. 
some try to disparage the free software movement by comparing our disagreement with open source to the disagreements of those radical groups. 
they have it backwards. 
we disagree with the open source camp on the basic goals and values, but their views and ours lead in many cases to the same practical behavior—such as developing free software. 
as a result, people from the free software movement and the open source camp often work together on practical projects such as software development. 
it is remarkable that such different philosophical views can so often motivate different people to participate in the same projects. 
nonetheless, there are situations where these fundamentally different views lead to very different actions. 
the idea of open source is that allowing users to change and redistribute the software will make it more powerful and reliable. 
but this is not guaranteed. 
developers of proprietary software are not necessarily incompetent. 
sometimes they produce a program that is powerful and reliable, even though it does not respect the users' freedom. 
free software activists and open source enthusiasts will react very differently to that. 
a pure open source enthusiast, one that is not at all influenced by the ideals of free software, will say, "i am surprised you were able to make the program work so well without using our development model, but you did. 
how can i get a copy?"
 this attitude will reward schemes that take away our freedom, leading to its loss. 
the free software activist will say, "your program is very attractive, but i value my freedom more. 
so i reject your program. 
i will get my work done some other way, and support a project to develop a free replacement."
 if we value our freedom, we can act to maintain and defend it. 
powerful, reliable software can be bad. 
the idea that we want software to be powerful and reliable comes from the supposition that the software is designed to serve its users. 
if it is powerful and reliable, that means it serves them better. 
but software can be said to serve its users only if it respects their freedom. 
what if the software is designed to put chains on its users? 
then powerfulness means the chains are more constricting, and reliability that they are harder to remove. 
malicious features, such as spying on the users, restricting the users, back doors, and imposed upgrades are common in proprietary software, and some open source supporters want to implement them in open source programs. 
under pressure from the movie and record companies, software for individuals to use is increasingly designed specifically to restrict them. 
this malicious feature is known as digital restrictions management (drm) (see defectivebydesign.org) and is the antithesis in spirit of the freedom that free software aims to provide. 
and not just in spirit: since the goal of drm is to trample your freedom, drm developers try to make it hard, impossible, or even illegal for you to change the software that implements the drm. 
yet some open source supporters have proposed "open source drm" software. 
their idea is that, by publishing the source code of programs designed to restrict your access to encrypted media and by allowing others to change it, they will produce more powerful and reliable software for restricting users like you. 
the software would then be delivered to you in devices that do not allow you to change it. 
this software might be open source and use the open source development model, but it won't be free software since it won't respect the freedom of the users that actually run it. 
if the open source development model succeeds in making this software more powerful and reliable for restricting you, that will make it even worse. 
fear of freedom. 
the main initial motivation of those who split off the open source camp from the free software movement was that the ethical ideas of free software made some people uneasy. 
that's true: raising ethical issues such as freedom, talking about responsibilities as well as convenience, is asking people to think about things they might prefer to ignore, such as whether their conduct is ethical. 
this can trigger discomfort, and some people may simply close their minds to it. 
it does not follow that we ought to stop talking about these issues. 
that is, however, what the leaders of open source decided to do. 
they figured that by keeping quiet about ethics and freedom, and talking only about the immediate practical benefits of certain free software, they might be able to "sell" the software more effectively to certain users, especially business. 
when open source proponents talk about anything deeper than that, it is usually the idea of making a "gift" of source code to humanity. 
presenting this as a special good deed, beyond what is morally required, presumes that distributing proprietary software without source code is morally legitimate. 
this approach has proved effective, in its own terms. 
the rhetoric of open source has convinced many businesses and individuals to use, and even develop, free software, which has extended our community—but only at the superficial, practical level. 
the philosophy of open source, with its purely practical values, impedes understanding of the deeper ideas of free software; it brings many people into our community, but does not teach them to defend it. 
that is good, as far as it goes, but it is not enough to make freedom secure. 
attracting users to free software takes them just part of the way to becoming defenders of their own freedom. 
sooner or later these users will be invited to switch back to proprietary software for some practical advantage. 
countless companies seek to offer such temptation, some even offering copies gratis. 
why would users decline? 
only if they have learned to value the freedom free software gives them, to value freedom in and of itself rather than the technical and practical convenience of specific free software. 
to spread this idea, we have to talk about freedom. 
a certain amount of the "keep quiet" approach to business can be useful for the community, but it is dangerous if it becomes so common that the love of freedom comes to seem like an eccentricity. 
that dangerous situation is exactly what we have. 
most people involved with free software, especially its distributors, say little about freedom—usually because they seek to be "more acceptable to business."
 nearly all gnu/linux operating system distributions add proprietary packages to the basic free system, and they invite users to consider this an advantage rather than a flaw. 
proprietary add-on software and partially nonfree gnu/linux distributions find fertile ground because most of our community does not insist on freedom with its software. 
this is no coincidence. 
most gnu/linux users were introduced to the system through "open source" discussion, which doesn't say that freedom is a goal. 
the practices that don't uphold freedom and the words that don't talk about freedom go hand in hand, each promoting the other. 
to overcome this tendency, we need more, not less, talk about freedom. 
"floss" and "foss". 
the terms "floss" and "foss" are used to be neutral between free software and open source. 
if neutrality is your goal, "floss" is the better of the two, since it really is neutral. 
but if you want to stand up for freedom, using a neutral term isn't the way. 
standing up for freedom entails showing people your support for freedom. 
rivals for mindshare. 
"free" and "open" are rivals for mindshare. 
free software and open source are different ideas but, in most people's way of looking at software, they compete for the same conceptual slot. 
when people become habituated to saying and thinking "open source," that is an obstacle to their grasping the free software movement's philosophy and thinking about it. 
if they have already come to associate us and our software with the word "open," we may need to shock them intellectually before they recognize that we stand for something else. 
any activity that promotes the word "open" tends to extend the curtain that hides the ideas of the free software movement. 
thus, free software activists are well advised to decline to work on an activity that calls itself "open."
 even if the activity is good in and of itself, each contribution you make does a little harm on the side by promoting the open source idea. 
there are plenty of other good activities which call themselves "free" or "libre."
 each contribution to those projects does a little extra good on the side. 
with so many useful projects to choose from, why not choose one which does extra good? 
conclusion. 
as the advocates of open source draw new users into our community, we free software activists must shoulder the task of bringing the issue of freedom to their attention. 
we have to say, "it's free software and it gives you freedom!"
—more and louder than ever. 
every time you say "free software" rather than "open source," you help our cause. 
note. 
lakhani and wolf's paper on the motivation of free software developers says that a considerable fraction are motivated by the view that software should be free. 
this is despite the fact that they surveyed the developers on sourceforge, a site that does not support the view that this is an ethical issue. 
opposing digital rights mismanagement (or digital restrictions management, as we now call it). 
stallman in 1989, in a very different world, i wrote the first version of the gnu general public license, a license that gives computer users freedom. 
the gnu gpl, of all the free software licenses, is the one that most fully embodies the values and aims of the free software movement, by ensuring the four fundamental freedoms for every user. 
these are freedoms to 0) run the program as you wish; 1) study the source code and change it to do what you wish; 2) make and distribute copies, when you wish; 3) and distribute modified versions, when you wish. 
any license that grants these freedoms is a free software license. 
the gnu gpl goes further: it protects these freedoms for all users of all versions of the program by forbidding middlemen from stripping them off. 
most components of the gnu/linux operating system, including the linux component that was made free software in 1992, are licensed under gpl version 2, released in 1991. 
now, with legal advice from professor eben moglen, i am designing version 3 of the gnu gpl. 
gplv3 must cope with threats to freedom that we did not imagine in 1989. 
the coming generation of computers, and many products with increasingly powerful embedded computers, are being turned against us by their manufacturers before we buy them—they are designed to restrict what we can use them to do. 
join our campaign against drm. 
first, there was the tivo. 
people may think of it as an appliance to record tv programs, but it contains a real computer running a gnu/linux system. 
as required by the gpl, you can get the source code for the system. 
you can change the code, recompile and install it. 
but once you install a changed version, the tivo won't run at all, because of a special mechanism designed to sabotage you. 
freedom no. 
1, the freedom to change the software to do what you wish, has become a sham. 
then came treacherous computing, promoted as "trusted computing," meaning that companies can "trust" your computer to obey them instead of you. 
it enables network sites to tell which program you are running; if you change the program, or write your own, they will refuse to talk to you. 
once again, freedom no. 
1 becomes a sham. 
microsoft has a scheme, originally called palladium, that enables an application program to "seal" data so that no other program can access it. 
if disney distributes movies this way, you'll be unable to exercise your legal rights of fair use and de minimis use. 
if an application records your data this way, it will be the ultimate in vendor lock-in. 
this too destroys freedom no. 
1; if modified versions of a program cannot access the same data, you can't really change the program to do what you wish. 
something like palladium is planned for a coming version of windows. 
aacs, the "advanced access content system," promoted by disney, ibm, microsoft, intel, sony, and others, aims to restrict use of hdtv recordings—and software—so they can't be used except as these companies permit. 
sony was caught last year installing a "rootkit" into millions of people's computers, and not telling them how to remove it. 
sony has learned its lesson: it will install the "rootkit" in your computer before you get it, and you won't be able to remove it. 
this plan explicitly requires devices to be "robust"—meaning you cannot change them. 
its implementors will surely want to include gpl-covered software, trampling freedom no. 
1. this scheme should get "aacsed," and a boycott of hd dvd and blu-ray has already been announced. 
allowing a few businesses to organize a scheme to deny our freedoms for their profit is a failure of government, but so far most of the world's governments, led by the u.s., have acted as paid accomplices rather than policemen for these schemes. 
the copyright industry has promulgated its peculiar ideas of right and wrong so vigorously that some readers may find it hard to entertain the idea that individual freedom can trump their profits. 
facing these threats to our freedom, what should the free software community do? 
some say we should give in and accept the distribution of our software in ways that don't allow modified versions to function, because this will make our software more popular. 
some refer to free software as "open source," that being the slogan of an amoral approach to the matter, which cites powerful and reliable software as the highest goals. 
if we allow companies to use our software to restrict us, this "open source drm" could help them restrict us more powerfully and reliably. 
those who wield the power could benefit by sharing and improving the source code of the software they use to do so. 
we too could read that source code—read it and weep, if we can't make a changed version run. 
for the goals of freedom and community—the goals of the free software movement—this concession would amount to failure. 
we developed the gnu operating system so that we could control our own computers, and cooperate freely in using them in freedom. 
to seek popularity for our software by ceding this freedom would defeat the purpose; at best, we might flatter our egos. 
therefore we have designed version 3 of the gnu gpl to uphold the user's freedom to modify the source code and put modified versions to real use. 
the debate about the gpl v3 is part of a broader debate about drm versus your rights. 
the motive for drm schemes is to increase profits for those who impose them, but their profit is a side issue when millions of people's freedom is at stake; desire for profit, though not wrong in itself, cannot justify denying the public control over its technology. 
defending freedom means thwarting drm. 
first published by businessweek online. 
an interview for ough!. 
this is a transcript of an interview with richard stallman conducted by theodoros papatheodorou&#8239;[*] in may, 2012. 
richard stallman, the free software activist and software developer, maintains a legendary status in the computing community. 
he addresses all our questions in an interview of epic proportions that he gave to ough! 
in two parts. 
part one. 
while working as a "system hacker" in mit's ai lab (i.e. 
a member of the team developing the lab's own operating system) he experienced the profound change that overtook the software industry. 
up until that point the general practice was for people to freely share, modify and reuse operating system software developed for the machines of the day. 
in the 1970's the software industry stopped distributing the source code of these programs, making it impossible for computer users to study and modify them. 
furthermore new copyright laws made it illegal to do so. 
the change struck him as unethical, and it affected him personally as the hacker community in which he thrived was broken up as two competing companies hired most of the talent in the lab to develop nonfree products. 
stallman went against the trend and decided to devote his life to the development of free software, where the user has the right to use the program in any way he sees fit, study the source code, modify it and even redistribute his modified versions to others. 
in 1984 he quit the mit ai lab and started developing gnu, the first free operating system which today, with the addition of a piece of software developed by a young finish student, linus torvalds, forms gnu/linux. 
today, it is run on the majority of servers on the internet, academic institutions, large enterprises, the military, and on desktops of millions of people around the world who have rejected software licenses that come with windows and mac os. 
they choose to run a system that was started by stallman and further developed by thousands of others over the internet. 
gnu/linux is superior to proprietary software from a technical point of view, and it's available gratis, but stallman insists that these are welcome, but secondary features. 
freedom is the key. 
we start the conversation talking about electronic rights. 
you've said "in the internet age we have less rights that in the physical world."
 yes. 
for instance in the us, internet service providers can disconnect you without going to court, they don't have to prove that there is a reason. 
and as a result they can censor you. 
if you want to print papers and stand on the street handing them out you can do that, you don't have to beg some company to "please cooperate" so that you can do it. 
but to do this on the internet you need the cooperation of an isp and a domain name registrar and maybe a hosting service, and if they don't like what you're doing or somebody threatens them who has a lot of power and doesn't like what you're doing, then they can just terminate your service and censor you. 
people should have a legal right to continued service of any of these kinds as long as they fulfill their side of the bargain. 
i believe it's the case in the us that the phone company can't arbitrarily disconnect your phone line as long as you continue paying your bill and so on, then they have to keep giving you phone service, it's not their choice. 
it should be the same with internet connectivity. 
it shouldn't be their choice, they shouldn't be allowed to set their own conditions for continuing to give you service. 
they should provide the service as a public utility? 
exactly. 
this dependence on a corporation also extends to financial transactions. 
that's the other aspect in which the digital world gives us less rights than the physical world. 
suppose in addition to handing out papers on the street, you'd like to ask people to give money to the cause. 
they can give cash, and you can accept the cash, and you don't need the cooperation of any company in order to do so. 
once you receive the cash, it's valid money, and you can spend it. 
but, to do the same thing in the digital world you need the services of a payment company, and those companies might arbitrarily disconnect you also. 
this is what happened with wikileaks. 
after it released information that embarrassed the us government (among others), mastercard and visa stop accepting donations for the site. 
exactly. 
wikileaks showed all these vulnerabilities because the us government decided to silence them and did everything they could to do so. 
it has caused a lot of harm although you can still access the wikileaks pages if you use the right domain name. 
they did manage to cut off most of the donations to wikileaks, and now it's having trouble operating. 
the organization has received a lot of bad publicity in the us. 
what's your view? 
wikileaks is doing something heroic. 
a lot of the press in the us is subservient to the government, this is true in a lot of countries. 
or you might better say that it's subservient to business, but the us government works for business, so business wants to say good things about it. 
i think we need laws stopping the payment companies from disconnecting anybody's service, except when they prove that they have cause. 
technology has spawned new forms of control, but it has also resulted in new ways of protest, self-organization, and dissent. 
anonymous stands out as an example of hacktivists. 
anonymous does various different things. 
most often anonymous has a lot of people go to the door of an organization's website, they're a crowd, and so they may get in somebody's way. 
this is comparable to protesting in front of the organization's building in the physical world. 
and that we recognize as democratic political activity. 
so anonymous' web protests are also democratic political activity. 
of course, the forces of oppression want to define this as a crime rather than a protest, and they're using the change in technology as an opportunity effectively to criminalize protests. 
another thing that i think maybe anonymous' members have done, is changing the text in the websites so as to criticize the organization whose site it is. 
this is the virtual equivalent of writing a critical slogan on a poster, which is pretty normal democratic political activity, but they call it "attacking" the site. 
the word "attack" is meant to give people the idea that this is something other than a political protest and put people in prison for protesting. 
among hackers the term "hacker" means something completely different than what it means to the general public. 
could you explain that difference? 
starting from 40 years ago, when i joined the hacker community at mit, i've been proud to call myself a hacker. 
i was hired by mit to be a system hacker, meaning to make the system better. 
at the time, we used an operating system called its, the incompatible timesharing system, which had been developed by the team of hackers at the artificial intelligence lab; and then they hired me to be part of the team. 
my job was to make the system better. 
hacking had a more general meaning, which meant basically being playfully clever and pushing the limits of what was possible. 
hacking doesn't even have to involve computers. 
hacking was not limited in improving the operating system. 
you could hack in any media, it didn't have to involve computers. 
hacking, as a general concept, is an attitude towards life. 
what's fun for you? 
if finding playful clever ways that were thought impossible is fun then you're a hacker. 
one thing that was supposed to be impossible was breaking the security on computers. 
so some people who were inclined to be hackers got into that medium of breaking security. 
then journalists found about hackers around 1981, misunderstood them, and they thought hacking was breaking security. 
that's not generally true: first of all, there are many ways of hacking that have nothing to do with security, and second, breaking security is not necessarily hacking. 
it's only hacking if you're being playfully clever about it. 
software patents. 
apart from electronic rights you are also a campaigner against software patents. 
companies like amazon, google, and apple, to name a few, are currently engaged in heated patent wars. 
patents are like land mines for software developers. 
it doesn't surprise me that a product such as an android phone is accused of violating a tremendous number of patents, because it's a complicated software system. 
any such complicated software system is going to have thousands of ideas in it, and if 10% of these ideas are patented that means hundreds of those ideas are patented. 
so any large program is likely to run afoul of hundreds of patents, and a system that's a combination of many programs is likely to run afoul of thousands of patents or more. 
as the law stands, these patents have an expiration date of 20 years from the moment they were filed. 
this is a very long time in the software field. 
keep in mind that any time the technological context changes, then we need to adapt our way of doing many things to fit the new context. 
which means they will all need new ideas, and if those new ideas are patented it's yet another disaster. 
what's special about software that you think it should not have the patent system apply to it? 
software is not the usual kind of case for patents. 
let's look at the usual case: patents for something that's made in a factory. 
those patents only affect the companies that have the factories and make the products. 
if they can all live with the patent system the rest of us have no reason to care. 
but with software, the problem is that it is much more complicated than anything else. 
the reason is software is inherently easier to design than physical products. 
software is simply mathematics, whereas physical products have to cope with the perversity of matter. 
and lots of unexpected things will happen, we have models to try to predict what will happen with physical systems, but they're not guaranteed to be right. 
with software you're using mathematical constructs, and they do what they're defined to do, and if they don't then you go to the compiler developer, and you say, "there's a bug in your compiler. 
fix it so that this construct does what is supposed to do."
 you can't do that to the physical world, but you can do that to the compiler developer. 
because of this it's easier to design software, but people push every ability to its limit. 
so you give people an easier kind of design, and they make bigger systems. 
so with software, a few people in a few years can design something that has a million elements in its design. 
that would be a mega-project if it had to be made with physical matter. 
so you make the system so complicated, and it's going to have lots of ideas in it, and that means that it's going to infringe lots of patents or at least be accused of infringing lots of patents. 
in other words, the burden of the patent system on software is much higher that it is on anything else. 
all software developers are in danger, and what you see with the patent wars that have broken out in the past year or so is if you develop a big complicated software package you're going to be sued. 
how is it different, say, to the patent for a drug? 
patents on medicine are another special case. 
because when you force poor countries to have patents on medicines, which is what the world trade organization does, that makes medicine so expensive that people can't afford it and they die. 
the people who founded the wto and its executives should be sent to the hague to be tried for mass murder. 
we should organize to demand that our governments stop their support for the wto; there are thousands of reasons for that. 
that organization's purpose is to give business more power to turn democracy into a sham. 
all so-called "free trade treaties" are actually aimed to weaken democracy and transfer political power to business. 
therefore in the name of democracy we must abolish those treaties. 
there are good arguments that international trade can make both countries wealthier, and if these countries are democratic enough that the wealth will spread to everyone in both countries then they really are better off. 
however, the so-called "free trade treaties" are designed to make the countries less democratic and ensure that the wealth won't spread around. 
that means that they cancel out whatever benefit they might produce even if the gnp of both countries increases. 
what good is that if the increases all go to the rich, which is what they've done in the us at least since 1980. 
these patent wars have seen companies buying up an arsenal of software patents just to protect themselves from litigation… you know they might be, but it could be that google has fewer patents because it hasn't existed so long. 
this may be one case where they're not all in the same position and not all interdependent, and if so, that would be unfortunate, because after all android is the only smartphone operating system still in use that is mostly free software, and that at least gives us a starting point to try to run phones without proprietary software. 
if android becomes dangerous and is crushed by patents, then we might never be able to run smartphones with free software. 
google is about to buy motorola, which is not doing great financially, just in order to get access to its patents. 
this shows how the patent system becomes an obstruction to progress. 
when there are enough patents applying to one product it becomes hard to cope with the patent system at all. 
i hope that they (google) succeed that way, in protecting themselves, because by doing so they are to some extent sheltering the free software community as well. 
do you believe in the complete abolition of software patents? 
right, patents should not apply to software. 
keep in mind that you can't always classify patents as either software patents or non-software patents. 
sometimes the same patent will apply both to programs and to circuits. 
what i recommend is to change the law to say "by definition, if it's a program, it does not infringe any patents."
 p2p file sharing and the music/film industry. 
you've often spoken against the use of the word "piracy."
 it's a smear term! 
they want to say that sharing is the moral equivalent of attacking ships. 
i don't agree with that position, so i don't call sharing "piracy."
 i call it "sharing."
 i am not against profit in general. 
i'm against mistreating people. 
any given way of doing business may or may not involve mistreating people. 
the example of the struggling artist is a ridiculous example because the existing system does very little for struggling artists. 
it's lousy. 
and if we just legalize sharing it won't make any difference to struggling artists. 
it might even help them. 
i think artists should release music with licenses that explicitly permit sharing, and some of them do. 
the point is that this argument against sharing is bogus. 
these giant multinational companies want more money for themselves, and they use the artist as an excuse. 
little bit trickles down to the artists, and then there are few stars that get treated very well. 
but we don't need to make them richer. 
people should have the right to non-commercially share and redistribute music? 
music and any published work. 
because sharing is good, sharing builds community, so sharing must be legal, now that sharing is feasible and easy. 
fifty years ago making copies and redistributing them non-commercially was so hard that it didn't matter whether it was legal or not. 
but now that it's so easy, to stop people from doing it can only be achieved using nasty, draconian measures, and even those don't always work. 
but, i guess, when they get nasty enough they may work, but why should we tolerate such nastiness? 
the music and film industry campaigned very hard on pipa, sopa, and acta. 
they want unjust laws all around the world, and in some countries they've succeeded getting them. 
i read that ireland adopted a law similar to sopa, at least described that way, but i don't know any details yet. 
these laws are an injustice. 
they are meant to subject people more to the media companies, so of course they're wrong, of course people hate them. 
the only question is; is there enough democracy left in any given country for people to be able to stop them? 
european citizens should take action and organize with others so as to get your country not to ratify acta and convince the european parliament to vote it down. 
save the world from that injustice. 
recently government agencies acted to shut down a few sites, such as mega-upload. 
i don't know whether mega-upload ultimately would deserve to be shut down. 
remember mega-upload is a business, not an example of sharing. 
sharing means non-commercial redistribution of exact copies. 
so i don't have a conclusion about mega-upload in particular. 
i do think there was something outrageous about the way it was shut down, before a court got to decide whether it's legal or not. 
but meanwhile there's been a law suit against (i guess it's called) hotfile and the plaintiffs are claiming that "this has to be bad because it's similar to mega-upload which we shut down."
 which is a swindle because no court has decided whether mega-upload was legal. 
so they're citing this premature shutdown as proof that it's bad. 
i don't know, maybe it is bad. 
that's not the issue i'm strongly concerned with. 
i'm more concerned with peer-to-peer sharing because that's clearly good. 
on privacy. 
what about services like facebook and gmail? 
there are many issues of freedom in life, and having control of your computing is my contribution—i hope—to the idea of what human rights are. 
there are many other human rights people deserve, and many of them that apply in other areas of life carry over to the virtual world. 
so for instance, what are the bad things about facebook? 
well, it gives people a false impression of privacy. 
it lets you think that you can designate something as to be seen only by your friends, not realizing that it's actually to be seen by your facebook friends and not your actual friends. 
and any of them could publish it, so it could be seen by anybody; it could be published in the newspaper. 
facebook can't prevent that. 
what it could do is warn the users every time they start a session "watch out, anything you post here—even if you say that only certain people should see it—it could get published due to events beyond your control. 
so think twice about anything you are going to post here. 
and remember that, the next time you try to apply for a job, the company might demand that you show everything in your account. 
your school might also demand this. 
and if you really want your communication to be private, do not send it this way."
 that's one thing that they should do. 
facebook is a surveillance engine and collects tremendous amounts of personal data, and its business model is to abuse that data. 
so you shouldn't use facebook at all. 
and worse than that, facebook even does surveillance on people that don't have facebook accounts. 
if you see a "like" button in a page then facebook knows that your computer visited that page. 
and it's not the only company that's doing this; i believe that twitter does this and google+ does this, so it's a practice that's being imitated. 
and it's wrong no matter who does it. 
the other thing that facebook does, is that it uses people's pictures in commercial advertisement and gives them no way to refuse. 
eric schmidt of google fame said a couple of years ago that if you have something you don't want anyone to know, maybe you shouldn't be doing it. 
that's ridiculous. 
what kind of things would you not anyone to know? 
maybe you are planning a protest. 
it is common nowadays for governments to label dissidents as terrorists and use electronic surveillance on them to sabotage their protests in order to effectively sabotage democracy. 
these social media also claim that they have had a very strong, subversive role in the middle-east uprisings. 
maybe they do, but remember that these are not located in these middle-eastern countries so they have no strong motive to care to those governments. 
when, say, the us government wants to crush dissent these companies are likely to volunteer to help. 
if they don't, they will be compelled to anyway. 
you're also known to not use a mobile phone in order to protect your privacy. 
of course. 
every mobile phone is a tracking and surveillance device. 
you could stop your phone from transmitting your gps location if you've got a phone that's controlled by free software, although those are very few. 
still the system can determine pretty accurately where the phone is even without any active cooperation from the phone. 
the us government says it should be able to collect all that information without even a warrant. 
not even a court order, that is. 
so that shows how much us government respects human rights. 
some people have been using tor and other software to hide their identities online. 
tor is a very good thing. 
it helps protect people from big brother. 
and by big brother i mean perhaps the government of iran or syria or the us or any other country that doesn't recognize human rights. 
part two. 
the second part of the interview is about free software and its functions. 
in the second part of the interview we started off by speaking about free software and asked for a definition. 
free software means software that respects user's freedom and user's community. 
with software there are just two possibilities; either the user controls the program or the program controls the users. 
the first case is free software because, in order for the users to have effective control of the programs, we need certain freedoms. 
those freedoms are the criteria of free software. 
if the users don't control the program, then the program controls the users, and the developer controls the program. 
that means that program is an instrument of unjust power. 
so free software is software that respects user's freedom, and the idea of the free software movement is: nonfree software is an injustice, let's put an end to it. 
first let's escape, and then let's help everyone else escape. 
let's put an end to that injustice. 
and by free of course, you don't just mean just "gratis," you mean a lot more than that. 
i mean "free" as in freedom. 
you mentioned that there are certain freedoms that a piece of software should respect in order to be called free. 
what are these freedoms? 
freedom zero the freedom to run the program as you wish. 
freedom one the freedom to study the source code and change it to make the program do your computing the way you wish. 
freedom two the freedom to help others, which means, redistribute exact copies when you wish. 
freedom three the freedom to contribute to your community—the freedom to distribute copies of your modified versions when you wish. 
(that's assuming that you've made modified version, because not everybody does that.) and in order to support this you started a foundation, the free software foundation. 
well, remember the goal is not just theoretical. 
i wanted to make it possible to use a computer in freedom. 
that's impossible if you're required to use nonfree software, and when i started this in 1983 that was the only way you could make a computer run. 
it had to have an operating system, and all the operating systems were proprietary, so you had to have nonfree software. 
(proprietary means nonfree; they're synonymous.) so to make freedom a real option it was necessary to develop a free software operating system. 
i wanted to make it a real possibility to use a computer and have freedom, and that meant launching a software developing project to develop all the software that you need to have, and that's an operating system called gnu. 
that's why there was actual work to be done. 
i wanted to go beyond simply stating a philosophical point in the abstract, and proceed to the practical work of making freedom a real possibility. 
and why do you feel that it's an inherent right of people to have access to the source code of a program? 
why should people be free? 
there are people that don't believe in freedom, and you can't logically argue with them. 
there's a fundamental difference in values. 
once you recognize that having control over your software is the only way to live in freedom and use computers, if you want freedom you've got to insist on free software. 
but why is software unlike other products? 
when a vendor sells a chair he expects… [stallman interrupts] software isn't like those things. 
software does complicated things, and chairs don't. 
there's no way to design a chair to do things to you and control what you do. 
you normally sit on a chair and you control how you sit. 
the chair might be more or less comfortable, but it's not going to move you into a different building or dump you into the street or all sorts of other surprising things that you might not expect. 
it's not likely to have a needle hidden in it which would inject some kind of drug into you. 
software, on the other hand, does things far more complicated than that, and proprietary software commonly has malicious features comparable to that needle. 
in windows, people have found spy features. 
there are also back doors which allow those who know how to control them to do things to the user. 
in other words, microsoft can do absolutely anything to the users of windows: it has total control over their computers, it can take anything from them, it can sabotage them in any way at all. 
if you use nonfree programs you are defenseless against its developer, and the developers basically say "you should simply trust us because of course a big corporation like this would never hurt you."
 apart from software, companies today try to interfere with what users can actually store in their devices. 
one of their tools for controlling the user is by using proprietary e-book formats. 
these are attacks on the traditional freedoms of readers. 
the example i would use is the amazon "swindle" (a play on words on amazon's e-book tablet, the "kindle") because that's the one i know the most facts about. 
i call it the "swindle" because it is set up so that it swindles readers out of the traditional freedoms of readers of books. 
for instance, there is the freedom to own a book, which amazon says the users can't. 
they can only get a license to read the book under amazon's choice of conditions. 
then there's the freedom to acquire the book anonymously, which is basically impossible for most well-known books with the "swindle."
 they're only available from amazon, and amazon requires users to identify themselves, as it doesn't allow any way to pay anonymously with cash, the way you could buy a printed book. 
as a result amazon maintains a database showing all the books that each user has ever read. 
that database is a threat to human rights. 
then there's the freedom to give the book to someone else, perhaps after reading it, the freedom to lend the book to people when you wish, and the freedom to sell the book to a used book store. 
amazon eliminates these freedoms, partially by means of digital handcuffs (malicious features in the software designed to restrict users so they can't do these things) and partially through having said that users can't own a book, because amazon makes them sign a contract saying they won't give away, lend or sell the book. 
and then there's the freedom to keep the book as long as you wish. 
there was an orwellian twist to the tale… yes, because they deleted thousands of copies of "1984."
 that was in 2009. 
those copies were authorized copies until the day amazon decided to delete them. 
after this, there was a lot of criticism, and so amazon promised it would never do this again unless ordered to by the state. 
i do not find that comforting. 
any one of these makes the "swindle"—an outrageous attack on our freedom and something that we must refuse to use. 
i don't know all the details about the competitors, but all of them share at least some of these unacceptable characteristics. 
except for some where you can only install books that are in documented, non-secret formats. 
some of them maybe you could buy with cash somewhere if the author is selling copies. 
but the problem is, for digital books in general, there is no way to buy them for cash, or anonymously, because of the fact that there is no anonymous payment system on the internet. 
bitcoin can be used for that, but bitcoin is somewhat speculative because its value fluctuates. 
i don't think it has arrived at the point of being a convenient easy, anonymous, digital payment system. 
and it's not inherently anonymous. 
you can make a bitcoin payment anonymously but you have to go to some extra trouble. 
i don't remember the details, but it was complicated enough that i didn't think i would do it. 
i would just continue not buying things online. 
there is another aspect to using nonfree software: you are being a bad neighbor as well. 
when you are asked to promise not to share with other people, what does that mean? 
you are being asked to betray your community. 
now, what's your community? 
it's the people you know, the people you normally cooperate with. 
these software licenses invite you to betray the people you normally cooperate with. 
people use the terms free & open source indiscriminately, but they are different things. 
the term "open source" was coined in 1998 by people in the free software community. 
remember that i started the free software movement in 1983. 
by 1998 we had already achieved a considerable amount, there were many people writing free software and many people using it. 
but not all of them agreed with the philosophy of the free software movement. 
many of them, although they liked using and developing free software, considered our philosophy too radical and shocking. 
they coined a different term so that they could avoid any reference to our philosophy and avoid presenting the issue as a matter of justice versus injustice. 
so that's the purpose of the term "open source."
 it's to talk about more or less the same category of software but without presenting it as an ethical issue. 
they don't say that if a program is not open source then it's an injustice and you must try to escape from it. 
you've said in the past that the "the agenda of the free software movement has been subverted and even nearly lost."
 are you referring to cases such as android (the mobile phone operating system)? 
android is just one example of the general tendency for most people in a community not to think of this in terms of freedom and justice. 
"open source" is a large part of that too. 
and then look at the more than 1000 different distributions of the gnu/linux os: there around ten of them which are entirely free software, whose developers keep them free software as a matter of principle, and the other thousand-or-so include nonfree software or steer the user towards nonfree software, which in an instant grants legitimacy to the nonfree software and directly rejects the philosophy of the free software movement. 
and these speak a very loud voice. 
most people coming into the community formulate their ideas of what it's all about based on those distributions and from other people who are happy with those, and basically only a minority of the free software community regards nonfree software as an injustice that we shouldn't tolerate. 
and these views, of course, propagate. 
strictly speaking android is free software but it's not complete: in order to actually run a phone you need other software which isn't free. 
every android phone needs some nonfree software too. 
in addition, many of those are "tyrant products" which don't allow users to replace the system. 
so the software in them may have been made from free source code, but if the user can't replace the software, then those executable programs are not free. 
despite your technical achievements when it comes to coding, one of your greatest hacks was the inception of gnu gpl, a seminal license that influenced a lot of others. 
well, it's better to say that most other free software licenses were written as reaction against the ideas of gnu gpl. 
you see, the gnu gpl is a copyleft license. 
every free software license, in order to be one, has to give you the four freedoms. 
the only way to get these freedoms is if the work is released under a license that gives them to you. 
copyright law today has been made too restricted, everything is copyrighted by default. 
therefore the only way a program can be free is if the copyright holders put on a formal declaration that gives the four freedoms. 
this formal declaration is what we call a free software license. 
there are many ways to do that. 
copyleft says that there is a condition placed on freedoms two and three (remember those were the freedoms to distribute exact copies and copies of your modified versions). 
the condition which is copyleft says that when you're distributing them, you have to do it respecting the same freedoms for the next person. 
so people who get copies from you, whether they're modified or not, must get the same four freedoms. 
if you put some of this code into another program with other code so that you've made changes, the conditions say that that entire program must give people the four freedoms, so you cannot convert the code into effectively proprietary with the excuse that you've made some changes in it. 
if you want to use any of this code in your program, you must make your whole program free. 
i did this because i realized that there was a choice: either people would be able to convert my code into nonfree software and use it to subjugate others, perhaps by making changes in it, or i would stop them from doing that. 
i realized then, if i didn't stop them, then my code would be converted to nonfree software, users would get my code, but they wouldn't get freedom, and that would be self defeating, it would defeat the whole purpose of writing the code, which was to make a system that they could use in freedom. 
so i invented a way to prevent that, and that way is copyleft. 
and how do these ideas of copyleft translate in today's world of web services and so called "cloud computing"? 
these issues apply to a program, which is a work you can have a copy of; but a service isn't something you get a copy of, so these issues don't apply to it. 
on the other hand, when you're doing your own computing you must not use any web service to do that, because if you do so you lose control of that computing. 
if your computing is done on somebody else's server, he controls it and you don't. 
so the general issue that the user should have control on their computing does apply to web services but in a different way. 
despite it's practical advantages there isn't yet mass migration to free software in the public sector. 
proprietary software developers have lots of money. 
they use that money to buy governments. 
there are two ways that they can use money to influence governments. 
one way is by bribing specific officials. 
that's typically illegal but in many countries they can do it anyway. 
the other way is bribing the state itself or some other jurisdiction, and that's not illegal, but it is equally corrupt. 
despite being in dire financial straights, there is no national policy in greece regarding the use of free software in the public sector. 
i don't want to focus narrowly on the agendas of possibly saving money because that's a secondary reason. 
the real reason why the greek and any other government should insist on using free software is to have control of its own computing, in other words, its information and computing sovereignty. 
and this is worth spending money for. 
let's talk a bit about the role that free software should have in education. 
there's been a lot of debate recently. 
schools must teach exclusively free software because schools have a social mission: to educate good citizens for a strong, capable, independent, cooperating and free society. 
in the computing field that means teaching people to be skilled free software users. 
teaching the proprietary program is implanting dependence. 
why do you think many software companies hand gratis copies of their nonfree programs to schools? 
because they want schools to spread this dependence. 
that's the opposite of the social mission of schools, they shouldn't do it. 
it's like giving students addictive drugs. 
the companies that make these drugs would love the schools to do that, but it's the school's responsibility to refuse even if the drugs are gratis. 
but there is a deeper reason too: for education and citizenship. 
schools are supposed to teach not just facts and skills, but also the spirit of good will. 
a habit of helping others. 
every class should have this rule: "students, if you bring software to class you may not keep it for yourself. 
you must share copies with the rest of the class, including the source code, in case someone here wants to learn about that software. 
which means bringing nonfree software to class is not permitted."
 for the school to set a good example, it must follow its own rule: it should bring only free software and share copies with everyone in the class. 
there is also another reason, for the sake of education, specifically education of the best programmers. 
for natural born programmers to become good programmers, they need to read lots of code and write lots of code. 
only free software gives you the chance to read the code of large programs that people really use. 
then you have to write lots of code. 
which means you've got to write code in large programs. 
you have to start small. 
that doesn't mean writing small programs, because small programs do not even start to present the difficulties of large programs. 
so the way you start small is by writing small changes in existing large programs, and only free software gives you the chance to do that. 
so, for several reasons, doing an ethical and good education means doing education with free software and only free software. 
there are many who say, "let's give the children windows and the gnu+linux system so that they can learn both."
 this is like saying "let's give children at lunchtime some whiskey or ouzo as well as water, so they can learn both."
 the school is supposed to teach good habits, not addiction, not dependence. 
microsoft knows that if you deliver computer with windows and gnu+linux, most of the kids in their families see windows in use, so they are going to mostly use windows. 
we need to change that, that's a bad habit of society, it's dependence. 
a school should actively put an end to that dependence. 
they should redirect society down to a path where people have freedom. 
but remember, the problem we want to correct is bigger than microsoft. 
apple is actually nastier than microsoft, and it seems to be having a very disappointing success in the area of mobile devices with the ithings. 
and remember that the ithings pioneered a tyrannical practice that microsoft only tried afterwards. 
that is designing products as jails, so that users can't even choose what applications to install freely, they can only install programs that have been approved by the dictator. 
and the horrible thing is that the evil genius steve jobs found a way to make lots of people clamor to be imprisoned by these products. 
he made jails and made them so shiny that people want to be locked up. 
there's been a tremendous pr industry keen to make him sound good, and apple was working very hard to take advantage of his death. 
of course apple's pr worked while he was alive also, and there seem to be a lot of people in magazines and newspapers who want to direct the public attention away from these issues of freedom. 
speaking of education, when you were part of the mit ai lab, you were part of a community. 
this was eventually broken up and you were the only one to go against the trend and not work for a big company developing proprietary software. 
what gave you the strength to fight, alone, like a guerrilla in the mountains? 
i was alone already. 
the community i've been part of had already split up in a rather hostile fashion. 
so i was most definitely alone no matter what i was going to do. 
but the other thing was that the revulsion of my mind to the idea of using and developing proprietary software meant that that was even worse. 
i had no alternative that would lead to a life i wouldn't be ashamed of and disgusted with. 
what were your major influences in your upbringing and education would you credit for influencing your belief system? 
i don't know. 
i guess the ideas of free software were formulated from the community around me at mit, because we practiced free software, and they were doing that before i joined them. 
what was different for me was that whereas the others liked doing free software, but they were willing to do nonfree software when that was somehow more convenient or satisfied other goals such as to make the software successful or whatever. 
for me that was the thing that made it good rather than bad, and it was useless to throw that away. 
but it took years for me to formulate those ideas, something like ten years. 
in the mid-70's, even late 70's, i still hadn't reached the conclusion that nonfree software was simply unjust. 
you've described yourself as a pessimist so i won't ask you to look into your crystal ball… i wouldn't see anything, anyway. 
the future depends on you. 
if i could tell you what's going to happen then it would be futile for you to try to change it. 
so, what software projects or social movements are you excited to see emerging? 
at the moment there isn't an existing software project that's making me excited, but i'm trying to convince someone to work on a particular, rather specialized piece of free software that is the last thing we need in order to make the use of ati video accelerators possible in the free world. 
as for social movements, i'm very excited by the occupy movement, by the opposition to austerity in greece and spain, and the movements against corporate tax-evasion, and basically i'm excited to see more people fighting against the domination of society by the rich few. 
[*] theodoros papatheodorou <marinero@gmail.com> holds a phd in computer science, and is teaching at the athens school of fine arts. 
new developments in patent practice: assessing the risks and cost of portfolio licensing and hold-ups. 
this is a transcript of a panel presentation given by daniel b. ravicher as the executive director of the public patent foundation on wednesday, november 10, 2004, at a conference organized by the foundation for a free information infrastructure (ffii) in brussels, belgium. 
the transcription was done by aendrew rininsland. 
the gnu project agrees with the premise that patents on computational ideas are bad, but it disagrees with the assumption that nonfree programs are morally legitimate competitors. 
thanks. 
i think, for me, the whole two days of conferences boils to really one question, and the whole debate boils down to one question: "how do we want success in the software industry to be determined?"
 or, another way, who do we want to determine those who succeed and those who fail in the software industry? 
because there are various people who can make this decision. 
we can have bureaucrats make the decision about who wins and who fails, or we can let consumers make the decision about who wins and who fails. 
if we want software to succeed because we want it to succeed on its merits and be the best software that the public can have, it's more likely we want a system that lets consumers and end-users make the decision about which software is selected—not bureaucrats. 
now, what does that have to do with patents? 
the larger you make a patent system, the more you allow the patent system to impact software, and the more you're allowing success in the software industry to be determined by patent-based bureaucrats, those who can take advantage of the bureaucracy which grants and resolves disputes regarding patent rights. 
it's a bureaucratic competition, not one based on the decision of consumers. 
that means it's less likely for the merits to be determinative of what software succeeds. 
we have to recognize that even without software patents, large developers have intrinsic advantages over small developers. 
large developers have the resources, large developers have the relationships, large developers have the distribution channels, large developers have the brand. 
so even without software patents, large developers are still at an advantage—they start out at an advantage. 
well, then, the next question to me is, "if we have software patents, does that increase the advantage of large developers or decrease it?"
 because the patent system could benefit small developers and therefore that could erode some of the naturally existing benefits that large corporations have. 
i think that point's been belaboured already. 
we know that small developers are not benefited by a patent system, in fact, they are prejudiced by a patent system. 
so, enlarging a patent system to apply to software development only enlarges the disadvantage small developers have in competition. 
again, it comes back: who do we want to make the decision about which software developers succeed, do we want consumers, based on merits and functionality and price, or bureaucrats, based on whom patents are granted to and who wins patent infringement cases? 
the other thing we need to recognize is whether or not the patent system has a preference for users of certain types of software. 
a patent system as we have in the united states benefits those under a software distribution scheme which allows them to charge royalties. 
this is because all software has to deal with the risk of infringing on patents. 
patents don't discriminate between open-source or freely licensed software and proprietary software: a patent covers certain technology, it doesn't matter how the software's distributed. 
but proprietary software is licensed with a fee so the cost of that risk can be passed on to the consumer without them recognizing it. 
they don't see it, it's baked into the price of the software they're buying and if you were to ask a consumer if they've bought insurance against being sued for patent infringement, they would say they don't believe that have. 
but in fact they had, because if someone sues a user of microsoft software, microsoft has built in the cost of stepping in to defend them from that into the cost of the license fee. 
on the other side, if you have royalty-free distributed software such as open-source or free software, you can't bake in the cost of that risk so it becomes more transparent. 
and this makes consumers or users think that open-source is in a worse position than proprietary software when it's actually not. 
it's just because the open-source distribution scheme does not allow someone to sneak in the cost of that risk to make it opaque instead of transparent. 
so the patent system not only prefers large developers over small developers, it also prefers users of proprietary software over open-source software. 
if we come back to the initial question, which i think this is all about, how do we want success in the software market to be determined? 
do we want it to be determined by these types of factors, or do we want it to be determined by who can get the best software at the best price? 
now, i think it's important to concede the point that people on the other side will make, which is, will a less-onerous patent system, or they would call it a "less-beneficial" patent system, i call it less-onerous, will harm their business, because people could copy them. 
well, large businesses aren't worried about being copied. 
they really aren't. 
at least not by other large businesses, this is why they enter into cross-licenses all the time. 
if a large company really didn't want its software to be copied, why is it licensing its patent portfolio to every other big company in the world? 
because it can't stop them from copying it once they enter into that agreement, so this argument that, "well, we're worried about people copying our software," the most likely people to copy your software are other large businesses because they have the resources and the ability and the distribution channels and the brand and the relationships. 
why are you letting them copy it? 
you must not be that worried about it. 
and so the question is, then, does a patent system have a net-beneficial effect or a net-detrimental effect on software development? 
i think we've seen already it only decreases the ability for open-source or royalty-free license software to compete with proprietary software. 
in the end you have to ask, is less competition beneficial for the software industry? 
i don't know what europeans think about that, i think europeans are very pro-competition and i know us on the other side of the atlantic are very pro-competition as well, and so the answer is never less competition is better for consumers. 
and so i think as we bring the point home, if we had two seconds in an elevator to pitch this idea to someone, software patents have a net-negative effect on competition in the software industry. 
true, they may increase competition in some ways, but the net-effect is anti-competitive. 
and that's what putting the ability to decide success in the software industry in the hands of the patent office or in hands of the courts does. 
if you need examples, if people think that's just rhetoric or your opinion, just point to the united states. 
microsoft is a very successful software company, i don't think anyone would debate that. 
they've never had to sue anyone for patent infringement. 
so they claim they need patents, but yet they've never had to use them. 
they cross-license them and that's where we wonder, "if you're worried about people copying, then why are you cross-licensing them to people?"
 you know, the last point is, who else does a patent system benefit? 
if it benefits large developers over small developers, is there anyone else? 
a patent system benefits non-developers. 
do we really want a bureaucratic system that helps people who aren't adding anything to society? 
what i mean by non-developers are trolls—which everyone here is familiar with—people who get a patent either by applying for it or acquiring it in some asset purchase and then use it to tax other developers, other distributors of a product. 
do we really want a system which encourages people to not add products or services to the market place but only detracts from the profits and capabilities of those that do? 
patent reform is not enough. 
when people first learn about the problem of software patents, their attention is often drawn to the egregious examples: patents that cover techniques already widely known. 
these techniques include sorting a collection of formulae so that no variable is used before it is calculated (called "natural order recalculation" in spreadsheets), and the use of exclusive-or to modify the contents of a bit-map display. 
focusing on these examples can lead some people to ignore the rest of the problem. 
they are attracted to the position that the patent system is basically correct and needs only "reforms" to carry out its own rules properly. 
but would correct implementation really solve the problem of software patents? 
let's consider an example. 
in the early 90s we desperately needed a new free program for compression, because the old de-facto standard "compress" program had been taken away from us by patents. 
in april 1991, software developer ross williams began publishing a series of data compression programs using new algorithms of his own devising. 
their superior speed and compression quality soon attracted users. 
that september, when the fsf was about a week away from releasing one of them as the new choice for compressing our distribution files, use of these programs in the united states was halted by a newly issued patent, number 5,049,881. 
under the patent system's rules, whether the public is allowed to use these programs (i.e., whether the patent is invalid) depends on whether there is "prior art": whether the basic idea was published before the patent application, which was on june 18, 1990. 
williams' publication in april 1991 came after that date, so it does not count. 
a student described a similar algorithm in 1988-1989 in a class paper at the university of san francisco, but the paper was not published. 
so it does not count as prior art under the current rules. 
reforms to make the patent system work "properly" would not have prevented this problem. 
under the rules of the patent system, this patent seems valid. 
there was no prior art for it. 
it is not close to obvious, as the patent system interprets the term. 
(like most patents, it is neither worldshaking nor trivial, but somewhere in between.) the fault is in the rules themselves, not their execution. 
in the us legal system, patents are intended as a bargain between society and individuals; society is supposed to gain through the disclosure of techniques that would otherwise never be available. 
it is clear that society has gained nothing by issuing patent number 5,049,881. 
this technique was going to be available anyway. 
it was easy enough to find that several people did so at around the same time. 
under current rules, our ability to use williams's programs depends on whether anyone happened to publish the same idea before june 18, 1990. 
that is to say, it depends on luck. 
this system is good for promoting the practice of law, but not progress in software. 
teaching the patent office to look at more of the existing prior art might prevent some outrageous mistakes. 
it will not cure the greater problem, which is the patenting of every new wrinkle in the use of computers, like the one that williams and others independently developed. 
this will turn software into a quagmire. 
even an innovative program typically uses dozens of not-quite-new techniques and features, each of which might have been patented. 
our ability to use each wrinkle will depend on luck, and if we are unlucky half the time, few programs will escape infringing a large number of patents. 
navigating the maze of patents will be harder than writing software. 
as the economist says, software patents are simply bad for business. 
what you can do to help. 
there is a massive effort in europe to stop software patents. 
please see the ffii web site for full details of how you can help. 
www.gnu.org/philosophy/philosophy.html
anonymous payment by phone. 
here is an idea for an anonymous payment system that would be useful for some applications. 
the seller sets up a phone number that charges n dollars per minute to any caller. 
the customer chooses a code, calls that number (which requires paying n dollars), and enters the code. 
a voice-generation system speaks the code back so the customer can confirm it. 
that code represents a payment of n dollars. 
the customer enters it in a web site, or a kiosk, and it constitutes payment for whatever. 
it should be possible to do this using a phone card on a payphone or anyone else's telephone. 
how the swedish pirate party platform backfires on free software. 
stallman note: each pirate party has its own platform. 
they all call for reducing copyright power, but the specifics vary. 
this issue may not apply to the other parties' positions. 
the bullying of the copyright industry in sweden inspired the launch of the first political party whose platform is to reduce copyright restrictions: the pirate party. 
its platform includes the prohibition of digital restrictions management, legalization of noncommercial sharing of published works, and shortening of copyright for commercial use to a five-year period. 
five years after publication, any published work would go into the public domain. 
i support these changes, in general; but the specific combination chosen by the swedish pirate party backfires ironically in the special case of free software. 
i'm sure that they did not intend to hurt free software, but that's what would happen. 
the gnu general public license and other copyleft licenses use copyright law to defend freedom for every user. 
the gpl permits everyone to publish modified works, but only under the same license. 
redistribution of the unmodified work must also preserve the license. 
and all redistributors must give users access to the software's source code. 
how would the swedish pirate party's platform affect copylefted free software? 
after five years, its source code would go into the public domain, and proprietary software developers would be able to include it in their programs. 
but what about the reverse case? 
proprietary software is restricted by eulas, not just by copyright, and the users don't have the source code. 
even if copyright permits noncommercial sharing, the eula may forbid it. 
in addition, the users, not having the source code, do not control what the program does when they run it. 
to run such a program is to surrender your freedom and give the developer control over you. 
so what would be the effect of terminating this program's copyright after 5 years? 
this would not require the developer to release source code, and presumably most will never do so. 
users, still denied the source code, would still be unable to use the program in freedom. 
the program could even have a "time bomb" in it to make it stop working after 5 years, in which case the "public domain" copies would not run at all. 
thus, the pirate party's proposal would give proprietary software developers the use of gpl-covered source code after 5 years, but it would not give free software developers the use of proprietary source code, not after 5 years or even 50 years. 
the free world would get the bad, but not the good. 
the difference between source code and object code and the practice of using eulas would give proprietary software an effective exception from the general rule of 5-year copyright—one that free software does not share. 
we also use copyright to partially deflect the danger of software patents. 
we cannot make our programs safe from them—no program is ever safe from software patents in a country which allows them—but at least we prevent them from being used to make the program effectively nonfree. 
the swedish pirate party proposes to abolish software patents, and if that is done, this issue would go away. 
but until that is achieved, we must not lose our only defense for protection from patents. 
once the swedish pirate party had announced its platform, free software developers noticed this effect and began proposing a special rule for free software: to make copyright last longer for free software, so that it can continue to be copylefted. 
this explicit exception for free software would counterbalance the effective exception for proprietary software. 
even ten years ought to be enough, i think. 
however, the proposal met with resistance from the pirate party's leaders, who objected to the idea of a longer copyright for a special case. 
i could support a law that would make gpl-covered software's source code available in the public domain after 5 years, provided it has the same effect on proprietary software's source code. 
after all, copyleft is a means to an end (users' freedom), not an end in itself. 
and i'd rather not be an advocate for a stronger copyright. 
so i proposed that the pirate party platform require proprietary software's source code to be put in escrow when the binaries are released. 
the escrowed source code would then be released in the public domain after 5 years. 
rather than making free software an official exception to the 5-year copyright rule, this would eliminate proprietary software's unofficial exception. 
either way, the result is fair. 
a pirate party supporter proposed a more general variant of the first suggestion: a general scheme to make copyright last longer as the public is granted more freedoms in using the work. 
the advantage of this is that free software becomes part of a general pattern of varying copyright term, rather than a lone exception. 
i'd prefer the escrow solution, but any of these methods would avoid a prejudicial effect specifically against free software. 
there may be other solutions that would also do the job. 
one way or another, the pirate party of sweden should avoid placing a handicap on a movement to defend the public from marauding giants. 
the problems of the (earlier) plan 9 license. 
stallman note: this applies to the earlier license used for plan 9. the current license of plan 9 does qualify as free software (and also as open source). 
so this article's specific example is of historical relevance only. 
nonetheless, the general point remains valid. 
when i saw the announcement that the plan 9 software had been released as "open source," i wondered whether it might be free software as well. 
after studying the license, my conclusion was that it is not free; the license contains several restrictions that are totally unacceptable for the free software movement. 
(see gnu.org/philosophy/free-sw.html.) i am not a supporter of the open source movement, but i was glad when one of their leaders told me they don't consider the license acceptable either. 
when the developers of plan 9 describe it as "open source," they are altering the meaning of that term and thus spreading confusion. 
(the term "open source" is widely misunderstood; see gnu.org/philosophy/open-source-misses-the-point.html.) here is a list of the problems that i found in the plan 9 license. 
some provisions restrict the plan 9 software so that it is clearly nonfree; others are just extremely obnoxious. 
first, here are the provisions that make the software nonfree. 
you agree to provide the original contributor, at its request, with a copy of the complete source code version, object code version and related documentation for modifications created or contributed to by you if used for any purpose. 
this prohibits modifications for private use, denying the users a basic right. 
and may, at your option, include a reasonable charge for the cost of any media. 
this seems to limit the price that may be charged for an initial distribution, prohibiting selling copies for a profit. 
distribution of licensed software to third parties pursuant to this grant shall be subject to the same terms and conditions as set forth in this agreement, this seems to say that when you redistribute you must insist on a contract with the recipients, just as lucent demands when you download it. 
1. the licenses and rights granted under this agreement shall terminate automatically if (i) you fail to comply with all of the terms and conditions herein; or (ii) you initiate or participate in any intellectual property action against original contributor and/or another contributor. 
this seemed reasonable to me at first glance, but later i realized that it goes too far. 
a retaliation clause like this would be legitimate if it were limited to patents, but this one is not. 
it would mean that if lucent or some other contributor violates the license of your gpl-covered free software package, and you try to enforce that license, you would lose the right to use the plan 9 code. 
you agree that, if you export or re-export the licensed software or any modifications to it, you are responsible for compliance with the united states export administration regulations and hereby indemnify the original contributor and all other contributors for any liability incurred as a result. 
it is unacceptable for a license to require compliance with us export control regulations. 
laws being what they are, these regulations apply in certain situations regardless of whether they are mentioned in a license; however, requiring them as a license condition can extend their reach to people and activities outside the us government's jurisdiction, and that is definitely wrong. 
a part of the distribution is covered by a further unacceptable restriction: 2.2 no right is granted to licensee to create derivative works of or to redistribute (other than with the original software or a derivative thereof) the screen imprinter fonts identified in subdirectory /lib/font/bit/lucida and printer fonts (lucida sans unicode, lucida sans italic, lucida sans demibold, lucida typewriter, lucida sans typewriter83), identified in subdirectory /sys/lib/postscript/font. 
one part of this collection is free—the ghostscript fonts that are covered by the gnu gpl. 
all the rest does not even come close. 
aside from those fatal flaws, the license has other obnoxious provisions: …as such, if you or any contributor include licensed software in a commercial offering ("commercial contributor"), such commercial contributor agrees to defend and indemnify original contributor and all other contributors (collectively "indemnified contributors") requiring indemnities from users is quite obnoxious. 
contributors shall have unrestricted, nonexclusive, worldwide, perpetual, royalty-free rights, to use, reproduce, modify, display, perform, sublicense and distribute your modifications, and to grant third parties the right to do so, including without limitation as a part of or with the licensed software; this is a variant of the npl asymmetry: you get limited rights to use their code, but they get unlimited rights to use your changes. 
while this does not by itself disqualify the license as a free software license (if the other problems were corrected), it is unfortunate. 
posting videos. 
you don't need a "free software based streaming platform" to post a video for streaming. 
someone asked me where to upload a video recording on some "free software based streaming platform."
 here's how i responded. 
what software the platform is based on is not crucial, because that has no effect on the people who use that site. 
they don't run that software. 
what they do is talk with the site. 
the crucial question for the users' freedom is whether the site requires them, or leads them, to run any nonfree software, including nonfree javascript code. 
any web site can host a file of video in such a way that any browser can view it without any javascript. 
just put the file of video onto the site, and tell people its url. 
any modern graphical browser, when it encounters a file of video, will stream it. 
the only special thing about "video platform" sites is that they have other auxiliary facilities, such as making accounts, uploading videos, tracking users who watch them, and restricting those users. 
you don't need those things. 
to distribute the url of the video and enable users to watch it, all you do need is a site that you can post the file on. 
it could be your own web site, either running on your own server or hosted elsewhere. 
depending on the rest of that site, it may have other flaws or moral problems, but it will at least avoid directly mistreating users who watch the video. 
the advantages of free software. 
people outside the free software movement frequently ask about the practical advantages of free software. 
it is a curious question. 
nonfree software is bad because it denies your freedom. 
thus, asking about the practical advantages of free software is like asking about the practical advantages of not being handcuffed. 
indeed, it has advantages: you can wear an ordinary shirt. 
you can get through metal detectors without triggering them. 
you can keep a hand on the steering wheel while you shift gears. 
you can pitch a baseball. 
you can carry a backpack. 
we could find more, but do you need these advantages to convince you to reject handcuffs? 
probably not, because you understand that your freedom is what's at stake. 
once you realize that that's what's at stake with nonfree software, you won't need to ask what practical advantages free software has. 
copyleft: pragmatic idealism. 
stallman every decision a person makes stems from the person's values and goals. 
people can have many different goals and values; fame, profit, love, survival, fun, and freedom, are just some of the goals that a good person might have. 
when the goal is a matter of principle, we call that idealism. 
my work on free software is motivated by an idealistic goal: spreading freedom and cooperation. 
i want to encourage free software to spread, replacing proprietary software that forbids cooperation, and thus make our society better. 
that's the basic reason why the gnu general public license is written the way it is—as a copyleft. 
all code added to a gpl-covered program must be free software, even if it is put in a separate file. 
i make my code available for use in free software, and not for use in proprietary software, in order to encourage other people who write software to make it free as well. 
i figure that since proprietary software developers use copyright to stop us from sharing, we cooperators can use copyright to give other cooperators an advantage of their own: they can use our code. 
not everyone who uses the gnu gpl has this goal. 
many years ago, a friend of mine was asked to rerelease a copylefted program under noncopyleft terms, and he responded more or less like this: "sometimes i work on free software, and sometimes i work on proprietary software—but when i work on proprietary software, i expect to get paid."
 he was willing to share his work with a community that shares software, but saw no reason to give a handout to a business making products that would be off-limits to our community. 
his goal was different from mine, but he decided that the gnu gpl was useful for his goal too. 
if you want to accomplish something in the world, idealism is not enough—you need to choose a method that works to achieve the goal. 
in other words, you need to be "pragmatic."
 is the gpl pragmatic? 
let's look at its results. 
consider gnu c++. 
why do we have a free c++ compiler? 
only because the gnu gpl said it had to be free. 
gnu c++ was developed by an industry consortium, mcc, starting from the gnu c compiler. 
mcc normally makes its work as proprietary as can be. 
but they made the c++ front end free software, because the gnu gpl said that was the only way they could release it. 
the c++ front end included many new files, but since they were meant to be linked with gcc, the gpl did apply to them. 
the benefit to our community is evident. 
consider gnu objective c. next initially wanted to make this front end proprietary; they proposed to release it as .o files, and let users link them with the rest of gcc, thinking this might be a way around the gpl's requirements. 
but our lawyer said that this would not evade the requirements, that it was not allowed. 
and so they made the objective c front end free software. 
those examples happened years ago, but the gnu gpl continues to bring us more free software. 
many gnu libraries are covered by the gnu lesser general public license, but not all. 
one gnu library which is covered by the ordinary gnu gpl is readline, which implements command-line editing. 
i once found out about a nonfree program which was designed to use readline, and told the developer this was not allowed. 
he could have taken command-line editing out of the program, but what he actually did was rerelease it under the gpl. 
now it is free software. 
the programmers who write improvements to gcc (or emacs, or bash, or linux, or any gpl-covered program) are often employed by companies or universities. 
when the programmer wants to return his improvements to the community, and see his code in the next release, the boss may say, "hold on there—your code belongs to us! 
we don't want to share it; we have decided to turn your improved version into a proprietary software product."
 here the gnu gpl comes to the rescue. 
the programmer shows the boss that this proprietary software product would be copyright infringement, and the boss realizes that he has only two choices: release the new code as free software, or not at all. 
almost always he lets the programmer do as he intended all along, and the code goes into the next release. 
the gnu gpl is not mr. 
nice guy. 
it says no to some of the things that people sometimes want to do. 
there are users who say that this is a bad thing—that the gpl "excludes" some proprietary software developers who "need to be brought into the free software community."
 but we are not excluding them from our community; they are choosing not to enter. 
their decision to make software proprietary is a decision to stay out of our community. 
being in our community means joining in cooperation with us; we cannot "bring them into our community" if they don't want to join. 
what we can do is offer them an inducement to join. 
the gnu gpl is designed to make an inducement from our existing software: "if you will make your software free, you can use this code."
 of course, it won't win 'em all, but it wins some of the time. 
proprietary software development does not contribute to our community, but its developers often want handouts from us. 
free software users can offer free software developers strokes for the ego—recognition and gratitude—but it can be very tempting when a business tells you, "just let us put your package in our proprietary program, and your program will be used by many thousands of people!"
 the temptation can be powerful, but in the long run we are all better off if we resist it. 
the temptation and pressure are harder to recognize when they come indirectly, through free software organizations that have adopted a policy of catering to proprietary software. 
the x consortium (and its successor, the open group) offers an example: funded by companies that made proprietary software, they strived for a decade to persuade programmers not to use copyleft. 
when the open group tried to make x11r6.4 nonfree software, those of us who had resisted that pressure were glad that we did. 
in september 1998, several months after x11r6.4 was released with nonfree distribution terms, the open group reversed its decision and rereleased it under the same noncopyleft free software license that was used for x11r6.3. 
thank you, open group—but this subsequent reversal does not invalidate the conclusions we draw from the fact that adding the restrictions was possible. 
pragmatically speaking, thinking about greater long-term goals will strengthen your will to resist this pressure. 
if you focus your mind on the freedom and community that you can build by staying firm, you will find the strength to do it. 
"stand for something, or you will fall for anything."
 and if cynics ridicule freedom, ridicule community…if "hard-nosed realists" say that profit is the only ideal…just ignore them, and use copyleft all the same. 
this essay is published in free software, free society: the selected essays of richard m. stallman. 
protect postal privacy. 
the free software foundation does not lead this campaign, but we support it by spreading the word and hope that you do too. 
background. 
the united states postal service has submitted a rule to congress proposing that all commercial mail receiving agencies (cmras) must, as of june 24, 1999, collect significant personal information from all clients using their services. 
this would certainly affect anonymous mail transactions, and could put millions of cmra customers in danger. 
any cmra or cmra customer who refuses to comply with this regulation would effectively lose their right to receive mail. 
the proposed regulation (published in the federal register on march 25, 1999) requires that cmras collect names, home addresses, telephone numbers, and photo id information about each customer. 
if the cmra customer classifies themselves as a business, they must surrender the information on that box holder to anyone who asks for it. 
cmras are widely used by survivors of domestic violence, undercover law enforcement officials, and stalking victims in order to conceal their locations and identities from people who could cause them harm. 
the usps proposal was intended to help cut down on mail fraud, a practice that costs consumers millions of dollars every year. 
however, experts state that the postal service's proposal will not serve as a deterrent to criminals. 
"it will be a simple process for those with financial means to rent homes, apartments, office space, or the executive suites available in most major metropolitan area," says postal watch's website. 
congressman ron paul has introduced house joint resolution 55, which would effectively revoke the postal service's new regulations regarding cmras, but the resolution needs your support in order to ensure that this insidious assault on consumer privacy is defeated. 
what you can do. 
contact your representative and urge them to co-sponsor hjr 55. 
write or call members of the house appropriations committee and inform them about this issue, and urge them to pass the resolution. 
send written comments about this issue to the us postal service before july 9, 1999 to: manager, administration and foia united states postal service 475 l'enfant plaza sw, room 8141 washington, dc 20260-5202 more information. 
for further information, see the following web pages: privacy.org [in 2021: epic.org] h.j.res.55—106th congress 
why programs must not limit the freedom to run them. 
stallman free software means software controlled by its users, rather than the reverse. 
specifically, it means the software comes with four essential freedoms that software users deserve. 
at the head of the list is freedom 0, the freedom to run the program as you wish, in order to do what you wish. 
some developers propose to place usage restrictions in software licenses to ban using the program for certain purposes, but that would be a disastrous path. 
this article explains why freedom 0 must not be limited. 
conditions to limit the use of a program would achieve little of their aims, but could wreck the free software community. 
first of all, let's be clear what freedom 0 means. 
it means that the distribution of the software does not restrict how you use it. 
this doesn't make you exempt from laws. 
for instance, fraud is a crime in the us—a law which i think is right and proper. 
whatever the free software license says, using a free program to carry out your fraud won't shield you from prosecution. 
a license condition against fraud would be superfluous in a country where fraud is a crime. 
but why not a condition against using it for torture, a practice that states frequently condone when carried out by the "security forces"? 
a condition against torture would not work, because enforcement of any free software license is done through the state. 
a state that wants to carry out torture will ignore the license. 
when victims of us torture try suing the us government, courts dismiss the cases on the grounds that their treatment is a national security secret. 
if a software developer tried to sue the us government for using a program for torture against the conditions of its license, that suit would be dismissed too. 
in general, states are clever at making legal excuses for whatever terrible things they want to do. 
businesses with powerful lobbies can do it too. 
what if the condition were against some specialized private activity? 
for instance, peta proposed a license that would forbid use of the software to cause pain to animals with a spinal column. 
or there might be a condition against using a certain program to make or publish drawings of mohammad. 
or against its use in experiments with embryonic stem cells. 
or against using it to make unauthorized copies of musical recordings. 
it is not clear these would be enforcible. 
free software licenses are based on copyright law, and trying to impose usage conditions that way is stretching what copyright law permits, stretching it in a dangerous way. 
would you like books to carry license conditions about how you can use the information in them? 
what if such conditions are legally enforcible—would that be good? 
the fact is, people have very different ethical ideas about the activities that might be done using software. 
i happen to think those four unusual activities are legitimate and should not be forbidden. 
in particular i support the use of software for medical experiments on animals, and for processing meat. 
i defend the human rights of animal right activists but i don't agree with them; i would not want peta to get its way in restricting the use of software. 
since i am not a pacifist, i would also disagree with a "no military use" provision. 
i condemn wars of aggression but i don't condemn fighting back. 
in fact, i have supported efforts to convince various armies to switch to free software, since they can check it for back doors and surveillance features that could imperil national security. 
since i am not against business in general, i would oppose a restriction against commercial use. 
a system that we could use only for recreation, hobbies and school is off limits to much of what we do with computers. 
i've stated above some parts of my views about certain political issues unrelated to the issue of free software—about which of those activities are or aren't unjust. 
your views about them might differ, and that's precisely the point. 
if we accepted programs with usage restrictions as part of a free operating system such as gnu, people would come up with lots of different usage restrictions. 
there would be programs banned for use in meat processing, programs banned only for pigs, programs banned only for cows, and programs limited to kosher foods. 
someone who hates spinach might license a program to allow use for processing any vegetable except spinach, while a popeye fan's program might allow only use for spinach. 
there would be music programs allowed only for rap music, and others allowed only for classical music. 
the result would be a system that you could not count on for any purpose. 
for each task you wish to do, you'd have to check lots of licenses to see which parts of your system are off limits for that task. 
not only for the components you explicitly use, but also for the hundreds of components that they link with, invoke, or communicate with. 
how would users respond to that? 
i think most of them would use proprietary systems. 
allowing usage restrictions in free software would mainly push users towards nonfree software. 
trying to stop users from doing something through usage restrictions in free software is as ineffective as pushing on an object through a long, straight, soft piece of cooked spaghetti. 
as one wag put it, this is "someone with a very small hammer seeing every problem as a nail, and not even acknowledging that the nail is far too big for the hammer."
 it is worse than ineffective; it is wrong too, because software developers should not exercise such power over what users do. 
imagine selling pens with conditions about what you can write with them; that would be noisome, and we should not stand for it. 
likewise for general software. 
if you make something that is generally useful, like a pen, people will use it to write all sorts of things, even horrible things such as orders to torture a dissident; but you must not have the power to control people's activities through their pens. 
it is the same for a text editor, compiler or kernel. 
you do have an opportunity to determine what your software can be used for: when you decide what functionality to implement. 
you can write programs that lend themselves mainly to uses you think are positive, and you have no obligation to write any features that might lend themselves particularly to activities you disapprove of. 
the conclusion is clear: a program must not restrict what jobs its users do with it. 
freedom 0 must be complete. 
we need to stop torture, but we can't do it through software licenses. 
the proper job of software licenses is to establish and protect users' freedom. 
why programs must not limit the freedom to run them. 
stallman free software means software controlled by its users, rather than the reverse. 
specifically, it means the software comes with four essential freedoms that software users deserve. 
at the head of the list is freedom 0, the freedom to run the program as you wish, in order to do what you wish. 
some developers propose to place usage restrictions in software licenses to ban using the program for certain purposes, but that would be a disastrous path. 
this article explains why freedom 0 must not be limited. 
conditions to limit the use of a program would achieve little of their aims, but could wreck the free software community. 
first of all, let's be clear what freedom 0 means. 
it means that the distribution of the software does not restrict how you use it. 
this doesn't make you exempt from laws. 
for instance, fraud is a crime in the us—a law which i think is right and proper. 
whatever the free software license says, using a free program to carry out your fraud won't shield you from prosecution. 
a license condition against fraud would be superfluous in a country where fraud is a crime. 
but why not a condition against using it for torture, a practice that states frequently condone when carried out by the "security forces"? 
a condition against torture would not work, because enforcement of any free software license is done through the state. 
a state that wants to carry out torture will ignore the license. 
when victims of us torture try suing the us government, courts dismiss the cases on the grounds that their treatment is a national security secret. 
if a software developer tried to sue the us government for using a program for torture against the conditions of its license, that suit would be dismissed too. 
in general, states are clever at making legal excuses for whatever terrible things they want to do. 
businesses with powerful lobbies can do it too. 
what if the condition were against some specialized private activity? 
for instance, peta proposed a license that would forbid use of the software to cause pain to animals with a spinal column. 
or there might be a condition against using a certain program to make or publish drawings of mohammad. 
or against its use in experiments with embryonic stem cells. 
or against using it to make unauthorized copies of musical recordings. 
it is not clear these would be enforcible. 
free software licenses are based on copyright law, and trying to impose usage conditions that way is stretching what copyright law permits, stretching it in a dangerous way. 
would you like books to carry license conditions about how you can use the information in them? 
what if such conditions are legally enforcible—would that be good? 
the fact is, people have very different ethical ideas about the activities that might be done using software. 
i happen to think those four unusual activities are legitimate and should not be forbidden. 
in particular i support the use of software for medical experiments on animals, and for processing meat. 
i defend the human rights of animal right activists but i don't agree with them; i would not want peta to get its way in restricting the use of software. 
since i am not a pacifist, i would also disagree with a "no military use" provision. 
i condemn wars of aggression but i don't condemn fighting back. 
in fact, i have supported efforts to convince various armies to switch to free software, since they can check it for back doors and surveillance features that could imperil national security. 
since i am not against business in general, i would oppose a restriction against commercial use. 
a system that we could use only for recreation, hobbies and school is off limits to much of what we do with computers. 
i've stated above some parts of my views about certain political issues unrelated to the issue of free software—about which of those activities are or aren't unjust. 
your views about them might differ, and that's precisely the point. 
if we accepted programs with usage restrictions as part of a free operating system such as gnu, people would come up with lots of different usage restrictions. 
there would be programs banned for use in meat processing, programs banned only for pigs, programs banned only for cows, and programs limited to kosher foods. 
someone who hates spinach might license a program to allow use for processing any vegetable except spinach, while a popeye fan's program might allow only use for spinach. 
there would be music programs allowed only for rap music, and others allowed only for classical music. 
the result would be a system that you could not count on for any purpose. 
for each task you wish to do, you'd have to check lots of licenses to see which parts of your system are off limits for that task. 
not only for the components you explicitly use, but also for the hundreds of components that they link with, invoke, or communicate with. 
how would users respond to that? 
i think most of them would use proprietary systems. 
allowing usage restrictions in free software would mainly push users towards nonfree software. 
trying to stop users from doing something through usage restrictions in free software is as ineffective as pushing on an object through a long, straight, soft piece of cooked spaghetti. 
as one wag put it, this is "someone with a very small hammer seeing every problem as a nail, and not even acknowledging that the nail is far too big for the hammer."
 it is worse than ineffective; it is wrong too, because software developers should not exercise such power over what users do. 
imagine selling pens with conditions about what you can write with them; that would be noisome, and we should not stand for it. 
likewise for general software. 
if you make something that is generally useful, like a pen, people will use it to write all sorts of things, even horrible things such as orders to torture a dissident; but you must not have the power to control people's activities through their pens. 
it is the same for a text editor, compiler or kernel. 
you do have an opportunity to determine what your software can be used for: when you decide what functionality to implement. 
you can write programs that lend themselves mainly to uses you think are positive, and you have no obligation to write any features that might lend themselves particularly to activities you disapprove of. 
the conclusion is clear: a program must not restrict what jobs its users do with it. 
freedom 0 must be complete. 
we need to stop torture, but we can't do it through software licenses. 
the proper job of software licenses is to establish and protect users' freedom. 
www.gnu.org/philosophy/proprietary.html
a common malicious functionality is to snoop on the user. 
this page records clearly established cases of proprietary software that spies on or tracks users. 
manufacturers even refuse to say whether they snoop on users for the state. 
all appliances and applications that are tethered to a specific server are snoopers by nature. 
we do not list them here because they have their own page: proprietary tethers. 
there is a similar site named spyware watchdog that classifies spyware programs, so that users can be more aware that they are installing spyware. 
if you know of an example that ought to be in this page but isn't here, please write to <webmasters@gnu.org> to inform us. 
please include the url of a trustworthy reference or two to serve as specific substantiation. 
table of contents. 
introduction. 
spyware in laptops and desktops. 
windows macos bios spyware on mobiles. 
all "smart" phones ithings android telephones e-readers spyware in applications. 
desktop apps mobile apps skype games spyware in connected equipment. 
tv sets cameras toys drones other appliances wearables "smart" watches vehicles virtual reality spyware on the web. 
chrome javascript flash spyware in networks. 
introduction. 
for decades, the free software movement has been denouncing the abusive surveillance machine of proprietary software companies such as microsoft and apple. 
in the recent years, this tendency to watch people has spread across industries, not only in the software business, but also in the hardware. 
moreover, it also spread dramatically away from the keyboard, in the mobile computing industry, in the office, at home, in transportation systems, and in the classroom. 
aggregate or anonymized data. 
many companies, in their privacy policy, have a clause that claims they share aggregate, non-personally identifiable information with third parties/partners. 
such claims are worthless, for several reasons: they could change the policy at any time. 
they can twist the words by distributing an "aggregate" of "anonymized" data which can be reidentified and attributed to individuals. 
the raw data they don't normally distribute can be taken by data breaches. 
the raw data they don't normally distribute can be taken by subpoena. 
therefore, we must not be distracted by companies' statements of what they will do with the data they collect. 
the wrong is that they collect it at all. 
latest additions. 
entries in each category are in reverse chronological order, based on the dates of publication of linked articles. 
the latest additions are listed on the main page of the malware section. 
spyware in laptops and desktops. 
(#osspyware) windows. 
(#spywareinwindows) 2023-02 as soon as it boots, and without asking any permission, windows 11 starts to send data to online servers. 
the user's personal details, location or hardware information are reported to microsoft and other companies to be used as telemetry data. 
all of this is done is the background, and users have no easy way to prevent it—unless they switch the computer offline. 
2023-01 microsoft released an "update" that installs a surveillance program on users' computers to gather data on some installed programs for microsoft's benefit. 
the update is rolling out automatically, and the program runs "one time silently."
 2019-12 microsoft is tricking users to create an account on their network to be able to install and use the windows operating system, which is malware. 
the account can be used for surveillance and/or violating people's rights in many ways, such as turning their purchased software to a subscription product. 
2017-12 hp's proprietary operating system includes a proprietary keyboard driver with a key logger in it. 
2017-10 windows 10 telemetry program sends information to microsoft about the user's computer and their use of the computer. 
furthermore, for users who installed the fourth stable build of windows 10, called the "creators update," windows maximized the surveillance by force setting the telemetry mode to "full". 
the "full" telemetry mode allows microsoft windows engineers to access, among other things, registry keys which can contain sensitive information like administrator's login password. 
2017-02 drm-restricted files can be used to identify people browsing through tor. 
the vulnerability exists only if you use windows. 
2016-11 by default, windows 10 sends debugging information to microsoft, including core dumps. 
microsoft now distributes them to another company. 
2016-08 in order to increase windows 10's install base, microsoft blatantly disregards user choice and privacy. 
2016-03 windows 10 comes with 13 screens of snooping options, all enabled by default, and turning them off would be daunting to most users. 
2016-01 it appears windows 10 sends data to microsoft about what applications are running. 
2015-12 microsoft has backdoored its disk encryption. 
2015-11 a downgrade to windows 10 deleted surveillance-detection applications. 
then another downgrade inserted a general spying program. 
users noticed this and complained, so microsoft renamed it to give users the impression it was gone. 
to use proprietary software is to invite such treatment. 
2015-08 intel devices will be able to listen for speech all the time, even when "off."
 2015-08 windows 10 sends identifiable information to microsoft, even if a user turns off its bing search and cortana features, and activates the privacy-protection settings. 
2015-07 windows 10 ships with default settings that show no regard for the privacy of its users, giving microsoft the "right" to snoop on the users' files, text input, voice input, location info, contacts, calendar records and web browsing history, as well as automatically connecting the machines to open hotspots and showing targeted ads. 
we can suppose microsoft looks at users' files for the us government on demand, though the "privacy policy" does not explicitly say so. 
will it look at users' files for the chinese government on demand? 
2015-06 microsoft uses windows 10's "privacy policy" to overtly impose a "right" to look at users' files at any time. 
windows 10 full disk encryption gives microsoft a key. 
thus, windows is overt malware in regard to surveillance, as in other issues. 
the unique "advertising id" for each user enables other companies to track the browsing of each specific user. 
it's as if microsoft has deliberately chosen to make windows 10 maximally evil on every dimension; to make a grab for total power over anyone that doesn't drop windows now. 
2014-10 it only gets worse with time. 
windows 10 requires users to give permission for total snooping, including their files, their commands, their text input, and their voice input. 
2014-05 microsoft skydrive allows the nsa to directly examine users' data. 
2014-01 baidu's japanese-input and chinese-input apps spy on users. 
2013-07 spyware in older versions of windows: windows update snoops on the user. 
windows 8.1 snoops on local searches. 
and there's a secret nsa key in windows, whose functions we don't know. 
microsoft's snooping on users did not start with windows 10. 
there's a lot more microsoft malware. 
macos. 
(#spywareinmacos) 2020-11 apple has implemented a malware in its computers that imposes surveillance on users and reports users' computing to apple. 
the reports are even unencrypted and they've been leaking this data for two years already. 
this malware is reporting to apple what user opens what program at what time. 
it also gives apple power to sabotage users' computing. 
2018-09 adware doctor, an ad blocker for macos, reports the user's browsing history. 
2014-11 apple has made various macos programs send files to apple servers without asking permission. 
this exposes the files to big brother and perhaps to other snoops. 
it also demonstrates how you can't trust proprietary software, because even if today's version doesn't have a malicious functionality, tomorrow's version might add it. 
the developer won't remove the malfeature unless many users push back hard, and the users can't remove it themselves. 
2014-10 macos automatically sends to apple servers unsaved documents being edited. 
the things you have not decided to save are even more sensitive than the things you have stored in files. 
2014-10 apple admits the spying in a search facility, but there's a lot more snooping that apple has not talked about. 
2014-10 various operations in the latest macos send reports to apple servers. 
2014-01 spotlight search sends users' search terms to apple. 
there's a lot more ithing spyware, and apple malware. 
bios. 
(#spywareinbios) 2015-09 lenovo stealthily installed crapware and spyware via bios on windows installs. 
note that the specific sabotage method lenovo used did not affect gnu/linux; also, a "clean" windows install is not really clean since microsoft puts in its own malware. 
spyware on mobiles. 
(#spywareonmobiles) all "smart" phones. 
(#spywareintelephones) 2021-06 el salvador dictatorship's chivo wallet is spyware, it's a proprietary program that breaks users' freedom and spies on people; demands personal data such as the national id number and does face recognition, and it is bad security for its data. 
it also asks for almost every malware permission in people's smartphones. 
the article criticizes it for faults in "data protection", though "data protection" is the wrong approach to privacy anyway. 
2021-06 almost all proprietary health apps harvest users' data, including sensitive health information, tracking identifiers, and cookies to track user activities. 
some of these applications are tracking users across different platforms. 
2021-02 the proprietary program clubhouse is malware and a privacy disaster. 
clubhouse collects people's personal data such as recordings of people's conversations, and, as a secondary problem, does not encrypt them, which shows a bad security part of the issue. 
a user's unique clubhouse id number and chatroom id are transmitted in plaintext, and agora (the company behind the app) would likely have access to users' raw audio, potentially providing access to the chinese government. 
even with good security of data transmission, collecting personal data of people is wrong and a violation of people's privacy rights. 
2021-01 as of 2021, whatsapp (one of facebook's subsidiaries) is forcing its users to hand over sensitive personal data to its parent company. 
this increases facebook's power over users, and further jeopardizes people's privacy and security. 
instead of whatsapp you can use gnu jami, which is free software and will not collect your data. 
2020-06 most apps are malware, but trump's campaign app, like modi's campaign app, is especially nasty malware, helping companies snoop on users as well as snooping on them itself. 
the article says that biden's app has a less manipulative overall approach, but that does not tell us whether it has functionalities we consider malicious, such as sending data the user has not explicitly asked to send. 
2018-09 tiny lab productions, along with online ad businesses run by google, twitter and three other companies are facing a lawsuit for violating people's privacy by collecting their data from mobile games and handing over these data to other companies/advertisers. 
2016-01 the natural extension of monitoring people through "their" phones is proprietary software to make sure they can't "fool" the monitoring. 
2015-10 according to edward snowden, agencies can take over smartphones by sending hidden text messages which enable them to turn the phones on and off, listen to the microphone, retrieve geo-location data from the gps, take photographs, read text messages, read call, location and web browsing history, and read the contact list. 
this malware is designed to disguise itself from investigation. 
2013-11 the nsa can tap data in smart phones, including iphones, android, and blackberry. 
while there is not much detail here, it seems that this does not operate via the universal back door that we know nearly all portable phones have. 
it may involve exploiting various bugs. 
there are lots of bugs in the phones' radio software. 
2013-07 portable phones with gps will send their gps location on remote command, and users cannot stop them. 
(the us says it will eventually require all new portable phones to have gps.) ithings. 
(#spywareinithings) 2022-11 the imonsters' app store client programs collect many kinds of data about the user's actions and private communications. 
"do not track" options are available, but tracking doesn't stop if the user activates them: apple keeps on collecting data for itself, although it claims not to send it to third parties. 
apple is being sued for that. 
2021-05 apple is moving its chinese customers' icloud data to a datacenter controlled by the chinese government. 
apple is already storing the encryption keys on these servers, obeying chinese authority, making all chinese user data available to the government. 
2020-09 facebook snoops on instagram users by surreptitously turning on the device's camera. 
2020-04 apple whistleblower thomas le bonniec reports that apple made a practice of surreptitiously activating the siri software to record users' conversations when they had not activated siri. 
this was not just occasional, it was systematic practice. 
his job was to listen to these recordings, in a group that made transcripts of them. 
he does not believes that apple has ceased this practice. 
the only reliable way to prevent this is, for the program that controls access to the microphone to decide when the user has "activated" any service, to be free software, and the operating system under it free as well. 
this way, users could make sure apple can't listen to them. 
2019-10 safari occasionally sends browsing data from apple devices in china to the tencent safe browsing service, to check urls that possibly correspond to "fraudulent" websites. 
since tencent collaborates with the chinese government, its safe browsing black list most certainly contains the websites of political opponents. 
by linking the requests originating from single ip addresses, the government can identify dissenters in china and hong kong, thus endangering their lives. 
2019-05 in spite of apple's supposed commitment to privacy, iphone apps contain trackers that are busy at night sending users' personal information to third parties. 
the article mentions specific examples: microsoft onedrive, intuit's mint, nike, spotify, the washington post, the weather channel (owned by ibm), the crime-alert service citizen, yelp and doordash. 
but it is likely that most nonfree apps contain trackers. 
some of these send personally identifying data such as phone fingerprint, exact location, email address, phone number or even delivery address (in the case of doordash). 
once this information is collected by the company, there is no telling what it will be used for. 
2017-11 the dmca and the eu copyright directive make it illegal to study how ios cr…apps spy on users, because this would require circumventing the ios drm. 
2017-09 in the latest ithings system, "turning off" wifi and bluetooth the obvious way doesn't really turn them off. 
a more advanced way really does turn them off—only until 5am. 
that's apple for you—"we know you want to be spied on". 
2017-02 apple proposes a fingerprint-scanning touch screen—which would mean no way to use it without having your fingerprints taken. 
users would have no way to tell whether the phone is snooping on them. 
2016-11 iphones send lots of personal data to apple's servers. 
big brother can get them from there. 
2016-09 the imessage app on ithings tells a server every phone number that the user types into it; the server records these numbers for at least 30 days. 
2015-09 ithings automatically upload to apple's servers all the photos and videos they make. 
icloud photo library stores every photo and video you take, and keeps them up to date on all your devices. 
any edits you make are automatically updated everywhere. 
[…] (from apple's icloud information as accessed on 24 sep 2015.) the icloud feature is activated by the startup of ios. 
the term "cloud" means "please don't ask where."
 there is a way to deactivate icloud, but it's active by default so it still counts as a surveillance functionality. 
unknown people apparently took advantage of this to get nude photos of many celebrities. 
they needed to break apple's security to get at them, but nsa can access any of them through prism. 
2014-09 apple can, and regularly does, remotely extract some data from iphones for the state. 
this may have improved with ios 8 security improvements; but not as much as apple claims. 
2014-07 several "features" of ios seem to exist for no possible purpose other than surveillance. 
here is the technical presentation. 
2014-01 the ibeacon lets stores determine exactly where the ithing is, and get other info too. 
2013-12 either apple helps the nsa snoop on all the data in an ithing, or it is totally incompetent. 
2013-08 the ithing also tells apple its geolocation by default, though that can be turned off. 
2012-10 there is also a feature for web sites to track users, which is enabled by default. 
(that article talks about ios 6, but it is still true in ios 7.) 2012-04 users cannot make an apple id (necessary to install even gratis apps) without giving a valid email address and receiving the verification code apple sends to it. 
android telephones. 
(#spywareinandroid) 2020-12 baidu apps were caught collecting sensitive personal data that can be used for lifetime tracking of users, and putting them in danger. 
more than 1.4 billion people worldwide are affected by these proprietary apps, and users' privacy is jeopardized by this surveillance tool. 
data collected by baidu may be handed over to the chinese government, possibly putting chinese people in danger. 
2020-10 samsung is forcing its smartphone users in hong kong (and macau) to use a public dns in mainland china, using software update released in september 2020, which causes many unease and privacy concerns. 
2020-04 xiaomi phones report many actions the user takes: starting an app, looking at a folder, visiting a website, listening to a song. 
they send device identifying information too. 
other nonfree programs snoop too. 
for instance, spotify and other streaming dis-services make a dossier about each user, and they make users identify themselves to pay. 
out, out, damned spotify! 
forbes exonerates the same wrongs when the culprits are not chinese, but we condemn this no matter who does it. 
2018-12 facebook's app got "consent" to upload call logs automatically from android phones while disguising what the "consent" was for. 
2018-11 an android phone was observed to track location even while in airplane mode. 
it didn't send the location data while in airplane mode. 
instead, it saved up the data, and sent them all later. 
2017-11 android tracks location for google even when "location services" are turned off, even when the phone has no sim card. 
2016-11 some portable phones are sold with spyware sending lots of data to china. 
2016-09 google play (a component of android) tracks the users' movements without their permission. 
even if you disable google maps and location tracking, you must disable google play itself to completely stop the tracking. 
this is yet another example of nonfree software pretending to obey the user, when it's actually doing something else. 
such a thing would be almost unthinkable with free software. 
2015-07 samsung phones come with apps that users can't delete, and they send so much data that their transmission is a substantial expense for users. 
said transmission, not wanted or requested by the user, clearly must constitute spying of some kind. 
2014-03 samsung's back door provides access to any file on the system. 
2013-08 spyware in android phones (and windows? 
laptops): the wall street journal (in an article blocked from us by a paywall) reports that the fbi can remotely activate the gps and microphone in android phones and laptops (presumably windows laptops). 
here is more info. 
2013-07 spyware is present in some android devices when they are sold. 
some motorola phones, made when this company was owned by google, use a modified version of android that sends personal data to motorola. 
2013-07 a motorola phone listens for voice all the time. 
2013-02 google play intentionally sends app developers the personal details of users that install the app. 
merely asking the "consent" of users is not enough to legitimize actions like this. 
at this point, most users have stopped reading the "terms and conditions" that spell out what they are "consenting" to. 
google should clearly and honestly identify the information it collects on users, instead of hiding it in an obscurely worded eula. 
however, to truly protect people's privacy, we must prevent google and other companies from getting this personal information in the first place! 
2011-11 some manufacturers add a hidden general surveillance package such as carrier iq. 
e-readers. 
(#spywareinelectronicreaders) 2016-03 e-books can contain javascript code, and sometimes this code snoops on readers. 
2014-10 adobe made "digital editions," the e-reader used by most us libraries, send lots of data to adobe. 
adobe's "excuse": it's needed to check drm! 
2012-12 spyware in many e-readers—not only the kindle: they report even which page the user reads at what time. 
spyware in applications. 
(#spywareinapplications) 2023-06 edge sends the urls of images the user views to microsoft's servers by default, supposedly to "enhance" them. 
and these images may end up on the nsa's servers. 
microsoft claims its nonfree browser sends the urls without identifying you, which cannot be true, since at least your ip address is known to the server if you don't take extra measures. 
either way, such enhancer service is unjust because any image editing should be done on your own computer using installed free software. 
the article describes how to disable sending the urls. 
that makes a change for the better, but we suggest that you instead switch to a freedom-respecting browser with additional privacy features such as icecat. 
2023-05 some employers are forcing employees to run "monitoring software" on their computers. 
these extremely intrusive proprietary programs can take screenshots at regular intervals, log keystrokes, record audio and video, etc. 
such practices have been shown to deteriorate employees' well-being, and trade unions in the european union have voiced their concerns about them. 
the requirement for employee's consent, which exists in some countries, is a sham because most often the employee is not free to refuse. 
in short, these practices should be abolished. 
2022-05 a worldwide investigation found that most of the applications that school districts recommended for remote education during the covid-19 pandemic track and collect personal data from children as young as below the age of five. 
these applications, and their websites, send the collected information to ad giants such as facebook and google, and they are still being used in the classrooms even after some of the schools reopened. 
2018-05 the verify browser extension by storyful spies on the reporters that use it. 
desktop apps. 
(#spywareindesktopapps) 2020-11 microsoft's office 365 suite enables employers to snoop on each employee. 
after a public outburst, microsoft stated that it would remove this capability. 
let's hope so. 
2019-12 some avast and avg extensions for firefox and chrome were found to snoop on users' detailed browsing habits. 
mozilla and google removed the problematic extensions from their stores, but this shows once more how unsafe nonfree software can be. 
tools that are supposed to protect a proprietary system are, instead, infecting it with additional malware (the system itself being the original malware). 
2019-04 as of april 2019, it is no longer possible to disable an unscrupulous tracking anti-feature that reports users when they follow ping links in apple safari, google chrome, opera, microsoft edge and also in the upcoming microsoft edge that is going to be based on chromium. 
2018-11 foundry's graphics software reports information to identify who is running it. 
the result is often a legal threat demanding a lot of money. 
the fact that this is used for repression of forbidden sharing makes it even more vicious. 
this illustrates that making unauthorized copies of nonfree software is not a cure for the injustice of nonfree software. 
it may avoid paying for the nasty thing, but cannot make it less nasty. 
mobile apps. 
(#spywareinmobileapps) 2023-04 the pinduoduo app snoops on other apps, and takes control of them. 
it also installs additional malware that is hard to remove. 
2022-06 canada has fined the company tim hortons for making an app that tracks people's movements to learn things such as where they live, where they work, and when they visit competitors' stores. 
2022-04 new amazon worker chat app would ban specific words amazon doesn't like, such as "union", "restrooms", and "pay raise". 
if the app was free, workers could modify the program so it acts as they wish, not how amazon wants it. 
2022-03 the nonfree app "along," developed by a company controlled by zuckerberg, leads students to reveal to their teacher personal information about themselves and their families. 
conversations are recorded and the collected data sent to the company, which grants itself the right to sell it. 
see also educational malware app "along". 
2022-01 the data broker x-mode bought location data about 20,000 people collected by around 100 different malicious apps. 
2021-11 a building in la, with a supermarket in it, demands customers load a particular app to pay for parking in the parking lot, and accept pervasive surveillance. 
they also have the option of entering their license plate numbers in a kiosk. 
that is an injustice, too. 
2021-06 tiktok apps collect biometric identifiers and biometric information from users' smartphones. 
the company behind it does whatever it wants and collects whatever data it can. 
2021-04 the weddingwire app saves people's wedding photos forever and hands over data to others, giving users no control over their personal information/data. 
the app also sometimes shows old photos and memories to users, without giving them any control over this either. 
2021-02 many cr…apps, developed by various companies for various organizations, do location tracking unknown to those companies and those organizations. 
it's actually some widely used libraries that do the tracking. 
what's unusual here is that proprietary software developer a tricks proprietary software developers b1 … b50 into making platforms for a to mistreat the end user. 
2020-03 the apple ios version of zoom is sending users' data to facebook even if the user doesn't have a facebook account. 
according to the article, zoom and facebook don't even mention this surveillance on their privacy policy page, making this an obvious violation of people's privacy even in their own terms. 
2020-03 the alipay health code app estimates whether the user has covid-19 and tells the cops directly. 
2020-01 the amazon ring app does surveillance for other companies as well as for amazon. 
2019-12 the totoc messaging app seems to be a spying tool for the government of the united arab emirates. 
any nonfree program could be doing this, and that is a good reason to use free software instead. 
note: this article uses the word "free" in the sense of "gratis."
 2019-12 imonsters and android phones, when used for work, give employers powerful snooping and sabotage capabilities if they install their own software on the device. 
many employers demand to do this. 
for the employee, this is simply nonfree software, as fundamentally unjust and as dangerous as any other nonfree software. 
2019-10 the chinese communist party's "study the great nation" app requires users to grant it access to the phone's microphone, photos, text messages, contacts, and internet history, and the android version was found to contain a back-door allowing developers to run any code they wish in the users' phone, as "superusers."
 downloading and using this app is mandatory at some workplaces. 
note: the washington post version of the article (partly obfuscated, but readable after copy-pasting in a text editor) includes a clarification saying that the tests were only performed on the android version of the app, and that, according to apple, "this kind of "superuser" surveillance could not be conducted on apple's operating system."
 2019-09 the facebook app tracks users even when it is turned off, after tricking them into giving the app broad permissions in order to use one of its functionalities. 
2019-09 some nonfree period-tracking apps including mia fem and maya send intimate details of users' lives to facebook. 
2019-09 keeping track of who downloads a proprietary program is a form of surveillance. 
there is a proprietary program for adjusting a certain telescopic rifle sight. 
a us prosecutor has demanded the list of all the 10,000 or more people who have installed it. 
with a free program there would not be a list of who has installed it. 
2019-07 many unscrupulous mobile-app developers keep finding ways to bypass user's settings, regulations, and privacy-enhancing features of the operating system, in order to gather as much private data as they possibly can. 
thus, we can't trust rules against spying. 
what we can trust is having control over the software we run. 
2019-07 many android apps can track users' movements even when the user says not to allow them access to locations. 
this involves an apparently unintentional weakness in android, exploited intentionally by malicious apps. 
2019-05 the femm "fertility" app is secretly a tool for propaganda by natalist christians. 
it spreads distrust for contraception. 
it snoops on users, too, as you must expect from nonfree programs. 
2019-05 blizzcon 2019 imposed a requirement to run a proprietary phone app to be allowed into the event. 
this app is a spyware that can snoop on a lot of sensitive data, including user's location and contact list, and has near-complete control over the phone. 
2019-04 data collected by menstrual and pregnancy monitoring apps is often available to employers and insurance companies. 
even though the data is "anonymized and aggregated," it can easily be traced back to the woman who uses the app. 
this has harmful implications for women's rights to equal employment and freedom to make their own pregnancy choices. 
don't use these apps, even if someone offers you a reward to do so. 
a free-software app that does more or less the same thing without spying on you is available from f-droid, and a new one is being developed. 
2019-04 google tracks the movements of android phones and iphones running google apps, and sometimes saves the data for years. 
nonfree software in the phone has to be responsible for sending the location data to google. 
2019-03 many android phones come with a huge number of preinstalled nonfree apps that have access to sensitive data without users' knowledge. 
these hidden apps may either call home with the data, or pass it on to user-installed apps that have access to the network but no direct access to the data. 
this results in massive surveillance on which the user has absolutely no control. 
2019-03 the moviepass dis-service is planning to use face recognition to track people's eyes to make sure they won't put their phones down or look away during ads—and trackers. 
2019-03 a study of 24 "health" apps found that 19 of them send sensitive personal data to third parties, which can use it for invasive advertising or discriminating against people in poor medical condition. 
whenever user "consent" is sought, it is buried in lengthy terms of service that are difficult to understand. 
in any case, "consent" is not sufficient to legitimize snooping. 
2019-02 facebook offered a convenient proprietary library for building mobile apps, which also sent personal data to facebook. 
lots of companies built apps that way and released them, apparently not realizing that all the personal data they collected would go to facebook as well. 
it shows that no one can trust a nonfree program, not even the developers of other nonfree programs. 
2019-02 the appcensus database gives information on how android apps use and misuse users' personal data. 
as of march 2019, nearly 78,000 have been analyzed, of which 24,000 (31%) transmit the advertising id to other companies, and 18,000 (23% of the total) link this id to hardware identifiers, so that users cannot escape tracking by resetting it. 
collecting hardware identifiers is in apparent violation of google's policies. 
but it seems that google wasn't aware of it, and, once informed, was in no hurry to take action. 
this proves that the policies of a development platform are ineffective at preventing nonfree software developers from including malware in their programs. 
2019-02 many nonfree apps have a surveillance feature for recording all the users' actions in interacting with the app. 
2019-02 twenty nine "beauty camera" apps that used to be on google play had one or more malicious functionalities, such as stealing users' photos instead of "beautifying" them, pushing unwanted and often malicious ads on users, and redirecting them to phishing sites that stole their credentials. 
furthermore, the user interface of most of them was designed to make uninstallation difficult. 
users should of course uninstall these dangerous apps if they haven't yet, but they should also stay away from nonfree apps in general. 
all nonfree apps carry a potential risk because there is no easy way of knowing what they really do. 
2019-02 an investigation of the 150 most popular gratis vpn apps in google play found that 25% fail to protect their users' privacy due to dns leaks. 
in addition, 85% feature intrusive permissions or functions in their source code—often used for invasive advertising—that could potentially also be used to spy on users. 
other technical flaws were found as well. 
moreover, a previous investigation had found that half of the top 10 gratis vpn apps have lousy privacy policies. 
(it is unfortunate that these articles talk about "free apps."
 these apps are gratis, but they are not free software.) 2019-01 the weather channel app stored users' locations to the company's server. 
the company is being sued, demanding that it notify the users of what it will do with the data. 
we think that lawsuit is about a side issue. 
what the company does with the data is a secondary issue. 
the principal wrong here is that the company gets that data at all. 
other weather apps, including accuweather and weatherbug, are tracking people's locations. 
2018-12 around 40% of gratis android apps report on the user's actions to facebook. 
often they send the machine's "advertising id," so that facebook can correlate the data it obtains from the same machine via various apps. 
some of them send facebook detailed information about the user's activities in the app; others only say that the user is using that app, but that alone is often quite informative. 
this spying occurs regardless of whether the user has a facebook account. 
2018-10 some android apps track the phones of users that have deleted them. 
2018-08 some google apps on android record the user's location even when users disable "location tracking". 
there are other ways to turn off the other kinds of location tracking, but most users will be tricked by the misleading control. 
2018-06 the spanish football streaming app tracks the user's movements and listens through the microphone. 
this makes them act as spies for licensing enforcement. 
we expect it implements drm, too—that there is no way to save a recording. 
but we can't be sure from the article. 
if you learn to care much less about sports, you will benefit in many ways. 
this is one more. 
2018-04 more than 50% of the 5,855 android apps studied by researchers were found to snoop and collect information about its users. 
40% of the apps were found to insecurely snitch on its users. 
furthermore, they could detect only some methods of snooping, in these proprietary apps whose source code they cannot look at. 
the other apps might be snooping in other ways. 
this is evidence that proprietary apps generally work against their users. 
to protect their privacy and freedom, android users need to get rid of the proprietary software—both proprietary android by switching to replicant, and the proprietary apps by getting apps from the free software only f-droid store that prominently warns the user if an app contains anti-features. 
2018-04 grindr collects information about which users are hiv-positive, then provides the information to companies. 
grindr should not have so much information about its users. 
it could be designed so that users communicate such info to each other but not to the server's database. 
2018-03 the moviepass app and dis-service spy on users even more than users expected. 
it records where they travel before and after going to a movie. 
don't be tracked—pay cash! 
2018-02 spotify app harvests users' data to personally identify and know people through music, their mood, mindset, activities, and tastes. 
there are over 150 billion events logged daily on the program which contains users' data and personal information. 
2017-11 tracking software in popular android apps is pervasive and sometimes very clever. 
some trackers can follow a user's movements around a physical store by noticing wifi networks. 
2017-09 instagram is forcing users to give away their phone numbers and won't let people continue using the app if they refuse. 
2017-08 the sarahah app uploads all phone numbers and email addresses in user's address book to developer's server. 
(note that this article misuses the words "free software" referring to zero price.) 2017-07 20 dishonest android apps recorded phone calls and sent them and text messages and emails to snoopers. 
google did not intend to make these apps spy; on the contrary, it worked in various ways to prevent that, and deleted these apps after discovering what they did. 
so we cannot blame google specifically for the snooping of these apps. 
on the other hand, google redistributes nonfree android apps, and therefore shares in the responsibility for the injustice of their being nonfree. 
it also distributes its own nonfree apps, such as google play, which are malicious. 
could google have done a better job of preventing apps from cheating? 
there is no systematic way for google, or android users, to inspect executable proprietary apps to see what they do. 
google could demand the source code for these apps, and study the source code somehow to determine whether they mistreat users in various ways. 
if it did a good job of this, it could more or less prevent such snooping, except when the app developers are clever enough to outsmart the checking. 
but since google itself develops malicious apps, we cannot trust google to protect us. 
we must demand release of source code to the public, so we can depend on each other. 
2017-05 apps for bart snoop on users. 
with free software apps, users could make sure that they don't snoop. 
with proprietary apps, one can only hope that they don't. 
2017-05 a study found 234 android apps that track users by listening to ultrasound from beacons placed in stores or played by tv programs. 
2017-04 faceapp appears to do lots of surveillance, judging by how much access it demands to personal data in the device. 
2017-04 users are suing bose for distributing a spyware app for its headphones. 
specifically, the app would record the names of the audio files users listen to along with the headphone's unique serial number. 
the suit accuses that this was done without the users' consent. 
if the fine print of the app said that users gave consent for this, would that make it acceptable? 
no way! 
it should be flat out illegal to design the app to snoop at all. 
2017-04 pairs of android apps can collude to transmit users' personal data to servers. 
a study found tens of thousands of pairs that collude. 
2017-03 verizon announced an opt-in proprietary search app that it will pre-install on some of its phones. 
the app will give verizon the same information about the users' searches that google normally gets when they use its search engine. 
currently, the app is being pre-installed on only one phone, and the user must explicitly opt-in before the app takes effect. 
however, the app remains spyware—an "optional" piece of spyware is still spyware. 
2017-01 the meitu photo-editing app sends user data to a chinese company. 
2016-11 the uber app tracks clients' movements before and after the ride. 
this example illustrates how "getting the user's consent" for surveillance is inadequate as a protection against massive surveillance. 
2016-11 a research paper that investigated the privacy and security of 283 android vpn apps concluded that "in spite of the promises for privacy, security, and anonymity given by the majority of vpn apps—millions of users may be unawarely subject to poor security guarantees and abusive practices inflicted by vpn apps."
 following is a non-exhaustive list, taken from the research paper, of some proprietary vpn apps that track users and infringe their privacy: surfeasy includes tracking libraries such as nativex and appflood, meant to track users and show them targeted ads. 
sfly network booster requests the read_sms and send_sms permissions upon installation, meaning it has full access to users' text messages. 
droidvpn and tigervpn requests the read_logs permission to read logs for other apps and also core system logs. 
tigervpn developers have confirmed this. 
hidemyass sends traffic to linkedin. 
also, it stores detailed logs and may turn them over to the uk government if requested. 
vpn services hotspotshield injects javascript code into the html pages returned to the users. 
the stated purpose of the js injection is to display ads. 
uses roughly five tracking libraries. 
also, it redirects the user's traffic through valueclick.com (an advertising website). 
wifi protector vpn injects javascript code into html pages, and also uses roughly five tracking libraries. 
developers of this app have confirmed that the non-premium version of the app does javascript injection for tracking the user and displaying ads. 
2016-09 google's new voice messaging app logs all conversations. 
2016-06 facebook's new magic photo app scans your mobile phone's photo collections for known faces, and suggests you circulate the picture you take according to who is in the frame. 
this spyware feature seems to require online access to some known-faces database, which means the pictures are likely to be sent across the wire to facebook's servers and face-recognition algorithms. 
if so, none of facebook users' pictures are private anymore, even if the user didn't "upload" them to the service. 
2016-05 facebook's app listens all the time, to snoop on what people are listening to or watching. 
in addition, it may be analyzing people's conversations to serve them with targeted advertisements. 
2016-04 a pregnancy test controller application not only can spy on many sorts of data in the phone, and in server accounts, it can alter them too. 
2016-01 apps that include symphony surveillance software snoop on what radio and tv programs are playing nearby. 
also on what users post on various sites such as facebook, google+ and twitter. 
2015-11 "cryptic communication," unrelated to the app's functionality, was found in the 500 most popular gratis android apps. 
the article should not have described these apps as "free"—they are not free software. 
the clear way to say "zero price" is "gratis."
 the article takes for granted that the usual analytics tools are legitimate, but is that valid? 
software developers have no right to analyze what users are doing or how. 
"analytics" tools that snoop are just as wrong as any other snooping. 
2015-10 more than 73% and 47% of mobile applications, for android and ios respectively hand over personal, behavioral and location information of their users to third parties. 
2015-08 like most "music screaming" disservices, spotify is based on proprietary malware (drm and snooping). 
in august 2015 it demanded users submit to increased snooping, and some are starting to realize that it is nasty. 
this article shows the twisted ways that they present snooping as a way to "serve" users better—never mind whether they want that. 
this is a typical example of the attitude of the proprietary software industry towards those they have subjugated. 
out, out, damned spotify! 
2015-07 many retail businesses publish cr…apps that ask to spy on the user's own data—often many kinds. 
those companies know that snoop-phone usage trains people to say yes to almost any snooping. 
2015-06 a study in 2015 found that 90% of the top-ranked gratis proprietary android apps contained recognizable tracking libraries. 
for the paid proprietary apps, it was only 60%. 
the article confusingly describes gratis apps as "free", but most of them are not in fact free software. 
it also uses the ugly word "monetize". 
a good replacement for that word is "exploit"; nearly always that will fit perfectly. 
2015-05 gratis android apps (but not free software) connect to 100 tracking and advertising urls, on the average. 
2015-04 widely used proprietary qr-code scanner apps snoop on the user. 
this is in addition to the snooping done by the phone company, and perhaps by the os in the phone. 
don't be distracted by the question of whether the app developers get users to say "i agree". 
that is no excuse for malware. 
2014-11 many proprietary apps for mobile devices report which other apps the user has installed. 
twitter is doing this in a way that at least is visible and optional. 
not as bad as what the others do. 
2014-01 the simeji keyboard is a smartphone version of baidu's spying ime. 
2013-12 the nonfree snapchat app's principal purpose is to restrict the use of data on the user's computer, but it does surveillance too: it tries to get the user's list of other people's phone numbers. 
2013-12 the brightest flashlight app sends user data, including geolocation, for use by companies. 
the ftc criticized this app because it asked the user to approve sending personal data to the app developer but did not ask about sending it to other companies. 
this shows the weakness of the reject-it-if-you-dislike-snooping "solution" to surveillance: why should a flashlight app send any information to anyone? 
a free software flashlight app would not. 
2012-12 ftc says most mobile apps for children don't respect privacy: https://arstechnica.com/information-technology/2012/12/ftc-disclosures-severely-lacking-in-kids-mobile-appsand-its-getting-worse/. 
skype. 
(#spywareinskype) 2019-08 skype refuses to say whether it can eavesdrop on calls. 
that almost certainly means it can do so. 
2013-07 skype contains spyware. 
microsoft changed skype specifically for spying. 
games. 
(#spywareingames) 2020-10 microsoft is imposing its surveillance on the game of minecraft by requiring every player to open an account on microsoft's network. 
microsoft has bought the game and will merge all accounts into its network, which will give them access to people's data. 
minecraft players can play minetest instead. 
the essential advantage of minetest is that it is free software, meaning it respects the user's computer freedom. 
as a bonus, it offers more options. 
2019-08 microsoft recorded users of xboxes and had human workers listen to the recordings. 
morally, we see no difference between having human workers listen and having speech-recognition systems listen. 
both intrude on privacy. 
2018-06 red shell is a spyware that is found in many proprietary games. 
it tracks data on users' computers and sends it to third parties. 
2018-04 arenanet surreptitiously installed a spyware program along with an update to the massive multiplayer game guild wars 2. the spyware allowed arenanet to snoop on all open processes running on its user's computer. 
2017-11 the driver for a certain gaming keyboard sends information to china. 
2015-12 many video game consoles snoop on their users and report to the internet—even what their users weigh. 
a game console is a computer, and you can't trust a computer with a nonfree operating system. 
2015-09 modern gratis game cr…apps collect a wide range of data about their users and their users' friends and associates. 
even nastier, they do it through ad networks that merge the data collected by various cr…apps and sites made by different companies. 
they use this data to manipulate people to buy things, and hunt for "whales" who can be led to spend a lot of money. 
they also use a back door to manipulate the game play for specific players. 
while the article describes gratis games, games that cost money can use the same tactics. 
2014-01 angry birds spies for companies, and the nsa takes advantage to spy through it too. 
here's information on more spyware apps. 
more about nsa app spying. 
2005-10 blizzard warden is a hidden "cheating-prevention" program that spies on every process running on a gamer's computer and sniffs a good deal of personal data, including lots of activities which have nothing to do with cheating. 
spyware in connected equipment. 
(#spywareinequipment) 2021-01 most internet connected devices in mozilla's "privacy not included" list are designed to snoop on users even if they meet mozilla's "minimum security standards."
 insecure design of the program running on some of these devices makes the user susceptible to be snooped on and exploited by crackers as well. 
2017-08 the bad security in many internet of stings devices allows isps to snoop on the people that use them. 
don't be a sucker—reject all the stings. 
(it is unfortunate that the article uses the term "monetize".) tv sets. 
(#spywareintvsets) emo phillips made a joke: the other day a woman came up to me and said, "didn't i see you on television?"
 i said, "i don't know. 
you can't see out the other way."
 evidently that was before amazon "smart" tvs. 
2022-04 today's "smart" tvs push people to surrender to tracking via internet. 
some won't work unless they have a chance to download nonfree software. 
and they are designed for programmed obsolescence. 
2022-01 "smart" tv manufacturers spy on people using various methods, and harvest their data. 
they are collecting audio, video, and tv usage data to profile people. 
2020-10 tv manufacturers are turning to produce only "smart" tv sets (which include spyware) that it's now very hard to find a tv that doesn't spy on you. 
it appears that those manufacturers business model is not to produce tv and sell them for money, but to collect your personal data and (possibly) hand over them to others for benefit. 
2020-06 tv manufacturers are able to snoop every second of what the user is watching. 
this is illegal due to the video privacy protection act of 1988, but they're circumventing it through eulas. 
2019-01 vizio tvs collect "whatever the tv sees," in the own words of the company's cto, and this data is sold to third parties. 
this is in return for "better service" (meaning more intrusive ads?) and slightly lower retail prices. 
what is supposed to make this spying acceptable, according to him, is that it is opt-in in newer models. 
but since the vizio software is nonfree, we don't know what is actually happening behind the scenes, and there is no guarantee that all future updates will leave the settings unchanged. 
if you already own a vizio "smart" tv (or any "smart" tv, for that matter), the easiest way to make sure it isn't spying on you is to disconnect it from the internet, and use a terrestrial antenna instead. 
unfortunately, this is not always possible. 
another option, if you are technically oriented, is to get your own router (which can be an old computer running completely free software), and set up a firewall to block connections to vizio's servers. 
or, as a last resort, you can replace your tv with another model. 
2018-04 some "smart" tvs automatically load downgrades that install a surveillance app. 
we link to the article for the facts it presents. 
it is too bad that the article finishes by advocating the moral weakness of surrendering to netflix. 
the netflix app is malware too. 
2017-02 vizio "smart" tvs report everything that is viewed on them, and not just broadcasts and cable. 
even if the image is coming from the user's own computer, the tv reports what it is. 
the existence of a way to disable the surveillance, even if it were not hidden as it was in these tvs, does not legitimize the surveillance. 
2015-11 some web and tv advertisements play inaudible sounds to be picked up by proprietary malware running on other devices in range so as to determine that they are nearby. 
once your internet devices are paired with your tv, advertisers can correlate ads with web activity, and other cross-device tracking. 
2015-11 vizio goes a step further than other tv manufacturers in spying on their users: their "smart" tvs analyze your viewing habits in detail and link them your ip address so that advertisers can track you across devices. 
it is possible to turn this off, but having it enabled by default is an injustice already. 
2015-11 tivo's alliance with viacom adds 2.3 million households to the 600 millions social media profiles the company already monitors. 
tivo customers are unaware they're being watched by advertisers. 
by combining tv viewing information with online social media participation, tivo can now correlate tv advertisement with online purchases, exposing all users to new combined surveillance by default. 
2015-07 vizio "smart" tvs recognize and track what people are watching, even if it isn't a tv channel. 
2015-05 verizon cable tv snoops on what programs people watch, and even what they wanted to record. 
2015-04 vizio used a firmware "upgrade" to make its tvs snoop on what users watch. 
the tvs did not do that when first sold. 
2015-02 the samsung "smart" tv transmits users' voice on the internet to another company, nuance. 
nuance can save it and would then have to give it to the us or some other government. 
speech recognition is not to be trusted unless it is done by free software in your own computer. 
in its privacy policy, samsung explicitly confirms that voice data containing sensitive information will be transmitted to third parties. 
2014-11 the amazon "smart" tv is snooping all the time. 
2014-09 more or less all "smart" tvs spy on their users. 
the report was as of 2014, but we don't expect this has got better. 
this shows that laws requiring products to get users' formal consent before collecting personal data are totally inadequate. 
and what happens if a user declines consent? 
probably the tv will say, "without your consent to tracking, the tv will not work."
 proper laws would say that tvs are not allowed to report what the user watches—no exceptions! 
2014-05 lg disabled network features on previously purchased "smart" tvs, unless the purchasers agreed to let lg begin to snoop on them and distribute their personal data. 
2014-05 spyware in lg "smart" tvs reports what the user watches, and the switch to turn this off has no effect. 
(the fact that the transmission reports a 404 error really means nothing; the server could save that data anyway.) even worse, it snoops on other devices on the user's local network. 
lg later said it had installed a patch to stop this, but any product could spy this way. 
meanwhile, lg tvs do lots of spying anyway. 
2013-11 spyware in lg "smart" tvs reports what the user watches, and the switch to turn this off has no effect. 
(the fact that the transmission reports a 404 error really means nothing; the server could save that data anyway.) even worse, it snoops on other devices on the user's local network. 
lg later said it had installed a patch to stop this, but any product could spy this way. 
2012-12 crackers found a way to break security on a "smart" tv and use its camera to watch the people who are watching tv. 
cameras. 
(#spywareincameras) 2023-07 driverless cars in san francisco collect videos constantly, using cameras inside and outside, and governments have already collected those videos secretly. 
as the surveillance technology oversight project says, they are "driving us straight into authoritarianism."
 we must regulate all cameras that collect images that can be used to track people, to make sure they are not used for that. 
2019-02 the ring doorbell camera is designed so that the manufacturer (now amazon) can watch all the time. 
now it turns out that anyone else can also watch, and fake videos too. 
the third party vulnerability is presumably unintentional and amazon will probably fix it. 
however, we do not expect amazon to change the design that allows amazon to watch. 
2019-01 amazon ring "security" devices send the video they capture to amazon servers, which save it long-term. 
in many cases, the video shows everyone that comes near, or merely passes by, the user's front door. 
the article focuses on how ring used to let individual employees look at the videos freely. 
it appears amazon has tried to prevent that secondary abuse, but the primary abuse—that amazon gets the video—amazon expects society to surrender to. 
2018-10 nearly all "home security cameras" give the manufacturer an unencrypted copy of everything they see. 
"home insecurity camera" would be a better name! 
when consumer reports tested them, it suggested that these manufacturers promise not to look at what's in the videos. 
that's not security for your home. 
security means making sure they don't get to see through your camera. 
2017-10 every "home security" camera, if its manufacturer can communicate with it, is a surveillance device. 
canary camera is an example. 
the article describes wrongdoing by the manufacturer, based on the fact that the device is tethered to a server. 
more about proprietary tethering. 
but it also demonstrates that the device gives the company surveillance capability. 
2016-03 over 70 brands of network-connected surveillance cameras have security bugs that allow anyone to watch through them. 
2015-11 the nest cam "smart" camera is always watching, even when the "owner" switches it "off."
 a "smart" device means the manufacturer is using it to outsmart you. 
toys. 
(#spywareintoys) 2017-11 the furby connect has a universal back door. 
if the product as shipped doesn't act as a listening device, remote changes to the code could surely convert it into one. 
2017-11 a remote-control sex toy was found to make audio recordings of the conversation between two users. 
2017-03 a computerized vibrator was snooping on its users through the proprietary control app. 
the app was reporting the temperature of the vibrator minute by minute (thus, indirectly, whether it was surrounded by a person's body), as well as the vibration frequency. 
note the totally inadequate proposed response: a labeling standard with which manufacturers would make statements about their products, rather than free software which users could have checked and changed. 
the company that made the vibrator was sued for collecting lots of personal information about how people used it. 
the company's statement that it was anonymizing the data may be true, but it doesn't really matter. 
if it had sold the data to a data broker, the data broker would have been able to figure out who the user was. 
following this lawsuit, the company has been ordered to pay a total of c$4m to its customers. 
2017-02 "cloudpets" toys with microphones leak childrens' conversations to the manufacturer. 
guess what? 
crackers found a way to access the data collected by the manufacturer's snooping. 
that the manufacturer and the fbi could listen to these conversations was unacceptable by itself. 
2016-12 the "smart" toys my friend cayla and i-que can be remotely controlled with a mobile phone; physical access is not necessary. 
this would enable crackers to listen in on a child's conversations, and even speak into the toys themselves. 
this means a burglar could speak into the toys and ask the child to unlock the front door while mommy's not looking. 
2016-12 the "smart" toys my friend cayla and i-que transmit children's conversations to nuance communications, a speech recognition company based in the u.s. 
those toys also contain major security vulnerabilities; crackers can remotely control the toys with a mobile phone. 
this would enable crackers to listen in on a child's speech, and even speak into the toys themselves. 
2015-02 barbie is going to spy on children and adults. 
drones. 
(#spywareindrones) 2017-08 while you're using a dji drone to snoop on other people, dji is in many cases snooping on you. 
other appliances.(#spywareathome) 2020-09 many employers are using nonfree software, including videoconference software, to surveil and monitor staff working at home. 
if the program reports whether you are "active," that is in effect a malicious surveillance feature. 
2020-08 google nest is taking over adt. 
google sent out a software update to its speaker devices using their back door that listens for things like smoke alarms and then notifies your phone that an alarm is happening. 
this means the devices now listen for more than just their wake words. 
google says the software update was sent out prematurely and on accident and google was planning on disclosing this new feature and offering it to customers who pay for it. 
2020-06 "bossware" is malware that bosses coerce workers into installing in their own computers, so the bosses can spy on them. 
this shows why requiring the user's "consent" is not an adequate basis for protecting digital privacy. 
the boss can coerce most workers into consenting to almost anything, even probable exposure to contagious disease that can be fatal. 
software like this should be illegal and bosses that demand it should be prosecuted for it. 
2019-07 google "assistant" records users' conversations even when it is not supposed to listen. 
thus, when one of google's subcontractors discloses a thousand confidential voice recordings, users were easily identified from these recordings. 
since google "assistant" uses proprietary software, there is no way to see or control what it records or sends. 
rather than trying to better control the use of recordings, google should not record or listen to the person's voice. 
it should only get commands that the user wants to send to some google service. 
2019-05 amazon alexa collects a lot more information from users than is necessary for correct functioning (time, location, recordings made without a legitimate prompt), and sends it to amazon's servers, which store it indefinitely. 
even worse, amazon forwards it to third-party companies. 
thus, even if users request deletion of their data from amazon's servers, the data remain on other servers, where they can be accessed by advertising companies and government agencies. 
in other words, deleting the collected information doesn't cancel the wrong of collecting it. 
data collected by devices such as the nest thermostat, the philips hue-connected lights, the chamberlain myq garage opener and the sonos speakers are likewise stored longer than necessary on the servers the devices are tethered to. 
moreover, they are made available to alexa. 
as a result, amazon has a very precise picture of users' life at home, not only in the present, but in the past (and, who knows, in the future too?) 2019-04 some of users' commands to the alexa service are recorded for amazon employees to listen to. 
the google and apple voice assistants do similar things. 
a fraction of the alexa service staff even has access to location and other personal data. 
since the client program is nonfree, and data processing is done "in the cloud" (a soothing way of saying "we won't tell you how and where it's done"), users have no way to know what happens to the recordings unless human eavesdroppers break their non-disclosure agreements. 
2019-02 the hp "ink subscription" cartridges have drm that constantly communicates with hp servers to make sure the user is still paying for the subscription, and hasn't printed more pages than were paid for. 
even though the ink subscription program may be cheaper in some specific cases, it spies on users, and involves totally unacceptable restrictions in the use of ink cartridges that would otherwise be in working order. 
2018-08 crackers found a way to break the security of an amazon device, and turn it into a listening device for them. 
it was very difficult for them to do this. 
the job would be much easier for amazon. 
and if some government such as china or the us told amazon to do this, or cease to sell the product in that country, do you think amazon would have the moral fiber to say no? 
(these crackers are probably hackers too, but please don't use "hacking" to mean "breaking security".) 2018-04 a medical insurance company offers a gratis electronic toothbrush that snoops on its user by sending usage data back over the internet. 
2017-08 sonos told all its customers, "agree" to snooping or the product will stop working. 
another article says they won't forcibly change the software, but people won't be able to get any upgrades and eventually it will stop working. 
2017-06 lots of "smart" products are designed to listen to everyone in the house, all the time. 
today's technological practice does not include any way of making a device that can obey your voice commands without potentially spying on you. 
even if it is air-gapped, it could be saving up records about you for later examination. 
2014-07 nest thermometers send a lot of data about the user. 
2013-10 rent-to-own computers were programmed to spy on their renters. 
wearables. 
(#spywareonwearables) 2018-07 tommy hilfiger clothing will monitor how often people wear it. 
this will teach the sheeple to find it normal that companies monitor every aspect of what they do. 
"smart" watches. 
2020-09 internet-enabled watches with proprietary software are malware, violating people (specially children's) privacy. 
in addition, they have a lot of security flaws. 
they permit security breakers (and unauthorized people) to access the watch. 
thus, ill-intentioned unauthorized people can intercept communications between parent and child and spoof messages to and from the watch, possibly endangering the child. 
(note that this article misuses the word "hackers" to mean "crackers."
) 2016-03 a very cheap "smart watch" comes with an android app that connects to an unidentified site in china. 
the article says this is a back door, but that could be a misunderstanding. 
however, it is certainly surveillance, at least. 
2014-07 an lg "smart" watch is designed to report its location to someone else and to transmit conversations too. 
vehicles. 
(#spywareinvehicles) 2023-04 tesla cars record videos of activity inside the car, and company staff can watch those recordings and copy them. 
or at least they were able to do so until last year. 
tesla may have changed some security functions so that this is harder to do. 
but if tesla can get those recordings, that is because it is planning for some people to use them in some situation, and that is unjust already. 
it should be illegal to make a car that takes photos or videos of the people in the car—or of people outside the car. 
2023-04 gm is switching to a new audio/video system in its cars in order to collect complete information about what people in the car watch or listen to, and also how they drive. 
the new system for navigation and "driving assistance" will be tethered to various online dis-services, and gm will snoop on everything the users do with them. 
but don't feel bad about that, because some of these subscriptions will be gratis for the first 8 years. 
2023-02 volkswagen tracks the location of every driver, and sells that data to third-parties. 
however, it refuses to use the data to implement a feature for the benefit of its customers unless they pay extra money for it. 
this came to attention and brought controversy when volkswagen refused to locate a car-jacked vehicle with a toddler in it because the owner of the car had not subscribed to the relevant service. 
2021-05 ford is planning to force ads on drivers in cars, with the ability for the owner to pay extra to turn them off. 
the system probably imposes surveillance on drivers too. 
2020-08 new toyotas will upload data to aws to help create custom insurance premiums based on driver behaviour. 
before you buy a "connected" car, make sure you can disconnect its cellular antenna and its gps antenna. 
if you want gps navigation, get a separate navigator which runs free software and works with open street map. 
2019-12 most modern cars now record and send various kinds of data to the manufacturer. 
for the user, access to the data is nearly impossible, as it involves cracking the car's computer, which is always hidden and running with proprietary software. 
2019-03 tesla cars collect lots of personal data, and when they go to a junkyard the driver's personal data goes with them. 
2019-02 the fordpass connect feature of some ford vehicles has near-complete access to the internal car network. 
it is constantly connected to the cellular phone network and sends ford a lot of data, including car location. 
this feature operates even when the ignition key is removed, and users report that they can't disable it. 
if you own one of these cars, have you succeeded in breaking the connectivity by disconnecting the cellular modem, or wrapping the antenna in aluminum foil? 
2018-11 in china, it is mandatory for electric cars to be equipped with a terminal that transfers technical data, including car location, to a government-run platform. 
in practice, manufacturers collect this data as part of their own spying, then forward it to the government-run platform. 
2018-10 gm tracked the choices of radio programs in its "connected" cars, minute by minute. 
gm did not get users' consent, but it could have got that easily by sneaking it into the contract that users sign for some digital service or other. 
a requirement for consent is effectively no protection. 
the cars can also collect lots of other data: listening to you, watching you, following your movements, tracking passengers' cell phones. 
all such data collection should be forbidden. 
but if you really want to be safe, we must make sure the car's hardware cannot collect any of that data, or that the software is free so we know it won't collect any of that data. 
2017-11 ai-powered driving apps can track your every move. 
2016-07 computerized cars with nonfree software are snooping devices. 
2016-02 the nissan leaf has a built-in cell phone modem which allows effectively anyone to access its computers remotely and make changes in various settings. 
that's easy to do because the system has no authentication when accessed through the modem. 
however, even if it asked for authentication, you couldn't be confident that nissan has no access. 
the software in the car is proprietary, which means it demands blind faith from its users. 
even if no one connects to the car remotely, the cell phone modem enables the phone company to track the car's movements all the time; it is possible to physically remove the cell phone modem, though. 
2013-06 tesla cars allow the company to extract data remotely and determine the car's location at any time. 
(see section 2, paragraphs b and c of the privacy statement.) the company says it doesn't store this information, but if the state orders it to get the data and hand it over, the state can store it. 
2013-03 proprietary software in cars records information about drivers' movements, which is made available to car manufacturers, insurance companies, and others. 
the case of toll-collection systems, mentioned in this article, is not really a matter of proprietary surveillance. 
these systems are an intolerable invasion of privacy, and should be replaced with anonymous payment systems, but the invasion isn't done by malware. 
the other cases mentioned are done by proprietary malware in the car. 
virtual reality. 
(#spywareinvr) 2020-08 oculus headsets require users to identify themselves to facebook. 
this will give facebook free rein to pervasively snoop on oculus users. 
2016-12 vr equipment, measuring every slight motion, creates the potential for the most intimate surveillance ever. 
all it takes to make this potential real is software as malicious as many other programs listed in this page. 
you can bet facebook will implement the maximum possible surveillance on oculus rift devices. 
the moral is, never trust a vr system with nonfree software in it. 
spyware on the web. 
(#spywareontheweb) in addition, many web sites spy on their visitors. 
web sites are not programs, so it makes no sense to call them "free" or "proprietary", but the surveillance is an abuse all the same. 
2020-09 the markup investigated 80,000 popular web sites and reports on how much they snoop on users. 
almost 70,000 had third-party trackers. 
5,000 fingerprinted the browser to identify users. 
12,000 recorded the user's mouse clicks and movements. 
2019-01 until 2015, any tweet that listed a geographical tag sent the precise gps location to twitter's server. 
it still contains these gps locations. 
2017-01 when a page uses disqus for comments, the proprietary disqus software loads a facebook software package into the browser of every anonymous visitor to the page, and makes the page's url available to facebook. 
2016-12 online sales, with tracking and surveillance of customers, enables businesses to show different people different prices. 
most of the tracking is done by recording interactions with servers, but proprietary software contributes. 
2012-10 many web sites rat their visitors to advertising networks that track users. 
of the top 1000 web sites, 84% (as of 5/17/2012) fed their visitors third-party cookies, allowing other sites to track them. 
2012-08 many web sites report all their visitors to google by using the google analytics service, which tells google the ip address and the page that was visited. 
[2012] many web sites try to collect users' address books (the user's list of other people's phone numbers or email addresses). 
this violates the privacy of those other people. 
2011-10 pages that contain "like" buttons enable facebook to track visitors to those pages—even users that don't have facebook accounts. 
javascript. 
(#spywareinjavascript) 2022-04 the us government sent personal data to facebook for every college student that applied for us government student aid. 
it justified this as being for a "campaign."
 the data included name, phone number and email address. 
this shows the agency didn't even make a handwaving attempt to anonymize the student. 
not that anonymization usually does much good—but the failure to even try shows that the agency was completely blind to the issue of respecting students' privacy. 
2018-11 many web sites use javascript code to snoop on information that users have typed into a form but not sent, in order to learn their identity. 
some are getting sued for this. 
the chat facilities of some customer services use the same sort of malware to read what the user is typing before it is posted. 
2018-07 british airways used nonfree javascript on its web site to give other companies personal data on its customers. 
2017-12 some javascript malware swipes usernames from browser-based password managers. 
2017-11 some websites send javascript code to collect all the user's input, which can then be used to reproduce the whole session. 
if you use librejs, it will block that malicious javascript code. 
flash. 
(#spywareinflash) 2013-10 flash and javascript are used for "fingerprinting" devices to identify users. 
2010-03 flash player's cookie feature helps web sites track visitors. 
chrome. 
(#spywareinchrome) 2021-09 google's proprietary chrome web browser added a surveillance api (idle detection api) which lets websites ask chrome to report when a user with a web page open is idle. 
2019-06 google chrome is an instrument of surveillance. 
it lets thousands of trackers invade users' computers and report the sites they visit to advertising and data companies, first of all to google. 
moreover, if users have a gmail account, chrome automatically logs them in to the browser for more convenient profiling. 
on android, chrome also reports their location to google. 
the best way to escape surveillance is to switch to icecat, a modified version of firefox with several changes to protect users' privacy. 
2017-04 low-priced chromebooks for schools are collecting far more data on students than is necessary, and store it indefinitely. 
parents and students complain about the lack of transparency on the part of both the educational services and the schools, the difficulty of opting out of these services, and the lack of proper privacy policies, among other things. 
but complaining is not sufficient. 
parents, students and teachers should realize that the software google uses to spy on students is nonfree, so they can't verify what it really does. 
the only remedy is to persuade school officials to exclusively use free software for both education and school administration. 
if the school is run locally, parents and teachers can mandate their representatives at the school board to refuse the budget unless the school initiates a switch to free software. 
if education is run nation-wide, they need to persuade legislators (e.g., through free software organizations, political parties, etc.) to migrate the public schools to free software. 
2015-07 google chrome makes it easy for an extension to do total snooping on the user's browsing, and many of them do so. 
2015-06 google chrome includes a module that activates microphones and transmits audio to its servers. 
2013-08 google chrome spies on browser history, affiliations, and other installed software. 
2008-09 google chrome contains a key logger that sends google every url typed in, one key at a time. 
spyware in networks. 
(#spywareinnetworks) 2022-02 honorlock set a network of fake test answer honeypot sites, tempting people to get exam answers, but that is a way to entrap students, so as to identify them and punish them, using nonfree js code to identify them. 
2021-10 edtech companies use their surveillance power to manipulate students, and direct them into tracks towards various levels of knowledge, power and prestige. 
the article argues that these companies should obtain licenses to operate. 
that wouldn't hurt, but it doesn't address the root of the problem. 
all data acquired in a school about any student, teacher, or employee must not leave the school, and must be kept in computers that belong to the school and run free (as in freedom) software. 
that way, the school district and/or parents can control what is done with those data. 
2021-05 60% of school apps are sending student data to potentially high-risk third parties, putting students and possibly all other school workers under surveillance. 
this is made possible by using unsafe and proprietary programs made by data-hungry corporations. 
please note that whether students consent to this or not, doesn't justify the surveillance they're imposed to. 
2021-05 the united states' government is reportedly considering teaming up with private companies to monitor american citizens' private online activity and digital communications. 
what creates the opportunity to try this is the fact that these companies are already snooping on users' private activities. 
that in turn is due to people's use of nonfree software which snoops, and online dis-services which snoop. 
2021-02 google handed over personal data of indian protesters and activists to indian police which led to their arrest. 
the cops requested the ip address and the location where a document was created and with that information, they identified protesters and activists. 
2020-12 the honorlock online exam proctoring program is a surveillance tool that tracks students and collects data such as face, driving license, and network information, among others, in blatant violation of students' privacy. 
preventing students from cheating should not be an excuse for running malware/spyware on their computers, and it's good that students are protesting. 
but their petitions overlook a crucial issue, namely, the injustice of being forced to run nonfree software in order to get an education. 
2020-09 while the world is still struggling with covid-19 coronavirus, many people are in danger of surveillance and their computers are infected with malware as a result of installing proprietary software. 
2020-04 proprietary programs google meet, microsoft teams, and webex are collecting user's personal and identifiable data including how long a call lasts, who's participating in the call, and the ip addresses of everyone taking part. 
from experience, this can even harm users physically if those companies hand over data to governments. 
2019-05 microsoft forces people to give their phone number in order to be able to create an account on the company's network. 
on top of mistreating their users by providing nonfree software, microsoft is tracking their lives outside the computer and violates their privacy. 
2019-02 google invites people to let google monitor their phone use, and all internet use in their homes, for an extravagant payment of $20. 
this is not a malicious functionality of a program with some other purpose; this is the software's sole purpose, and google says so. 
but google says it in a way that encourages most people to ignore the details. 
that, we believe, makes it fitting to list here. 
2018-08 google will track people even if people turn off location history, using google maps, weather updates, and browser searches. 
google basically uses any app activity to track people. 
2018-08 since the beginning of 2017, android phones have been collecting the addresses of nearby cellular towers, even when location services are disabled, and sending that data back to google. 
2016-06 investigation shows gchq using us companies, nsa to route around domestic surveillance restrictions. 
specifically, it can collect the emails of members of parliament this way, because they pass it through microsoft. 
2012-12 the cisco tnp ip phones are spying devices. 
back to top &#9650; proprietary malware. 
by type addictions back doors censorship coercion coverups deception drm fraud incompatibility insecurity interference jails manipulation obsolescence sabotage subscriptions = surveillance = tethers tyrants in the pipe by product appliances cars conferencing edtech games mobiles webpages by company adobe amazon apple google microsoft 
 if you know of an example that ought to be in this page but isn't here, please write to <webmasters@gnu.org> to inform us. 
please include the url of a trustworthy reference or two to serve as specific substantiation. 
types of apple malware. 
back doors censorship drm incompatibility insecurity interference jails manipulation pressuring sabotage subscriptions surveillance tyrants back doors. 
2019-07 apple appears to say that there is a back door in macos for automatically updating some (all?) apps. 
the specific change described in the article was not malicious—it protected users from surveillance by third parties—but that is a separate question. 
2016-07 the dropbox app for macintosh takes control of user interface items after luring the user into entering an admin password. 
2015-04 mac os x had an intentional local back door for 4 years, which could be exploited by attackers to gain root privileges. 
2010-11 the iphone has a back door for remote wipe. 
it's not always enabled, but users are led into enabling it without understanding. 
2008-08 the iphone has a back door that allows apple to remotely delete apps which apple considers "inappropriate". 
jobs said it's ok for apple to have this power because of course we can trust apple. 
censorship. 
apple mainly uses ios, which is a typical jail, to impose censorship through the apple store. 
please refer to the apple jails section for more information. 
drm. 
digital restrictions management, or "drm," refers to functionalities designed to restrict what users can do with the data in their computers. 
2022-03 apple prevents people from upgrading their mac hardware by imposing drm on its removable ssd storage. 
2021-11 apple's new tactic to restrict users from repairing their own device and impose drm on people is to completely disable its face id functionality when you replace its screen. 
2019-08 apple is putting drm on iphone batteries, and the system proprietary software turns off certain features when batteries are replaced other than by apple. 
2017-04 drm makes the iphone 7 nearly unrepairable by anyone else but apple. 
2015-12 apple uses drm software to prevent people from charging an ithing with a generic usb cable. 
2008-11 drm (digital restrictions mechanisms) in macos. 
this article focuses on the fact that a new model of macbook introduced a requirement for monitors to have malicious hardware, but drm software in macos is involved in activating the hardware. 
the software for accessing itunes is also responsible. 
2007-08 drm that caters to bluray disks. 
(the article focused on windows and said that macos would do the same thing subsequently.) 2007-03 itunes videos have drm, which allows apple to dictate where its customers can watch the videos they purchased. 
incompatibility. 
in this section, we list characteristics of apple programs that block or hinder users from switching to any alternative program—and, in particular, from switching to free software which can liberate the device the software runs on. 
2018-03 in macos and ios, the procedure for converting images from the photos format to a free format is so tedious and time-consuming that users just give up if they have a lot of them. 
2016-05 iwork (office software that runs on macos, ios and icloud) uses secret formats and provides no means of converting them to or from open document formats. 
iwork formats have changed several times since they were first introduced. 
this may have had the effect of thwarting reverse engineering efforts, thus preventing free software from fully supporting them. 
iwork formats are considered unfit for document preservation. 
insecurity. 
these bugs are/were not intentional, so unlike the rest of the file they do not count as malware. 
we mention them to refute the supposition that prestigious proprietary software doesn't have grave bugs. 
2022-01 a critical bug in apple's ios makes it possible for attackers to alter a shutdown event, tricking the user into thinking that the phone has been powered off. 
but in fact, it's still running, and the user can't feel any difference between a real shutdown and the fake shutdown. 
2021-11 some researchers at google found a zero-day vulnerability on macos, which crackers used to target people visiting the websites of a media outlet and a pro-democracy labor and political group in hong kong. 
please note that the article wrongly refers to crackers as "hackers". 
2021-07 the pegasus spyware used vulnerabilities on proprietary smartphone operating systems to impose surveillance on people. 
it can record people's calls, copy their messages, and secretly film them, using a security vulnerability. 
there's also a technical analysis of this spyware available in pdf format. 
a free operating system would've let people to fix the bugs for themselves but now infected people will be compelled to wait for corporations to fix the problems. 
please note that the article wrongly refers to crackers as "hackers". 
2020-12 commercial crackware can get passwords out of an imonster, use the microphone and camera, and other things. 
2020-11 apple has implemented a malware in its computers that imposes surveillance on users and reports users' computing to apple. 
the reports are even unencrypted and they've been leaking this data for two years already. 
this malware is reporting to apple what user opens what program at what time. 
it also gives apple power to sabotage users' computing. 
2019-08 a series of vulnerabilities found in ios allowed attackers to gain access to sensitive information including private messages, passwords, photos and contacts stored on the user's imonster. 
the deep insecurity of imonsters is even more pertinent given that apple's proprietary software makes users totally dependent on apple for even a modicum of security. 
it also means that the devices do not even try to offer security against apple itself. 
2016-07 a vulnerability in apple's image i/o api allowed an attacker to execute malicious code from any application which uses this api to render a certain kind of image file. 
2016-04 a bug in the ithings messages app allowed a malicious web site to extract all the user's messaging history. 
2013-11 the nsa can tap data in smart phones, including iphones, android, and blackberry. 
while there is not much detail here, it seems that this does not operate via the universal back door that we know nearly all portable phones have. 
it may involve exploiting various bugs. 
there are lots of bugs in the phones' radio software. 
interference. 
various proprietary programs are designed to harass, annoy or cause trouble for the user. 
they are like sabotage, but they are not grave enough to qualify for the word "sabotage". 
nonetheless, they are nasty and wrong. 
this section describes examples of apple committing interference. 
2022-11 obeying a demand by the chinese government, apple restricted the use of airdrop in china. 
it imposed a ten-minute time limit during which users can receive files from non contacts. 
this makes it nearly impossible to use airdrop for its intended purpose, which is to exchange files with strangers between imonsters in physical proximity. 
this happened after it became known that dissenters were using the app to distribute digital anti-government fliers anonymously. 
2021-05 apple is systematically undermining interoperability. 
at the hardware level, it does this via nonstandard plugs, buses and networks. 
at the software level, it does this by not letting the user have any data except within one app. 
2019-08 apple is putting drm on iphone batteries, and the system proprietary software turns off certain features when batteries are replaced other than by apple. 
jails. 
jails are systems that impose censorship on which application programs a user can install. 
2022-07 shortcuts, a built-in scripting app on apple devices, doesn't give you complete freedom to share scripts (a.k.a. 
"shortcuts"). 
exporting a script as a file requires an apple id, and may be subjected to censorship by apple. 
in this situation (and many others), switching from iphony/ibad to a freedom respecting device gives you both convenience and freedom. 
the assumption that you must sacrifice convenience to get freedom is often wrong. 
jails are inconvenient. 
2021-09 apple has made it impossible to load navalny's tactical voting app into an iphone in russia. 
it is impossible because (1) the iphone refuses to load apps from anywhere other than apple, and (2) apple has obeyed a russian censorship law. 
the first point is enforced by apple's nonfree software. 
2019-04 apple plans to require that all application software for macos be approved by apple first. 
offering a checking service as an option could be useful and would not be wrong. 
requiring users to get apple's approval is tyranny. 
apple says the check will only look for malware (not counting the malware that is part of the operating system), but apple could change that policy step by step. 
or perhaps apple will define malware to include any app that china does not like. 
for free software, this means users will need to get apple's approval after compilation. 
this amounts to a system of surveilling the use of free programs. 
2008-03 ios, the operating system of the apple ithings, is the prototype of a jail. 
it was apple that introduced the practice of designing general purpose computers with censorship of application programs. 
here is an article about the code signing that the ithings use to lock up the user. 
curiously, apple is beginning to allow limited passage through the walls of the ithing jail: users can now install apps built from source code, provided the source code is written in swift. 
users cannot do this freely because they are required to identify themselves. 
here are details. 
while this is a crack in the prison walls, it is not big enough to mean that the ithings are no longer jails. 
examples of censorship by apple jails. 
2021-08 the russian communications watchdog tells google and apple to remove navalny's app from their stores. 
because apple controls what a user can install, this is absolute censorship. 
by contrast, because android does not do that, users can install apps even if google does not offer them. 
2020-08 apple is putting the squeeze on all business conducted through apps for imonsters. 
this is a symptom of a very big injustice: that apple has the power to decide what software can be installed on an imonster. 
that it is a jail. 
2019-10 apple has banned the app that hong kong protesters use to communicate. 
obeying the "local laws" about what people can do with software is no excuse for censoring what software people can use. 
2019-10 apple censors the taiwan flag in ios on behalf of the chinese government. 
when the region is set to hong kong, this flag is not visible in the emoji selection widget but is still accessible. 
when the region is set to mainland china, all attempts to display it will result in the "empty emoji" icon as if the flag never existed. 
thus, not only does apple use the app store as an instrument of censorship, it also uses the ithing operating system for that purpose. 
2019-05 users caught in the jail of an imonster are sitting ducks for other attackers, and the app censorship prevents security companies from figuring out how those attacks work. 
apple's censorship of apps is fundamentally unjust, and would be inexcusable even if it didn't lead to security threats as well. 
2017-10 apple is censoring apps for the us government too. 
specifically, it is deleting apps developed by iranians. 
the root of these wrongs is in apple. 
if apple had not designed the imonsters to let apple censor applications, apple would not have had the power to stop users from installing whatever kind of apps. 
2017-07 apple deleted several vpns from its app store for china, thus using its own censorship power to strengthen that of the chinese government. 
2017-01 apple used its censorship system to enforce russian surveillance by blocking distribution of the linkedin app in russia. 
this is ironic because linkedin is a surveillance system itself. 
while subjecting its users to its own surveillance, it tries to protect its users from russian surveillance, and is therefore subject to russian censorship. 
however, the point here is the wrong of apple's censorship of apps. 
2017-01 apple used its censorship system to enforce china's censorship by blocking distribution of the new york times app. 
2016-05 apple censors games, banning some games from the cr…app store because of which political points they suggest. 
some political points are apparently considered acceptable. 
2015-09 apple banned a program from the app store because its developers committed the enormity of disassembling some ithings. 
2015-09 as of 2015, apple systematically bans apps that endorse abortion rights or would help women find abortions. 
this particular political slant affects other apple services. 
2015-06 apple has banned ithing applications that show the confederate flag. 
not only those that use it as a symbol of racism, but even strategic games that use it to represent confederate army units fighting in the civil war. 
this ludicrous rigidity illustrates the point that apple should not be allowed to censor apps. 
even if apple carried out this act of censorship with some care, it would still be wrong. 
whether racism is bad, whether educating people about drone attacks is bad, are not the real issue. 
apple should not have the power to impose its views about either of these questions, or any other. 
2014-12 more examples of apple's arbitrary and inconsistent censorship. 
2014-05 apple used this censorship power in 2014 to ban all bitcoin apps for the ithings for a time. 
it also banned a game about growing marijuana, while permitting games about other crimes such as killing people. 
perhaps apple considers killing more acceptable than marijuana. 
2014-02 apple rejected an app that displayed the locations of us drone assassinations, giving various excuses. 
each time the developers fixed one "problem", apple complained about another. 
after the fifth rejection, apple admitted it was censoring the app based on the subject matter. 
manipulation. 
2013-08 "dark patterns" are user interfaces designed to mislead users, or make option settings hard to find. 
this allows a company such as apple to say, "we allow users to turn this off" while ensuring that few will understand how to actually turn it off. 
pressuring. 
proprietary companies can take advantage of their customers by imposing arbitrary limits to their use of the software. 
this section reports examples of hard sell and other unjust commercial tactics by apple. 
2015-10 apple siri refuses to give you information about music charts if you're not an apple music subscriber. 
sabotage. 
these are situations in which apple employs its power over users to directly intervene in ways that harm them or block their work. 
2019-08 when apple suspects a user of fraud, it judges the case secretly and presents the verdict as a fait accompli. 
the punishment to a user found guilty is being cut off for life, which more-or-less cripples the user's apple devices forever. 
there is no appeal. 
2018-10 apple and samsung deliberately degrade the performance of older phones to force users to buy their newer phones. 
2018-05 apple has blocked telegram from upgrading its app for a month. 
this evidently has to do with russia's command to apple to block telegram in russia. 
the telegram client is free software on other platforms, but not on ithings. 
since they are jails, they don't permit any app to be free software. 
2017-10 macos high sierra forcibly reformats ssd boot drives, and changes the file system from hfs+ to apfs, which cannot be accessed from gnu/linux, windows or even older versions of macos. 
2017-06 apple will stop fixing bugs for older model ithings. 
meanwhile, apple stops people from fixing problems themselves; that's the nature of proprietary software. 
2017-04 the iphone 7 contains drm specifically designed to brick it if an "unauthorized" repair shop fixes it. 
"unauthorized" essentially means anyone besides apple. 
(the article uses the term "lock" to describe the drm, but we prefer to use the term digital handcuffs.) 2016-06 apple stops users from fixing the security bugs in quicktime for windows, while refusing to fix them itself. 
2016-05 the apple music client program scans the user's file system for music files, copies them to an apple server, and deletes them. 
2016-02 ios version 9 for ithings sabotages them irreparably if they were repaired by someone other than apple. 
apple eventually backed off from this policy under criticism from the users. 
however, it has not acknowledged that this was wrong. 
2015-10 apple forced millions of ithings to download a system upgrade without asking the users. 
apple did not forcibly install the upgrade but the downloading alone caused lots of trouble. 
2014-12 apple deleted from ipods the music that users had got from internet music stores that competed with itunes. 
2007-09 an apple firmware "upgrade" bricked iphones that had been unlocked. 
the "upgrade" also deactivated applications not approved by apple censorship. 
all this was apparently intentional. 
subscriptions. 
2020-08 apple can remotely cut off any developer's access to the tools for developing software for ios or macos. 
epic (apple's target in this example) makes nonfree games which have their own malicious features, but that doesn't make it acceptable for apple to have this sort of power. 
surveillance. 
2022-11 the imonsters' app store client programs collect many kinds of data about the user's actions and private communications. 
"do not track" options are available, but tracking doesn't stop if the user activates them: apple keeps on collecting data for itself, although it claims not to send it to third parties. 
apple is being sued for that. 
2021-05 apple is moving its chinese customers' icloud data to a datacenter controlled by the chinese government. 
apple is already storing the encryption keys on these servers, obeying chinese authority, making all chinese user data available to the government. 
2020-04 apple whistleblower thomas le bonniec reports that apple made a practice of surreptitiously activating the siri software to record users' conversations when they had not activated siri. 
this was not just occasional, it was systematic practice. 
his job was to listen to these recordings, in a group that made transcripts of them. 
he does not believes that apple has ceased this practice. 
the only reliable way to prevent this is, for the program that controls access to the microphone to decide when the user has "activated" any service, to be free software, and the operating system under it free as well. 
this way, users could make sure apple can't listen to them. 
2020-04 google, apple, and microsoft (and probably some other companies) are collecting people's access points and gps coordinates (which can identify people's precise location) even if their gps is turned off, without the person's consent, using proprietary software implemented in person's smartphone. 
though merely asking for permission would not necessarily legitimize this. 
2019-10 safari occasionally sends browsing data from apple devices in china to the tencent safe browsing service, to check urls that possibly correspond to "fraudulent" websites. 
since tencent collaborates with the chinese government, its safe browsing black list most certainly contains the websites of political opponents. 
by linking the requests originating from single ip addresses, the government can identify dissenters in china and hong kong, thus endangering their lives. 
2019-10 the chinese communist party's "study the great nation" app requires users to grant it access to the phone's microphone, photos, text messages, contacts, and internet history, and the android version was found to contain a back-door allowing developers to run any code they wish in the users' phone, as "superusers."
 downloading and using this app is mandatory at some workplaces. 
note: the washington post version of the article (partly obfuscated, but readable after copy-pasting in a text editor) includes a clarification saying that the tests were only performed on the android version of the app, and that, according to apple, "this kind of "superuser" surveillance could not be conducted on apple's operating system."
 2019-05 in spite of apple's supposed commitment to privacy, iphone apps contain trackers that are busy at night sending users' personal information to third parties. 
the article mentions specific examples: microsoft onedrive, intuit's mint, nike, spotify, the washington post, the weather channel (owned by ibm), the crime-alert service citizen, yelp and doordash. 
but it is likely that most nonfree apps contain trackers. 
some of these send personally identifying data such as phone fingerprint, exact location, email address, phone number or even delivery address (in the case of doordash). 
once this information is collected by the company, there is no telling what it will be used for. 
2018-09 adware doctor, an ad blocker for macos, reports the user's browsing history. 
2017-11 the dmca and the eu copyright directive make it illegal to study how ios cr…apps spy on users, because this would require circumventing the ios drm. 
2017-09 in the latest ithings system, "turning off" wifi and bluetooth the obvious way doesn't really turn them off. 
a more advanced way really does turn them off—only until 5am. 
that's apple for you—"we know you want to be spied on". 
2017-02 apple proposes a fingerprint-scanning touch screen—which would mean no way to use it without having your fingerprints taken. 
users would have no way to tell whether the phone is snooping on them. 
2016-11 iphones send lots of personal data to apple's servers. 
big brother can get them from there. 
2016-09 the imessage app on ithings tells a server every phone number that the user types into it; the server records these numbers for at least 30 days. 
2015-09 ithings automatically upload to apple's servers all the photos and videos they make. 
icloud photo library stores every photo and video you take, and keeps them up to date on all your devices. 
any edits you make are automatically updated everywhere. 
[…] (from apple's icloud information as accessed on 24 sep 2015.) the icloud feature is activated by the startup of ios. 
the term "cloud" means "please don't ask where."
 there is a way to deactivate icloud, but it's active by default so it still counts as a surveillance functionality. 
unknown people apparently took advantage of this to get nude photos of many celebrities. 
they needed to break apple's security to get at them, but nsa can access any of them through prism. 
2014-11 apple has made various macos programs send files to apple servers without asking permission. 
this exposes the files to big brother and perhaps to other snoops. 
it also demonstrates how you can't trust proprietary software, because even if today's version doesn't have a malicious functionality, tomorrow's version might add it. 
the developer won't remove the malfeature unless many users push back hard, and the users can't remove it themselves. 
2014-10 macos automatically sends to apple servers unsaved documents being edited. 
the things you have not decided to save are even more sensitive than the things you have stored in files. 
2014-10 apple admits the spying in a search facility, but there's a lot more snooping that apple has not talked about. 
2014-10 various operations in the latest macos send reports to apple servers. 
2014-09 apple can, and regularly does, remotely extract some data from iphones for the state. 
this may have improved with ios 8 security improvements; but not as much as apple claims. 
2014-07 several "features" of ios seem to exist for no possible purpose other than surveillance. 
here is the technical presentation. 
2014-01 spotlight search sends users' search terms to apple. 
2014-01 the ibeacon lets stores determine exactly where the ithing is, and get other info too. 
2013-12 either apple helps the nsa snoop on all the data in an ithing, or it is totally incompetent. 
2013-08 the ithing also tells apple its geolocation by default, though that can be turned off. 
2012-10 there is also a feature for web sites to track users, which is enabled by default. 
(that article talks about ios 6, but it is still true in ios 7.) 2012-04 users cannot make an apple id (necessary to install even gratis apps) without giving a valid email address and receiving the verification code apple sends to it. 
tyrants. 
tyrants are systems that reject any operating system not "authorized" by the manufacturer. 
2018-02 apple devices lock users in solely to apple services by being designed to be incompatible with all other options, ethical or unethical. 
2014-12 apple arbitrarily blocks users from installing old versions of ios. 
2012-05 the apple ithings are tyrant devices. 
there is a port of android to the ithings, but installing it requires finding a bug or "exploit" to make it possible to install a different system. 
back to top &#9650; proprietary malware. 
by type addictions back doors censorship coercion coverups deception drm fraud incompatibility insecurity interference jails manipulation obsolescence sabotage subscriptions surveillance tethers tyrants in the pipe by product appliances cars conferencing edtech games mobiles webpages by company adobe amazon = apple = google microsoft 
 if you know of an example that ought to be in this page but isn't here, please write to <webmasters@gnu.org> to inform us. 
please include the url of a trustworthy reference or two to serve as specific substantiation. 
uefi-induced vulnerability. 
uefi makes computers vulnerable to advanced persistent threats that are almost impossible to detect once installed. 
here are technical details. 
kaspersky discovered this example by chance, but is unable to check in general for the presence of such rootkits in computers. 
nonfree software does not make your computer secure—it does the opposite: it prevents you from trying to secure it. 
uefi is a nonfree program required for booting which is impossible to replace; in effect, a low-level rootkit. 
all the things that intel has done to make its power over you secure against you also protect uefi-level rootkits against you. 
instead of allowing intel, amd, apple and perhaps arm to impose security through tyranny, we should legislate to require them to allow users to install their choice of startup software, and make available the information needed to develop such. 
think of this as right-to-repair at the initialization stage. 
types of microsoft malware. 
back doors drm insecurity interference jails sabotage subscriptions surveillance tethers tyrants back doors. 
2020-10 microsoft is forcing windows users to install upgrades it pushes using its universal back doors. 
these upgrades can do various harms to users such as restricting computers from some functions and/or forcing users to defenselessly do whatever microsoft tells them to do. 
2016-08 microsoft windows has a universal back door through which any change whatsoever can be imposed on the users. 
this was reported in 2007 for xp and vista, and it seems that microsoft used the same method to push the windows 10 downgrade to computers running windows 7 and 8. in windows 10, the universal back door is no longer hidden; all "upgrades" will be forcibly and immediately imposed. 
2015-12 microsoft has backdoored its disk encryption. 
2013-08 the german government veers away from windows 8 computers with tpm 2.0 (original article in german), due to potential back door capabilities of the tpm 2.0 chip. 
2013-07 here is a suspicion that we can't prove, but is worth thinking about: writable microcode for intel and amd microprocessors may be a vehicle for the nsa to invade computers, with the help of microsoft, say respected security experts. 
2011-12 windows 8 also has a back door for remotely deleting apps. 
you might well decide to let a security service that you trust remotely deactivate programs that it considers malicious. 
but there is no excuse for deleting the programs, and you should have the right to decide whom (if anyone) to trust in this way. 
drm. 
digital restrictions management, or "drm," refers to functionalities designed to restrict what users can do with the data in their computers. 
2019-04 ebooks "bought" from microsoft's store check that their drm is valid by connecting to the store every time their "owner" wants to read them. 
microsoft is going to close this store, bricking all drm'ed ebooks it has ever "sold". 
(the article additionally highlights the pitfalls of drm.) this is another proof that a drm-encumbered product doesn't belong to the person who bought it. 
microsoft said it will refund customers, but this is no excuse for selling them restricted books. 
2007-08 drm in windows, introduced to cater to bluray disks. 
(the article talks about how the same malware would later be introduced in macos. 
that had not been done at the time, but it was done subsequently.) insecurity. 
these bugs are/were not intentional, so unlike the rest of the file they do not count as malware. 
we mention them to refute the supposition that prestigious proprietary software doesn't have grave bugs. 
2022-10 the microsoft office encryption is weak, and susceptible to attack. 
encryption is a tricky field, and easy to mess up. 
it is wise to insist on encryption software that is (1) free software and (2) studied by experts. 
2022-02 a security failure in microsoft's windows is infecting people's computers with redline stealer malware using a fake windows 11 upgrade installer. 
2021-07 a newly found microsoft windows vulnerability can allow crackers to remotely gain access to the operating system and install programs, view and delete data, or even create new user accounts with full user rights. 
the security research firm accidentally leaked instructions on how the flaw could be exploited but windows users should still wait for microsoft to fix the flaw, if they fix it. 
please note that the article wrongly refers to crackers as "hackers". 
2021-03 at least 30 thousand organizations in the united states are newly "cracked" via holes in microsoft's proprietary email software, named microsoft 365. 
it is unclear whether there are other holes and vulnerabilities in the program or not but history and experience tells us it wouldn't be the last disaster with proprietary programs. 
2021-02 researchers at the security firm sentinelone discovered a security flaw in proprietary program microsoft windows defender that lurked undetected for 12 years. 
if the program was free (as in freedom), more people would have had a chance to notice the problem, therefore, it could've been fixed a lot sooner. 
2020-04 the proprietary program microsoft teams' insecurity could have let a malicious gif steal user data from microsoft teams accounts, possibly across an entire company, and taken control of "an organization's entire roster of teams accounts."
 2017-05 exploits of bugs in windows, which were developed by the nsa and then leaked by the shadowbrokers group, are now being used to attack a great number of windows computers with ransomware. 
2016-08 a flaw in internet explorer and edge allows an attacker to retrieve microsoft account credentials, if the user is tricked into visiting a malicious link. 
2013-12 point-of-sale terminals running windows were taken over and turned into a botnet for the purpose of collecting customers' credit card numbers. 
interference. 
this section gives examples of microsoft software harassing or annoying the user, or causing trouble for the user. 
these actions are like sabotage but the word "sabotage" is too strong for them. 
2023-02 microsoft is remotely disabling internet explorer, forcibly redirecting users to microsoft edge. 
imposing such change is malicious, and the fact that the redirection is from one unjust program (ie) to another unjust program (edge) does not excuse it. 
2021-08 microsoft is making it harder and harder to replace default apps in its windows operating system and is pressuring users to use its proprietary programs instead. 
we believe the best approach to this would be replacing windows with a free (as in freedom) operating system like gnu. 
we also maintain a list of fully free distributions of gnu. 
2021-02 microsoft is forcibly removing the flash player from computers running windows 10, using a universal backdoor in windows. 
the fact that flash has been disabled by adobe is no excuse for this abuse of power. 
the nature of proprietary software, such as microsoft windows, gives the developers power to impose their decisions on users. 
free software on the other hand empowers users to make their own decisions. 
2018-09 one version of windows 10 harangues users if they try to install firefox (or chrome). 
2018-03 microsoft is planning to make windows impose use of its browser, edge, in certain circumstances. 
the reason microsoft can force things on users is that windows is nonfree. 
2017-03 windows displays intrusive ads for microsoft products and its partners' products. 
the article's author starts from the premise that microsoft has a right to control what windows does to users, as long as it doesn't go "too far". 
we disagree. 
2016-12 the microsoft telemetry compatibility service drastically reduces the performances of machines running windows 10, and can't be disabled easily. 
2016-08 after forcing the download of windows 10 on computers that were running windows 7 and 8, microsoft repeatedly switched on a flag that urged users to "upgrade" to windows 10 when they had turned it off, in the hope that some day they would fail to say no. 
to do this, microsoft used malware techniques. 
a detailed analysis of microsoft's scheme is available on the electronic frontier foundation's website. 
2016-03 microsoft has made companies' windows machines managed by the company's sysadmins harangue users to complain to the sysadmins about not "upgrading" to windows 10. 
2016-01 microsoft has desupported all future intel cpus for windows 7 and 8. those machines will be stuck with the nastier windows 10. 
amd and qualcomm cpus, too. 
of course, windows 7 and 8 are unethical too, because they are proprietary software. 
but this example of microsoft's wielding its power demonstrates the power it holds. 
free software developers also stop maintaining old versions of their programs, but this is not unfair to users because the users of free software have control over it. 
if it is important enough to you, you and other users can hire someone to support the old version on your future platforms. 
sabotage. 
the wrongs in this section are not precisely malware, since they do not involve making the program that runs in a way that hurts the user. 
but they are a lot like malware, since they are technical microsoft actions that harm the users of specific microsoft software. 
2019-04 microsoft has been force-installing a "remediation" program on computers running certain versions of windows 10. 
remediation, in microsoft's view, means tampering with users' settings and files, notably to "repair" any components of the updating system that users may have intentionally disabled, and thus regain full power over them. 
microsoft repeatedly pushed faulty versions of this program to users' machines, causing numerous problems, some of which critical. 
this exemplifies the arrogant and manipulative attitude that proprietary software developers have learned to adopt toward the people they are supposedly serving. 
migrate to a free operating system if you can! 
if your employer makes you run windows, tell the financial department how this wastes your time dealing with endless connections and premature hardware failures. 
2017-04 microsoft has made windows 7 and 8 cease to function on certain new computers, effectively forcing their owners to switch to windows 10. 
2017-04 microsoft has dropped support for windows 7 and 8 on recent processors in a big hurry. 
it makes no difference what legitimate reasons microsoft might have for not doing work to support them. 
if it doesn't want to do this work, it should let users do the work. 
2016-06 in its efforts to trick users of windows 7 and 8 into installing all-spying windows 10 against their will, microsoft forced their computers to silently download… the whole of windows 10! 
apparently, this was done through a universal back door. 
not only did the unwanted downloads jeopardize important operations in regions of the world with poor connectivity, but many of the people who let installation proceed found out that this "upgrade" was in fact a downgrade. 
2016-06 once microsoft has tricked a user into accepting installation of windows 10, they find that they are denied the option to cancel or even postpone the imposed date of installation. 
this demonstrates what we've said for years: using proprietary software means letting someone have power over you, and you're going to get screwed sooner or later. 
2016-01 ftdi's proprietary driver for its usb-to-serial chips has been designed to sabotage alternative compatible chips so that they no longer work. 
microsoft is installing this automatically as an "upgrade". 
2015-11 windows 10 "upgrades" delete applications without asking permission. 
2015-03 microsoft cut off security fixes for windows xp, except to some big users that pay exorbitantly. 
microsoft is going to cut off support for some internet explorer versions in the same way. 
a person or company has the right to cease to work on a particular program; the wrong here is microsoft does this after having made the users dependent on microsoft, because they are not free to ask anyone else to work on the program for them. 
2013-06 microsoft informs the nsa of bugs in windows before fixing them. 
subscriptions. 
2015-07 microsoft office forces users to subscribe to office 365 to be able to create/edit documents. 
surveillance. 
2023-06 edge sends the urls of images the user views to microsoft's servers by default, supposedly to "enhance" them. 
and these images may end up on the nsa's servers. 
microsoft claims its nonfree browser sends the urls without identifying you, which cannot be true, since at least your ip address is known to the server if you don't take extra measures. 
either way, such enhancer service is unjust because any image editing should be done on your own computer using installed free software. 
the article describes how to disable sending the urls. 
that makes a change for the better, but we suggest that you instead switch to a freedom-respecting browser with additional privacy features such as icecat. 
2023-02 as soon as it boots, and without asking any permission, windows 11 starts to send data to online servers. 
the user's personal details, location or hardware information are reported to microsoft and other companies to be used as telemetry data. 
all of this is done is the background, and users have no easy way to prevent it—unless they switch the computer offline. 
2023-01 microsoft released an "update" that installs a surveillance program on users' computers to gather data on some installed programs for microsoft's benefit. 
the update is rolling out automatically, and the program runs "one time silently."
 2020-11 microsoft's office 365 suite enables employers to snoop on each employee. 
after a public outburst, microsoft stated that it would remove this capability. 
let's hope so. 
2020-10 microsoft is imposing its surveillance on the game of minecraft by requiring every player to open an account on microsoft's network. 
microsoft has bought the game and will merge all accounts into its network, which will give them access to people's data. 
minecraft players can play minetest instead. 
the essential advantage of minetest is that it is free software, meaning it respects the user's computer freedom. 
as a bonus, it offers more options. 
2020-10 as of 2019-2020, minecraft players are being forced to move to microsoft servers, which results in privacy violation. 
microsoft publishes a program so users can run their own server, but the program is proprietary and it's another injustice to users. 
people can play minetest instead. 
minetest is free software and respects the user's computer freedom. 
2020-04 proprietary programs google meet, microsoft teams, and webex are collecting user's personal and identifiable data including how long a call lasts, who's participating in the call, and the ip addresses of everyone taking part. 
from experience, this can even harm users physically if those companies hand over data to governments. 
2020-04 google, apple, and microsoft (and probably some other companies) are collecting people's access points and gps coordinates (which can identify people's precise location) even if their gps is turned off, without the person's consent, using proprietary software implemented in person's smartphone. 
though merely asking for permission would not necessarily legitimize this. 
2019-12 microsoft is tricking users to create an account on their network to be able to install and use the windows operating system, which is malware. 
the account can be used for surveillance and/or violating people's rights in many ways, such as turning their purchased software to a subscription product. 
2019-08 microsoft recorded users of xboxes and had human workers listen to the recordings. 
morally, we see no difference between having human workers listen and having speech-recognition systems listen. 
both intrude on privacy. 
2019-08 skype refuses to say whether it can eavesdrop on calls. 
that almost certainly means it can do so. 
2019-05 microsoft forces people to give their phone number in order to be able to create an account on the company's network. 
on top of mistreating their users by providing nonfree software, microsoft is tracking their lives outside the computer and violates their privacy. 
2017-10 windows 10 telemetry program sends information to microsoft about the user's computer and their use of the computer. 
furthermore, for users who installed the fourth stable build of windows 10, called the "creators update," windows maximized the surveillance by force setting the telemetry mode to "full". 
the "full" telemetry mode allows microsoft windows engineers to access, among other things, registry keys which can contain sensitive information like administrator's login password. 
2017-02 drm-restricted files can be used to identify people browsing through tor. 
the vulnerability exists only if you use windows. 
2016-11 by default, windows 10 sends debugging information to microsoft, including core dumps. 
microsoft now distributes them to another company. 
2016-08 in order to increase windows 10's install base, microsoft blatantly disregards user choice and privacy. 
2016-03 windows 10 comes with 13 screens of snooping options, all enabled by default, and turning them off would be daunting to most users. 
2016-01 it appears windows 10 sends data to microsoft about what applications are running. 
2015-11 a downgrade to windows 10 deleted surveillance-detection applications. 
then another downgrade inserted a general spying program. 
users noticed this and complained, so microsoft renamed it to give users the impression it was gone. 
to use proprietary software is to invite such treatment. 
2015-08 windows 10 sends identifiable information to microsoft, even if a user turns off its bing search and cortana features, and activates the privacy-protection settings. 
2015-07 windows 10 ships with default settings that show no regard for the privacy of its users, giving microsoft the "right" to snoop on the users' files, text input, voice input, location info, contacts, calendar records and web browsing history, as well as automatically connecting the machines to open hotspots and showing targeted ads. 
we can suppose microsoft looks at users' files for the us government on demand, though the "privacy policy" does not explicitly say so. 
will it look at users' files for the chinese government on demand? 
2015-06 microsoft uses windows 10's "privacy policy" to overtly impose a "right" to look at users' files at any time. 
windows 10 full disk encryption gives microsoft a key. 
thus, windows is overt malware in regard to surveillance, as in other issues. 
the unique "advertising id" for each user enables other companies to track the browsing of each specific user. 
it's as if microsoft has deliberately chosen to make windows 10 maximally evil on every dimension; to make a grab for total power over anyone that doesn't drop windows now. 
2014-10 it only gets worse with time. 
windows 10 requires users to give permission for total snooping, including their files, their commands, their text input, and their voice input. 
2014-05 microsoft skydrive allows the nsa to directly examine users' data. 
2013-07 skype contains spyware. 
microsoft changed skype specifically for spying. 
2013-07 spyware in older versions of windows: windows update snoops on the user. 
windows 8.1 snoops on local searches. 
and there's a secret nsa key in windows, whose functions we don't know. 
tethers. 
tethers are functionalities that require constant (or very frequent) connection to a server. 
2017-08 the recent versions of microsoft office require the user to connect to microsoft servers at least every thirty-one days. 
otherwise, the software will refuse to edit any documents or create new ones. 
it will be restricted to viewing and printing. 
jails. 
jails are systems that impose censorship on application programs. 
2017-06 windows 10 s was a jail: only programs from the windows store could be installed and executed. 
it was however possible to upgrade to windows 10 pro. 
the successor of windows 10 s is a special configuration of windows 10 called s mode. 
the major difference with windows 10 s is that there is an easy way to switch out of s mode. 
2012-10 windows 8 on "mobile devices" (now defunct) was a jail. 
tyrants. 
tyrants are systems that reject any operating system not "authorized" by the manufacturer. 
2016-07 microsoft accidentally left a way for users to install gnu/linux on windows rt tablets, but now it has "fixed" the "error". 
they have the gall to call this "protecting" the users. 
the article talks of installing "linux", but the context shows it is really gnu/linux that users install. 
2011-10 mobile devices that come with windows 8 are tyrants. 
as this page shows, if you do want to clean your computer of malware, the first software to delete is windows. 
back to top &#9650; proprietary malware. 
by type addictions back doors censorship coercion coverups deception drm fraud incompatibility insecurity interference jails manipulation obsolescence sabotage subscriptions surveillance tethers tyrants in the pipe by product appliances cars conferencing edtech games mobiles webpages by company adobe amazon apple google = microsoft = 
a common malicious functionality is to snoop on the user. 
this page records clearly established cases of proprietary software that spies on or tracks users. 
manufacturers even refuse to say whether they snoop on users for the state. 
all appliances and applications that are tethered to a specific server are snoopers by nature. 
we do not list them here because they have their own page: proprietary tethers. 
there is a similar site named spyware watchdog that classifies spyware programs, so that users can be more aware that they are installing spyware. 
if you know of an example that ought to be in this page but isn't here, please write to <webmasters@gnu.org> to inform us. 
please include the url of a trustworthy reference or two to serve as specific substantiation. 
table of contents. 
introduction. 
spyware in laptops and desktops. 
windows macos bios spyware on mobiles. 
all "smart" phones ithings android telephones e-readers spyware in applications. 
desktop apps mobile apps skype games spyware in connected equipment. 
tv sets cameras toys drones other appliances wearables "smart" watches vehicles virtual reality spyware on the web. 
chrome javascript flash spyware in networks. 
introduction. 
for decades, the free software movement has been denouncing the abusive surveillance machine of proprietary software companies such as microsoft and apple. 
in the recent years, this tendency to watch people has spread across industries, not only in the software business, but also in the hardware. 
moreover, it also spread dramatically away from the keyboard, in the mobile computing industry, in the office, at home, in transportation systems, and in the classroom. 
aggregate or anonymized data. 
many companies, in their privacy policy, have a clause that claims they share aggregate, non-personally identifiable information with third parties/partners. 
such claims are worthless, for several reasons: they could change the policy at any time. 
they can twist the words by distributing an "aggregate" of "anonymized" data which can be reidentified and attributed to individuals. 
the raw data they don't normally distribute can be taken by data breaches. 
the raw data they don't normally distribute can be taken by subpoena. 
therefore, we must not be distracted by companies' statements of what they will do with the data they collect. 
the wrong is that they collect it at all. 
latest additions. 
entries in each category are in reverse chronological order, based on the dates of publication of linked articles. 
the latest additions are listed on the main page of the malware section. 
spyware in laptops and desktops. 
(#osspyware) windows. 
(#spywareinwindows) 2023-02 as soon as it boots, and without asking any permission, windows 11 starts to send data to online servers. 
the user's personal details, location or hardware information are reported to microsoft and other companies to be used as telemetry data. 
all of this is done is the background, and users have no easy way to prevent it—unless they switch the computer offline. 
2023-01 microsoft released an "update" that installs a surveillance program on users' computers to gather data on some installed programs for microsoft's benefit. 
the update is rolling out automatically, and the program runs "one time silently."
 2019-12 microsoft is tricking users to create an account on their network to be able to install and use the windows operating system, which is malware. 
the account can be used for surveillance and/or violating people's rights in many ways, such as turning their purchased software to a subscription product. 
2017-12 hp's proprietary operating system includes a proprietary keyboard driver with a key logger in it. 
2017-10 windows 10 telemetry program sends information to microsoft about the user's computer and their use of the computer. 
furthermore, for users who installed the fourth stable build of windows 10, called the "creators update," windows maximized the surveillance by force setting the telemetry mode to "full". 
the "full" telemetry mode allows microsoft windows engineers to access, among other things, registry keys which can contain sensitive information like administrator's login password. 
2017-02 drm-restricted files can be used to identify people browsing through tor. 
the vulnerability exists only if you use windows. 
2016-11 by default, windows 10 sends debugging information to microsoft, including core dumps. 
microsoft now distributes them to another company. 
2016-08 in order to increase windows 10's install base, microsoft blatantly disregards user choice and privacy. 
2016-03 windows 10 comes with 13 screens of snooping options, all enabled by default, and turning them off would be daunting to most users. 
2016-01 it appears windows 10 sends data to microsoft about what applications are running. 
2015-12 microsoft has backdoored its disk encryption. 
2015-11 a downgrade to windows 10 deleted surveillance-detection applications. 
then another downgrade inserted a general spying program. 
users noticed this and complained, so microsoft renamed it to give users the impression it was gone. 
to use proprietary software is to invite such treatment. 
2015-08 intel devices will be able to listen for speech all the time, even when "off."
 2015-08 windows 10 sends identifiable information to microsoft, even if a user turns off its bing search and cortana features, and activates the privacy-protection settings. 
2015-07 windows 10 ships with default settings that show no regard for the privacy of its users, giving microsoft the "right" to snoop on the users' files, text input, voice input, location info, contacts, calendar records and web browsing history, as well as automatically connecting the machines to open hotspots and showing targeted ads. 
we can suppose microsoft looks at users' files for the us government on demand, though the "privacy policy" does not explicitly say so. 
will it look at users' files for the chinese government on demand? 
2015-06 microsoft uses windows 10's "privacy policy" to overtly impose a "right" to look at users' files at any time. 
windows 10 full disk encryption gives microsoft a key. 
thus, windows is overt malware in regard to surveillance, as in other issues. 
the unique "advertising id" for each user enables other companies to track the browsing of each specific user. 
it's as if microsoft has deliberately chosen to make windows 10 maximally evil on every dimension; to make a grab for total power over anyone that doesn't drop windows now. 
2014-10 it only gets worse with time. 
windows 10 requires users to give permission for total snooping, including their files, their commands, their text input, and their voice input. 
2014-05 microsoft skydrive allows the nsa to directly examine users' data. 
2014-01 baidu's japanese-input and chinese-input apps spy on users. 
2013-07 spyware in older versions of windows: windows update snoops on the user. 
windows 8.1 snoops on local searches. 
and there's a secret nsa key in windows, whose functions we don't know. 
microsoft's snooping on users did not start with windows 10. 
there's a lot more microsoft malware. 
macos. 
(#spywareinmacos) 2020-11 apple has implemented a malware in its computers that imposes surveillance on users and reports users' computing to apple. 
the reports are even unencrypted and they've been leaking this data for two years already. 
this malware is reporting to apple what user opens what program at what time. 
it also gives apple power to sabotage users' computing. 
2018-09 adware doctor, an ad blocker for macos, reports the user's browsing history. 
2014-11 apple has made various macos programs send files to apple servers without asking permission. 
this exposes the files to big brother and perhaps to other snoops. 
it also demonstrates how you can't trust proprietary software, because even if today's version doesn't have a malicious functionality, tomorrow's version might add it. 
the developer won't remove the malfeature unless many users push back hard, and the users can't remove it themselves. 
2014-10 macos automatically sends to apple servers unsaved documents being edited. 
the things you have not decided to save are even more sensitive than the things you have stored in files. 
2014-10 apple admits the spying in a search facility, but there's a lot more snooping that apple has not talked about. 
2014-10 various operations in the latest macos send reports to apple servers. 
2014-01 spotlight search sends users' search terms to apple. 
there's a lot more ithing spyware, and apple malware. 
bios. 
(#spywareinbios) 2015-09 lenovo stealthily installed crapware and spyware via bios on windows installs. 
note that the specific sabotage method lenovo used did not affect gnu/linux; also, a "clean" windows install is not really clean since microsoft puts in its own malware. 
spyware on mobiles. 
(#spywareonmobiles) all "smart" phones. 
(#spywareintelephones) 2021-06 el salvador dictatorship's chivo wallet is spyware, it's a proprietary program that breaks users' freedom and spies on people; demands personal data such as the national id number and does face recognition, and it is bad security for its data. 
it also asks for almost every malware permission in people's smartphones. 
the article criticizes it for faults in "data protection", though "data protection" is the wrong approach to privacy anyway. 
2021-06 almost all proprietary health apps harvest users' data, including sensitive health information, tracking identifiers, and cookies to track user activities. 
some of these applications are tracking users across different platforms. 
2021-02 the proprietary program clubhouse is malware and a privacy disaster. 
clubhouse collects people's personal data such as recordings of people's conversations, and, as a secondary problem, does not encrypt them, which shows a bad security part of the issue. 
a user's unique clubhouse id number and chatroom id are transmitted in plaintext, and agora (the company behind the app) would likely have access to users' raw audio, potentially providing access to the chinese government. 
even with good security of data transmission, collecting personal data of people is wrong and a violation of people's privacy rights. 
2021-01 as of 2021, whatsapp (one of facebook's subsidiaries) is forcing its users to hand over sensitive personal data to its parent company. 
this increases facebook's power over users, and further jeopardizes people's privacy and security. 
instead of whatsapp you can use gnu jami, which is free software and will not collect your data. 
2020-06 most apps are malware, but trump's campaign app, like modi's campaign app, is especially nasty malware, helping companies snoop on users as well as snooping on them itself. 
the article says that biden's app has a less manipulative overall approach, but that does not tell us whether it has functionalities we consider malicious, such as sending data the user has not explicitly asked to send. 
2018-09 tiny lab productions, along with online ad businesses run by google, twitter and three other companies are facing a lawsuit for violating people's privacy by collecting their data from mobile games and handing over these data to other companies/advertisers. 
2016-01 the natural extension of monitoring people through "their" phones is proprietary software to make sure they can't "fool" the monitoring. 
2015-10 according to edward snowden, agencies can take over smartphones by sending hidden text messages which enable them to turn the phones on and off, listen to the microphone, retrieve geo-location data from the gps, take photographs, read text messages, read call, location and web browsing history, and read the contact list. 
this malware is designed to disguise itself from investigation. 
2013-11 the nsa can tap data in smart phones, including iphones, android, and blackberry. 
while there is not much detail here, it seems that this does not operate via the universal back door that we know nearly all portable phones have. 
it may involve exploiting various bugs. 
there are lots of bugs in the phones' radio software. 
2013-07 portable phones with gps will send their gps location on remote command, and users cannot stop them. 
(the us says it will eventually require all new portable phones to have gps.) ithings. 
(#spywareinithings) 2022-11 the imonsters' app store client programs collect many kinds of data about the user's actions and private communications. 
"do not track" options are available, but tracking doesn't stop if the user activates them: apple keeps on collecting data for itself, although it claims not to send it to third parties. 
apple is being sued for that. 
2021-05 apple is moving its chinese customers' icloud data to a datacenter controlled by the chinese government. 
apple is already storing the encryption keys on these servers, obeying chinese authority, making all chinese user data available to the government. 
2020-09 facebook snoops on instagram users by surreptitously turning on the device's camera. 
2020-04 apple whistleblower thomas le bonniec reports that apple made a practice of surreptitiously activating the siri software to record users' conversations when they had not activated siri. 
this was not just occasional, it was systematic practice. 
his job was to listen to these recordings, in a group that made transcripts of them. 
he does not believes that apple has ceased this practice. 
the only reliable way to prevent this is, for the program that controls access to the microphone to decide when the user has "activated" any service, to be free software, and the operating system under it free as well. 
this way, users could make sure apple can't listen to them. 
2019-10 safari occasionally sends browsing data from apple devices in china to the tencent safe browsing service, to check urls that possibly correspond to "fraudulent" websites. 
since tencent collaborates with the chinese government, its safe browsing black list most certainly contains the websites of political opponents. 
by linking the requests originating from single ip addresses, the government can identify dissenters in china and hong kong, thus endangering their lives. 
2019-05 in spite of apple's supposed commitment to privacy, iphone apps contain trackers that are busy at night sending users' personal information to third parties. 
the article mentions specific examples: microsoft onedrive, intuit's mint, nike, spotify, the washington post, the weather channel (owned by ibm), the crime-alert service citizen, yelp and doordash. 
but it is likely that most nonfree apps contain trackers. 
some of these send personally identifying data such as phone fingerprint, exact location, email address, phone number or even delivery address (in the case of doordash). 
once this information is collected by the company, there is no telling what it will be used for. 
2017-11 the dmca and the eu copyright directive make it illegal to study how ios cr…apps spy on users, because this would require circumventing the ios drm. 
2017-09 in the latest ithings system, "turning off" wifi and bluetooth the obvious way doesn't really turn them off. 
a more advanced way really does turn them off—only until 5am. 
that's apple for you—"we know you want to be spied on". 
2017-02 apple proposes a fingerprint-scanning touch screen—which would mean no way to use it without having your fingerprints taken. 
users would have no way to tell whether the phone is snooping on them. 
2016-11 iphones send lots of personal data to apple's servers. 
big brother can get them from there. 
2016-09 the imessage app on ithings tells a server every phone number that the user types into it; the server records these numbers for at least 30 days. 
2015-09 ithings automatically upload to apple's servers all the photos and videos they make. 
icloud photo library stores every photo and video you take, and keeps them up to date on all your devices. 
any edits you make are automatically updated everywhere. 
[…] (from apple's icloud information as accessed on 24 sep 2015.) the icloud feature is activated by the startup of ios. 
the term "cloud" means "please don't ask where."
 there is a way to deactivate icloud, but it's active by default so it still counts as a surveillance functionality. 
unknown people apparently took advantage of this to get nude photos of many celebrities. 
they needed to break apple's security to get at them, but nsa can access any of them through prism. 
2014-09 apple can, and regularly does, remotely extract some data from iphones for the state. 
this may have improved with ios 8 security improvements; but not as much as apple claims. 
2014-07 several "features" of ios seem to exist for no possible purpose other than surveillance. 
here is the technical presentation. 
2014-01 the ibeacon lets stores determine exactly where the ithing is, and get other info too. 
2013-12 either apple helps the nsa snoop on all the data in an ithing, or it is totally incompetent. 
2013-08 the ithing also tells apple its geolocation by default, though that can be turned off. 
2012-10 there is also a feature for web sites to track users, which is enabled by default. 
(that article talks about ios 6, but it is still true in ios 7.) 2012-04 users cannot make an apple id (necessary to install even gratis apps) without giving a valid email address and receiving the verification code apple sends to it. 
android telephones. 
(#spywareinandroid) 2020-12 baidu apps were caught collecting sensitive personal data that can be used for lifetime tracking of users, and putting them in danger. 
more than 1.4 billion people worldwide are affected by these proprietary apps, and users' privacy is jeopardized by this surveillance tool. 
data collected by baidu may be handed over to the chinese government, possibly putting chinese people in danger. 
2020-10 samsung is forcing its smartphone users in hong kong (and macau) to use a public dns in mainland china, using software update released in september 2020, which causes many unease and privacy concerns. 
2020-04 xiaomi phones report many actions the user takes: starting an app, looking at a folder, visiting a website, listening to a song. 
they send device identifying information too. 
other nonfree programs snoop too. 
for instance, spotify and other streaming dis-services make a dossier about each user, and they make users identify themselves to pay. 
out, out, damned spotify! 
forbes exonerates the same wrongs when the culprits are not chinese, but we condemn this no matter who does it. 
2018-12 facebook's app got "consent" to upload call logs automatically from android phones while disguising what the "consent" was for. 
2018-11 an android phone was observed to track location even while in airplane mode. 
it didn't send the location data while in airplane mode. 
instead, it saved up the data, and sent them all later. 
2017-11 android tracks location for google even when "location services" are turned off, even when the phone has no sim card. 
2016-11 some portable phones are sold with spyware sending lots of data to china. 
2016-09 google play (a component of android) tracks the users' movements without their permission. 
even if you disable google maps and location tracking, you must disable google play itself to completely stop the tracking. 
this is yet another example of nonfree software pretending to obey the user, when it's actually doing something else. 
such a thing would be almost unthinkable with free software. 
2015-07 samsung phones come with apps that users can't delete, and they send so much data that their transmission is a substantial expense for users. 
said transmission, not wanted or requested by the user, clearly must constitute spying of some kind. 
2014-03 samsung's back door provides access to any file on the system. 
2013-08 spyware in android phones (and windows? 
laptops): the wall street journal (in an article blocked from us by a paywall) reports that the fbi can remotely activate the gps and microphone in android phones and laptops (presumably windows laptops). 
here is more info. 
2013-07 spyware is present in some android devices when they are sold. 
some motorola phones, made when this company was owned by google, use a modified version of android that sends personal data to motorola. 
2013-07 a motorola phone listens for voice all the time. 
2013-02 google play intentionally sends app developers the personal details of users that install the app. 
merely asking the "consent" of users is not enough to legitimize actions like this. 
at this point, most users have stopped reading the "terms and conditions" that spell out what they are "consenting" to. 
google should clearly and honestly identify the information it collects on users, instead of hiding it in an obscurely worded eula. 
however, to truly protect people's privacy, we must prevent google and other companies from getting this personal information in the first place! 
2011-11 some manufacturers add a hidden general surveillance package such as carrier iq. 
e-readers. 
(#spywareinelectronicreaders) 2016-03 e-books can contain javascript code, and sometimes this code snoops on readers. 
2014-10 adobe made "digital editions," the e-reader used by most us libraries, send lots of data to adobe. 
adobe's "excuse": it's needed to check drm! 
2012-12 spyware in many e-readers—not only the kindle: they report even which page the user reads at what time. 
spyware in applications. 
(#spywareinapplications) 2023-06 edge sends the urls of images the user views to microsoft's servers by default, supposedly to "enhance" them. 
and these images may end up on the nsa's servers. 
microsoft claims its nonfree browser sends the urls without identifying you, which cannot be true, since at least your ip address is known to the server if you don't take extra measures. 
either way, such enhancer service is unjust because any image editing should be done on your own computer using installed free software. 
the article describes how to disable sending the urls. 
that makes a change for the better, but we suggest that you instead switch to a freedom-respecting browser with additional privacy features such as icecat. 
2023-05 some employers are forcing employees to run "monitoring software" on their computers. 
these extremely intrusive proprietary programs can take screenshots at regular intervals, log keystrokes, record audio and video, etc. 
such practices have been shown to deteriorate employees' well-being, and trade unions in the european union have voiced their concerns about them. 
the requirement for employee's consent, which exists in some countries, is a sham because most often the employee is not free to refuse. 
in short, these practices should be abolished. 
2022-05 a worldwide investigation found that most of the applications that school districts recommended for remote education during the covid-19 pandemic track and collect personal data from children as young as below the age of five. 
these applications, and their websites, send the collected information to ad giants such as facebook and google, and they are still being used in the classrooms even after some of the schools reopened. 
2018-05 the verify browser extension by storyful spies on the reporters that use it. 
desktop apps. 
(#spywareindesktopapps) 2020-11 microsoft's office 365 suite enables employers to snoop on each employee. 
after a public outburst, microsoft stated that it would remove this capability. 
let's hope so. 
2019-12 some avast and avg extensions for firefox and chrome were found to snoop on users' detailed browsing habits. 
mozilla and google removed the problematic extensions from their stores, but this shows once more how unsafe nonfree software can be. 
tools that are supposed to protect a proprietary system are, instead, infecting it with additional malware (the system itself being the original malware). 
2019-04 as of april 2019, it is no longer possible to disable an unscrupulous tracking anti-feature that reports users when they follow ping links in apple safari, google chrome, opera, microsoft edge and also in the upcoming microsoft edge that is going to be based on chromium. 
2018-11 foundry's graphics software reports information to identify who is running it. 
the result is often a legal threat demanding a lot of money. 
the fact that this is used for repression of forbidden sharing makes it even more vicious. 
this illustrates that making unauthorized copies of nonfree software is not a cure for the injustice of nonfree software. 
it may avoid paying for the nasty thing, but cannot make it less nasty. 
mobile apps. 
(#spywareinmobileapps) 2023-04 the pinduoduo app snoops on other apps, and takes control of them. 
it also installs additional malware that is hard to remove. 
2022-06 canada has fined the company tim hortons for making an app that tracks people's movements to learn things such as where they live, where they work, and when they visit competitors' stores. 
2022-04 new amazon worker chat app would ban specific words amazon doesn't like, such as "union", "restrooms", and "pay raise". 
if the app was free, workers could modify the program so it acts as they wish, not how amazon wants it. 
2022-03 the nonfree app "along," developed by a company controlled by zuckerberg, leads students to reveal to their teacher personal information about themselves and their families. 
conversations are recorded and the collected data sent to the company, which grants itself the right to sell it. 
see also educational malware app "along". 
2022-01 the data broker x-mode bought location data about 20,000 people collected by around 100 different malicious apps. 
2021-11 a building in la, with a supermarket in it, demands customers load a particular app to pay for parking in the parking lot, and accept pervasive surveillance. 
they also have the option of entering their license plate numbers in a kiosk. 
that is an injustice, too. 
2021-06 tiktok apps collect biometric identifiers and biometric information from users' smartphones. 
the company behind it does whatever it wants and collects whatever data it can. 
2021-04 the weddingwire app saves people's wedding photos forever and hands over data to others, giving users no control over their personal information/data. 
the app also sometimes shows old photos and memories to users, without giving them any control over this either. 
2021-02 many cr…apps, developed by various companies for various organizations, do location tracking unknown to those companies and those organizations. 
it's actually some widely used libraries that do the tracking. 
what's unusual here is that proprietary software developer a tricks proprietary software developers b1 … b50 into making platforms for a to mistreat the end user. 
2020-03 the apple ios version of zoom is sending users' data to facebook even if the user doesn't have a facebook account. 
according to the article, zoom and facebook don't even mention this surveillance on their privacy policy page, making this an obvious violation of people's privacy even in their own terms. 
2020-03 the alipay health code app estimates whether the user has covid-19 and tells the cops directly. 
2020-01 the amazon ring app does surveillance for other companies as well as for amazon. 
2019-12 the totoc messaging app seems to be a spying tool for the government of the united arab emirates. 
any nonfree program could be doing this, and that is a good reason to use free software instead. 
note: this article uses the word "free" in the sense of "gratis."
 2019-12 imonsters and android phones, when used for work, give employers powerful snooping and sabotage capabilities if they install their own software on the device. 
many employers demand to do this. 
for the employee, this is simply nonfree software, as fundamentally unjust and as dangerous as any other nonfree software. 
2019-10 the chinese communist party's "study the great nation" app requires users to grant it access to the phone's microphone, photos, text messages, contacts, and internet history, and the android version was found to contain a back-door allowing developers to run any code they wish in the users' phone, as "superusers."
 downloading and using this app is mandatory at some workplaces. 
note: the washington post version of the article (partly obfuscated, but readable after copy-pasting in a text editor) includes a clarification saying that the tests were only performed on the android version of the app, and that, according to apple, "this kind of "superuser" surveillance could not be conducted on apple's operating system."
 2019-09 the facebook app tracks users even when it is turned off, after tricking them into giving the app broad permissions in order to use one of its functionalities. 
2019-09 some nonfree period-tracking apps including mia fem and maya send intimate details of users' lives to facebook. 
2019-09 keeping track of who downloads a proprietary program is a form of surveillance. 
there is a proprietary program for adjusting a certain telescopic rifle sight. 
a us prosecutor has demanded the list of all the 10,000 or more people who have installed it. 
with a free program there would not be a list of who has installed it. 
2019-07 many unscrupulous mobile-app developers keep finding ways to bypass user's settings, regulations, and privacy-enhancing features of the operating system, in order to gather as much private data as they possibly can. 
thus, we can't trust rules against spying. 
what we can trust is having control over the software we run. 
2019-07 many android apps can track users' movements even when the user says not to allow them access to locations. 
this involves an apparently unintentional weakness in android, exploited intentionally by malicious apps. 
2019-05 the femm "fertility" app is secretly a tool for propaganda by natalist christians. 
it spreads distrust for contraception. 
it snoops on users, too, as you must expect from nonfree programs. 
2019-05 blizzcon 2019 imposed a requirement to run a proprietary phone app to be allowed into the event. 
this app is a spyware that can snoop on a lot of sensitive data, including user's location and contact list, and has near-complete control over the phone. 
2019-04 data collected by menstrual and pregnancy monitoring apps is often available to employers and insurance companies. 
even though the data is "anonymized and aggregated," it can easily be traced back to the woman who uses the app. 
this has harmful implications for women's rights to equal employment and freedom to make their own pregnancy choices. 
don't use these apps, even if someone offers you a reward to do so. 
a free-software app that does more or less the same thing without spying on you is available from f-droid, and a new one is being developed. 
2019-04 google tracks the movements of android phones and iphones running google apps, and sometimes saves the data for years. 
nonfree software in the phone has to be responsible for sending the location data to google. 
2019-03 many android phones come with a huge number of preinstalled nonfree apps that have access to sensitive data without users' knowledge. 
these hidden apps may either call home with the data, or pass it on to user-installed apps that have access to the network but no direct access to the data. 
this results in massive surveillance on which the user has absolutely no control. 
2019-03 the moviepass dis-service is planning to use face recognition to track people's eyes to make sure they won't put their phones down or look away during ads—and trackers. 
2019-03 a study of 24 "health" apps found that 19 of them send sensitive personal data to third parties, which can use it for invasive advertising or discriminating against people in poor medical condition. 
whenever user "consent" is sought, it is buried in lengthy terms of service that are difficult to understand. 
in any case, "consent" is not sufficient to legitimize snooping. 
2019-02 facebook offered a convenient proprietary library for building mobile apps, which also sent personal data to facebook. 
lots of companies built apps that way and released them, apparently not realizing that all the personal data they collected would go to facebook as well. 
it shows that no one can trust a nonfree program, not even the developers of other nonfree programs. 
2019-02 the appcensus database gives information on how android apps use and misuse users' personal data. 
as of march 2019, nearly 78,000 have been analyzed, of which 24,000 (31%) transmit the advertising id to other companies, and 18,000 (23% of the total) link this id to hardware identifiers, so that users cannot escape tracking by resetting it. 
collecting hardware identifiers is in apparent violation of google's policies. 
but it seems that google wasn't aware of it, and, once informed, was in no hurry to take action. 
this proves that the policies of a development platform are ineffective at preventing nonfree software developers from including malware in their programs. 
2019-02 many nonfree apps have a surveillance feature for recording all the users' actions in interacting with the app. 
2019-02 twenty nine "beauty camera" apps that used to be on google play had one or more malicious functionalities, such as stealing users' photos instead of "beautifying" them, pushing unwanted and often malicious ads on users, and redirecting them to phishing sites that stole their credentials. 
furthermore, the user interface of most of them was designed to make uninstallation difficult. 
users should of course uninstall these dangerous apps if they haven't yet, but they should also stay away from nonfree apps in general. 
all nonfree apps carry a potential risk because there is no easy way of knowing what they really do. 
2019-02 an investigation of the 150 most popular gratis vpn apps in google play found that 25% fail to protect their users' privacy due to dns leaks. 
in addition, 85% feature intrusive permissions or functions in their source code—often used for invasive advertising—that could potentially also be used to spy on users. 
other technical flaws were found as well. 
moreover, a previous investigation had found that half of the top 10 gratis vpn apps have lousy privacy policies. 
(it is unfortunate that these articles talk about "free apps."
 these apps are gratis, but they are not free software.) 2019-01 the weather channel app stored users' locations to the company's server. 
the company is being sued, demanding that it notify the users of what it will do with the data. 
we think that lawsuit is about a side issue. 
what the company does with the data is a secondary issue. 
the principal wrong here is that the company gets that data at all. 
other weather apps, including accuweather and weatherbug, are tracking people's locations. 
2018-12 around 40% of gratis android apps report on the user's actions to facebook. 
often they send the machine's "advertising id," so that facebook can correlate the data it obtains from the same machine via various apps. 
some of them send facebook detailed information about the user's activities in the app; others only say that the user is using that app, but that alone is often quite informative. 
this spying occurs regardless of whether the user has a facebook account. 
2018-10 some android apps track the phones of users that have deleted them. 
2018-08 some google apps on android record the user's location even when users disable "location tracking". 
there are other ways to turn off the other kinds of location tracking, but most users will be tricked by the misleading control. 
2018-06 the spanish football streaming app tracks the user's movements and listens through the microphone. 
this makes them act as spies for licensing enforcement. 
we expect it implements drm, too—that there is no way to save a recording. 
but we can't be sure from the article. 
if you learn to care much less about sports, you will benefit in many ways. 
this is one more. 
2018-04 more than 50% of the 5,855 android apps studied by researchers were found to snoop and collect information about its users. 
40% of the apps were found to insecurely snitch on its users. 
furthermore, they could detect only some methods of snooping, in these proprietary apps whose source code they cannot look at. 
the other apps might be snooping in other ways. 
this is evidence that proprietary apps generally work against their users. 
to protect their privacy and freedom, android users need to get rid of the proprietary software—both proprietary android by switching to replicant, and the proprietary apps by getting apps from the free software only f-droid store that prominently warns the user if an app contains anti-features. 
2018-04 grindr collects information about which users are hiv-positive, then provides the information to companies. 
grindr should not have so much information about its users. 
it could be designed so that users communicate such info to each other but not to the server's database. 
2018-03 the moviepass app and dis-service spy on users even more than users expected. 
it records where they travel before and after going to a movie. 
don't be tracked—pay cash! 
2018-02 spotify app harvests users' data to personally identify and know people through music, their mood, mindset, activities, and tastes. 
there are over 150 billion events logged daily on the program which contains users' data and personal information. 
2017-11 tracking software in popular android apps is pervasive and sometimes very clever. 
some trackers can follow a user's movements around a physical store by noticing wifi networks. 
2017-09 instagram is forcing users to give away their phone numbers and won't let people continue using the app if they refuse. 
2017-08 the sarahah app uploads all phone numbers and email addresses in user's address book to developer's server. 
(note that this article misuses the words "free software" referring to zero price.) 2017-07 20 dishonest android apps recorded phone calls and sent them and text messages and emails to snoopers. 
google did not intend to make these apps spy; on the contrary, it worked in various ways to prevent that, and deleted these apps after discovering what they did. 
so we cannot blame google specifically for the snooping of these apps. 
on the other hand, google redistributes nonfree android apps, and therefore shares in the responsibility for the injustice of their being nonfree. 
it also distributes its own nonfree apps, such as google play, which are malicious. 
could google have done a better job of preventing apps from cheating? 
there is no systematic way for google, or android users, to inspect executable proprietary apps to see what they do. 
google could demand the source code for these apps, and study the source code somehow to determine whether they mistreat users in various ways. 
if it did a good job of this, it could more or less prevent such snooping, except when the app developers are clever enough to outsmart the checking. 
but since google itself develops malicious apps, we cannot trust google to protect us. 
we must demand release of source code to the public, so we can depend on each other. 
2017-05 apps for bart snoop on users. 
with free software apps, users could make sure that they don't snoop. 
with proprietary apps, one can only hope that they don't. 
2017-05 a study found 234 android apps that track users by listening to ultrasound from beacons placed in stores or played by tv programs. 
2017-04 faceapp appears to do lots of surveillance, judging by how much access it demands to personal data in the device. 
2017-04 users are suing bose for distributing a spyware app for its headphones. 
specifically, the app would record the names of the audio files users listen to along with the headphone's unique serial number. 
the suit accuses that this was done without the users' consent. 
if the fine print of the app said that users gave consent for this, would that make it acceptable? 
no way! 
it should be flat out illegal to design the app to snoop at all. 
2017-04 pairs of android apps can collude to transmit users' personal data to servers. 
a study found tens of thousands of pairs that collude. 
2017-03 verizon announced an opt-in proprietary search app that it will pre-install on some of its phones. 
the app will give verizon the same information about the users' searches that google normally gets when they use its search engine. 
currently, the app is being pre-installed on only one phone, and the user must explicitly opt-in before the app takes effect. 
however, the app remains spyware—an "optional" piece of spyware is still spyware. 
2017-01 the meitu photo-editing app sends user data to a chinese company. 
2016-11 the uber app tracks clients' movements before and after the ride. 
this example illustrates how "getting the user's consent" for surveillance is inadequate as a protection against massive surveillance. 
2016-11 a research paper that investigated the privacy and security of 283 android vpn apps concluded that "in spite of the promises for privacy, security, and anonymity given by the majority of vpn apps—millions of users may be unawarely subject to poor security guarantees and abusive practices inflicted by vpn apps."
 following is a non-exhaustive list, taken from the research paper, of some proprietary vpn apps that track users and infringe their privacy: surfeasy includes tracking libraries such as nativex and appflood, meant to track users and show them targeted ads. 
sfly network booster requests the read_sms and send_sms permissions upon installation, meaning it has full access to users' text messages. 
droidvpn and tigervpn requests the read_logs permission to read logs for other apps and also core system logs. 
tigervpn developers have confirmed this. 
hidemyass sends traffic to linkedin. 
also, it stores detailed logs and may turn them over to the uk government if requested. 
vpn services hotspotshield injects javascript code into the html pages returned to the users. 
the stated purpose of the js injection is to display ads. 
uses roughly five tracking libraries. 
also, it redirects the user's traffic through valueclick.com (an advertising website). 
wifi protector vpn injects javascript code into html pages, and also uses roughly five tracking libraries. 
developers of this app have confirmed that the non-premium version of the app does javascript injection for tracking the user and displaying ads. 
2016-09 google's new voice messaging app logs all conversations. 
2016-06 facebook's new magic photo app scans your mobile phone's photo collections for known faces, and suggests you circulate the picture you take according to who is in the frame. 
this spyware feature seems to require online access to some known-faces database, which means the pictures are likely to be sent across the wire to facebook's servers and face-recognition algorithms. 
if so, none of facebook users' pictures are private anymore, even if the user didn't "upload" them to the service. 
2016-05 facebook's app listens all the time, to snoop on what people are listening to or watching. 
in addition, it may be analyzing people's conversations to serve them with targeted advertisements. 
2016-04 a pregnancy test controller application not only can spy on many sorts of data in the phone, and in server accounts, it can alter them too. 
2016-01 apps that include symphony surveillance software snoop on what radio and tv programs are playing nearby. 
also on what users post on various sites such as facebook, google+ and twitter. 
2015-11 "cryptic communication," unrelated to the app's functionality, was found in the 500 most popular gratis android apps. 
the article should not have described these apps as "free"—they are not free software. 
the clear way to say "zero price" is "gratis."
 the article takes for granted that the usual analytics tools are legitimate, but is that valid? 
software developers have no right to analyze what users are doing or how. 
"analytics" tools that snoop are just as wrong as any other snooping. 
2015-10 more than 73% and 47% of mobile applications, for android and ios respectively hand over personal, behavioral and location information of their users to third parties. 
2015-08 like most "music screaming" disservices, spotify is based on proprietary malware (drm and snooping). 
in august 2015 it demanded users submit to increased snooping, and some are starting to realize that it is nasty. 
this article shows the twisted ways that they present snooping as a way to "serve" users better—never mind whether they want that. 
this is a typical example of the attitude of the proprietary software industry towards those they have subjugated. 
out, out, damned spotify! 
2015-07 many retail businesses publish cr…apps that ask to spy on the user's own data—often many kinds. 
those companies know that snoop-phone usage trains people to say yes to almost any snooping. 
2015-06 a study in 2015 found that 90% of the top-ranked gratis proprietary android apps contained recognizable tracking libraries. 
for the paid proprietary apps, it was only 60%. 
the article confusingly describes gratis apps as "free", but most of them are not in fact free software. 
it also uses the ugly word "monetize". 
a good replacement for that word is "exploit"; nearly always that will fit perfectly. 
2015-05 gratis android apps (but not free software) connect to 100 tracking and advertising urls, on the average. 
2015-04 widely used proprietary qr-code scanner apps snoop on the user. 
this is in addition to the snooping done by the phone company, and perhaps by the os in the phone. 
don't be distracted by the question of whether the app developers get users to say "i agree". 
that is no excuse for malware. 
2014-11 many proprietary apps for mobile devices report which other apps the user has installed. 
twitter is doing this in a way that at least is visible and optional. 
not as bad as what the others do. 
2014-01 the simeji keyboard is a smartphone version of baidu's spying ime. 
2013-12 the nonfree snapchat app's principal purpose is to restrict the use of data on the user's computer, but it does surveillance too: it tries to get the user's list of other people's phone numbers. 
2013-12 the brightest flashlight app sends user data, including geolocation, for use by companies. 
the ftc criticized this app because it asked the user to approve sending personal data to the app developer but did not ask about sending it to other companies. 
this shows the weakness of the reject-it-if-you-dislike-snooping "solution" to surveillance: why should a flashlight app send any information to anyone? 
a free software flashlight app would not. 
2012-12 ftc says most mobile apps for children don't respect privacy: https://arstechnica.com/information-technology/2012/12/ftc-disclosures-severely-lacking-in-kids-mobile-appsand-its-getting-worse/. 
skype. 
(#spywareinskype) 2019-08 skype refuses to say whether it can eavesdrop on calls. 
that almost certainly means it can do so. 
2013-07 skype contains spyware. 
microsoft changed skype specifically for spying. 
games. 
(#spywareingames) 2020-10 microsoft is imposing its surveillance on the game of minecraft by requiring every player to open an account on microsoft's network. 
microsoft has bought the game and will merge all accounts into its network, which will give them access to people's data. 
minecraft players can play minetest instead. 
the essential advantage of minetest is that it is free software, meaning it respects the user's computer freedom. 
as a bonus, it offers more options. 
2019-08 microsoft recorded users of xboxes and had human workers listen to the recordings. 
morally, we see no difference between having human workers listen and having speech-recognition systems listen. 
both intrude on privacy. 
2018-06 red shell is a spyware that is found in many proprietary games. 
it tracks data on users' computers and sends it to third parties. 
2018-04 arenanet surreptitiously installed a spyware program along with an update to the massive multiplayer game guild wars 2. the spyware allowed arenanet to snoop on all open processes running on its user's computer. 
2017-11 the driver for a certain gaming keyboard sends information to china. 
2015-12 many video game consoles snoop on their users and report to the internet—even what their users weigh. 
a game console is a computer, and you can't trust a computer with a nonfree operating system. 
2015-09 modern gratis game cr…apps collect a wide range of data about their users and their users' friends and associates. 
even nastier, they do it through ad networks that merge the data collected by various cr…apps and sites made by different companies. 
they use this data to manipulate people to buy things, and hunt for "whales" who can be led to spend a lot of money. 
they also use a back door to manipulate the game play for specific players. 
while the article describes gratis games, games that cost money can use the same tactics. 
2014-01 angry birds spies for companies, and the nsa takes advantage to spy through it too. 
here's information on more spyware apps. 
more about nsa app spying. 
2005-10 blizzard warden is a hidden "cheating-prevention" program that spies on every process running on a gamer's computer and sniffs a good deal of personal data, including lots of activities which have nothing to do with cheating. 
spyware in connected equipment. 
(#spywareinequipment) 2021-01 most internet connected devices in mozilla's "privacy not included" list are designed to snoop on users even if they meet mozilla's "minimum security standards."
 insecure design of the program running on some of these devices makes the user susceptible to be snooped on and exploited by crackers as well. 
2017-08 the bad security in many internet of stings devices allows isps to snoop on the people that use them. 
don't be a sucker—reject all the stings. 
(it is unfortunate that the article uses the term "monetize".) tv sets. 
(#spywareintvsets) emo phillips made a joke: the other day a woman came up to me and said, "didn't i see you on television?"
 i said, "i don't know. 
you can't see out the other way."
 evidently that was before amazon "smart" tvs. 
2022-04 today's "smart" tvs push people to surrender to tracking via internet. 
some won't work unless they have a chance to download nonfree software. 
and they are designed for programmed obsolescence. 
2022-01 "smart" tv manufacturers spy on people using various methods, and harvest their data. 
they are collecting audio, video, and tv usage data to profile people. 
2020-10 tv manufacturers are turning to produce only "smart" tv sets (which include spyware) that it's now very hard to find a tv that doesn't spy on you. 
it appears that those manufacturers business model is not to produce tv and sell them for money, but to collect your personal data and (possibly) hand over them to others for benefit. 
2020-06 tv manufacturers are able to snoop every second of what the user is watching. 
this is illegal due to the video privacy protection act of 1988, but they're circumventing it through eulas. 
2019-01 vizio tvs collect "whatever the tv sees," in the own words of the company's cto, and this data is sold to third parties. 
this is in return for "better service" (meaning more intrusive ads?) and slightly lower retail prices. 
what is supposed to make this spying acceptable, according to him, is that it is opt-in in newer models. 
but since the vizio software is nonfree, we don't know what is actually happening behind the scenes, and there is no guarantee that all future updates will leave the settings unchanged. 
if you already own a vizio "smart" tv (or any "smart" tv, for that matter), the easiest way to make sure it isn't spying on you is to disconnect it from the internet, and use a terrestrial antenna instead. 
unfortunately, this is not always possible. 
another option, if you are technically oriented, is to get your own router (which can be an old computer running completely free software), and set up a firewall to block connections to vizio's servers. 
or, as a last resort, you can replace your tv with another model. 
2018-04 some "smart" tvs automatically load downgrades that install a surveillance app. 
we link to the article for the facts it presents. 
it is too bad that the article finishes by advocating the moral weakness of surrendering to netflix. 
the netflix app is malware too. 
2017-02 vizio "smart" tvs report everything that is viewed on them, and not just broadcasts and cable. 
even if the image is coming from the user's own computer, the tv reports what it is. 
the existence of a way to disable the surveillance, even if it were not hidden as it was in these tvs, does not legitimize the surveillance. 
2015-11 some web and tv advertisements play inaudible sounds to be picked up by proprietary malware running on other devices in range so as to determine that they are nearby. 
once your internet devices are paired with your tv, advertisers can correlate ads with web activity, and other cross-device tracking. 
2015-11 vizio goes a step further than other tv manufacturers in spying on their users: their "smart" tvs analyze your viewing habits in detail and link them your ip address so that advertisers can track you across devices. 
it is possible to turn this off, but having it enabled by default is an injustice already. 
2015-11 tivo's alliance with viacom adds 2.3 million households to the 600 millions social media profiles the company already monitors. 
tivo customers are unaware they're being watched by advertisers. 
by combining tv viewing information with online social media participation, tivo can now correlate tv advertisement with online purchases, exposing all users to new combined surveillance by default. 
2015-07 vizio "smart" tvs recognize and track what people are watching, even if it isn't a tv channel. 
2015-05 verizon cable tv snoops on what programs people watch, and even what they wanted to record. 
2015-04 vizio used a firmware "upgrade" to make its tvs snoop on what users watch. 
the tvs did not do that when first sold. 
2015-02 the samsung "smart" tv transmits users' voice on the internet to another company, nuance. 
nuance can save it and would then have to give it to the us or some other government. 
speech recognition is not to be trusted unless it is done by free software in your own computer. 
in its privacy policy, samsung explicitly confirms that voice data containing sensitive information will be transmitted to third parties. 
2014-11 the amazon "smart" tv is snooping all the time. 
2014-09 more or less all "smart" tvs spy on their users. 
the report was as of 2014, but we don't expect this has got better. 
this shows that laws requiring products to get users' formal consent before collecting personal data are totally inadequate. 
and what happens if a user declines consent? 
probably the tv will say, "without your consent to tracking, the tv will not work."
 proper laws would say that tvs are not allowed to report what the user watches—no exceptions! 
2014-05 lg disabled network features on previously purchased "smart" tvs, unless the purchasers agreed to let lg begin to snoop on them and distribute their personal data. 
2014-05 spyware in lg "smart" tvs reports what the user watches, and the switch to turn this off has no effect. 
(the fact that the transmission reports a 404 error really means nothing; the server could save that data anyway.) even worse, it snoops on other devices on the user's local network. 
lg later said it had installed a patch to stop this, but any product could spy this way. 
meanwhile, lg tvs do lots of spying anyway. 
2013-11 spyware in lg "smart" tvs reports what the user watches, and the switch to turn this off has no effect. 
(the fact that the transmission reports a 404 error really means nothing; the server could save that data anyway.) even worse, it snoops on other devices on the user's local network. 
lg later said it had installed a patch to stop this, but any product could spy this way. 
2012-12 crackers found a way to break security on a "smart" tv and use its camera to watch the people who are watching tv. 
cameras. 
(#spywareincameras) 2023-07 driverless cars in san francisco collect videos constantly, using cameras inside and outside, and governments have already collected those videos secretly. 
as the surveillance technology oversight project says, they are "driving us straight into authoritarianism."
 we must regulate all cameras that collect images that can be used to track people, to make sure they are not used for that. 
2019-02 the ring doorbell camera is designed so that the manufacturer (now amazon) can watch all the time. 
now it turns out that anyone else can also watch, and fake videos too. 
the third party vulnerability is presumably unintentional and amazon will probably fix it. 
however, we do not expect amazon to change the design that allows amazon to watch. 
2019-01 amazon ring "security" devices send the video they capture to amazon servers, which save it long-term. 
in many cases, the video shows everyone that comes near, or merely passes by, the user's front door. 
the article focuses on how ring used to let individual employees look at the videos freely. 
it appears amazon has tried to prevent that secondary abuse, but the primary abuse—that amazon gets the video—amazon expects society to surrender to. 
2018-10 nearly all "home security cameras" give the manufacturer an unencrypted copy of everything they see. 
"home insecurity camera" would be a better name! 
when consumer reports tested them, it suggested that these manufacturers promise not to look at what's in the videos. 
that's not security for your home. 
security means making sure they don't get to see through your camera. 
2017-10 every "home security" camera, if its manufacturer can communicate with it, is a surveillance device. 
canary camera is an example. 
the article describes wrongdoing by the manufacturer, based on the fact that the device is tethered to a server. 
more about proprietary tethering. 
but it also demonstrates that the device gives the company surveillance capability. 
2016-03 over 70 brands of network-connected surveillance cameras have security bugs that allow anyone to watch through them. 
2015-11 the nest cam "smart" camera is always watching, even when the "owner" switches it "off."
 a "smart" device means the manufacturer is using it to outsmart you. 
toys. 
(#spywareintoys) 2017-11 the furby connect has a universal back door. 
if the product as shipped doesn't act as a listening device, remote changes to the code could surely convert it into one. 
2017-11 a remote-control sex toy was found to make audio recordings of the conversation between two users. 
2017-03 a computerized vibrator was snooping on its users through the proprietary control app. 
the app was reporting the temperature of the vibrator minute by minute (thus, indirectly, whether it was surrounded by a person's body), as well as the vibration frequency. 
note the totally inadequate proposed response: a labeling standard with which manufacturers would make statements about their products, rather than free software which users could have checked and changed. 
the company that made the vibrator was sued for collecting lots of personal information about how people used it. 
the company's statement that it was anonymizing the data may be true, but it doesn't really matter. 
if it had sold the data to a data broker, the data broker would have been able to figure out who the user was. 
following this lawsuit, the company has been ordered to pay a total of c$4m to its customers. 
2017-02 "cloudpets" toys with microphones leak childrens' conversations to the manufacturer. 
guess what? 
crackers found a way to access the data collected by the manufacturer's snooping. 
that the manufacturer and the fbi could listen to these conversations was unacceptable by itself. 
2016-12 the "smart" toys my friend cayla and i-que can be remotely controlled with a mobile phone; physical access is not necessary. 
this would enable crackers to listen in on a child's conversations, and even speak into the toys themselves. 
this means a burglar could speak into the toys and ask the child to unlock the front door while mommy's not looking. 
2016-12 the "smart" toys my friend cayla and i-que transmit children's conversations to nuance communications, a speech recognition company based in the u.s. 
those toys also contain major security vulnerabilities; crackers can remotely control the toys with a mobile phone. 
this would enable crackers to listen in on a child's speech, and even speak into the toys themselves. 
2015-02 barbie is going to spy on children and adults. 
drones. 
(#spywareindrones) 2017-08 while you're using a dji drone to snoop on other people, dji is in many cases snooping on you. 
other appliances.(#spywareathome) 2020-09 many employers are using nonfree software, including videoconference software, to surveil and monitor staff working at home. 
if the program reports whether you are "active," that is in effect a malicious surveillance feature. 
2020-08 google nest is taking over adt. 
google sent out a software update to its speaker devices using their back door that listens for things like smoke alarms and then notifies your phone that an alarm is happening. 
this means the devices now listen for more than just their wake words. 
google says the software update was sent out prematurely and on accident and google was planning on disclosing this new feature and offering it to customers who pay for it. 
2020-06 "bossware" is malware that bosses coerce workers into installing in their own computers, so the bosses can spy on them. 
this shows why requiring the user's "consent" is not an adequate basis for protecting digital privacy. 
the boss can coerce most workers into consenting to almost anything, even probable exposure to contagious disease that can be fatal. 
software like this should be illegal and bosses that demand it should be prosecuted for it. 
2019-07 google "assistant" records users' conversations even when it is not supposed to listen. 
thus, when one of google's subcontractors discloses a thousand confidential voice recordings, users were easily identified from these recordings. 
since google "assistant" uses proprietary software, there is no way to see or control what it records or sends. 
rather than trying to better control the use of recordings, google should not record or listen to the person's voice. 
it should only get commands that the user wants to send to some google service. 
2019-05 amazon alexa collects a lot more information from users than is necessary for correct functioning (time, location, recordings made without a legitimate prompt), and sends it to amazon's servers, which store it indefinitely. 
even worse, amazon forwards it to third-party companies. 
thus, even if users request deletion of their data from amazon's servers, the data remain on other servers, where they can be accessed by advertising companies and government agencies. 
in other words, deleting the collected information doesn't cancel the wrong of collecting it. 
data collected by devices such as the nest thermostat, the philips hue-connected lights, the chamberlain myq garage opener and the sonos speakers are likewise stored longer than necessary on the servers the devices are tethered to. 
moreover, they are made available to alexa. 
as a result, amazon has a very precise picture of users' life at home, not only in the present, but in the past (and, who knows, in the future too?) 2019-04 some of users' commands to the alexa service are recorded for amazon employees to listen to. 
the google and apple voice assistants do similar things. 
a fraction of the alexa service staff even has access to location and other personal data. 
since the client program is nonfree, and data processing is done "in the cloud" (a soothing way of saying "we won't tell you how and where it's done"), users have no way to know what happens to the recordings unless human eavesdroppers break their non-disclosure agreements. 
2019-02 the hp "ink subscription" cartridges have drm that constantly communicates with hp servers to make sure the user is still paying for the subscription, and hasn't printed more pages than were paid for. 
even though the ink subscription program may be cheaper in some specific cases, it spies on users, and involves totally unacceptable restrictions in the use of ink cartridges that would otherwise be in working order. 
2018-08 crackers found a way to break the security of an amazon device, and turn it into a listening device for them. 
it was very difficult for them to do this. 
the job would be much easier for amazon. 
and if some government such as china or the us told amazon to do this, or cease to sell the product in that country, do you think amazon would have the moral fiber to say no? 
(these crackers are probably hackers too, but please don't use "hacking" to mean "breaking security".) 2018-04 a medical insurance company offers a gratis electronic toothbrush that snoops on its user by sending usage data back over the internet. 
2017-08 sonos told all its customers, "agree" to snooping or the product will stop working. 
another article says they won't forcibly change the software, but people won't be able to get any upgrades and eventually it will stop working. 
2017-06 lots of "smart" products are designed to listen to everyone in the house, all the time. 
today's technological practice does not include any way of making a device that can obey your voice commands without potentially spying on you. 
even if it is air-gapped, it could be saving up records about you for later examination. 
2014-07 nest thermometers send a lot of data about the user. 
2013-10 rent-to-own computers were programmed to spy on their renters. 
wearables. 
(#spywareonwearables) 2018-07 tommy hilfiger clothing will monitor how often people wear it. 
this will teach the sheeple to find it normal that companies monitor every aspect of what they do. 
"smart" watches. 
2020-09 internet-enabled watches with proprietary software are malware, violating people (specially children's) privacy. 
in addition, they have a lot of security flaws. 
they permit security breakers (and unauthorized people) to access the watch. 
thus, ill-intentioned unauthorized people can intercept communications between parent and child and spoof messages to and from the watch, possibly endangering the child. 
(note that this article misuses the word "hackers" to mean "crackers."
) 2016-03 a very cheap "smart watch" comes with an android app that connects to an unidentified site in china. 
the article says this is a back door, but that could be a misunderstanding. 
however, it is certainly surveillance, at least. 
2014-07 an lg "smart" watch is designed to report its location to someone else and to transmit conversations too. 
vehicles. 
(#spywareinvehicles) 2023-04 tesla cars record videos of activity inside the car, and company staff can watch those recordings and copy them. 
or at least they were able to do so until last year. 
tesla may have changed some security functions so that this is harder to do. 
but if tesla can get those recordings, that is because it is planning for some people to use them in some situation, and that is unjust already. 
it should be illegal to make a car that takes photos or videos of the people in the car—or of people outside the car. 
2023-04 gm is switching to a new audio/video system in its cars in order to collect complete information about what people in the car watch or listen to, and also how they drive. 
the new system for navigation and "driving assistance" will be tethered to various online dis-services, and gm will snoop on everything the users do with them. 
but don't feel bad about that, because some of these subscriptions will be gratis for the first 8 years. 
2023-02 volkswagen tracks the location of every driver, and sells that data to third-parties. 
however, it refuses to use the data to implement a feature for the benefit of its customers unless they pay extra money for it. 
this came to attention and brought controversy when volkswagen refused to locate a car-jacked vehicle with a toddler in it because the owner of the car had not subscribed to the relevant service. 
2021-05 ford is planning to force ads on drivers in cars, with the ability for the owner to pay extra to turn them off. 
the system probably imposes surveillance on drivers too. 
2020-08 new toyotas will upload data to aws to help create custom insurance premiums based on driver behaviour. 
before you buy a "connected" car, make sure you can disconnect its cellular antenna and its gps antenna. 
if you want gps navigation, get a separate navigator which runs free software and works with open street map. 
2019-12 most modern cars now record and send various kinds of data to the manufacturer. 
for the user, access to the data is nearly impossible, as it involves cracking the car's computer, which is always hidden and running with proprietary software. 
2019-03 tesla cars collect lots of personal data, and when they go to a junkyard the driver's personal data goes with them. 
2019-02 the fordpass connect feature of some ford vehicles has near-complete access to the internal car network. 
it is constantly connected to the cellular phone network and sends ford a lot of data, including car location. 
this feature operates even when the ignition key is removed, and users report that they can't disable it. 
if you own one of these cars, have you succeeded in breaking the connectivity by disconnecting the cellular modem, or wrapping the antenna in aluminum foil? 
2018-11 in china, it is mandatory for electric cars to be equipped with a terminal that transfers technical data, including car location, to a government-run platform. 
in practice, manufacturers collect this data as part of their own spying, then forward it to the government-run platform. 
2018-10 gm tracked the choices of radio programs in its "connected" cars, minute by minute. 
gm did not get users' consent, but it could have got that easily by sneaking it into the contract that users sign for some digital service or other. 
a requirement for consent is effectively no protection. 
the cars can also collect lots of other data: listening to you, watching you, following your movements, tracking passengers' cell phones. 
all such data collection should be forbidden. 
but if you really want to be safe, we must make sure the car's hardware cannot collect any of that data, or that the software is free so we know it won't collect any of that data. 
2017-11 ai-powered driving apps can track your every move. 
2016-07 computerized cars with nonfree software are snooping devices. 
2016-02 the nissan leaf has a built-in cell phone modem which allows effectively anyone to access its computers remotely and make changes in various settings. 
that's easy to do because the system has no authentication when accessed through the modem. 
however, even if it asked for authentication, you couldn't be confident that nissan has no access. 
the software in the car is proprietary, which means it demands blind faith from its users. 
even if no one connects to the car remotely, the cell phone modem enables the phone company to track the car's movements all the time; it is possible to physically remove the cell phone modem, though. 
2013-06 tesla cars allow the company to extract data remotely and determine the car's location at any time. 
(see section 2, paragraphs b and c of the privacy statement.) the company says it doesn't store this information, but if the state orders it to get the data and hand it over, the state can store it. 
2013-03 proprietary software in cars records information about drivers' movements, which is made available to car manufacturers, insurance companies, and others. 
the case of toll-collection systems, mentioned in this article, is not really a matter of proprietary surveillance. 
these systems are an intolerable invasion of privacy, and should be replaced with anonymous payment systems, but the invasion isn't done by malware. 
the other cases mentioned are done by proprietary malware in the car. 
virtual reality. 
(#spywareinvr) 2020-08 oculus headsets require users to identify themselves to facebook. 
this will give facebook free rein to pervasively snoop on oculus users. 
2016-12 vr equipment, measuring every slight motion, creates the potential for the most intimate surveillance ever. 
all it takes to make this potential real is software as malicious as many other programs listed in this page. 
you can bet facebook will implement the maximum possible surveillance on oculus rift devices. 
the moral is, never trust a vr system with nonfree software in it. 
spyware on the web. 
(#spywareontheweb) in addition, many web sites spy on their visitors. 
web sites are not programs, so it makes no sense to call them "free" or "proprietary", but the surveillance is an abuse all the same. 
2020-09 the markup investigated 80,000 popular web sites and reports on how much they snoop on users. 
almost 70,000 had third-party trackers. 
5,000 fingerprinted the browser to identify users. 
12,000 recorded the user's mouse clicks and movements. 
2019-01 until 2015, any tweet that listed a geographical tag sent the precise gps location to twitter's server. 
it still contains these gps locations. 
2017-01 when a page uses disqus for comments, the proprietary disqus software loads a facebook software package into the browser of every anonymous visitor to the page, and makes the page's url available to facebook. 
2016-12 online sales, with tracking and surveillance of customers, enables businesses to show different people different prices. 
most of the tracking is done by recording interactions with servers, but proprietary software contributes. 
2012-10 many web sites rat their visitors to advertising networks that track users. 
of the top 1000 web sites, 84% (as of 5/17/2012) fed their visitors third-party cookies, allowing other sites to track them. 
2012-08 many web sites report all their visitors to google by using the google analytics service, which tells google the ip address and the page that was visited. 
[2012] many web sites try to collect users' address books (the user's list of other people's phone numbers or email addresses). 
this violates the privacy of those other people. 
2011-10 pages that contain "like" buttons enable facebook to track visitors to those pages—even users that don't have facebook accounts. 
javascript. 
(#spywareinjavascript) 2022-04 the us government sent personal data to facebook for every college student that applied for us government student aid. 
it justified this as being for a "campaign."
 the data included name, phone number and email address. 
this shows the agency didn't even make a handwaving attempt to anonymize the student. 
not that anonymization usually does much good—but the failure to even try shows that the agency was completely blind to the issue of respecting students' privacy. 
2018-11 many web sites use javascript code to snoop on information that users have typed into a form but not sent, in order to learn their identity. 
some are getting sued for this. 
the chat facilities of some customer services use the same sort of malware to read what the user is typing before it is posted. 
2018-07 british airways used nonfree javascript on its web site to give other companies personal data on its customers. 
2017-12 some javascript malware swipes usernames from browser-based password managers. 
2017-11 some websites send javascript code to collect all the user's input, which can then be used to reproduce the whole session. 
if you use librejs, it will block that malicious javascript code. 
flash. 
(#spywareinflash) 2013-10 flash and javascript are used for "fingerprinting" devices to identify users. 
2010-03 flash player's cookie feature helps web sites track visitors. 
chrome. 
(#spywareinchrome) 2021-09 google's proprietary chrome web browser added a surveillance api (idle detection api) which lets websites ask chrome to report when a user with a web page open is idle. 
2019-06 google chrome is an instrument of surveillance. 
it lets thousands of trackers invade users' computers and report the sites they visit to advertising and data companies, first of all to google. 
moreover, if users have a gmail account, chrome automatically logs them in to the browser for more convenient profiling. 
on android, chrome also reports their location to google. 
the best way to escape surveillance is to switch to icecat, a modified version of firefox with several changes to protect users' privacy. 
2017-04 low-priced chromebooks for schools are collecting far more data on students than is necessary, and store it indefinitely. 
parents and students complain about the lack of transparency on the part of both the educational services and the schools, the difficulty of opting out of these services, and the lack of proper privacy policies, among other things. 
but complaining is not sufficient. 
parents, students and teachers should realize that the software google uses to spy on students is nonfree, so they can't verify what it really does. 
the only remedy is to persuade school officials to exclusively use free software for both education and school administration. 
if the school is run locally, parents and teachers can mandate their representatives at the school board to refuse the budget unless the school initiates a switch to free software. 
if education is run nation-wide, they need to persuade legislators (e.g., through free software organizations, political parties, etc.) to migrate the public schools to free software. 
2015-07 google chrome makes it easy for an extension to do total snooping on the user's browsing, and many of them do so. 
2015-06 google chrome includes a module that activates microphones and transmits audio to its servers. 
2013-08 google chrome spies on browser history, affiliations, and other installed software. 
2008-09 google chrome contains a key logger that sends google every url typed in, one key at a time. 
spyware in networks. 
(#spywareinnetworks) 2022-02 honorlock set a network of fake test answer honeypot sites, tempting people to get exam answers, but that is a way to entrap students, so as to identify them and punish them, using nonfree js code to identify them. 
2021-10 edtech companies use their surveillance power to manipulate students, and direct them into tracks towards various levels of knowledge, power and prestige. 
the article argues that these companies should obtain licenses to operate. 
that wouldn't hurt, but it doesn't address the root of the problem. 
all data acquired in a school about any student, teacher, or employee must not leave the school, and must be kept in computers that belong to the school and run free (as in freedom) software. 
that way, the school district and/or parents can control what is done with those data. 
2021-05 60% of school apps are sending student data to potentially high-risk third parties, putting students and possibly all other school workers under surveillance. 
this is made possible by using unsafe and proprietary programs made by data-hungry corporations. 
please note that whether students consent to this or not, doesn't justify the surveillance they're imposed to. 
2021-05 the united states' government is reportedly considering teaming up with private companies to monitor american citizens' private online activity and digital communications. 
what creates the opportunity to try this is the fact that these companies are already snooping on users' private activities. 
that in turn is due to people's use of nonfree software which snoops, and online dis-services which snoop. 
2021-02 google handed over personal data of indian protesters and activists to indian police which led to their arrest. 
the cops requested the ip address and the location where a document was created and with that information, they identified protesters and activists. 
2020-12 the honorlock online exam proctoring program is a surveillance tool that tracks students and collects data such as face, driving license, and network information, among others, in blatant violation of students' privacy. 
preventing students from cheating should not be an excuse for running malware/spyware on their computers, and it's good that students are protesting. 
but their petitions overlook a crucial issue, namely, the injustice of being forced to run nonfree software in order to get an education. 
2020-09 while the world is still struggling with covid-19 coronavirus, many people are in danger of surveillance and their computers are infected with malware as a result of installing proprietary software. 
2020-04 proprietary programs google meet, microsoft teams, and webex are collecting user's personal and identifiable data including how long a call lasts, who's participating in the call, and the ip addresses of everyone taking part. 
from experience, this can even harm users physically if those companies hand over data to governments. 
2019-05 microsoft forces people to give their phone number in order to be able to create an account on the company's network. 
on top of mistreating their users by providing nonfree software, microsoft is tracking their lives outside the computer and violates their privacy. 
2019-02 google invites people to let google monitor their phone use, and all internet use in their homes, for an extravagant payment of $20. 
this is not a malicious functionality of a program with some other purpose; this is the software's sole purpose, and google says so. 
but google says it in a way that encourages most people to ignore the details. 
that, we believe, makes it fitting to list here. 
2018-08 google will track people even if people turn off location history, using google maps, weather updates, and browser searches. 
google basically uses any app activity to track people. 
2018-08 since the beginning of 2017, android phones have been collecting the addresses of nearby cellular towers, even when location services are disabled, and sending that data back to google. 
2016-06 investigation shows gchq using us companies, nsa to route around domestic surveillance restrictions. 
specifically, it can collect the emails of members of parliament this way, because they pass it through microsoft. 
2012-12 the cisco tnp ip phones are spying devices. 
back to top &#9650; proprietary malware. 
by type addictions back doors censorship coercion coverups deception drm fraud incompatibility insecurity interference jails manipulation obsolescence sabotage subscriptions = surveillance = tethers tyrants in the pipe by product appliances cars conferencing edtech games mobiles webpages by company adobe amazon apple google microsoft 
a tyrant is a malicious device that refuses to allow users to install a different operating system or a modified operating system. 
these devices have measures to block execution of anything other than the "approved" system versions. 
we also refer to this practice as tivoization. 
if you know of an example that ought to be in this page but isn't here, please write to <webmasters@gnu.org> to inform us. 
please include the url of a trustworthy reference or two to serve as specific substantiation. 
2022-10 xiaomi provides a tool to unlock the bootloader of xiaomi smartphones and tablets, but this requires creating an account on the company's servers, i.e. 
providing your phone number. 
this is the price you have to pay for "legally" running a free software operating system on xiaomi devices. 
but the manufacturer retains control of the unlocked device through a backdoor in the bootloader—the same backdoor that was remotely used to unlock it. 
2018-02 apple devices lock users in solely to apple services by being designed to be incompatible with all other options, ethical or unethical. 
2016-07 microsoft accidentally left a way for users to install gnu/linux on windows rt tablets, but now it has "fixed" the "error". 
they have the gall to call this "protecting" the users. 
the article talks of installing "linux", but the context shows it is really gnu/linux that users install. 
2014-12 apple arbitrarily blocks users from installing old versions of ios. 
2014-03 intel processors will have tyrant software built in. 
2013-04 motorola, then owned by google, made android phones that are tyrants (though someone found a way to crack the restriction). 
2012-12 samsung "smart" tvs have turned linux into the base for a tyrant system so as to impose drm. 
what enables samsung to do this is that linux is released under gnu gpl version 2, not version 3, together with a weak interpretation of gpl version 2. 2012-10 some lg tvs are tyrants. 
2012-05 the apple ithings are tyrant devices. 
there is a port of android to the ithings, but installing it requires finding a bug or "exploit" to make it possible to install a different system. 
2011-10 mobile devices that come with windows 8 are tyrants. 
2011-05 the playstation 3 is a tyrant. 
back to top &#9650; proprietary malware. 
by type addictions back doors censorship coercion coverups deception drm fraud incompatibility insecurity interference jails manipulation obsolescence sabotage subscriptions surveillance tethers = tyrants = in the pipe by product appliances cars conferencing edtech games mobiles webpages by company adobe amazon apple google microsoft 
help protect the rights to write both nonfree and free software. 
the league for programming freedom is inactive now and its website is archived. 
please join our end software patents campaign! 
the right to write both nonfree and free software is threatened by software patents and by "look-and-feel" interface copyright lawsuits. 
the free software foundation fights these threats in many ways. 
these include support for and being a member of league for programming freedom. 
the league is a grass-roots organization of professors, students, business people, programmers, users, and even software companies dedicated to bringing back the freedom to write programs. 
the league isn't opposed to the legal system that congress intended—copyright on individual programs. 
the league aims to reverse recent changes made by judges in response to special interests. 
the fsf urges you to join us in fighting these threats by helping the league. 
the league is not connected with the free software foundation, and is not concerned with the issue of free software. 
the fsf supports the league because, like any software developer smaller than microsoft, it is endangered by software patents, and interface copyrights. 
you are in danger, too! 
it would be easy to ignore the problem until you or your employer is sued, but it is more prudent to organize before that happens. 
why i will not sign the public domain manifesto. 
stallman the public domain manifesto has its heart in the right place as it objects to some of the unjust extensions of copyright power, so i wish i could support it. 
however, it falls far short of what is needed. 
some flaws are at the level of implicit assumptions. 
the manifesto frequently uses propaganda terms of the copyright industry, such as "copyright protection."
 these terms were chosen to lead people to sympathize with the copyright industry and its demands for power. 
the manifesto and its signatories use the term "intellectual property," which confuses the issue of copyright by lumping it together with a dozen other laws that have nothing significant in common. 
(see "did you say "intellectual property"? 
it's a seductive mirage" for more explanation about this point.) ironically it uses the term first in a sentence which points out that this manifesto is concerned only with copyright law, not with those other laws. 
that is with good reason: the other laws are not relevant to copying and using published works. 
if we seek to teach the public to distinguish between these laws, we should avoid setting an example which spuriously lumps them together. 
general principle 2 repeats the common error that copyright should balance the public interest with "protecting and rewarding the author."
 this error interferes with proper judgment of any copyright policy question, since that should be based on the public interest. 
"misinterpreting copyright—a series of errors" explains this error and how to avoid it. 
it would be difficult to stand aside from a campaign for the right goals merely because it was written with unclear words. 
however, the manifesto falls far short in its specific goals too. 
it is not that i oppose them. 
any one of its demands, individually, would be a step forward, even though the wording of some of them discourages me from signing my name to them. 
rather the problem is that it fails to ask for the most important points. 
i cannot say, "this manifesto is what i stand for."
 i cannot say, "i support what's in this manifesto," unless i can add, equally visibly, "but it fails to mention the most important points of all."
 general principle 5 opposes contracts that restrict use of copies of public domain works. 
but where we most need to oppose such contracts is where they apply to works that are still copyrighted (this is how amazon tries to claim that you don't own the e-book that you bought). 
likewise, general principle 5 condemns drm, but only when it applies to a public domain work. 
in effect, it legitimizes most real drm by omitting it from criticism. 
i've saved the biggest omission for last. 
general recommendation 9 calls for allowing "personal copying" of copyrighted works. 
since it omits the issue of the freedom to share copies of published works with others, it fails to address the nastiest aspect of copyright: the vicious war on sharing that the entertainment companies are now waging. 
the demands and recommendations of the public domain manifesto would be a step forward. 
it may do some good if it inspires people who have accepted the industry position to begin to doubt it. 
however, if we adopt this manifesto as our goal, it will distract us from what we really need to fight for. 
the public domain manifesto tries to defend our freedom within the walled garden of the public domain, but abandons that freedom outside it. 
this is not enough. 
i ask the authors of the public domain manifesto, and the public, to please join me in demanding the freedom to noncommercially share copies of all published works. 
also please join defective by design and help our fight against drm wherever it may be found. 
science must push copyright aside. 
many points that lead to a conclusion that software freedom must be universal often apply to other forms of expressive works, albeit in different ways. 
this essay concerns the application of principles related to software freedom to the area of literature. 
generally, such issues are orthogonal to software freedom, but we include essays like this here since many people interested in free software want to know more about how the principles can be applied to areas other than software. 
it should be a truism that the scientific literature exists to disseminate scientific knowledge, and that scientific journals exist to facilitate the process. 
it therefore follows that rules for use of the scientific literature should be designed to help achieve that goal. 
the rules we have now, known as copyright, were established in the age of the printing press, an inherently centralized method of mass-production copying. 
in a print environment, copyright on journal articles restricted only journal publishers—requiring them to obtain permission to publish an article—and would-be plagiarists. 
it helped journals to operate and disseminate knowledge, without interfering with the useful work of scientists or students, either as writers or readers of articles. 
these rules fit that system well. 
the modern technology for scientific publishing, however, is the world wide web. 
what rules would best ensure the maximum dissemination of scientific articles, and knowledge, on the web? 
articles should be distributed in nonproprietary formats, with open access for all. 
and everyone should have the right to "mirror" articles—that is, to republish them verbatim with proper attribution. 
these rules should apply to past as well as future articles, when they are distributed in electronic form. 
but there is no crucial need to change the present copyright system as it applies to paper publication of journals because the problem is not in that domain. 
unfortunately, it seems that not everyone agrees with the truisms that began this article. 
many journal publishers appear to believe that the purpose of scientific literature is to enable them to publish journals so as to collect subscriptions from scientists and students. 
such thinking is known as "confusion of the means with the ends."
 their approach has been to restrict access even to read the scientific literature to those who can and will pay for it. 
they use copyright law, which is still in force despite its inappropriateness for computer networks, as an excuse to stop scientists from choosing new rules. 
for the sake of scientific cooperation and humanity's future, we must reject that approach at its root—not merely the obstructive systems that have been instituted, but the mistaken priorities that inspired them. 
journal publishers sometimes claim that online access requires expensive high-powered server machines, and that they must charge access fees to pay for these servers. 
this "problem" is a consequence of its own "solution."
 give everyone the freedom to mirror, and libraries around the world will set up mirror sites to meet the demand. 
this decentralized solution will reduce network bandwidth needs and provide faster access, all the while protecting the scholarly record against accidental loss. 
publishers also argue that paying the editors requires charging for access. 
let us accept the assumption that editors must be paid; this tail need not wag the dog. 
the cost of editing for a typical paper is between 1 percent and 3 percent of the cost of funding the research to produce it. 
such a small percentage of the cost can hardly justify obstructing the use of the results. 
instead, the cost of editing could be recovered, for example, through page charges to the authors, who can pass these on to the research sponsors. 
the sponsors should not mind, given that they currently pay for publication in a more cumbersome way, through overhead fees for the university library's subscription to the journal. 
by changing the economic model to charge editing costs to the research sponsors, we can eliminate the apparent need to restrict access. 
the occasional author who is not affiliated with an institution or company, and who has no research sponsor, could be exempted from page charges, with costs levied on institution-based authors. 
another justification for access fees to online publications is to fund conversion of the print archives of a journal into online form. 
that work needs to be done, but we should seek alternative ways of funding it that do not involve obstructing access to the result. 
the work itself will not be any more difficult, or cost any more. 
it is self-defeating to digitize the archives and waste the results by restricting access. 
the us constitution says that copyright exists "to promote the progress of science."
 when copyright impedes the progress of science, science must push copyright out of the way. 
later developments. 
some universities have adopted policies to thwart the journal publishers' power. 
for instance, look at the mit faculty open access policy. 
stronger policies are needed, however, as this one permits individual authors to "opt out" (i.e., cave in). 
the us government has imposed a requirement known as "public access" on some funded research. 
this requires publication within a certain period in a site that allows anyone to view the article. 
this requirement is a positive step, but inadequate because it does not include freedom to redistribute the article. 
curiously, the concept of "open access" in the 2002 budapest open access initiative did include freedom to redistribute. 
i signed that declaration, despite my distaste for the word "open," because the substance of the position was right. 
however, the word "open" had the last laugh: influential campaigners for "open access" subsequently dropped freedom to redistribute from their goals. 
i stand by the position of the boai, but now that "open access" means something else, i refer to it as "redistributable publication" or "free-to-mirror publication."
 this article appeared in nature webdebates in 2001. 
reevaluating copyright: the public must prevail. 
stallman&#8239;[1] the legal world is aware that digital information technology poses "problems for copyright," but has not traced these problems to their root cause: a fundamental conflict between publishers of copyrighted works and the users of these works. 
the publishers, understanding their own interest, have set forth a proposal through the clinton administration to fix the "problems" by deciding the conflict in their favor. 
this proposal, the lehman white paper,[2] was the principal focus of the innovation and the information environment conference at the university of oregon (november 1995). 
john perry barlow,[3] the keynote speaker, began the conference by telling us how the greatful dead recognized and dealt with this conflict. 
they decided it would be wrong to interfere with copying of their performances on tapes, or with distribution on the internet, but saw nothing wrong in enforcing copyright for cd recordings of their music. 
barlow did not analyze the reasons for treating these media differently, and later gary glisson&#8239;[4] criticized barlow's idea that the internet is inexplicably unique and unlike anything else in the world. 
he argued that we should be able to determine the implications of the internet for copyright policy by the same kind of analysis that we apply to other technologies. 
this paper attempts to do just that. 
barlow suggested that our intuitions based on physical objects as property do not transfer to information as property because information is "abstract."
 as steven winter&#8239;[5] remarked, abstract property has existed for centuries. 
shares in a company, commodity futures, and even paper money, are forms of property that are more or less abstract. 
barlow and others who argue that information should be free do not reject these other kinds of abstract property. 
clearly, the crucial difference between information and acceptable kinds of property is not abstractness per se. 
so what is it? 
i propose a simple and practical explanation. 
united states copyright law considers copyright a bargain between the public and "authors" (although in practice, usually publishers take over the authors' part of the bargain). 
the public trades certain freedoms in exchange for more published works to enjoy. 
until the white paper, our government had never proposed that the public should trade all of its freedom to use published works. 
copyright involves giving up specific freedoms and retaining others. 
this means that there are many alternative bargains that the public could offer to publishers. 
so which bargain is the best one for the public? 
which freedoms are worth while for the public to trade, and for what length of time? 
the answers depend on two things: how much additional publication the public will get for trading a given freedom, and how much the public benefits from keeping that freedom. 
this shows why making intellectual property decisions by analogy to physical object property, or even to older intellectual property policies, is a mistake. 
winter argued persuasively that it is possible to make such analogies, to stretch our old concepts and apply them to new decisions.[6] surely this will reach some answer—but not a good answer. 
analogy is not a useful way of deciding what to buy or at what price. 
for example, we do not decide whether to build a highway in new york city by analogy with a previous decision about a proposed highway in iowa. 
in each highway construction decision, the same factors apply (cost, amount of traffic, taking of land or houses); if we made highway decisions by analogy to previous highway decisions, we would either build every proposed highway or none of them. 
instead we judge each proposed highway based on the pros and cons, whose magnitudes vary from case to case. 
in copyright issues, too, we must weigh the cost and benefits for today's situation and today's media, not as they have applied to other media in the past. 
this also shows why laurence tribe's principle, that rights concerning speech should not depend on the choice of medium,[7] is not applicable to copyright decisions. 
copyright is a bargain with the public, not a natural right. 
copyright policy issues are about which bargains benefit the public, not about what rights publishers or readers are entitled to. 
the copyright system developed along with the printing press. 
in the age of the printing press, it was unfeasible for an ordinary reader to copy a book. 
copying a book required a printing press, and ordinary readers did not have one. 
what's more, copying in this way was absurdly expensive unless many copies were made—which means, in effect, that only a publisher could copy a book economically. 
so when the public traded to publishers the freedom to copy books, they were selling something which they could not use. 
trading something you cannot use for something useful and helpful is always good deal. 
therefore, copyright was uncontroversial in the age of the printing press, precisely because it did not restrict anything the reading public might commonly do. 
but the age of the printing press is gradually ending. 
the xerox machine and the audio and video tape began the change; digital information technology brings it to fruition. 
these advances make it possible for ordinary people, not just publishers with specialized equipment, to copy. 
and they do! 
once copying is a useful and practical activity for ordinary people, they are no longer so willing to give up the freedom to do it. 
they want to keep this freedom and exercise it instead of trading it away. 
the copyright bargain that we have is no longer a good deal for the public, and it is time to revise it—time for the law to recognize the public benefit that comes from making and sharing copies. 
with this analysis, we see why rejection of the old copyright bargain is not based on supposing that the internet is ineffably unique. 
the internet is relevant because it facilitates copying and sharing of writings by ordinary readers. 
the easier it is to copy and share, the more useful it becomes, and the more copyright as it stands now becomes a bad deal. 
this analysis also explains why it makes sense for the grateful dead to insist on copyright for cd manufacturing but not for individual copying. 
cd production works like the printing press; it is not feasible today for ordinary people, even computer owners, to copy a cd into another cd. 
thus, copyright for publishing cds of music remains painless for music listeners, just as all copyright was painless in the age of the printing press. 
to restrict copying the same music onto a digital audio tape does hurt the listeners, however, and they are entitled to reject this restriction. 
(1999 note: the practical situation for cds has changed, in that many ordinary computer users can now copy cds. 
this means that we should now consider cds more like tapes. 
2007 clarification: notwithstanding the improvement in cd technology, it still makes sense to apply copyright to commercial distribution while letting individuals copy freely.) we can also see why the abstractness of intellectual property is not the crucial factor. 
other forms of abstract property represent shares of something. 
copying any kind of share is intrinsically a zero-sum activity; the person who copies benefits only by taking wealth away from everyone else. 
copying a dollar bill in a color copier is effectively equivalent to shaving a small fraction off of every other dollar and adding these fractions together to make one dollar. 
naturally, we consider this wrong. 
by contrast, copying useful, enlightening or entertaining information for a friend makes the world happier and better off; it benefits the friend, and inherently hurts no one. 
it is a constructive activity that strengthens social bonds. 
some readers may question this statement because they know publishers claim that illegal copying causes them "loss."
 this claim is mostly inaccurate and partly misleading. 
more importantly, it is begging the question. 
the claim is mostly inaccurate because it presupposes that the friend would otherwise have bought a copy from the publisher. 
that is occasionally true, but more often false; and when it is false, the claimed loss does not occur. 
the claim is partly misleading because the word "loss" suggests events of a very different nature—events in which something they have is taken away from them. 
for example, if the bookstore's stock of books were burned, or if the money in the register got torn up, that would really be a "loss."
 we generally agree it is wrong to do these things to other people. 
but when your friend avoids the need to buy a copy of a book, the bookstore and the publisher do not lose anything they had. 
a more fitting description would be that the bookstore and publisher get less income than they might have got. 
the same consequence can result if your friend decides to play bridge instead of reading a book. 
in a free market system, no business is entitled to cry "foul" just because a potential customer chooses not to deal with them. 
the claim is begging the question because the idea of "loss" is based on the assumption that the publisher "should have" got paid. 
that is based on the assumption that copyright exists and prohibits individual copying. 
but that is just the issue at hand: what should copyright cover? 
if the public decides it can share copies, then the publisher is not entitled to expect to be paid for each copy, and so cannot claim there is a "loss" when it is not. 
in other words, the "loss" comes from the copyright system; it is not an inherent part of copying. 
copying in itself hurts no one. 
the most widely opposed provision of the white paper is the system of collective responsibility, whereby a computer owner is required to monitor and control the activities of all users, on pain of being punished for actions in which he was not a participant but merely failed to actively prevent. 
tim sloan&#8239;[8] pointed out that this gives copyright owners a privileged status not accorded to anyone else who might claim to be damaged by a computer user; for example, no one proposes to punish the computer owner if he fails actively to prevent a user from defaming someone. 
it is natural for a government to turn to collective responsibility for enforcing a law that many citizens do not believe in obeying. 
the more digital technology helps citizens share information, the more the government will need draconian methods to enforce copyright against ordinary citizens. 
when the united states constitution was drafted, the idea that authors were entitled to a copyright monopoly was proposed—and rejected.[9] instead, the founders of our country adopted a different idea of copyright, one which places the public first.[10] copyright in the united states is supposed to exist for the sake of users; benefits for publishers and even for authors are not given for the sake of those parties, but only as an inducement to change their behavior. 
as the supreme court said in fox film corp. 
v. doyal: "the sole interest of the united states and the primary object in conferring the [copyright] monopoly lie in the general benefits derived by the public from the labors of authors."
[11] under the constitution's view of copyright, if the public prefers to be able to make copies in certain cases even if that means somewhat fewer works are published, the public's choice is decisive. 
there is no possible justification for prohibiting the public from copying what it wants to copy. 
ever since the constitutional decision was made, publishers have tried to reverse it by misinforming the public. 
they do this by repeating arguments which presuppose that copyright is a natural right of authors (not mentioning that authors almost always cede it to publishers). 
people who hear these arguments, unless they have a firm awareness that this presupposition is contrary to the basic premises of our legal system, take for granted that it is the basis of that system. 
this error is so ingrained today that people who oppose new copyright powers feel the need to do so by arguing that even authors and publishers may be hurt by them. 
thus, james boyle&#8239;[12] explains how a strict intellectual property system can interfere with writing new works. 
jessica litman&#8239;[13] cites the copyright shelters which historically allowed many new media to become popular. 
pamela samuelson&#8239;[14] warns that the white paper may block the development of "third-wave" information industries by locking the world into the "second-wave" economic model that fit the age of the printing press. 
these arguments can be very effective on those issues where they are available, especially with a congress and administration dominated by the idea that "what's good for general media is good for the usa."
 but they fail to expose the fundamental falsehood on which this domination is based; as a result, they are ineffective in the long term. 
when these arguments win one battle, they do so without building a general understanding that helps win the next battle. 
if we turn to these arguments too much and too often, the danger is that we may allow the publishers to replace the constitution uncontested. 
for example, the recently published position statement of the digital future coalition, an umbrella organization, lists many reasons to oppose the white paper, for the sake of authors, libraries, education, poor americans, technological progress, economic flexibility, and privacy concerns—all valid arguments, but concerned with side issues.[15] conspicuously absent from the list is the most important reason of all: that many americans (perhaps most) want to continue making copies. 
the dfc fails to criticize the core goal of the white paper, which is to give more power to publishers, and its central decision, to reject the constitution and place the publishers above the users. 
this silence may be taken for consent. 
resisting the pressure for additional power for publishers depends on widespread awareness that the reading and listening public are paramount; that copyright exists for users and not vice versa. 
if the public is unwilling to accept certain copyright powers, that is ipso facto justification for not offering them. 
only by reminding the public and the legislature of the purpose of copyright and the opportunity for the open flow of information can we ensure that the public prevails. 
later notes. 
intellectual property:  this article was part of the path that led me to recognize the bias and confusion in the term "intellectual property". 
today i believe that term should never be used under any circumstances. 
intellectual property system:  here i fell into the fashionable error of writing "intellectual property" when what i meant was just "copyright."
 this is like writing "europe" when you mean "france"—it causes confusion that is easy to avoid. 
published in oregon law review, spring 1996. 
informational infrastructure task force, intellectual property and the national information infrastructure: the report of the working group on intellectual property rights (1995). 
john perry barlow, remarks at the innovation and the information environment conference (nov. 
1995). 
mr. 
barlow is one of the founders of the electronic frontier foundation, an organization which promotes freedom of expression in digital media, and is also a former lyricist for the grateful dead. 
gary glisson, remarks at the innovation and the information environment conference (nov. 
1995); see also gary glisson, "a practitioner's defense of the nii white paper," 75 or. 
l. rev. 
(1996), supporting the white paper. 
mr. 
glisson is a partner and chair of the intellectual property group at lane powell spears lubersky in portland, oregon. 
steven winter, remarks at the innovation and the information environment conference (nov. 
1995). 
mr. 
winter is a professor at the university of miami school of law. 
winter, supra note 5. see laurence h. tribe, "the constitution in cyberspace: law and liberty beyond the electronic frontier," humanist, sept.-oct. 
1991, at 15. 
tim sloan, remarks at the innovation and the information environment conference (nov. 
1995). 
mr. 
sloan is a member of the national telecommunication and information administration. 
see jane c. ginsburg, "a tale of two copyrights: literary property in revolutionary france and america," in of authors and origins: essays on copyright law 131, 137-38 (brad sherman & alain strowel, eds., 1994), stating that the constitution's framers either meant to "subordinate[] the author's interests to the public benefit," or to "treat the private and public interests … even-handedly."
 u.s. 
const., art. 
i, p. 8, cl. 
8 ("congress shall have power…to promote the progress of science and useful arts, by securing for limited times to authors and inventors the exclusive right to their respective writings and discoveries."
) 286 u.s. 
123, 127 (1932). 
james boyle, remarks at the innovation and the information environment conference (nov. 
1995). 
mr. 
boyle is a professor of law at american university in washington, d.c. 
jessica litman, remarks at the innovation and the information environment conference (nov. 
1995). 
ms. 
litman is a professor at wayne state university law school in detroit, michigan. 
pamela samuelson, "the copyright grab," wired, jan. 
1996. 
ms. 
samuelson is a professor at cornell law school. 
digital future coalition, "broad-based coalition expresses concern over intellectual property proposals," nov. 
15, 1995 . 
the future of jiyuna software. 
stallman transcript of a keynote speech at the research institute of economy, trade and industry (rieti), japanese ministry of economy, trade and industry, 21 april 2003. 
mr. 
richard stallman, gnu project: i am going to speak about free software and, first of all, its ethical, social and political significance, and secondly, something about its economic consequences. 
free software is a matter of freedom. 
the english word "free" does not make this clear because it has two meanings. 
in your language, fortunately, you have two different words. 
so, if you say jiyu na sofuto, it is very clear that you are not talking about the price, you are talking about freedom. 
so, i urge you, always use your unambiguous word and not our unclear word when you are talking about free software in japanese. 
the reason for having free software is very simple: to live in freedom and, in particular, to be free to treat other people decently. 
nonfree software says that you are helpless and divided. 
it says you cannot even tell what the program does; you are supposed to take the developer's word for it; and often they will not tell you what it really does. 
and if you do not like it, you cannot change it. 
even if the developer made his best sincere effort to make the program useful, nobody is perfect. 
i could write a program, and you might find it halfway good for what you want. 
perhaps i wrote it for somewhat different purposes, not the same as your purposes. 
nobody can anticipate everything. 
perhaps i did it the way i thought was best, but you have a better idea. 
nobody can always get everything right. 
with nonfree software you are stuck. 
you have to take it the way it is. 
you have to suffer with it. 
and most important with nonfree software, you are forbidden to share with other people. 
society depends on people helping each other. 
it is useful to live with neighbors who will help you when you ask for help. 
of course, not always, nobody is forced to help another person, but if you are friends with people, often they will help you out. 
so, of course, we had better help other people if we want them to help us. 
so what is it like when someone says you are prohibited from helping someone else? 
here is this useful knowledge, and you could help your neighbor by sharing it, but you are forbidden to share with other people. 
this is attacking the bonds of society, dissolving society into isolated individuals who cannot help each other. 
free software is the contrast to this. 
free software means that you have four essential freedoms. 
freedom zero is the freedom to run the program for any purpose, in any way that you want to. 
freedom one is the freedom to help yourself by studying the source code to see what the program does and then changing it to suit your needs. 
freedom two is the freedom to help you neighbor by distributing copies to others. 
and freedom three is the freedom to help build your community by publishing an improved version so others can use your version instead, so others can get the benefit of your help. 
with these freedoms, the users control the software they use. 
if these freedoms are lacking, then the [software] owner controls the software and controls the users. 
we all know that computers do not make decisions themselves really. 
they do what people told them to do. 
but which people told them what to do? 
when you are using your computer, can you tell it what to do, or is someone else telling it what to do? 
who controls your computer? 
this is the question of free software. 
the freedoms in the definition of free software, freedoms zero, one, two and three, the reason why these are the freedoms that matter is because these are the freedoms necessary for citizens to control their own computers. 
you need freedom zero in order to be able to do whatever job you want with your computer. 
you need freedom one so that you can make the software do what you want it to do. 
if you do not have freedom one, you are stuck; you are a prisoner of your software. 
but not everybody is a programmer. 
if we had just freedom one, then programmers could change the software to do what they want. 
but if each programmer had to make his changes personally, we would not really have much control. 
we would be limited to what each of us, individually, could do. 
non-programmers would get no benefit at all. 
that is why freedom three and two are crucial, because freedoms two and three allow a group of users to work together and make the software do what they jointly want. 
so you are not limited to changing it individually, personally. 
you and 50 other people who want the same thing, you can get together. 
if two or three of you are programmers, they can make the changes, and then they can distribute it to all the rest of you. 
you could all put money in and pay a programmer to make the changes you want. 
your company could pay a programmer to make the changes your company wants. 
then if you publish the improved version, everybody can use it. 
thus, all of society gets control over what its software does. 
free software is a method, a democratic method, for deciding the development of software. 
but it is democratic in an unusual way, because we do not hold an election and then tell everybody what to do. 
nobody tells people what to do in the free software community; everybody makes his own decision. 
but what happens is this: if many people want the software to improve in that direction, many people will work on changing it, so the software will develop rapidly in that direction. 
if a few people want the software to develop in that direction, a few of them will make an effort, so it will develop slowly in that direction. 
if nobody wants it to develop in that direction, it will not. 
by each of us deciding what we are going to do, we all contribute to what happens and to deciding which direction the software will develop. 
so society collectively has control over how the software will develop overall. 
but you, individually, or any group or company can decide how to develop it themselves. 
the result is that free software tends to do what users want, instead of what the developers want. 
people often ask, "if everybody is free to change the software, what does that do for compatibility?"
 well the fact is, users like compatibility. 
it is not the only thing they like. 
sometimes, certain users want an incompatible change because it has other benefits, and if so they can do it. 
but most users want compatibility. 
the result is most free software developers try very hard to be compatible. 
guess what would happen if i made an incompatible difference in my program and the users did not like it. 
some user would change the program and make it compatible, and then most users would prefer his version. 
so his version would become popular and mine would be forgotten. 
now, i do not want that to happen, of course. 
i want people to like and use my version, so i am going to recognize this in advance and i am going to make my version compatible from the beginning because i want people to like it. 
so in our community, the developers cannot resist what the users want. 
we have to go along or the users will go where they want and leave us behind. 
but if you look at nonfree software developers, the ones who are very powerful, they can impose incompatibility and they are so powerful that the users cannot do anything. 
microsoft is famous for this. 
they make an incompatible change in a protocol, and then the users are stuck with it. 
but it is not just microsoft. 
consider wap, for instance. 
wap contains modified versions of ordinary internet protocols, modified to be incompatible, and the idea was they would make these telephones and they would say "they can talk on the internet," but since they did not use the ordinary internet protocols, the incompatibility would be imposed on the user. 
that was their plan. 
it did not work, fortunately. 
but that is the danger you face when the users are not really in control: somebody will try to impose incompatibility on the users. 
free software is primarily a political, ethical and social issue. 
i have explained that level of it. 
it also has economic consequences. 
for instance, nonfree software can be used to create very rich companies, where a few people collect money from everyone around the world, and those few get very rich and other people are deprived. 
there are many countries (japan is not one of them, i guess) where the people who can afford a computer usually cannot afford to pay for the nonfree software, for permission to use the nonfree software. 
so in those countries, nonfree software as a system creates tremendous deprivation. 
but in any country, money is squeezed out of most people and concentrated to a few who become very rich by nonfree software. 
with free software, you cannot do that. 
you cannot squeeze a lot of money out of people, but you can do business with people as long as you are providing them with a real service. 
free software business already exists. 
in fact, i started a free software business in 1985. 
i was selling copies of gnu emacs. 
i was looking for a way to make money through free software. 
so i said, "pay me $150, and i will mail you a tape with the gnu emacs text editor."
 people started paying me, and i mailed them tapes. 
i made enough money to live on. 
i stopped this because i started the free software foundation, and it seemed appropriate for the free software foundation to start distributing gnu emacs. 
i did not want to compete with the free software foundation, so i had to find a different way. 
for several years, the foundation made enough money this way to pay several employees, including programmers. 
so actually, if i had done it myself, i would probably have become comfortably well off by selling copies of free software. 
after that, i started another free software business where i would make changes on commission. 
with nonfree software, you cannot change it. 
you are a prisoner of the software. 
so you either use it exactly as it is or you do not use it at all. 
with free software, you have those two choices, but you have another choice also, actually many different choices. 
you can make changes, bigger or smaller, in the program and use the modified program. 
now, if you are personally a programmer, you could make the changes yourself. 
but suppose you are not a programmer. 
then, you can pay a programmer to make the changes for you. 
for instance, if this ministry is using a program and people conclude this program does not work the way we really want, you could easily spend some money to pay a programmer to change it to do what you want. 
this is the kind of free software business that i was doing for several years in the 1980s. 
(i could have kept on doing it, but i received a big prize and i did not have to do it anymore.) nowadays there are many people making a living this way. 
i recently heard from somebody in south america who said that he know 30 people there who are making a living this way. 
south america is not among the technologically most advanced parts of the world, but this is already starting there. 
in 1989 or 1990, i believe, a company was started to do this kind of business, and that company was started by three people. 
in several years it had grown to 50 people, and it had been profitable every year. 
they could have kept on doing it, but they got greedy, and so they started developing nonfree software, and later on they were purchased by red hat. 
anyway, the free software business is a new way of doing business that does not exist in the proprietary software world. 
so people often wonder how would free software affect employment. 
suppose every computer user had freedom. 
suppose, therefore, that all software were free software. 
in other words, if you have the program, you have the freedom to run it, study it, change it and redistribute it.what would that do to employment in the information technology field? 
well, of all the employment in the field, a small fraction is programming; and most programming is custom software, software being written for one client. 
that is perfectly okay; as long as the client gets the source code and gets the full rights to control the software once he has paid for it, then this is legitimate. 
in fact, it is free software for the client who has it. 
[thus, only the programming which is not client-specific is really nonfree.] so of this fraction that is programming, most of that is custom software; software to be published is a small fraction of a small fraction of the total [it sector employment]. 
so, what would free software do? 
it might eliminate this tiny fraction of the employment, but maybe not. 
because while the possibility of paying these programmers by restricting the users would go away, there would be a new possibility instead of supporting programmers who would be paid to make improvements and extensions in free software. 
so will we lose more jobs or gain more jobs? 
nobody knows. 
it is impossible to tell. 
what we do know is that the decrease in employment in the it field is limited to this small fraction of a small fraction, which is programming for publication. 
the rest would continue the way it is now. 
so it is clear that there is no problem for employment. 
what about another issue people sometimes raise: could we possibly develop enough software and make it free? 
the answer is obvious because we already are. 
the people who ask this question are like asking could airplanes really stay up? 
well, i flew in one. 
probably all of you have flown in airplanes too. 
i think they can stay up. 
in free software today, we have hundreds of people, maybe thousands, getting paid to develop free software. 
but we have over half a million volunteer developers of free software working part time and not getting paid and developing a lot of software. 
so in fact, free software business is not necessary for free software to do its job. 
free software business is very desirable. 
the more we can develop institutions that funnel funds from users to free software developers, the more free software we can produce, the better we can produce it. 
so it is certainly desirable, but it is not crucial. 
we have already developed two entire operating systems, two graphical user interface desktops and two office suites that are free software. 
people are creatively looking for ways to fund free software, and some [ways] work and some do not, as you might expect. 
for instance, last summer, there was a product that people had liked but was nonfree called blender, and the business decided it was no use supporting this or selling this anymore. 
they discontinued it. 
but the developers did not want it to be discontinued, so they negotiated a deal: if they could raise $100,000, they could buy the rights and make it free software. 
so they went to the community, and in a few weeks they raised the money. 
blender is now free software. 
this suggests that maybe we can raise money from the community in the same way to make specific extensions. 
a programmer who has a name, a reputation for ability, could go to the community and say, "if people put up this much money, i will do the work."
 he does not have to do the work entirely himself. 
he can employ other programmers working with him, and this is how you would get started. 
before you have a name, before you could go to the community on the strength of your own reputation, you could be working as an apprentice for other programmers. 
they raise the funds, they supervise the work, but by doing this, eventually you develop a reputation too, and then you can go and get clients. 
there are also, of course, legitimate roles for government funding in developing useful software, just as governments fund scientific research designed to be of use to the citizens, and even just for the sake of human curiosity, but certainly to be of use for the citizens, for the public. 
it is equally legitimate for governments to fund the development of software that is going be of use to the public, and then when it is done, hand it off to the public and say, "everyone can now use and improve this. 
it is human knowledge."
 because that is what free software is really about. 
it is human knowledge, knowledge that belongs to humanity, to all beings. 
a nonfree program is restricted knowledge, knowledge that is kept under control by a few, and other people cannot really have access to it. 
they can only use it barely on sufferance. 
they can never have the knowledge. 
for this reason, it is essential that schools use free software. 
there are three reasons why schools should use exclusively free software. 
the most shallow reason is to save money. 
even in a developed country, schools never have enough money, and so the use of computers in schools is held back. 
now, if the schools use free software, then the school system has the freedom to make copies and redistribute them to all the schools and they do not have to pay for permission to use the software. 
so the school system can thus install more computers, make more facilities available. 
in addition, the gnu plus linux operating system is more efficient than windows, so you can use an older, less powerful, cheaper model of computer. 
maybe you can use a second-hand computer that somebody else is getting rid of. 
so that is another way to save. 
that is obvious, but it is shallow. 
a more important reason for schools to use free software is for the sake of learning. 
you see, in the teenage years, some students are going to want to learn everything there is to know about the inside of the computer system. 
these are the people who can become good programmers. 
if you want to develop a strong programming capacity, people prepared not just to work as part of a big team in a rather mechanical way, but people who will take the initiative, do big things, develop powerful, exciting programs, then you need to encourage the impulse to do that, whenever a kid has that impulse. 
so it is important to provide facilities and a social milieu that encourages this kind of learning to develop. 
the way to do this is the schools should run free software, and whenever a kid starts wondering, "how does this actually work?"
 the teacher can say, "this is done by the fubar program. 
you can find the source code of the fubar program there. 
go read it and figure it out, see for yourself how this works."
 then if a kid says, "you know, i have got an idea for how this could be better," the teacher could say, "why not give it a try? 
try writing it. 
make the change in the fubar program to change this one feature."
 to learn to be a good writer, you have to read a lot and write a lot. 
it is the same if you are writing software: you have to read a lot of software and write a lot of software. 
to learn to understand big programs, you have to work with big programs. 
but how can you get started at that? 
when you are beginning, you cannot write a big program yourself, not and do a good job, because you have not learned how. 
so how are you going to learn? 
the answer is you have to read existing big programs and then try making small changes in them. 
because at that stage, you cannot write a big program yourself, but you can write a small improvement in a big program. 
that is how i learned to be a good programmer. 
i had a special opportunity at the massachusetts institute of technology. 
there was a lab where they had written their own operating system, and then they used it. 
i went there and they said, "we would like to hire you."
 they hired me to improve the programs in this operating system. 
it was my second year of college. 
at the time, i could not have written an operating system myself. 
i could not have written those programs from zero, but i could read them and add a feature and then add another feature and another and another. 
every week i would add another feature to some program. 
by doing this many, many times, i developed my skill. 
in the 1970s, the only way you could get that opportunity was to be in a very special place. 
but today, we can give that opportunity to everyone. 
all you need is a pc running the gnu/linux system with the source code, and you have this opportunity. 
so you can easily encourage japanese teenagers, those of them who are fascinated by computers, to become good programmers. 
i have a friend who was a high school teacher around 1980, and he set up the first unix machine in a high school. 
he then mentored the high school students so that they learned to become good programmers. 
several of them were very good programmers with reputations by the time they graduated from high school. 
i am sure any high school has a few people who have that talent and will want to develop it. 
they just need the opportunity. 
so that is the second reason why schools should use free software exclusively. 
the third reason is even more fundamental. 
we want schools to teach facts and skill, of course, but also good moral character, which means being prepared to help other people. 
that means the school should say to the kids, "any software that is here, you can copy it. 
copy it and take it home. 
that is what it is here for. 
if you bring any software to school, you must share it with the other kids. 
if you are not willing to share it with the other kids, do not bring it here, it does not belong here, because we are teaching kids to be helpful to each other."
 education of moral character is important for every society. 
i did not invent the idea of free software. 
free software began as soon as there were two computers of the same kind, because then people using one computer would write some software, and the people using the other computer would say, "do you know anything to solve this problem?"
 and they would say, "yes. 
we wrote something to solve this problem. 
here is a copy."
 so they started exchanging the software that they had developed, so that they could all develop more. 
but in the 1960s, there was a trend to replace it with nonfree software, a trend to subjugate the users, to deny users freedom. 
when i was in my first year of college, i got to see a moral example that impressed me. 
i was using a computer facility, and at this facility they said, "this is an educational institution, and we are here for people to learn about computer science. 
so we will have a rule: any time software is installed on a system, the source code must be on display so people can read it and learn how this software works."
 one of the employees wrote a utility program and he started selling it as nonfree software. 
he was not just selling copies the way i was doing; he was restricting the users. 
but he offered the school a copy at no charge, and the people in charge of the computer facility said, "no, we will not install this here because our rule is the source code must be on display. 
if you will not let us put the source code of this program on display, we just will not run your program."
 this inspired me because it was a willingness to renounce a practical convenience for the sake of something more important which is the mission of the school: education. 
the lab where i worked at mit was an exception though in the 1970s due to the fact that we had an operating system that was free software. 
most computers were using nonfree operating systems at the time. 
but i was inspired by the example that i saw there and i learned to live in that way. 
i learned the way of life where you will teach your knowledge to others instead of keeping it all for yourself. 
then this community died in the early 1980s. 
at that point, i started the free software movement. 
i did not begin free software. 
i learned the free software way of life by joining a lab where people already practiced it. 
what i did was to turn this into an ethical and social movement, to say that this is a matter of choosing between a good society and an ugly society, between a clean, kind, helpful way of life where we have freedom, and a way of life where everybody is in bondage to various empires that conquer them, where people believe they have no practical choice but to give up their freedom. 
theoretically speaking, on the one hand people say, "oh, nobody forces you to use that nonfree software. 
nobody forces you to use microsoft word."
 on the other hand, you have people saying, "i have no choice."
 so practically speaking, it is not a situation of individual choice. 
yes, it is true, if you are determined to be free, determined to reject it, you can do it, but it takes a lot of determination. 
when we started 20 years ago, it took tremendous work to use a computer without the nonfree software. 
all the operating systems for modern computers in 1983 were proprietary. 
you could not get a computer and use it, except with nonfree software. 
to change this, we had to spend years working, and we did, we changed it. 
for you, today, the situation is easier. 
there are free operating systems. 
you can get a modern computer and use it with free software, exclusively with free software. 
so nowadays, instead of a tremendous sacrifice, you just have to make a temporary, small sacrifice, and then you can live in freedom. 
by working together, we can eliminate that sacrifice. 
we can make it easier to live in freedom. 
but for that we have to work. 
we have to recognize freedom as a social value. 
every government tries to get its work done inexpensively, and every government agency has a specific job to get done. 
so when government agencies choose their computers, they tend to look at narrow, practical questions: how much will it cost, when can we have it running, and so on. 
but the government has a larger mission, which is to lead the country in a healthy direction, one that is good for the citizens. 
so when government agencies choose their computer systems, they should make this choice so as to lead the country to free software. 
it is better for the economy of the country because the users, instead of paying merely for permission to run the software, will be paying people in the local area to improve it and adapt it for them. 
so in instead of all draining away to redmond, washington, the money will circulate in the region, creating employment locally instead of filling somebody's pockets. 
but more important, it creates a way of life where the country and the people are independent and free. 
the right to read. 
by richard stallman from the road to tycho, a collection of articles about the antecedents of the lunarian revolution, published in luna city in 2096. 
for dan halbert, the road to tycho began in college—when lissa lenz asked to borrow his computer. 
hers had broken down, and unless she could borrow another, she would fail her midterm project. 
there was no one she dared ask, except dan. 
this put dan in a dilemma. 
he had to help her—but if he lent her his computer, she might read his books. 
aside from the fact that you could go to prison for many years for letting someone else read your books, the very idea shocked him at first. 
like everyone, he had been taught since elementary school that sharing books was nasty and wrong—something that only pirates would do. 
and there wasn't much chance that the spa—the software protection authority—would fail to catch him. 
in his software class, dan had learned that each book had a copyright monitor that reported when and where it was read, and by whom, to central licensing. 
(they used this information to catch reading pirates, but also to sell personal interest profiles to retailers.) the next time his computer was networked, central licensing would find out. 
he, as computer owner, would receive the harshest punishment—for not taking pains to prevent the crime. 
of course, lissa did not necessarily intend to read his books. 
she might want the computer only to write her midterm. 
but dan knew she came from a middle-class family and could hardly afford the tuition, let alone her reading fees. 
reading his books might be the only way she could graduate. 
he understood this situation; he himself had had to borrow to pay for all the research papers he read. 
(ten percent of those fees went to the researchers who wrote the papers; since dan aimed for an academic career, he could hope that his own research papers, if frequently referenced, would bring in enough to repay this loan.) later on, dan would learn there was a time when anyone could go to the library and read journal articles, and even books, without having to pay. 
there were independent scholars who read thousands of pages without government library grants. 
but in the 1990s, both commercial and nonprofit journal publishers had begun charging fees for access. 
by 2047, libraries offering free public access to scholarly literature were a dim memory. 
there were ways, of course, to get around the spa and central licensing. 
they were themselves illegal. 
dan had had a classmate in software, frank martucci, who had obtained an illicit debugging tool, and used it to skip over the copyright monitor code when reading books. 
but he had told too many friends about it, and one of them turned him in to the spa for a reward (students deep in debt were easily tempted into betrayal). 
in 2047, frank was in prison, not for pirate reading, but for possessing a debugger. 
dan would later learn that there was a time when anyone could have debugging tools. 
there were even free debugging tools available on cd or downloadable over the net. 
but ordinary users started using them to bypass copyright monitors, and eventually a judge ruled that this had become their principal use in actual practice. 
this meant they were illegal; the debuggers' developers were sent to prison. 
programmers still needed debugging tools, of course, but debugger vendors in 2047 distributed numbered copies only, and only to officially licensed and bonded programmers. 
the debugger dan used in software class was kept behind a special firewall so that it could be used only for class exercises. 
it was also possible to bypass the copyright monitors by installing a modified system kernel. 
dan would eventually find out about the free kernels, even entire free operating systems, that had existed around the turn of the century. 
but not only were they illegal, like debuggers—you could not install one if you had one, without knowing your computer's root password. 
and neither the fbi nor microsoft support would tell you that. 
dan concluded that he couldn't simply lend lissa his computer. 
but he couldn't refuse to help her, because he loved her. 
every chance to speak with her filled him with delight. 
and that she chose him to ask for help, that could mean she loved him too. 
dan resolved the dilemma by doing something even more unthinkable—he lent her the computer, and told her his password. 
this way, if lissa read his books, central licensing would think he was reading them. 
it was still a crime, but the spa would not automatically find out about it. 
they would only find out if lissa reported him. 
of course, if the school ever found out that he had given lissa his own password, it would be curtains for both of them as students, regardless of what she had used it for. 
school policy was that any interference with their means of monitoring students' computer use was grounds for disciplinary action. 
it didn't matter whether you did anything harmful—the offense was making it hard for the administrators to check on you. 
they assumed this meant you were doing something else forbidden, and they did not need to know what it was. 
students were not usually expelled for this—not directly. 
instead they were banned from the school computer systems, and would inevitably fail all their classes. 
later, dan would learn that this kind of university policy started only in the 1980s, when university students in large numbers began using computers. 
previously, universities maintained a different approach to student discipline; they punished activities that were harmful, not those that merely raised suspicion. 
lissa did not report dan to the spa. 
his decision to help her led to their marriage, and also led them to question what they had been taught about piracy as children. 
the couple began reading about the history of copyright, about the soviet union and its restrictions on copying, and even the original united states constitution. 
they moved to luna, where they found others who had likewise gravitated away from the long arm of the spa. 
when the tycho uprising began in 2062, the universal right to read soon became one of its central aims. 
join our mailing list about the dangers of e-books. 
author's notes. 
this story is supposedly a historical article that will be written in the future by someone else, describing dan halbert's youth under a repressive society shaped by the unjust forces that use "pirate" as propaganda. 
so it uses the terminology of that society. 
i have tried to project it forwards into something more visibly oppressive. 
see "piracy". 
computer-enforced restrictions on lending or reading books (and other kinds of published works) are known as drm, short for "digital restrictions management."
 to eliminate drm, the free software foundation has established the defective by design campaign. 
we ask for your support. 
the electronic frontier foundation, a separate organization not related to the free software foundation, also campaigns against drm. 
the following note has been updated several times since the first publication of the story. 
the battle for the right to read is already being fought. 
although it may take 50 years for our past freedoms to fade into obscurity, most of the specific repressive laws and practices described above have already been proposed; some have been enacted into law in the us and elsewhere. 
in the us, the 1998 digital millennium copyright act (dmca) gave explicit government backing to the computer-enforced restrictions known as drm, by making the distribution of programs that can break drm a crime. 
the european union imposed similar restrictions in a 2001 copyright directive, in a form not quite as strong. 
the us campaigns to impose such rules on the rest of the world through so-called "free trade" treaties. 
business-supremacy treaties is a more fitting term for them, since they are designed to give business dominion over nominally democratic states. 
the dmca's policy of criminalizing programs that break drm is one of many unjust policies that these treaties impose across a wide range of fields. 
the us has imposed dmca requirements on australia, panama, colombia and south korea through bilateral agreements, and on countries such as costa rica through another treaty, cafta. 
obama has escalated the campaign with two new proposed treaties, the tpp and the ttip. 
the tpp would impose the dmca, along with many other wrongs, on 12 countries on the pacific ocean. 
the ttip would impose similar strictures on europe. 
all these treaties must be defeated, or abolished. 
even the world wide web consortium has fallen under the shadow of the copyright industry; it is on the verge of approving a drm system as an official part of the web specifications. 
nonfree software tends to have abusive features of many kinds, which lead to the conclusion that you can never trust a nonfree program. 
we must insist on free (libre) software only, and reject nonfree programs. 
with windows vista, microsoft admitted it had built in a back door: microsoft can use it to forcibly install software "upgrades," even if users consider them rather to be downgrades. 
it can also order all machines running vista to refuse to run a certain device driver. 
the main purpose of vista's clampdown on users was to impose drm that users can't overcome. 
of course, windows 10 is no better. 
one of the ideas in the story was not proposed in reality until 2002. 
this is the idea that the fbi and microsoft will keep the root passwords for your personal computers, and not let you have them. 
the proponents of this scheme gave early versions names such as "trusted computing" and "palladium," but as ultimately put into use, it is called "secure boot."
 what microsoft keeps is not exactly a password in the traditional sense; no person ever types it on a terminal. 
rather, it is a signature and encryption key that corresponds to a second key stored in your computer. 
this enables microsoft, and potentially any web sites that cooperate with microsoft, the ultimate control over what the user can do on per own computer. 
microsoft is likely to use that control on behalf of the fbi when asked: it already shows the nsa security bugs in windows to exploit. 
secure boot can be implemented in a way that permits the user to specify the signature key and decide what software to sign. 
in practice, pcs designed for windows 10 carry only microsoft's key, and whether the machine's owner can install any other system (such as gnu/linux) is under microsoft's control. 
we call this restricted boot. 
in 1997, when this story was first published, the spa was threatening small internet service providers, demanding they permit the spa to monitor all users. 
most isps surrendered when threatened, because they could not afford to fight back in court. 
one isp, community connexion in oakland, california, refused the demand and was actually sued. 
the spa later dropped the suit, but the dmca gave it the power it sought. 
the spa, which actually stands for software publishers association, has been replaced in its police-like role by the business software alliance. 
the bsa is not, today, an official police force; unofficially, it acts like one. 
using methods reminiscent of the erstwhile soviet union, it invites people to inform on their coworkers and friends. 
a bsa terror campaign in argentina in 2001 made slightly veiled threats that people sharing software would be raped in prison. 
the university security policies described above are not imaginary. 
for example, a computer at one chicago-area university displayed this message upon login: this system is for the use of authorized users only. 
individuals using this computer system without authority or in the excess of their authority are subject to having all their activities on this system monitored and recorded by system personnel. 
in the course of monitoring individuals improperly using this system or in the course of system maintenance, the activities of authorized user may also be monitored. 
anyone using this system expressly consents to such monitoring and is advised that if such monitoring reveals possible evidence of illegal activity or violation of university regulations system personnel may provide the evidence of such monitoring to university authorities and/or law enforcement officials. 
this is an interesting approach to the fourth amendment: pressure most everyone to agree, in advance, to waive their rights under it. 
bad news. 
the battle for the right to read is going against us so far. 
the enemy is organized, and we are not. 
today's commercial e-books abolish readers' traditional freedoms. 
amazon's e-book reader product, which i call the "amazon swindle" because it's designed to swindle readers out of the traditional freedoms of readers of books, is run by software with several demonstrated orwellian functionalities. 
any one of them calls for rejecting the product completely: it spies on everything the user does: it reports which book the user is reading, and which page, and it reports when the user highlights text, and any notes the user enters. 
it has drm, which is intended to block users from sharing copies. 
it has a back door with which amazon can remotely erase any book. 
in 2009, it erased thousands of copies of 1984, by george orwell. 
in case all that isn't orwellian enough, there is a universal back door with which amazon can remotely change the software, and introduce any other form of nastiness. 
amazon's e-book distribution is oppressive, too. 
it identifies the user and records what books the user obtains. 
it also requires users to agree to an antisocial contract that they won't share copies with others. 
my conscience tells me that, if i had agreed to such a contract, the lesser evil would be to defy it and share copies anyway; however, to be entirely good, i should not agree to it in the first place. 
therefore, i refuse to agree to such contracts, whether for software, for e-books, for music, or for anything else. 
if we want to stop the bad news and create some good news, we need to organize and fight. 
subscribe to the fsf's defective by design campaign to lend a hand. 
you can join the fsf to support our work more generally. 
there is also a list of ways to participate in our work. 
references. 
the administration's "white paper": information infrastructure task force, intellectual property [sic] and the national information infrastructure: the report of the working group on intellectual property [sic] rights (1995). 
an explanation of the white paper: the copyright grab, pamela samuelson, wired, january 1st, 1996. 
sold out, james boyle, new york times, march 31, 1996. 
public data or private data, dave farber, washington post, november 4, 1996. 
union for the public domain—an organization which aims to resist and reverse the overextension of copyright and patent powers. 
this article appeared in the february 1997 issue of communications of the acm (volume 40, number 2). 
this essay is published in free software, free society: the selected essays of richard m. stallman. 
richard stallman interviewed the day after sopa/pipa global protests. 
transcript of an interview conducted on january 19, 2012, the day after the global web blackout protests took place against the controversial sopa and pipa copyright bills. 
the gnu project and the free software foundation joined the protest. 
at the time of the interview, the controversial positions of the interviewer were not widely spread and not known to richard stallman. 
since then, jones's views have become more extreme and well-known, and stallman strongly disagrees with them. 
alex jones okay, my friends, we've got a real treat for you—they talk about the top ten people out there in internet land who've really changed our perspective on so many things, it's dr. 
richard stallman. 
he's a software developer and software freedom activist, he graduated from harvard in '74 with a ba in physics and received many awards, doctorates and professorships for extensive work. 
in january of '84 he resigned from mit to start the gnu or [pronounced] "guh-new" operating system, meant to be entirely free software, and has been the project leader ever since. 
dr. 
stallman also launched the free software movement. 
in october of '85 he started the free software foundation (and thank god, because nothing would work if we were running off of microsoft still, and i don't know anything about internet, but i know that), and in 1999 stallman called for development of a free online encyclopedia with a means of inviting the public to contribute articles so he was the progenitor of wikipedia. 
during his college years he also worked as a staff hacker at the mit artificial intelligence lab learning operating system development by doing it. 
stallman pioneered the concept of "copyleft" and is the main author of the gnu general public license, the most widely-used free software license. 
this is why since the mid-90s stallman has spent most of his time in political advocacy for free software and spreading the ethical ideas as well as campaigning against both software patents and dangerous extensions of copyright laws. 
that's why he's probably the best guest we can get on to discuss russia, china, the us: they're all using copyright, and later admitting they're using it to shut down free speech. 
sopa's just one manifestation of this. 
and this monster's receding for now but it's guaranteed to come back very soon, in fact in a few weeks. 
here's the associated press; "supreme court rules congress can re-copyright public domain works" that have been out for hundreds of years, this is amazing, so here to break down the different horrors of the expansion of copyright—to where you can't even use [some] words now, they're saying—is professor and dr. 
stallman. 
thank you for coming on with us, sir. 
richard stallman hello. 
aj hello. 
well, let's go over it i mean what do you make of what's happening right now? 
rs well, i haven't read any details about today's supreme court decision, i haven't seen that yet. 
but previously other supreme court decisions said it was unconstitutional to recopyright anything that was in the public domain. 
but this is a very pro-business supreme court, we can't trust it to protect human rights. 
they're going to give those human rights to corporations, and protect the rights of corporations, but not the rights of humans in any practical sense. 
aj yes, sir. 
what got you started developing the ideas that have become the free software movement that you kicked off? 
rs i lived in a free software community in the 1970's, although we didn't use that term, when i was working at the artificial intelligence lab at mit. 
it was part of a community where we shared the software that we developed, and all the software that we used was the software of the community, and we were happy to share it with anyone that was interested in it, and we hoped that if they improved it they would share it back, and often they did. 
but this community died in the early 80's, leaving me face to face with the proprietary software world, which is the way everyone else was using software. 
and by comparison to the life of freedom i was used to, proprietary software was ugly—morally ugly. 
so i balked at that, i said i am not going to accept the life of proprietary software, i would be ashamed of my life if i did that, so i decided to build a new free software community. 
since the old one was based on software for obsolete computers, it was necessary to start again from scratch. 
so i launched that project, and now there are free operating systems, now it's just barely possible to use computers and not be subjugated by software developers of nonfree software. 
aj but expanding that, with just basic text copyright, take righthaven, they've been absolutely destroyed in court, they sued a lot of people across the spectrum for even taking a paragraph in a comment board where it was clearly a third party that had even done it, and they were backed by the associated press and others, i mean that is really creep to have the associated press and others actually suing, you know, quadriplegics and community activist groups helping homeless people because they had one paragraph of their article and clearly were discussing in many cases their own—they were in the news article, they were posting it on their blog about them for humanitarian discussion, couldn't get any more clear [that it's] free speech, and they were being sued. 
rs well, if they went to court they might win, the defendants might win on the grounds of fair use, the problem is it's hard to tell in advance and it costs you a lot of money to go to court and find out, so those people probably didn't have enough money to stand up for what are possibly their rights, plausibly their rights. 
but because of the way fair use is defined in copyright law it's not a clear permission. 
it's a rather vaguely-drawn defense against charges of copyright infringement. 
aj yeah, case by case. 
shifting gears, overall, specifically on sopa is it heartening for you to see the big blackouts, to see… rs it is. 
and what this means is, that we can sometimes defeat the copyright lobby when it demands increased power. 
of course, we haven't defeated them yet. 
we are at least coming close to defeating them, and maybe we'll defeat them, but everybody listening to this, you've got to phone your senators today, because they're going to vote next week. 
so at least even if we don't actually defeat them we'll have mounted a campaign that will have come fairly close. 
this is the first time it's been such a fight. 
when the digital millennium copyright act was passed, the law that censors software that you can use to decode encrypted publications, that you can use to break digital handcuffs; that was passed in the house of representatives without an explicit vote, it was considered totally uncontroversial, there were just a few of us saying that this is an injustice. 
and that's why digital restrictions management or drm is such a pain nowadays, because of that law that the copyright lobby purchased in 1998, which bans the software capable of breaking the digital handcuffs. 
so i am against anything that the copyright lobby wants until they start undoing some of the injustices they've already imposed on us. 
aj doctor, let me try to quantify that from my layman's perspective and correct me if i'm wrong, but this is what i see as the injustice: they're talking about their rights as they attempt to put a preemptive, non-deliberative, no due process, guilty until proven guilty system… rs guilty until proven innocent, i think you meant. 
aj well, i was being sarcastic, i mean you're guilty basically, period. 
yeah, guilty until proven guilty, i was being sarcastic… rs oh, ok. 
aj but i mean you're guilty up front. 
and they're basically just gobbling up the internet, gobbling up what people have created, gobbling up everything like they're masters of the universe, and until they become reasonable, there's no point in discussing anything with them, because they're not giving anyone quarter. 
rs i agree. 
but furthermore, the more subtle thing that they're doing is that they're trying to focus attention on their problems as if their problems needed to be catered to while distracting away from the problems they have already imposed on us. 
i hope we completely defeat sopa. 
but don't forget that copyright law in the us already gives them too much power. 
of course they're not satisfied, they always want more, that's what the 1% do to the 99%, but even if we stop them from getting more, that's not enough. 
we've got to aim for more than just preventing them from making it worse. 
we've got to undo some of the injustices they have already done to us. 
we have to put an end to the war on sharing, which is a cruel war that attacks all of us. 
now, when i say sharing, i mean something specific. 
i mean non-commercial copying and redistribution of published works. 
exact copies, that means, not modifications. 
that's a rather limited freedom, but that's a freedom all must have so that the war on sharing ends and copyright ceases to be tyranny. 
now, that means they've got to stop using digital handcuffs. 
lots of products nowadays are designed with digital handcuffs. 
every dvd player you can buy has digital handcuffs… aj let me give people an example. 
i have a tv studio, i have a tv show, i make films. 
i buy prosumer and professional equipment, and half of our technical difficulties with digital tvs, monitors, cameras is having the right software keys, everything talking to each other plugged in, it has to authenticate that i'm allowed to run a video through it, it's all spying on me and screwing up my entire operation, my whole life is about complying with this stuff, and i bought it and i'm in here using it to produce tv, and as the 80 inventors of the internet pointed out, this sopa would cripple the internet by putting all these pre-restrictions on things. 
rs well, yes. 
the worst thing in sopa is that it becomes easy to shut down any website where the public is posting things. 
it just takes an accusation that somebody posted something that was infringing copyright and it becomes almost impossible for that site to keep operating. 
that's why wikipedia decided to go black yesterday, because it would be impossible to operate something even vaguely like wikipedia under the rules of sopa. 
now, after the show's over i'd like you to tell me more about the precise details of your problems with these tv systems or have your technical person tell me because that's an area i don't know about, and i want to know about the details of that. 
aj sure, if you'd like that, doctor, i actually have two engineers here, and they can explain it to you, but you know we have tv sets behind me on the nightly news and they're digital, and just to run feeds to them to talk to a guest on skype or to have a blue background behind me, all the tvs you buy that are prosumer or even professional now, it has a gate in it that scans to see if i'm even streaming something over it that's copyright, and then it's endless—to use software, you've got to have the dongle in the machine, and then that screws up… rs well that's 'cause you're using proprietary software. 
see with software there are just two possibilities—either the users control the program or the program controls the users. 
what you're seeing is that with proprietary software, the software controls the users. 
now, what's proprietary software? 
that's any software for which the users don't have the freedom to run it as they wish, study and change the source code, and redistribute it either with or without changes. 
so… aj sure, just to be clear, doctor… rs …control. 
but with windows or macos or skype the software controls the users. 
that's why i will not use any of that. 
aj well, it is the machine surveying us, preemptively turning us into slaves. 
a lot of our operation is run on linux systems, i'm not a tech guy… rs uh-uh, they're not linux systems, they're gnu systems, and you're talking about my work there. 
aj you're right, you are the progenitor of that with gnu that other things grew out of. 
so gnu systems, we do have a lot of those, one of our it people just absolutely loves your work and has tried to build a lot of things around here like that. 
but separately, when i've got a pretty big operation—it's not that big, like 34 people—sometimes we've gotta hurry, we've gotta buy software to run tv shows, we've got to get equipment, i'm talking about solid state stuff that won't work as well. 
all i'm saying is that it screws everything up. 
rs hardware can be malicious too. 
and the encryption of video between a computer and a monitor is an example of a malicious hardware feature that has been put into essentially all modern pcs by a conspiracy of corporations… aj yeah! 
rs …including hardware companies and media companies, so you can see it! 
they buy laws like the digital millennium copyright act to forbid people to escape from these things, and then they can design our technology to abuse us however they wish. 
so what you can see is that proprietary software—even when there's hardware that's malicious, the software has to make use of the malicious features, so the proprietary software's involved also. 
and when software's proprietary, it is likely to have malicious features in it to spy, to restrict, and there's even back doors that accept remote commands to do things. 
aj that's what i was about to get to, sir. 
we're talking to richard stallman, free software inventor, creator, guru, obi-wan kenobi type, so much of what we live with today that is the only alternative to what the big corporate borg are oppressing us with, did come out of his ideas. 
but expanding on this, doc, that's what i'm saying. 
i've tried to get the freer systems and i'm saying in many cases it does not exist. 
i don't have the money to hire an army of people that are trained in free software to be able to even attempt it, and what you said is true. 
there's all these trojan horses built into everything, and i'm even paying for it, and it's junk no matter how expensive because the whole thing is tied down with these handcuffs, and it just absolutely stifles innovation as you said thirty years ago. 
rs mmn-hmmn. 
although it does worse than stifle innovation. 
you see, innovation is the sacred cow of people who claim that they need to be allowed to restrict us. 
they say if they can restrict us they'll do more innovation. 
but innovation can be good or bad. 
democracy was once an innovation. 
tyranny was once an innovation. 
so innovation can serve us. 
aj bioweapons were once an innovation. 
rs innovation will only serve us if we have control over what innovations we'll accept and what innovations we'll reject. 
so i do not accept innovation as sufficiently important to justify taking away our freedom. 
yes, i'd like innovation all else being equal assuming we have freedom. 
but when somebody argues, "give up your freedom so we can have more innovation," that is literally a trojan horse. 
aj well that's well said, but my point is, they are—i mean, everybody knows microsoft stuff works horribly because it's all got back doors, spy systems, and it's just total crap. 
because, excuse my french there, because they're obsessed and control freaks; bill gates! 
rs yup. 
but it's not just microsoft. 
i've got to point out that apple is even worse… aj oh yeah. 
rs and amazon is horrible. 
the amazon "swindle" and ebook reader has known spy features, of course it has digital handcuffs, and it has a back door for deleting books. 
did you know that amazon remotely deleted thousands of books in 2009? 
aj yeah, 1984! 
rs right. 
someone wrote they used up a year's supply of irony demonstrating the orwellian nature of their product, which they call the kindle because it's designed to burn our books [1]. 
but they demonstrated it by deleting orwell's book. 
aj oh, that's another point. 
they've got this kazaa thing [note—youtube's content fingerprinting system was actually licensed from audiblemagic in 2007] where i've had rights to music, i've uploaded it, but because it's in some registrar, suddenly it shuts down the audio on my videos that millions of people are watching, and even though i have letters sending them to youtube that i have license here, it doesn't matter because the computer recognizes and did that, and they now admit they could erase my voice off of these major systems in a matter of hours with the same technology—i mean, you talk about dangerous having all the books digital, they could just hit a button… rs that's why i won't use such systems, i will never use anything like the amazon kindle for my books, because i want to have books that i can read without any proprietary technology, i want to buy them without identifying myself, and i'm not willing to sign a contract to get them. 
if i buy a paper book, i can do it with cash in a book store, i don't sign a contract, and my eyes without any aid at all, or at most perhaps some lenses, can see the letters. 
i'm not required to get some secret technology just to see what the letters in the book are. 
aj wow. 
rs so i will never use those ebooks under any circumstances, and i hope that the rest of you will join me. 
if you want to read more about this, look at http://stallman.org/articles/ebooks.pdf, and at the bottom of that there's a link to a place you can sign up to participate in our campaign against tyrannical ebooks systems. 
aj i had read some of your writings on this, but the way you put it, we can really see it being put into function. 
i mean, this is a tyranny, they've designed the current web system as a tyranny, consciously, as you said, the big corporations, and the sick part is when we pay the licenses and buy the equipment, we're paying for their own trojan horse for them to engage in beyond orwellian behavior. 
rs well, i wouldn't say beyond orwellian, after all oceania did things even worse than destroying books, they just murdered people, but the point is we have to reject these systems, and that's the basic idea of the free software movement—i won't accept the systems that are designed to take away my freedom. 
aj ok, doctor, i'm going to try to get you in touch right now with one of the engineers to give you any of that information you want, and i'll say bye to you during the break, perhaps you could even come back for a couple more minutes on the other side and tell us more about solutions, but, just intriguing to hear you on with us and all the points that you bring up, it absolutely makes sterling sense. 
[break.] alex jones well, richard stallman, dr. 
richard stallman, free software creator of the gnu system that everything is pretty much based on today, linux, you name it, is our guest for five more minutes. 
he's going to be gone for a while, but hopefully coming up in a few months, we'll be able to get him on for a full hour because everything he talks about just totally clicks; because i'm not an it person, but i live 12&ndash;14 hours per day around it, we're an internet operation pretty much, we're on commercial radio as well and xm, but i live it and i've experienced what he's talking about and all the points he makes ties right in to what i'm just organically seeing as a lay person here, but i was bringing up some intriguing stuff to him during the break. 
we have the articles we had the time-warner executives send us the internal documents after we surmised it, an example of these trojan horses. 
the tivo systems, the time-warner cable systems and others. 
when they censored the jesse ventura tv show, it aired once, congress went crazy on the fema camps, ordered them not to air it again, that later came out in congress, it was a big scandal, suddenly off of dvrs nationwide, cable systems you name it, it disappeared. 
we confirmed it through one time-warner office that they were ordered to put the command in. 
they'd never seen that before. 
but the point is, you pay for cable, you have a dvr, you record on it and then they go in and erase. 
and i know you want to see the proof of that, we'll get it to you, doctor, but if true, what do you make of that? 
richard stallman it's just another example of how nonfree software is a restriction on the users, and it's an injustice. 
so if you look around at any nonfree software you've heard of, you know, various products that have nonfree software in them, every one of them should not be that way. 
aj yeah, it's very very sad that this is all going on, we're paying for our own prison. 
in just 3 or 4 minutes, because i know you've got to go, doctor, what are some other solutions or things we can start doing to weaken the power of the corporate borg? 
rs well, all across the various areas of life we can see corporations taking control of our government and using that power to hurt most people. 
of course, there's the financial crisis, and all the americans are facing foreclosures. 
a lot of these foreclosures are fraudulent, the banks are committing fraud when they foreclose, and right now we're pushing obama not to let them off the hook, which is what he wants them to do. 
there are a few states where the attorneys-general are trying to pursue the banksters for their fraudulent foreclosures, and there are protests run by move on, today, i'm going to go to one of them this afternoon, but that's just one example. 
of course, the banks created the downturn by purchasing deregulation in congress. 
and then if we look at, for instance, agribusiness which has basically crushed family farming in the us and now gets tremendous subsidies to these corporations, subsidies which were originally meant to help family farmers, and that made sense. 
but nowadays, it's just subsidies to big business. 
and then you look at the private prison industry, which is a great reason […] they use the prisoners, they have the prisoners work, but it's the company that gets the money. 
the prisoner gets paid like 50 cents a day, which is even better for them than hiring somebody in mexico or china. 
and so, that's a reason to imprison more americans because they're effectively slave labor. 
and then we will get the oil companies, and they push for burning up our planet. 
you may have followed the fight to block the keystone xl planet roaster pipeline, and that's not dead either. 
so what is it these things have in common? 
what they have is, corporations have power so we need to clean up politics. 
we need to get corporate money out of politics. 
and i got a book yesterday, let me read the exact title, it's "corporations are not people" by jeffrey clements, and this proposes a constitutional amendment to say "no, when the constitution gives rights to people or persons it's not talking about corporations."
 aj well, the power to give corporations rights so they can then stomp on our rights, it's very very frightening, and for those who don't know, you couldn't even have corporations in this country the way they are until about the last 130 years or so, before that they had limited duration to build a bridge or to do some type of program. 
and i understand a little company having a corporation so you can have different people involved together, but the idea of giving it more rights than the humans, and then having these crooks that run it. 
i mean, take mitt romney: he's got most his money in the cayman islands, and he's running around lecturing everybody, and he's paying almost no taxes. 
rs well, he said that corporations are people and someone pointed out that if that's true, then he's a serial killer. 
aj ha-ha, yeah i saw that! 
rs i don't want to abolish corporations either, but we must abolish the political power of business. 
in this country, it's taken for granted that powerful business has a veto over everything. 
and that means it's taken for granted that we've lost our democracy. 
no one should think about that without feeling disgusted and saying this must be changed. 
get that book, because he explains how it's not an accident that the supreme court gave corporations unlimited power to pay for political ads. 
it's the culmination of a 40-year or 35-year perhaps campaign for giving human rights to corporations. 
aj it is very very dangerous, and now those corporations are destroying our sovereignty, our local control. 
dr. 
stallman, thank you so much for spending time with us and again give us your website and any other websites you think are important for people to look at. 
rs for free software, look at the free software foundation site, that is http://fsf.org, and you can join, if you wish. 
for my other political causes, look at http://stallman.org. 
and if you want to join our fight against digital handcuffs (drm), go to http://defectivebydesign.org. 
and for the danger of ebooks and how they take away our freedom, look at http://stallman.org/articles/ebooks.pdf. 
aj alright, doc, thanks for the time, but in the final statement, just reiterating you think it's really exciting that there's such an awakening to the power grabbing of the copyright industry and the fact that hollywood and others just think they control the known universe, and this has certainly gotten their attention, what do you expect them to do now? 
how will… rs they'll find another way. 
you see, whether we defeat sopa or not, even if we defeat it, it'll be clear that we defeated it because the measures they wanted to take were going to cause tremendous damage to everything around them. 
but if they propose something else that'll give them more power, but won't hurt other companies, they might still get away with it. 
so what that means is we still have a long way to go in building up our opposition to the point where we can start to undo some of the injustices they have already put into copyright law. 
aj so it was just so ham-fisted and so brazen bull in a china cabinet, they were unable to get it, but they will come back. 
and it does show, i mean, remember five years ago, when mccain said "let's pass a bill where no judge, no jury, no proof we just kill your computer if we think you did something copyright," i mean, this is overthrowing our entire magna charta, our entire constitution. 
i mean, it's tyrannical on it's face, doc. 
rs absolutely. 
but that's what big business is like. 
big business just wants power and has no respect for anything. 
aj wow. 
well, i look forward to speaking with you again, thank you so much, doctor. 
rs happy hacking! 
thanks for giving me the chance. 
aj yeah, thanks for being with us. 
footnote. 
[2019] we call it the swindle because it's designed to swindle readers out of the traditional freedoms of readers of books. 
comments on roderick long's article. 
stallman the ideas of the free software movement are compatible with social-democratic (us liberal) views and with laissez-faire (us libertarian&#8239;[1]) views. 
free software is a matter of freedom. 
from our point of view, precisely which legal mechanism&#8239;[2] is used to deny software users their freedom is just an implementation detail. 
whether it is done with copyright, with contracts, or in some other way, it is wrong to deny the public the freedoms necessary to form a community and cooperate. 
this is why it is inaccurate to understand the free software movement as specifically a matter of opposition to copyright on software. 
it is both more and less than that. 
however, you will often hear people of right-wing ideological persuasion argue in vague way that some general moral principle of property rights compels us to cede our freedom to a system of copyright, regardless of how this affects our way of life. 
the right-wing libertarian counterargument, coming as it does from a group that regards property rights as the highest moral principle, is useful as a refutation. 
it shows that even if you adore property rights for physical objects, you are not compelled to accept copyright. 
roderick t. long, "the libertarian case against intellectual property rights" at freenation.org, 1995. 
… or technical mechanism, such as withholding the source code, or tivoization. 
the hacker community and ethics. 
stallman transcript of an interview that took place in 2002.[*] hackerism. 
tere vad&eacute;n (tv): one of the most striking features of your approach to the issues of technology and software and so on is that you consider ethical and social matters more important than possible technological advantages. 
while that maybe should be the norm, it unfortunately is not so. 
the main issues seems to be one of community; what kinds of communities different ways of using technology promote. 
am i guessing right if i believe that you are thinking of ethical issues in terms of communities? 
richard m. stallman (rms): yes. 
the way i reached my conclusions about which freedoms are essential for using software, and which kinds of license requirements are acceptable, is by thinking about whether they would interfere with the kinds of use of the software that are necessary to have a functioning community. 
tv: the idea of free software was born out of your experiences at mit, and how that community was infiltrated and in some sense destroyed by commercial interests. 
rms: yes, that is correct. 
the hackers really enjoyed the freedom to share and change software; that was the basis for our free-wheeling community. 
tv: what does the word "hacker" mean to you, personally? 
rms: it means someone who enjoys playful cleverness, especially in programming but other media are also possible. 
in the 14th century, guillaume de machaut wrote a palindromic three-part musical composition. 
it sounded good, too—i think i played in it once, because i still remember one of the parts. 
i think that was a good hack. 
i heard somewhere that j. s. bach did something similar. 
one possible arena for playful cleverness is breaking security. 
hackers never had much respect for bureaucratic restrictions. 
if the computer was sitting idle because the administrators wouldn't let them use it, they would sometimes figure out how to bypass the obstacles and use it anyway. 
if this required cleverness, it would be fun in itself, as well as making it possible to do other hacking (for instance, useful work) on the computer instead of twiddling one's thumbs. 
but not all hackers did security breaking. 
many never were interested in that. 
on the incompatible timesharing system, the operating system developed by the ai lab's hackers, we made it unnecessary to break security: we simply did not implement security in the system. 
the hackers realized that security would be a mechanism for the administrators to dominate us. 
so we never gave them the means. 
tv: how about the concepts of freedom and community? 
there's this idea that freedom to distribute ideas, thoughts, recipes and software creates the best kinds of communities or at least better than those based on commercial limitations on distribution and sharing. 
rms: i think it is a mistake to label these restrictions as "commercial," because that pertains to the motive for the restrictions. 
the same restrictions, if imposed for a different motive, would do the same harm. 
what matters is the restrictions, not the motive. 
commercial software can be free or nonfree, just as noncommercial software can be free or nonfree. 
it only depends on the license. 
tv: how would you delineate the distinction between the public (communal, freedom-based) and the commercial spheres? 
rms: comparing free with commercial is like comparing happiness with purple. 
it doesn't make sense, because they are not answers to the same question. 
they are not alternatives. 
the meaningful comparison is between free and nonfree software. 
tv: it seems that the distinction between "open source" and "free software" is that the open source movement ultimately justifies the idea on utilitarian grounds; open source is the best way of producing functional software; while the ultimate justification for free software is non-calculative, non-utilitarian; freedom is unviolable. 
is that a correct interpretation? 
rms: more or less. 
i would say that freedom has value in itself, just as powerful reliable software does. 
tv: but isn't there a problem here? 
one of the utilitarian calculations of "open source" is that it is more profitable—in the sense of making more money or making better software—to use an open source license than a copyleft license. 
a company like apple or nokia will adapt open source up to point, precisely the point where making it more free would turn the profitability down. 
rms: i agree that it is wrong for these decisions (about your freedom and mine) to be made by the software developer for the sake of his profit, just as the decision about whether you and i have freedom of speech should not be made by some third party for his own interests. 
i am not going to condemn someone who does the right thing for the wrong reason, but it is true that relying on people to respect our freedom because it is profitable for them to do so is not a reliable system for protecting our freedom. 
this is the reason why we must reduce the political power of business. 
tv: the argument that a company would use, of course, is that the profit it creates ultimately benefits the whole society. 
how would you respond to that? 
rms: that is a claim with no basis. 
a nonfree program can only benefit those who don't value their freedom, and thus serves as a temptation for people to give up their freedom. 
that is harmful to society. 
tv: there is also this question of individual/private vs public/communal here. 
it is often in the interests of the individual to do something that threatens the community, threatens freedom. 
rms: i know. 
this is why we need to think about right and wrong in making our decisions, and also the reason why societies have a notion of punishing actions that hurt the community. 
tv: now, somebody like torvalds—and we don't necessarily have to use any names here—would probably share your enthusiasm about hackerism in the sense of playful cleverness, and would take that playful cleverness also to the area of being clever in making money and enjoying the good life. 
actually that is what he hints at in a recent book called "the hacker ethics."
 rms: that is true. 
just because someone enjoys hacking does not mean he has an ethical commitment to treating other people properly. 
some hackers care about ethics—i do, for instance—but that is not part of being a hacker, it is a separate trait. 
some stamp collectors care a lot about ethics, while other stamp collectors don't. 
it is the same for hackers. 
i agree with the person who said that there is no hacker ethic, but rather a hacker aesthetic. 
tv: now, if one wants to avoid the negative consequences of the profit-oriented business, it feels that one has to give the individual a good reason for not looking after only his or her own best. 
and that something, that reason, might be something in the public sphere. 
rms: of course—but why are you treating this as if it were a new idea that can only be hinted at. 
this idea is thousands of years old. 
this is the basic idea of ethics. 
tv: the question about hacker aesthetics—as you explained, there is no special hacker ethics, because a hacker can act ethically or unethically and nothing in hackerism itself necessitates ethical behavior. 
rms: hacking is not primarily about an ethical issue. 
it is an idea of what makes life meaningful. 
but he may be right that hacking tends to lead a significant number of hackers to think about ethical questions in a certain way. 
i would not want to completely deny all connection between hacking and views on ethics. 
although someone said that there was a hacker aesthetic rather than a hacker ethic, i think "aesthetic" is not quite the right word either. 
an aesthetic is an idea of what is beautiful. 
this is an idea of what is exciting and meaningful. 
is there a word for that? 
i can think of "the hacker way," but that sounds rather pompous and new-age. 
community. 
tv: now that brings to mind several questions. 
for the first, one could maybe inquire after an ideal society or go forth, but let's leave that for the moment. 
rms: i approach these issues incrementally. 
i don't think i could try to design an ideal society and have any confidence in the conclusion. 
attempts to propose a society quite different from the ones we know often tend to be disastrously flawed. 
so instead i propose local changes which i have some reason to believe are good. 
note that i didn't imagine the free software community on my own—if i had, i would not be so confident it is a good idea. 
i knew that from having tried it. 
tv: is there something that digitalization offers for community-building, something that other media (like printed books) could not offer, or does digitalization mean "just" an effectivization of existing means? 
rms: computers and the web make it much easier to work collaboratively and continuing to improve publications. 
i think that this will become even more true in the future, as people develop better ways to do it. 
the proprietary mindset might as well be precisely calculated to deprive us of this benefit of the internet. 
tv: now, from a historical and philosophical perspective it seems that many a good invention or technological advance has resulted in the intensification of colonialization rms: in general, technology is a good thing, and we shouldn't turn it down. 
technology tends to cause cultural change. 
this is not necessarily a bad thing, and we should not condemn it in a blanket fashion. 
there are just certain specific kinds of cultural change that we need to oppose. 
tv: i do not necessarily want to get stuck on this public/commercial issue, but if we say that we need communal agreements, values and systems that tone down the selfishness of the individual, and we say that the commercial world systematically has a tendency to promote selfishness, then i guess we have to conclude that there is a crucial distinction between the communal and the commercial? 
rms: i would agree. 
one person can belong to a community and work in a business at the same time. 
nevertheless, there is a fundamental conflict between the communitarian attitude and the commercial attitude. 
i would not say that the communitarian attitude is good and the commercial attitude is bad. 
it makes no sense to aim to eliminate the commercial attitude, because that is simply selfishness, and selfishness is vital. 
people must be selfish to a certain extent, just as they ought to be altruistic to a certain extent. 
to abolish selfishness would not make sense, even if it were possible. 
tv: i mean, in many ways one could say that the communities in the post-industrial countries these days are based on commercialism, i.e., people get together, work, communicate etc. 
mostly because of commercial reasons. 
rms: this is a rather weak and ineffective kind of community, hardly worthy of the name. 
tv: and, furthermore, like you know, the research and university community is also very tightly bound to the economical interests of the nations, states and of the companies. 
rms: universities ought to resist being turned to commercial purposes, for the sake of their integrity. 
they have failed to resist. 
people will always be partly selfish; to keep selfishness from engulfing society, we need unselfish institutions such as universities and democratic governments to balance the selfishness and put a check on it. 
the problem today is that organized selfishness is taking over society, crushing the other institutions that were designed to put a check on it. 
tv: but, the counter argument goes, a free market economy that seeks to maximize profit, is the only way of producing wealth and functioning democratic communities. 
rms: the free software community shows, as cooperatives in sweden showed, that this is not true. 
there are other ways of producing wealth. 
but beyond that, producing wealth is not the be-all and end-all of a good society. 
there is no need to bend every aspect of life to maximizing the total wealth. 
the idea of sacrificing everything else to the production of wealth—regardless of who gets to share in it!—is exactly what's wrong with the wto. 
as for producing functioning democratic communities, allowing commerce to dominate not only fails to do that, it is directly antagonistic to that. 
tv: if ethics applies to everyone, and ethics is based on community, does this mean that there is an ideal community to which everyone should belong? 
rms: i don't think that follows. 
copyleft. 
tv: the concept of copyleft is a brilliant tool for the communal purposes. 
could you tell a little on how you arrived at the idea? 
rms: i had seen simple notices of the form "verbatim copying permitted provided this notice is preserved," and investigated extending this to handle modification as well. 
tv: let's take a case here. 
i can see that a free software developer might be able to make a living by doing free software, because people would pay for the software, pay for the manuals, pay for the joy of being a part of the community, and so on. 
i don't think that is impossible. 
the same might go for certain musicians, even scientists and so on. 
but how about a writer, a poet, even a musician that works in a very limited language area—say, finnish. 
making free software or free music or free poetry will not be a viable option, because the community is too small to support that kind of activity. 
rms: the current system does rather a bad job of supporting these activities. 
to replace it with nothing at all would not make things much worse for these people. 
however, i think that voluntary methods of support could do just as good a job as the present system—maybe better. 
tv: this seems to lead to some kind of "americanization" or "anglization."
 rms: you can't be serious, can you? 
don't you realize that the media-copyright complex is fueling the americanization of culture around the world? 
disconnecting that complex would do a lot to improve the situation. 
tv: i was just thinking of the fact that in a small language area something like copyrights actually do some good for creative work. 
rms: not much good, though. 
how many finnish writers make a living from copyright today? 
note that i don't advocate the simple and total abolition of copyright for all kinds of works. 
see my speech, copyright and globalization. 
globalization . tv: you have touched on some issues of globalization is some recent interviews. 
one of the problems is that copyright laws put many third world countries in an unfavorable position. 
do you think that those countries should not follow the copyright laws? 
rms: the us when it was a developing country did not recognize foreign copyrights. 
so why should anyone else? 
of course, we know the reason why: it is part of a system of economic domination that the wealthiest business owners have imposed on the rest of the world. 
tv: and, furthermore, could one see this issue also in terms of communities? 
if i remember correctly, you have said that globalization in the economic sense does not seem to be a good way of promoting or distributing well-being. 
rms: there is nothing wrong with globalization in the abstract. 
what makes today's form of globalization so bad is not really the global aspect of it. 
it is that the wto/imf system subordinates all other interests to the interests of business. 
laws to protect the environment, public health, workers' rights, and the general standard of living, are regularly swept aside. 
the result is a major transfer of wealth from most people to business owners. 
paradoxically, it seems to be accompanied by reduced growth as well. 
the best way to understand today's "globalization" is as a system to transfer power from democratic governments to business, which only incidentally happens to be global. 
elimination of trade barriers could be a good thing if accompanied by global labor standards, global environmental standards, global health care, a global minimum wage (even if not uniform), and global income taxes. 
if these were enforced world-wide with the same energy that the us pressures countries to use for copyright enforcement, we could have global trade, clean factories, and high wages. 
the world-wide free software community is an example of beneficial globalization: people share knowledge with the whole world. 
ethics. 
tv: how is ethical "work" best done? 
it seems that you often invoke teachers like buddha or jesus as examples of a ethical way of life. 
rms: i never invoke jesus. 
i am not a christian and i don't especially admire jesus. 
i admire buddha somewhat more, but i don't invoke any teacher or hero as an authority, only perhaps as an example. 
tv: it is also clear that one of the fascinating and influential features of your work is that you live as you teach. 
is that a conscious decision in the sense that you think that ethics is something that can be taught best through example? 
rms: not at all. 
i do write about my ethical ideas, and i would like to do it more and better if i could. 
of course, it is necessary to live in conformity with one's principles, or one is a hypocrite and people can see that. 
tv: if we say that the reason for ethical behavior must be given in the public sphere, let's say through a social contract or something similar, and if we at the same time notice that the economical/commercial sphere is driven by "maximum profit"-type of principles, then we have to have some sort of separation between the public and the commercial world. 
rms: i don't follow this reasoning—i see no separation. 
ethics applies to everyone, and the whole point of ethics is that some things you might selfishly wish to do are wrong, so you may not do them. 
this applies to group selfishness just as as to personal selfishness. 
tv: … and then the commercial world would be something that almost by necessity corrupts the idea of freedom. 
rms: business does have that tendency. 
corporations provide a mechanism to distill the selfishness out of people who, as individuals, are partly selfish but also have ethics to limit their selfishness. 
the result is selfishness that can often be unchecked by any ethics. 
to change this will require taking away the power of global business over governments. 
tv: reading steven levy's hackers once again, i was struck by one issue: the hackers as displayed in the book are mostly concerned with the hacker ethic in so far as it concerns "tools to make tools."
 rms: i don't think so. 
a number of our programs were tools for making programs, but very few were specifically "tools to make tools."
 why were many of them tools? 
because hackers writing programs get ideas for better ways to do that. 
what computer hackers do is program. 
so they get excited about anything that makes programming easier. 
if a hacker does square dancing, he would get excited about anything on the computer that is helpful for square dancing. 
he might write a program to help people learn square dancing. 
this indeed has happened. 
a few computer hackers do square dancing, but all computer hackers program. 
so a few are interested in writing programs for square dancing, but many are interested in programs they can use while programming. 
tv: levy is not too hard on the point, but the unscrupulousness with which the early mit hackers accepted the department of defence funding is a case in point. 
rms: some of the hackers were uncomfortable with dod funding at the time, but they did not go so far as to rebel against it (by quitting, say). 
i disagreed with them i don't think it was wrong to accept that funding, and i did not think it wrong at the time. 
corporate funding is far more dangerous. 
so i would not call them unscrupulous for having accepted this funding. 
tv: this reminds of the "instrumental rationality" that the frankfurt school of critical theorists talked about; rationality that pertains to tools, but not goals. 
rms: engineers of all kinds are famous for this; i am not sure it is more true of hackers than others. 
tv: so, this brings me to the question, if ethics is about goals and about content, what exactly is the society or community that free software promotes? 
rms: my goal is that we help each other to live better together. 
advancing human knowledge is a part of this; making sure it is available to everyone is a part of this; encouraging the spirit of cooperation is a part of this. 
those goals apply to various parts of life, but in the area of software they direct one towards free software. 
tv: when and how did you notice that the tools to make tools-attitude is not enough? 
rms: that just tools without thinking of what to do with them is one i picked up this idea in my teens, i think. 
it was well known in the 60s; one did not have to be especially searching to happen across it then. 
i think of the tom lehrer song, "werner von braun": i send rockets up, but where they come down is not my department, says werner von braun. 
lots of people heard this song. 
tv: and, maybe most interestingly, how do you combine the two, the hacking that is intense and interesting and the ethical real-world work, that is often tenuous and boring? 
rms: here you seem to assume that hacking is neither ethical nor real-world. 
i disagree with both assumptions. 
by the way, some parts of developing and releasing a working program are tedious; they are not merely boring, they are frustrating. 
but hackers by the thousands in the free software community do these tasks in order to release working and reliable free software. 
tv: i think this is even quite common in fields like computer science, physics, mathematics, philosophy, where the austerity and purity of the formalism give an intense pleasure of a "non-earthly" kind. 
is there a link? 
should there be? 
and how do you bridge the two? 
rms: is there a link between the pleasure of pure math and the rest of life? 
no, i see very little connection, and why should there be one? 
i enjoy folk dancing, as well as pure math. 
there is very little link between either of those pleasures and the rest of what i do. 
why should there be? 
they are both harmless. 
is there a "gap" that i need to "bridge"? 
[*] published in finnish in tere vad&eacute;n & richard m. stallman: koodi vapaaksi - hakkerietiikan vaativuus, tampere university press. 
2002, sivut 62-80. 
interview with richard stallman, edinburgh, 2004. 
transcript of an interview that took place at the school of informatics, edinburgh university, on 27 may 2004; originally published at indymedia (audio recording). 
a person doesn't devote his whole life to developing a new form of freedom without some pre-existing beliefs that drive him to do so. 
what drives you to spend so much time on software freedoms? 
first of all, growing up in the us in the 1960s, i certainly was exposed to ideas of freedom. 
and then, in the 1970s at mit, i worked as part of a community of programmers who cooperated, and thought about the ethical and social meaning of this cooperation. 
then that community died in the early eighties, and by contrast with that, the world of proprietary software, which most computer users at the time were participating in, was morally sickening. 
and i decided that i was going to try to create once again a community of cooperation. 
i realized that, what i could get out of a life of participation in the competition to subjugate each other, which is what nonfree software is, all i could get out of that was money, and i would have a life that i would hate. 
do you think that the free software movement, or parts of it, could or does benefit from collaboration with other social movements? 
i don't see very much direct benefit to free software itself. 
on the other hand we are starting to see some political parties take up the cause of free software, because it fits in with ideas of freedom and cooperation that they generally support. 
so in that sense, we're starting to see a contribution to the ideas of free software from other movements. 
have you considered that the free software movement is vital to oppositional movements in the world that are against corporate rule, militarism, capitalism, etc.? 
well, we are not against capitalism at all. 
we are against subjugating people who use computers, one particular business practice. 
there are businesses, both large and small, that distribute free software, and contribute to free software, and they're welcome to use it, welcome to sell copies, and we thank them for contributing. 
however, free software is a movement against domination, not necessarily against corporate domination, but against any domination. 
the users of software should not be dominated by the developers of the software, whether those developers be corporations or individuals or universities or what. 
the users shouldn't be kept divided and helpless. 
and that's what nonfree software does; it keeps the users divided and helpless. 
divided because you're forbidden to share copies with anyone else, and helpless because you don't get the source code. 
so you can't even tell what the program does, let alone change it. 
so there is definitely a relationship. 
we are working against domination by software developers. 
many of those software developers are corporations, and some large corporations exert a form of domination through nonfree software. 
and also that free software developers could provide a technical infrastructure for these movements that would be impossible to develop using proprietary software, which are too expensive and locked into an ideological model that reflects the interests of the dominant world-system like commoditization, exploitation, control and surveillance, instead of sharing, justice, freedom and democracy? 
at the moment i wouldn't go quite so far as to say that nonfree software couldn't be usable by opposition movements, because many of them are using it. 
it is not ethical to use nonfree software. 
because… at least it is not ethical to use authorized copies. 
but it's not a good thing to use any copies. 
you see, to use authorized copies, you have to agree not to share with other people, and to agree to that is an unethical act in itself, which we should reject. 
and that is the basic reason why i started the free software movement. 
i wanted to make it easy to reject the unethical act of agreeing to the license of a nonfree program. 
if you're using an unauthorized copy, then you haven't agreed to that. 
you haven't committed that unethical act. 
but you are still… you are condemned to living underground. 
and you're still unable to get the source code, so you can't tell for certain what those programs do. 
and they might in fact be carrying out surveillance. 
and i was told that in brazil, the use of unauthorized copies was in fact used as an excuse to imprison the activists of the landless rural workers movement, which has since switched to free software to escape from this danger. 
and they indeed couldn't afford the authorized copies of software. 
so, these things are not lined up directly on a straight line, but there's an increasing parallel between them, an increasing relationship. 
the business corporation as a social form is very closed—it answers to no one except its shareholders, for example a small group of people with money, and its internal bureaucratic organization is about as democratic as a soviet ministry. 
does the increasing involvement of corporations with free software strike you as something to be concerned about? 
not directly. 
because as long as a program is free software, that means the users are not being dominated by its developers. 
whether these developers be a large business, a small business, a few individuals or whatever, as long as the software is free, they are not dominating people. 
however, most of the users of free software do not view it in ethical and social terms. 
there is a very effective and large movement called the open source movement, which is designed specifically to distract the users' attention from these ethical and social issues while talking about our work. 
and they've been quite successful; there are many people who use our free software, which we developed for the sake of freedom and cooperation, who have never heard the reasons for which we did so. 
and, this makes our community weak. 
it's like a nation that has freedom, but most of its people have never been taught to value freedom. 
they are in a vulnerable position, because if you say to them, "give up your freedom and i'll give you this valuable thing," they might say yes because they've never learnt why they should say no. 
you put that together with corporations that might want to take away people's freedom, to gradually encroach on freedom, and you have a vulnerability. 
and what we see is that many of the corporate developers and distributors of free software put it in a package together with some nonfree user-subjugating software. 
and so they say that the user-subjugating software is a bonus, that it enhances the system. 
and if you haven't learnt to value freedom, you won't see any reason to disbelieve them. 
but this is not a new problem and it's not limited to large corporations. 
all of the commercial distributors of the gnu/linux system, going back something like 7 or 8 years, have made a practice of including nonfree software in their distributions, and this is something that i've been trying to push against in various ways, without much success. 
but, in fact, even the noncommercial distributors of the gnu+linux operating system have been including and distributing nonfree software; and the sad thing was that, of all the many distributions, until recently there was none that i could recommend. 
now i know of one, that i can recommend; its called "ututo-e"; it comes from argentina. 
i hope that very soon i will be able to recommend another. 
why are the more technically-oriented beliefs of the open source movement not enough for you? 
the open source movement was founded specifically to discard the ethical foundation of the free software movement. 
the free software movement starts from an ethical judgment, that nonfree software is antisocial; it's wrong treatment of other people. 
and i reached this conclusion before i started developing the gnu system. 
i developed the gnu system specifically to create an alternative to an unethical way of using software. 
when someone says to you, "you can have this nice package of software, but only if you first sign a promise you will not share it with anyone else," you are being asked to betray the rest of humanity. 
and i reached the conclusion in the early eighties that this was evil. 
but there was no other way to use a modern computer. 
all the operating systems required exactly such a betrayal before you could get a copy. 
and that was in order to get an executable binary copy. 
you couldn't have the source code at all. 
the executable binary copy is just a series of numbers, which even a programmer has trouble making any sense out of. 
the source code looks sort of like mathematics, and if you've learnt how to program you can read that. 
but that intelligible form, you couldn't get, even after you signed this betrayal. 
all you would get is the nonsensical numbers, which only the computer can understand. 
so, i decided to create an alternative, which meant another operating system, one that would not have these unethical requirements, one that you could get in the form of source code, so that, if you decided to learn to program, you could understand it. 
and you would get it without betraying other people, you'd be free to pass it on to others. 
free either to give away copies or sell copies. 
so i began developing the gnu system, which in the early nineties was the bulk of what people erroneously started calling linux. 
so it all exists because of an ethical refusal to go along with an antisocial practice. 
but this is controversial. 
in the nineties, as the gnu+linux system became popular and got to have some millions of users, many of them were techies with technical blinders on, who didn't want to look at things in terms of right and wrong, but only in terms of effective or ineffective. 
so they began telling many other people, "here is an operating system that's very reliable, and is powerful, and it's cool and exciting, and you can get it cheap."
 and they did not mention that this allowed you to avoid an unethical betrayal of the rest of society, that it allowed users to avoid being kept divided and helpless. 
so, there were many people who used free software, but had never even heard of these ideas. 
and that included people in business, who were committed to an amoral approach to their lives. 
so, when somebody proposed the term "open source," they seized on that, as a way that they could bury these ethical ideas. 
now, they have a right to promote their views. 
but, i don't share their views, so i decline ever to do anything under the rubric of "open source," and i hope that you will, too. 
given that it helps users to understand the freedoms in free software when the ambiguous use of the word free in english is clarified, what do you think of the use of the name floss as in free/libre open source software? 
there are many people who, for instance, want to study our community, or write about our community, and want to avoid taking sides between the free software movement and the open source movement. 
often they have heard primarily of the open source movement, and they think that we all support it. 
so, i point out to them that, in fact, our community was created by the free software movement. 
but then, they often say that they are not addressing that particular disagreement, and they'd like to mention both movements without taking a side. 
so i recommend the term free/libre open source software as a way they can mention both movements and give equal weight to both. 
and they abbreviated floss once they have said what it stands for. 
so i think that's a… if you don't want to take a side between the two movements, then yes, by all means, use that term. 
of course what i hope you will do is take the side of the free software movement. 
but not everybody has to. 
that term is legitimate. 
are you happy with the development of the community which has grown out of your vision of a free operating system? 
in what way did it develop differently from the vision you had at the beginning? 
well, by and large, i am pretty happy with it. 
but of course there are some things that i am not happy with, mainly the weakness that so many people in the community do not think of it as an issue of freedom, have not learned to value their freedom, or even to recognize it. 
that makes our future survival questionable. 
it makes us weak. 
and so, when we face various threats, this weakness hampers our response. 
our community could be destroyed by software-idea patents. 
it could be destroyed by treacherous computing. 
it could be destroyed simply by hardware manufacturers' refusal to tell us enough about how to use the hardware, so that we can't write free software to run the hardware. 
there're many vulnerabilities that we have over the long-term. 
and, well, the things we have to do to survive these threats are different. 
in all cases, the more aware we are, the more motivated we are, the easier it will be for us to do whatever it takes. 
so, the most fundamental long-term thing we have to [do is to] recognize and then value the freedom that free software gives, so that they will fight for their freedoms the same way people fight for freedom of speech, freedom of the press, freedom of assembly, because those freedoms are also greatly threatened in the world today. 
so, what in your opinion threatens the growth of free software at the moment? 
i have to point out that our goal is not precisely growth. 
our goal is to liberate cyberspace. 
now, that does mean liberating all the users of computers. 
we hope eventually they all switch to free software, but we shouldn't take mere success as our goal; that's missing the ultimate point. 
but if i take this to mean, "what is holding back the spread of free software?"
 well, partly at this point it's inertia, social inertia. 
lots of people have learnt to use windows. 
and they haven't yet learnt to use gnu/linux. 
it's no longer very hard to learn to use gnu/linux. 
five years ago it was hard, now it is not. 
but still, it's more than zero. 
and people who are, you know,… if you never learned any computer system, then learning gnu/linux is as easy as anything, but if you've already learnt windows, it's easier… it's easier to keep doing what you know. 
so that's inertia. 
and there are more people trained in running windows systems than in running gnu/linux systems. 
so, any time you're trying to convince people to change over, you're working against inertia. 
in addition, we have a problem that hardware manufacturers don't cooperate with us the way they cooperate with microsoft. 
so we have that inertia as well. 
and then, we have the danger in some countries of software-idea patents. 
i would like everybody reading this to talk to all of… or anybody listening to this to talk to all of their candidates for the european parliament, and ask, "where do you stand on software-idea patents? 
will you vote to reinstate the parliament's amendments that were adopted last september and that apparently are being removed by the council of ministers? 
will you vote to bring back those amendments in the second reading?"
 this is a very concrete question. 
with a yes or no answer. 
you will often get other kinds of… you may get evasive answers if you ask, "do you support or oppose software-idea patents?"
 the people who wrote the directive claim that it does not authorize software-idea patents. 
they say that this is because the directive says that anything to be patented must have a technical character. 
but somebody in the european commission involved in this admitted that, that term means exactly what they want it to mean, humpty-dumpty style. 
so, in fact, it's no limitation on anything. 
so if a candidate says, "i support the commission's draft because it won't allow software-idea patents," you can point this out, and press the question, "will you vote for the parliament's previous amendments?"
 ok, thanks very much. 
interview with richard stallman, kerneltrap.org, 2005. 
richard stallman founded the gnu project in 1984, and the free software foundation in 1985. 
he also originally authored a number of well known and highly used development tools, including the gnu compiler collection (gcc), the gnu symbolic debugger (gdb) and gnu emacs. 
to better understand richard stallman and the gnu project, i recommend you begin by reviewing their philosophy page. 
on it you will find a wealth of information. 
we began this interview via email, but later had to finish by telephone after richard stallman fell and broke his arm. 
he was kind enough to speak with me at length, discussing his first contact with computers, his time in the ai lab, the current state of the gnu hurd, his current role in the free software foundation, the problems with nonfree software, and much more. 
the following words offer much insight into how we got here, and what challenges we still face. 
background. 
jeremy andrews: when did you first start working with computers? 
richard stallman: i first read manuals and wrote programs on paper in 1962 or so. 
1969 was when i first saw and used a real computer. 
ja: what types of programs were you writing prior to actually seeing and using a real computer? 
richard stallman: they were pretty trivial, like things to add up a vector of numbers. 
about the time i first started with a real computer i designed a computer language based on string substitution. 
in some ways like snobol, although i'd never used snobol. 
and then, the first thing i started writing when i had a real computer to use—i'd seen the language pl/i and i was thrilled by how many features it had. 
but there was a feature it didn't have: it didn't have the summation convention used in tensor analysis. 
so i started to write a pre-processor for pl/i that would implement the summation convention. 
i didn't ever finish it, but i actually got some parts of it to work. 
i wrote it first in pl/i, and then we discovered that even one pass of it wouldn't fit in the machine that was available. 
(i had actually written a lot of parts of this in pl/i on paper by that point.) then i started rewriting it in assembler language, but i only rewrote a few passes of it in assembler language. 
and then i learned about things like lists and about lisp, and lost interest in languages like pl/i. 
ja: when you graduated from harvard in 1974 with a ba in physics, how did you intend to use your degree? 
richard stallman: i thought i would become a theoretical physicist; however, the pleasure of programming, where i could make real progress and see results, gradually grew and overtook the pleasure of learning physics. 
life in the ai lab. 
ja: what tasks occupied your time at the ai lab through the 1970's? 
richard stallman: mostly operating system development, but i did one ai research project with professor sussman; we developed dependency-directed backtracking. 
ja: what is dependency-directed backtracking? 
richard stallman: you make some assumptions, and with those together with some given facts you draw a conclusion. 
you may reach a contradiction; if so, at least one of your assumptions that led to that contradiction must be wrong. 
you also record which combination of assumptions actually related to the contradiction, so you can deduce that that combination of assumptions cannot all be true. 
then you backtrack by changing assumptions, but you never try a set of assumptions that includes the combination that you know are contradictory. 
now, this is a technique that people had used for a long time in thinking. 
it's also known as proof analysis. 
but it hadn't been used in computerized reasoning. 
ja: what was the result of this research project? 
richard stallman: we published a paper. 
the technique got used by other people later, so apparently it became part of ai. 
also, i learned how to understand electrical circuits better. 
the program that we wrote, which used this technique, was a program for understanding electrical circuits. 
by imitating the program, i could understand circuits better than i could before. 
the gnu project and the free software foundation. 
ja: the story of your encounter with nonfree printer software in the early 80's is very well known. 
this incident ultimately resulted in your founding the gnu project in 1984, and the free software foundation in 1985. 
you have remained quite active in this movement ever since, as a public speaker and a prolific author of free software. 
of which of your many achievements in the past two decades are you the most proud? 
richard stallman: what i am proud of is that we have built a community where people can use computers and work together in freedom. 
ja: what are the largest challenges you're facing today? 
richard stallman: software patents. 
the digital millennium copyright act. 
the broadcast flag. 
cards with secret specifications. 
nonfree java platforms. 
in other words, organized efforts by people with power to put an end to our freedom. 
ja: is there a plan for addressing these issues? 
richard stallman: regarding the laws, not much of one, in the us. 
in other countries that do not yet have these laws, we can try to prevent them. 
ja: that's a bit scary. 
richard stallman: it is. 
"free software" vs. 
"open source". 
ja: you regularly have to explain the differences between "free software" and "open source software," and yet the media continues to confuse these terms. 
for our readers that may therefore be confused themselves, can you explain the differences, and why it is important to get it right? 
richard stallman: free software and open source are the slogans of two different movements with different philosophies. 
in the free software movement, our goal is to be free to share and cooperate. 
we say that nonfree software is antisocial because it tramples the users' freedom, and we develop free software to escape from that. 
the open source movement promotes what they consider a technically superior development model that usually gives technically superior results. 
the values they cite are the same ones microsoft appeals to: narrowly practical values. 
free software and open source are also both criteria for software licenses. 
these criteria are written in very different ways but the licenses accepted are almost the same. 
the main difference is the difference in philosophy. 
why does the philosophy matter? 
because people who don't value their freedom will lose it. 
if you give people freedom but don't teach them to value it, they won't hold on to it for long. 
so it is not enough to spread free software. 
we have to teach people to demand freedom, to fight for freedom. 
then we may be able to overcome the problems that today i see no way to solve. 
"gnu/linux". 
ja: another frequent area of confusion is the name "gnu/linux."
 why is the gnu project's contribution significant enough that it should be in the name of the operating system, especially compared to other large pieces of any linux-kernel based operating system, such as xfree86? 
richard stallman: it's no coincidence that the code we wrote for the gnu system is the largest single contribution to the gnu/linux system today. 
many other people and projects have developed free software programs now used in the system; tex, bsd code, x11, linux, and apache are noteworthy examples. 
but it was the gnu project that set out to develop a complete free operating system. 
the combined system we use today is founded on gnu. 
ja: in talking about gnu linux… richard stallman: i prefer to pronounce it "gnu slash linux," or "gnu plus linux."
 the reason is that when you say "gnu linux" it is very much prone to suggest a misleading interpretation. 
after all, we have gnu emacs which is the version of emacs which was developed for gnu. 
if you say "gnu linux," people will think it means a version of linux that was developed for gnu. 
which is not the fact. 
ja: you're trying to point out instead that it's a combination of the two. 
richard stallman: exactly. 
it's gnu plus linux together. 
ja: which makes up the gnu+linux operating system that everyone uses. 
richard stallman: exactly. 
ja: what is gained by people using the term gnu/linux? 
richard stallman: people know that linus torvalds wrote his program linux to have fun. 
and people know that linus torvalds did not say that it's wrong to stop users for sharing and changing the software they use. 
if they think that our system was started by him and primarily owes existence to him, they will tend to follow his philosophy, and that weakens our community. 
it's an interesting anecdote to think that the whole operating system exists because an undergraduate thought that it was a fun project. 
but the real story is that this system exists because of people who were determined to fight for freedom and willing to work for years if that's what it took. 
that's a story that teaches people something worth learning. 
when people forget that, they start drifting toward the practical but superficial values shared by the open source movement and microsoft: the idea that the only thing that matters about your software is whether it gets your jobs done and what it costs. 
ja: which begins to answer my next question, what is lost when people refuse to use the term gnu/linux? 
richard stallman: what's lost is an opportunity to teach people. 
the software is equally free regardless of whatever name you call it—if, that is, the distro you're using really is free. 
but the only free gnu/linux distro i know of is ututo. 
most versions of the gnu/linux system are not entirely free software. 
all the commercial distributors put in nonfree software. 
and then there's debian which keeps all the nonfree software clearly separated, but does distribute it. 
and those who sell debian gnu/linux often add a few nonfree programs as a "bonus"… they invite you to think it's a bonus you're getting that your freedom is no longer complete. 
if you happen to be running a version of gnu/linux which doesn't have the nonfree software, then the situation is not materially changed by the name you use. 
but the situation we're likely to find ourselves in five years from now depends on what we teach each other today. 
a rose by any other name would smell as sweet, but if you called it an onion you'd get cooks very confused. 
gnu/hurd. 
ja: the gnu hurd has been under development for over a decade. 
there was talk of a 1.0 release over a year ago, but this was delayed due to a couple of lacking features. 
what is the current status of this project? 
richard stallman: the hurd runs, and missing features are gradually being added. 
however, for practical use today, you would use a linux-based version of gnu. 
ja: do you have any predictions as to when we're going to see a 1.0 release? 
richard stallman: no, i'm afraid i don't, i'm sad to say. 
a lot of the hurd developers seem to have decided that they should re-write it to work with a different micro-kernel (l4). 
i was disappointed to hear this, but now it looks like it will be some more years before the hurd is usable. 
at least we do have a free kernel that works with gnu. 
ja: will the gnu project focus solely on a gnu system built around the gnu hurd when it is released, or will it continue to support a widening range of free-software kernels? 
richard stallman: we will keep supporting linux-based versions of the gnu system for as long as they remain popular. 
ja: how will we refer to a hurd-based operating system? 
is it gnu hurd, or gnu slash hurd? 
richard stallman: it's the gnu operating system, and the hurd is its kernel. 
but because it's so common for people to use version of gnu that are based on linux as the kernel, it's useful to contrast the two, and talk about gnu/linux and gnu/hurd, which are two different versions of the gnu system with different kernels. 
ja: what would the advantages of using a gnu/hurd system be over say a gnu/linux system? 
richard stallman: there's probably no gigantic advantage that jumps out at the user's face if you're not writing interesting programs. 
the hurd offers interesting, powerful capabilities. 
for instance, you can write your own filesystem, so you could implement any sort of behavior you want and package it as a file. 
it offers the possibility of implementing sandboxes, where you can run a program but have another program monitoring all its i/o to make sure it doesn't start writing in files it wasn't expected to. 
these things may be doable with a kernel that doesn't have the hurd's architecture, but with the hurd it's trivial and the most natural thing in the world. 
writing code versus management. 
ja: how much source code do you write these days? 
richard stallman: i myself? 
only a little, on emacs. 
i was involuntarily self-promoted into management. 
ja: that's an interesting description. 
how did this happen? 
richard stallman: the amount of management and activism that had to be done got more and more, and so i had to find other people to take over more and more of my programming responsibilities. 
ja: do you miss the programming? 
richard stallman: yes. 
it's fun. 
ja: is the management/activist role something you desire to remain in? 
richard stallman: i wouldn't say i desire to, but it's necessary that i do so. 
at the moment we don't have anyone to replace me. 
we're actually thinking about how we could try and develop people who could do this, so that i will not be indispensable. 
ja: what is your role these days? 
richard stallman: partly it is being a very firm and determined leader. 
partly it is being an orator. 
partly it is advising other people on how to be activists or how to contribute to free software. 
i've learned something that a lot of people could usefully know: how to be extremely persistent and whenever one avenue was blocked find another. 
i've also learned the spirit of what you do when you're fighting for freedom. 
when it's a fight that you can't ever give up as lost. 
ja: many of the programs you were the original author for are key components of much software development today (free and nonfree alike), such as the gnu compiler collection (gcc), the gnu symbolic debugger (gdb), and gnu emacs. 
all of these projects have remained under constant development over the years. 
how closely have you followed the many projects you've started, and how do you feel about the directions they've taken? 
richard stallman: i don't follow gcc and gdb in technical detail nowadays—other people now have that responsibility. 
i still supervise emacs development. 
gnu emacs. 
ja: then you are still working on emacs at a code level? 
richard stallman: yes, although now with my broken arm i really have no time to program anything. 
i will when my arm is better and i can type for myself again. 
ja: may i ask what happened to your arm? 
richard stallman: i fell and broke my arm, and i needed surgery. 
it hurts, and i think it will never be normal again. 
but i think it will work for typing. 
(later: it works fine for typing, but it tingles all the time.) ja: i'm sorry to hear about your arm, and i wish you a speedy recovery. 
i recently reread cliff stoll's "the cuckoo's egg."
 are you familiar with the book? 
richard stallman: i have a vague memory of it. 
ja: a quick summary, he talks about a spy that breaks into a university computer system, initially using a security hole in gnu emacs… richard stallman: well, whether it's really a security hole, or whether he had made a mistake by installing a certain program setuid is subject to argument. 
ja: that's exactly what i was curious about, just what your reaction would have been to the book when it came out. 
richard stallman: his book made it sound like emacs, or actually movemail i think it was… his book made it sound like it was normal to install movemail setuid. 
i think some people sometimes did that, as there was a certain problem you could get around by doing that, but that wasn't the normal way to install it. 
so in fact, people installing emacs the usual way would not have had that problem. 
on the other hand, it certainly was useful to make emacs more bulletproof, so that that problem couldn't happen even if you installed movemail as setuid. 
that was ages ago. 
nonfree software. 
ja: what is your reaction to tools such as gcc, gdb and gnu emacs being used for the development of nonfree software? 
richard stallman: any development of nonfree software is harmful and unfortunate, whether it uses gnu tools or other tools. 
whether it is good or bad, in the long term, for the future of computer users' freedom that one can use these tools to develop nonfree software is a question whose answer i could only guess at. 
ja: how do you react to the opinion that nonfree software is justified as a means for raising dollars that can then be put into the development of completely new software, money that otherwise may not have been available, and thus creating software that may have never been developed? 
richard stallman: this is no justification at all. 
a nonfree program systematically denies the users the freedom to cooperate; it is the basis of an antisocial scheme to dominate people. 
the program is available lawfully only to those who will surrender their freedom. 
that's not a contribution to society, it's a social problem. 
it is better to develop no software than to develop nonfree software. 
so if you find yourself in that situation, please don't follow that path. 
please don't write the nonfree program—please do something else instead. 
we can wait till someone else has the chance to develop a free program to do the same job. 
ja: what about the programmers… richard stallman: what about them? 
the programmers writing nonfree software? 
they are doing something antisocial. 
they should get some other job. 
ja: such as? 
richard stallman: there are thousands of different jobs people can have in society without developing nonfree software. 
you can even be a programmer. 
most paid programmers are developing custom software—only a small fraction are developing nonfree software. 
the small fraction of proprietary software jobs are not hard to avoid. 
ja: what is the distinction there? 
richard stallman: nonfree software is meant to be distributed to the public. 
custom software is meant to be used by one client. 
there's no ethical problem with custom software as long as you're respecting your client's freedom. 
the next point is that programmers are a tiny fraction of employment in the computer field. 
suppose somebody developed an ai and no programmers were needed anymore. 
would this be a disaster? 
would all the people who are now programmers be doomed to unemployment for the rest of their lives? 
obviously not, but this doesn't stop people from exaggerating the issue. 
and what if there aren't any programming jobs in the us anymore? 
ja: you mean what if all the programming jobs were outsourced to foreign countries? 
richard stallman: yes, what if they all go? 
this may actually happen. 
when you start thinking about things like total levels of employment, you've got think about all the factors that affect it, not blame it all on one factor. 
the cause of unemployment is not someone or society deciding that software should be free. 
the cause of the problem is largely economic policies designed to benefit only the rich. 
such as driving wages down. 
you know, it's no coincidence that we're having all this outsourcing. 
that was carefully planned. 
international treaties were designed to make this happen so that people's wages would be reduced. 
ja: can you cite specific examples? 
richard stallman: ftaa. 
the world trade organization. 
nafta. 
these treaties are designed to reduce wages by making it easy for a company to say to various countries, "which of you will let us pay people the least? 
that's were we're headed."
 and if any country starts having a somewhat increased standard of living, companies say, "oh, this is a bad labor climate here. 
you're not making a good climate for business. 
all the business is going to go away. 
you better make sure that people get paid less. 
you're following a foolish policy arranging for workers of your country to be paid more. 
you've got to make sure that your workers are the lowest paid anywhere in the world, then we'll come back. 
otherwise we're all going to run away and punish you."
 businesses very often do it, they move operations out of a country to punish that country. 
and i've recently come to the conclusion that frictionless international trade is inherently a harmful thing, because it makes it too easy for companies to move from one country to another. 
we have to make that difficult enough that each company can be stuck in some country that can regulate it. 
the book no logo explains that the philippines have laws that protect labor standards, but these laws count for nothing any more. 
they decided to set up "enterprise zones"—that's the euphemism they used for "sweat shop zones"—where companies are exempt from these rules for the first two years. 
and as a result, no company lasts for more than two years. 
when their exemption runs out, the owners shut it down and they start another. 
ja: how does free software address this? 
richard stallman: free software doesn't address this. 
free software addresses the issue of how computer users can have freedom to cooperate and to control their own computers. 
this is the larger issue that becomes relevant when you start talking about "how are people going to have jobs that pay them decently?"
 the answer is: in the world of the low wage treaties, they're not going to. 
it's inconsistent and futile to subject millions of people to the loss of freedom that nonfree software imposes, just so that a tiny segment of society will have better paying jobs, when we're ignoring all the rest of society with their lousy jobs. 
if you want to start doing something about that problem, do it at the right level, which is the level of the power balance between corporations and countries. 
corporations are too powerful now. 
we have to knock them down. 
i don't believe in abolishing business or even in abolishing corporations, but we've got to make sure that no corporation is powerful enough that it can say to all the countries in the world, "i'll punish any country that doesn't obey."
 that is the way it works now. 
and it was deliberately set up by people such as reagan, and clinton, and bush and bush. 
new technologies. 
ja: i have read that the free software model tends to imitate existing software, rather than blaze new trails and developing completely new technologies. 
richard stallman: to speak of a free software "model" is somewhat misleading. 
the open source movement speaks of a "development model," but our concern is for the user's freedom, not how the program is developed. 
free software doesn't always imitate, but often it does. 
there's a good reason for this: freedom is the main goal, and innovation is secondary. 
our goal is to develop free software so that we can use computers exclusively with free software. 
in 1984, we started with nearly zero (we had tex, nothing else). 
we had a lot of catching up to do, so we have done it. 
even if gnu/linux had no technical innovations compared with unix, it would be completely superior because it respects your freedom as unix does not. 
ja: do you believe that free software has caught up with nonfree software? 
richard stallman: to a large extent, but not totally. 
ja: would you say that we're going to start seeing a lot of technical innovations originating from free software as things are catching up? 
richard stallman: we already have. 
we already have seen technical innovations in free software. 
a lot of them help make up the world wide web. 
the internet. 
ja: does the importance of using only free software apply to the internet? 
richard stallman: i don't understand the question. 
ja: software not only runs on personal computers, but also on the computers that comprise the internet… richard stallman: that may mean your computer. 
if your computer is on the internet, then that's one of the computers you're talking about. 
ja: you're correct. 
at this very moment my computer is part of the internet. 
and my computer is comprised entirely of free software. 
however there are plenty of computers on the internet that are not comprised of free software. 
richard stallman: i think you meant to say, "not running entirely free software."
 there are many computers on the net that are not running free software, and that means the people who use and own those computers have lost this aspect of their freedom. 
that's a problem. 
ja: do you consider it proper for people who are trying to only use free software to utilize… richard stallman: to connect to a server that's running nonfree software? 
i don't feel i need to refuse to connect to a server that is running nonfree software. 
for that matter, i won't refuse to type on a computer that's running nonfree software. 
if i were visiting your house for a little and you had a windows machine, i would use it if it were important for me to use it. 
i wouldn't be willing to have windows on my computer, and you shouldn't have it on yours, but i can't change that by refusing to touch the machine. 
if you connect to a server that runs nonfree software, you're not the one whose freedom is harmed. 
it's the server operator who has lost freedom to the restrictions on the software he runs. 
this is unfortunate, and i hope that he switches to free software; we're working to bring that about. 
but i don't feel you have to boycott his site until he switches. 
he isn't making you use the nonfree software. 
ja: back to my earlier question, as a specific example do you use tools such as google when attempting to locate online content? 
richard stallman: i have nothing against communicating with google's network server, but for google's sake i hope they have the freedom to study, change and redistribute the software used on their server. 
having the freedom to do so does not imply the obligation to do so; google doesn't have to change or redistribute the software they run. 
but they ought to be free to do this, just as you and i should be free to do this with the software on our machines. 
the workplace. 
ja: what if your job requires you to use nonfree software? 
richard stallman: i would quit that job. 
would you participate in something anti-social just because somebody pays you to? 
what if the job involves hitting people on the head in the street and taking their wallets? 
what if it involves spreading the word that democrats should vote on wednesday instead of tuesday? 
some people seriously claim that you can't criticize what someone does if it is part of their job. 
from my point of view, the fact that somebody is being paid to do something wrong is not an excuse. 
embedded applications. 
ja: embedded applications have become more and more prevalent in society. 
is it possible to completely avoid nonfree software and still remain in touch with current technologies? 
richard stallman: i don't know if it is possible, but if it is not, that is something we need to change. 
once an embedded system can talk to a network, or users normally load software into it, its software needs to be free. 
for instance, if it uses nonfree software to talk to the network, you can't trust it not to spy on you. 
sco. 
ja: how do you react to sco's recent accusations about the linux kernel? 
richard stallman: the vague and cagey nature of their statements, coupled with having seen that the only specific facts they produced proved to be false, suggests they have no real case. 
ja: what impact do you expect this to have on free software? 
richard stallman: i don't expect it to have a big impact because i don't think they have a case. 
they're trying to create fud and they may scare some timid people off. 
ja: do you expect this to bring the gpl into the courtroom? 
richard stallman: i don't know. 
ja: is that a concern for you? 
richard stallman: we think the gpl will stand up in court, but no wise person is eager to get into a battle, even if he thinks he's well enough armed that he'd probably win. 
the arguments that sco have been making are so laughably absurd that they lend support to the idea that sco has no real case, that they're only interested in creating fud. 
ja: to what end? 
richard stallman: they hope some companies will pay them money, and microsoft already did. 
to people who know almost nothing about copyright law, anything sounds as plausible as anything else. 
when they hear what sco says, they don't know how ridiculous it is. 
so they think, "sco says this, ibm says that, how do i know who's right?"
 ja: what's in store for the gnu general public license (gpl)? 
are there plans for a version 3? richard stallman: yes, but we are not really sure what will change. 
what we can say is that the changes will be details. 
getting involved. 
ja: is there any other current event that you'd like to address? 
richard stallman: the fcc last year decided to require digital restrictions management in all receivers of digital tv. 
and not only that, to require that they be made not modifiable by the user. 
i think they have not yet decided whether this device is software controlled. 
if they make it software controlled then for the first time there will be a government policy explicitly banning free software for a job that millions of people are going to want to do. 
ja: are you optimistic about this? 
richard stallman: i don't know. 
i am a pessimist by nature. 
many people can only keep on fighting when they expect to win. 
i'm not like that, i always expect to lose. 
i fight anyway, and sometimes i win. 
i'm not the main leader in this particular battle. 
the electronic frontier foundation is fighting. 
public knowledge is fighting. 
people need to get involved politically. 
at this point people should go to the eff website and the public knowledge website, and continue doing so over the coming weeks to see how they can get involved in this coming campaign. 
it's going to take a lot of people spending probably at least twenty minutes. 
if you care enough about your freedom to spend twenty minutes on it, if you can tear yourself away from whatever little job it is you're doing this week, and next week, and so on. 
spend a little time fighting for your freedom, and we can win. 
ja: thank you. 
richard stallman: happy hacking! 
source:  kerneltrap.org/node/4484 [archived] 
speech on free software and the west bengal government. 
transcript of a speech that was given in kolkata (formerly calcutta) in august, 2006. 
there are a number of reasons why i'm not a communist. 
the first of them is that i'm not against the idea of private business, as long as it does not oppose people's human rights and the interests of society. 
business is legitimate as long as it treats the rest of society decently. 
computing is a new area of human life. 
so we have to think about the human rights associated with this. 
what are the human rights software users are entitled to? 
four freedoms define free software. 
a program is free software for a user if: freedom 0: run the software as you wish. 
freedom 1: share the source code and change it. 
freedom 2: help your neighbour and distribute and publish. 
freedom 3: help your community and distribute your modified versions. 
with these four freedoms, you can live an upright life with your community. 
if you use nonfree, proprietary software, the developer has the power to decide what you can do. 
he can use that power over you. 
like microsoft. 
that game is evil. 
nobody should play it. 
so it's not a question of beating microsoft at its game. 
i set out to get away from that game. 
once gnu/linux was ready in 1992, it began to catch on. 
it was reliable, powerful, cheap and flexible. 
thousands and millions of people began to use gnu/linux. 
but the ideals of freedom began to be forgotten though. 
in 1998, people stopped talking about free software. 
instead they said "open source."
 that was a way of not saying "free" and not mentioning the ideas behind it. 
i don't disagree with that, but that's not what i am interested in. 
what i'm really interested in most of all is to teach people to value their freedoms and to fight for them. 
in software, as in the us, our freedom is threatened. 
so the basic things we need to do are: remember our freedom frequently, value it and insist on it. 
when someone says they protect me from terrorism by taking away my freedom—say no! 
similarly, with software that threatens our freedom, that might give us some temporary comparative advantage—we should say no! 
west bengal should not follow the world trend. 
it should stand up for freedom. 
that's different. 
no! 
i'm not going to let the world lead me where it wants to go. 
i'm going where freedom is. 
if you're going elsewhere—i'm not going there. 
it requires firmness, it requires a decision that says freedom matters and hence it must be promoted. 
even if that's inconvenient. 
freedom needs some sacrifices, some inconvenience, some price. 
but it's a small price to pay. 
by globalization, people usually mean globalization of the power of business. 
business should not have political power. 
otherwise democracy becomes sick. 
and with globalization of business power, this political power is enhanced. 
free trade treaties are designed to attack democracy. 
for instance, it explicitly allows any business to sue government if a law makes its profit less than it has been. 
companies have to be paid for the permission to do anything of social or environmental importance. 
not all free trade treaties do this explicitly. 
they do it implicitly. 
companies can threaten to move away elsewhere. 
and they do use this threat. 
this actually happened some years ago, with the eu software patents. 
the government of denmark was threatened that if they did not support this the company would move the business elsewhere. 
this tiny threat was sufficient to blackmail the government of denmark. 
if you allow a foreign mega-corporation to buy a domestic corporation, you are allowing it to buy a weapon pointed against your country. 
the environment, public health, general standards of living, are all important, and free trade treaties should be abolished. 
they are harmful to freedom, health and the lives of people. 
i do not accept the term "intellectual property."
 the very term is biased and confusing. 
it talks about useful techniques and works. 
it presumes they are "property."
 it prejudges such questions. 
there's also a more subtle problem. 
it lumps together all the diverse things and makes it look like you can talk about all of them together. 
copyright, patents, trade laws, are all very different. 
it takes the greatest efforts of the best scholars to overcome the confusion caused by the term "intellectual property" and to discuss the details of these individual items. 
the gatt treaty and the trips—actually it should be called trade-related impediments to education and science. 
free trade and enhancement of world trade harms democracy. 
when you globalize something evil, it becomes a greater evil. 
and when you globalize something good, it becomes a greater good. 
human knowledge and cooperation are such "goods."
 the free software movement is a part of that. 
it is the globalization of one area of human knowledge, namely software. 
through global cooperation like this, you get freedom and independence for every region and every country. 
proprietary software is a colonial system. 
it's electronic colonialism. 
and not by a country, but by a corporation. 
electronic colonial powers keep people divided and helpless. 
look at the end-user licensing agreement. 
you don't have the source code, you are helpless. 
you can't share, and so you are kept divided. 
national colonial powers recruit local elites and pay them and keep them above the rest of the people, working for the colonial masters. 
today we see electronic colonial powers recruit native zamindars to keep the system intact. 
microsoft sets up a research facility and in exchange it keeps its grip firmly on everyone else. 
govts and schools are in their grip. 
they know how to do this. 
they know how to buy govt support. 
but what's the govt buying? 
dependency, not development. 
only free software constitutes development. 
it enables any activity to be fully under the control of the people doing it. 
free software is appropriate technology. 
proprietary software is not appropriate for any use. 
the west bengal government has an opportunity to adopt a policy of firm leadership in this regard. 
this will give a boost to human resource development. 
free software respects people's freedom. 
government has an influence on the future of society. 
choosing which software to teach students: if you teach them windows, they will be windows users. 
for something else, they need to learn, and make the effort to learn something else. 
microsoft knows this. 
so it donates windows to schools. 
addiction (through using unauthorised software use) only helps them. 
they didn't want to leave anything to choice, so they give windows free to schools. 
like injecting a dose. 
the first dose is gratis. 
afterwards it's not gratis, either for them or their employers. 
this is a way to impose their power on the rest of society and its future. 
schools have a mission to society. 
this mission requires teaching students to live in freedom, teaching skills to make it easy to live in freedom. 
this means using free software. 
free software is good for computer science education, to maximise the potential of natural programmers. 
it gives students the opportunity to really learn. 
it's good for the natural programmers. 
if you have proprietary software, the teacher says "i don't know. 
you are not allowed to know, it's a secret."
 so the alternative is to give him the source codes and let him read it all. 
they will then learn to be really good programmers. 
but the most crucial reason is for the sake of moral education. 
teaching them to be good corporations and benevolent, helpful citizens. 
this has to be taught. 
school has to teach by example. 
if you bring software to class, you must share this with other kids. 
or don't bring it. 
schools must follow their own rule, by bringing free software to class. 
schools should use 100% free software. 
no proprietary software should be used in schools. 
public agencies, after a migration period, should use free software. 
all software development must run on free software platforms. 
and if it's released to the public, it must be free software. 
(free: as in free speech, not free beer.) one easy and useful way to put free software in schools—is to participate in the "one laptop per child" program. 
india recently pulled out of this program, i'm told. 
i'm told the indian governmentt is making lots of laws to make multinational corporations happy. 
maybe this was to make microsoft happy. 
even if india is not, west bengal can participate in the one laptop per child program. 
i can put them in touch with the people developing that machine. 
the government of india is considering a vicious new copyright law, imitating us law, in favour of large businesses, and against its citizens. 
the only emergency i can see that requires this being rushed through is catastrophic shortfall in the dream profits of some businesses! 
foreigners should not have political power. 
in my case, i don't. 
free software: freedom and cooperation. 
transcript of a speech that was given at new york university in new york, ny, on 29 may 2001. 
a plain text version of this transcript and a summary of the speech are also available. 
uretsky: i'm mike uretsky. 
i'm over at the stern school of business. 
i'm also one of the co-directors of the center for advanced technology. 
and, on behalf of all of us in the computer science department, i want to welcome you here. 
i want to say a few comments, before i turn it over to ed, who is going to introduce the speaker. 
the role of a university is a place to foster debate and to have interesting discussions. 
and the role of a major university is to have particularly interesting discussions. 
and this particular presentation, this seminar falls right into that mold. 
i find the discussion of open source particularly interesting. 
in a sense … [laughter] stallman: i do free software. 
open source is a different movement. 
[laughter] [applause] uretsky: when i first started in the field in the '60's, basically software was free. 
and we went in cycles. 
it became free, and then software manufacturers, in the need to expand their markets, pushed it in other directions. 
a lot of the developments that took place with the entry of the pc moved in exactly the same kind of a cycle. 
there's a very interesting french philosopher, pierre levy, who talks about movement to this direction and who talks about the move into cyberspace as not only relating to technology but also relating to social restructuring, to political restructuring, through a change in the kinds of relationships that will improve the well-being of mankind. 
and we're hoping that this debate is a movement in that direction, that this debate is something that cuts across a lot of the disciplines that normally act as solace within the university. 
we're looking forward to some very interesting discussions. 
ed? 
schonberg: i'm ed schonberg from the computer science department at the courant institute. 
let me welcome you all to this event. 
introducers are usually, and particularly, a useless aspect of public presentations, but in this case, actually, they serve a useful purpose, as mike easily demonstrated, because an introducer for instance, told him, by making inaccurate comments, can allow him to straighten out and correct and [laughter] sharpen considerably the parameters of the debate. 
so, let me make the briefest possible introduction to somebody who doesn't need one. 
richard is the perfect example of somebody who, by acting locally, started thinking globally from problems concerning the unavailability of source code for printer drivers at the ai lab many years ago. 
he has developed a coherent philosophy that has forced all of us to re-examine our ideas of how software is produced, of what intellectual property means, and what the software community actually represents. 
let me welcome richard stallman. 
[applause] stallman: can someone lend me a watch? 
[laughter] thank you. 
so, i'd like to thank microsoft for providing me the opportunity to [laughter] be on this platform. 
for the past few weeks, i have felt like an author whose book was fortuitously banned somewhere. 
[laughter] except that all the articles about it are giving the wrong author's name, because microsoft describes the gnu gpl as an open source license, and most of the press coverage followed suit. 
most people, of course just innocently don't realize that our work has nothing to do with open source, that in fact we did most of it before people even coined the term open source. 
we are in the free software movement, and i'm going to speak about what the free software movement is about, what it means, what we have done, and, because this is partly sponsored by a school of business, i'll say some things more than i usually do about how free software relates to business, and some other areas of social life. 
now, some of you may not ever write computer programs, but perhaps you cook. 
and if you cook, unless you're really great, you probably use recipes. 
and, if you use recipes, you've probably had the experience of getting a copy of a recipe from a friend who's sharing it. 
and you've probably also had the experience—unless you're a total neophyte—of changing a recipe. 
you know, it says certain things, but you don't have to do exactly that. 
you can leave out some ingredients. 
add some mushrooms, 'cause you like mushrooms. 
put in less salt because your doctor said you should cut down on salt—whatever. 
you can even make bigger changes according to your skill. 
and if you've made changes in a recipe, and you cook it for your friends, and they like it, one of your friends might say, "hey, could i have the recipe?"
 and then, what do you do? 
you could write down your modified version of the recipe and make a copy for your friend. 
these are the natural things to do with functionally useful recipes of any kind. 
now a recipe is a lot like a computer program. 
a computer program's a lot like a recipe: a series of steps to be carried out to get some result that you want. 
so it's just as natural to do those same things with computer programs—hand a copy to your friend. 
make changes in it because the job it was written to do isn't exactly what you want. 
it did a great job for somebody else, but your job is a different job. 
and after you've changed it, that's likely to be useful for other people. 
maybe they have a job to do that's like the job you do. 
so they ask, "hey, can i have a copy?"
 of course, if you're a nice person, you're going to give a copy. 
that's the way to be a decent person. 
so imagine what it would be like if recipes were packaged inside black boxes. 
you couldn't see what ingredients they're using, let alone change them, and imagine if you made a copy for a friend, they would call you a pirate and try to put you in prison for years. 
that world would create tremendous outrage from all the people who are used to sharing recipes. 
but that is exactly what the world of proprietary software is like. 
a world in which common decency towards other people is prohibited or prevented. 
now, why did i notice this? 
i noticed this because i had the good fortune in the 1970's to be part of a community of programmers who shared software. 
now, this community could trace its ancestry essentially back to the beginning of computing. 
in the 1970's, though, it was a bit rare for there to be a community where people shared software. 
and, in fact, this was sort of an extreme case, because in the lab where i worked, the entire operating system was software developed by the people in our community, and we'd share any of it with anybody. 
anybody was welcome to come and take a look, and take away a copy, and do whatever he wanted to do. 
there were no copyright notices on these programs. 
cooperation was our way of life. 
and we were secure in that way of life. 
we didn't fight for it. 
we didn't have to fight for it. 
we just lived that way. 
and, as far as we knew, we would just keep on living that way. 
so there was free software, but there was no free software movement. 
but then our community was destroyed by a series of calamities that happened to it. 
ultimately it was wiped out. 
ultimately, the pdp-10 computer which we used for all our work was discontinued. 
and you know, our system—the incompatible timesharing system—was written starting in the '60's, so it was written in assembler language. 
that's what you used to write an operating system in the '60's. 
so, of course, assembler language is for one particular computer architecture; if that gets discontinued, all your work turns into dust—it's useless. 
and that's what happened to us. 
the 20 years or so of work of our community turned into dust. 
but before this happened, i had an experience that prepared me, helped me see what to do, helped prepare me to see what to do when this happened, because at certain point, xerox gave the artificial intelligence lab, where i worked, a laser printer, and this was a really handsome gift, because it was the first time anybody outside xerox had a laser printer. 
it was very fast, printed a page a second, very fine in many respects, but it was unreliable, because it was really a high-speed office copier that had been modified into a printer. 
and, you know, copiers jam, but there's somebody there to fix them. 
the printer jammed and nobody saw. 
so it stayed jammed for a long time. 
well, we had an idea for how to deal with this problem. 
change it so that whenever the printer gets a jam, the machine that runs the printer can tell our timesharing machine, and tell the users who are waiting for printouts, or something like that, you know, tell them, go fix the printer. 
because if they only knew it was jammed, of course, if you're waiting for a printout and you know that the printer is jammed, you don't want to sit and wait forever, you're going to go fix it. 
but at that point, we were completely stymied, because the software that ran that printer was not free software. 
it had come with the printer, and it was just a binary. 
we couldn't have the source code; xerox wouldn't let us have the source code. 
so, despite our skill as programmers—after all, we had written our own timesharing system—we were completely helpless to add this feature to the printer software. 
and we just had to suffer with waiting. 
it would take an hour or two to get your printout because the machine would be jammed most of the time. 
and only once in a while—you'd wait an hour figuring "i know it's going to be jammed. 
i'll wait an hour and go collect my printout," and then you'd see that it had been jammed the whole time, and in fact, nobody else had fixed it. 
so you'd fix it and you'd go wait another half hour. 
then, you'd come back, and you'd see it jammed again—before it got to your output. 
it would print three minutes and be jammed thirty minutes. 
frustration up the whazzoo. 
but the thing that made it worse was knowing that we could have fixed it, but somebody else, for his own selfishness, was blocking us, obstructing us from improving the software. 
so, of course, we felt some resentment. 
and then i heard that somebody at carnegie mellon university had a copy of that software. 
so i was visiting there later, so i went to his office and i said, "hi, i'm from mit. 
could i have a copy of the printer source code?"
 and he said "no, i promised not to give you a copy."
 [laughter] i was stunned. 
i was so… i was angry, and i had no idea how i could do justice to it. 
all i could think of was to turn around on my heel and walk out of his room. 
maybe i slammed the door. 
[laughter] and i thought about it later on, because i realized that i was seeing not just an isolated jerk, but a social phenomenon that was important and affected a lot of people. 
this was—for me—i was lucky, i only got a taste of it, but other people had to live in this all the time. 
so i thought about it at length. 
see, he had promised to refuse to cooperate with us—his colleagues at mit. 
he had betrayed us. 
but he didn't just do it to us. 
chances are he did it to you too. 
[pointing at member of audience.] and i think, mostly likely, he did it to you too. 
[pointing at another member of audience.] [laughter] and he probably did it to you as well. 
[pointing to third member of audience.] he probably did it to most of the people here in this room—except a few, maybe, who weren't born yet in 1980. 
because he had promised to refuse to cooperate with just about the entire population of the planet earth. 
he had signed a non-disclosure agreement. 
now, this was my first, direct encounter with a non-disclosure agreement, and it taught me an important lesson—a lesson that's important because most programmers never learn it. 
you see, this was my first encounter with a non-disclosure agreement, and i was the victim. 
i, and my whole lab, were the victims. 
and the lesson it taught me was that non-disclosure agreements have victims. 
they're not innocent. 
they're not harmless. 
most programmers first encounter a non-disclosure agreement when they're invited to sign one. 
and there's always some temptation—some goody they're going to get if they sign. 
so, they make up excuses. 
they say, "well, he's never going to get a copy no matter what, so why shouldn't i join the conspiracy to deprive him?"
 they say, "this is the way it's always done. 
who am i to go against it?"
 they say, "if i don't sign this, someone else will."
 various excuses to gag their consciences. 
but when somebody invited me to sign a non-disclosure agreement, my conscience was already sensitized. 
it remembered how angry i had been, when somebody promised not to help me and my whole lab solve our problem. 
and i couldn't turn around and do the exact same thing to somebody else who had never done me any harm. 
you know, if somebody asked me to promise not to share some useful information with a hated enemy, i would have said yes. 
you know? 
if somebody's done something bad, he deserves it. 
but, strangers—they haven't done me any harm. 
how could they deserve that kind of mistreatment? 
you can't let yourself start treating just anybody and everybody badly. 
then you become a predator on society. 
so i said, "thank you very much for offering me this nice software package. 
but i can't accept it in good conscience, on the conditions you are demanding, so i will do without it. 
thank you so much."
 and so, i have never knowingly signed a non-disclosure agreement for generally useful technical information such as software. 
now there are other kinds of information which raise different ethical issues. 
for instance, there's personal information. 
you know, if you wanted to talk with me about what was happening between you and your boyfriend, and you asked me not to tell anybody—you know, i could keep—i could agree to keep that a secret for you, because that's not generally useful technical information. 
at least, it's probably not generally useful. 
[laughter] there is a small chance—and it's a possibility though—that you might reveal to me some marvelous new sex technique, [laughter] and i would then feel a moral duty [laughter] to pass it onto the rest of humanity, so that everyone could get the benefit of it. 
so, i'd have to put a proviso in that promise, you know? 
if it's just details about who wants this, and who's angry at whom, and things like that—soap opera—that i can keep private for you, but something that humanity could tremendously benefit from knowing, i mustn't withhold. 
you see, the purpose of science and technology is to develop useful information for humanity to help people live their lives better. 
if we promise to withhold that information—if we keep it secret—then we are betraying the mission of our field. 
and this, i decided i shouldn't do. 
but, meanwhile my community had collapsed, and that was collapsing, and that left me in a bad situation. 
you see, the whole incompatible timesharing system was obsolete, because the pdp-10 was obsolete, and so there was no way that i could continue working as an operating system developer the way that i had been doing it. 
that depended on being part of the community using the community software and improving it. 
that no longer was a possibility, and that gave me a moral dilemma. 
what was i going to do? 
because the most obvious possibility meant to go against that decision i had made. 
the most obvious possibility was to adapt myself to the change in the world. 
to accept that things were different, and that i'd just have to give up those principles and start signing non-disclosure agreements for proprietary operating systems, and most likely writing proprietary software as well. 
but i realized that that way i could have fun coding, and i could make money—especially if i did it other than at mit—but at the end, i'd have to look back at my career and say, "i've spent my life building walls to divide people," and i would have been ashamed of my life. 
so i looked for another alternative, and there was an obvious one. 
i could leave the software field and do something else. 
now i had no other special noteworthy skills, but i'm sure i could have become a waiter. 
[laughter] not at a fancy restaurant; they wouldn't hire me, [laughter] but i could be a waiter somewhere. 
and many programmers, they say to me, "the people who hire programmers demand this, this and this. 
if i don't do those things, i'll starve."
 it's literally the word they use. 
well, you know, as a waiter, you're not going to starve. 
[laughter] so, really, they're in no danger. 
but—and this is important, you see—because sometimes you can justify doing something that hurts other people by saying otherwise something worse is going to happen to me. 
you know, if you were really going to starve, you'd be justified in writing proprietary software. 
[laughter] if somebody's pointing a gun at you, then i would say, it's forgivable. 
[laughter] but, i had found a way that i could survive without doing something unethical, so that excuse was not available. 
so i realized, though, that being a waiter would be no fun for me, and it would be wasting my skills as an operating system developer. 
it would avoid misusing my skills. 
developing proprietary software would be misusing my skills. 
encouraging other people to live in the world of proprietary software would be misusing my skills. 
so it's better to waste them than misuse them, but it's still not really good. 
so for those reasons, i decided to look for some other alternative. 
what can an operating system developer do that would actually improve the situation, make the world a better place? 
and i realized that an operating system developer was exactly what was needed. 
the problem, the dilemma, existed for me and for everyone else because all of the available operating systems for modern computers were proprietary. 
the free operating systems were for old, obsolete computers, right? 
so for the modern computers—if you wanted to get a modern computer and use it, you were forced into a proprietary operating system. 
so if an operating system developer wrote another operating system, and then said, "everybody come and share this; you're welcome to this"—that would give everybody a way out of the dilemma, another alternative. 
so i realized that there was something i could do that would solve the problem. 
i had just the right skills to be able to do it. 
and it was the most useful thing i could possibly imagine that i'd be able to do with my life. 
and it was a problem that no one else was trying to solve. 
it was just sort of sitting there, getting worse, and nobody was there but me. 
so i felt, "i'm elected. 
i have to work on this. 
if not me, who?"
 so i decided i would develop a free operating system, or die trying … of old age, of course. 
[laughter] so, of course i had to decide what kind of operating system it should be. 
there are some technical design decisions to be made. 
i decided to make the system compatible with unix for a number of reasons. 
first of all, i had just seen one operating system that i really loved become obsolete because it was written for one particular kind of computer. 
i didn't want that to happen again. 
we needed to have a portable system. 
well, unix was a portable system. 
so if i followed the design of unix, i had a pretty good chance that i could make a system that would also be portable and workable. 
and furthermore, why [tape unclear] be compatible with it in the details. 
the reason is, users hate incompatible changes. 
if i had just designed the system in my favorite way—which i would have loved doing, i'm sure—i would have produced something that was incompatible. 
you know, the details would be different. 
so, if i wrote the system, then the users would have said to me, "well, this is very nice, but it's incompatible. 
it will be too much work to switch. 
we can't afford that much trouble just to use your system instead of unix, so we'll stay with unix," they would have said. 
now, if i wanted to actually create a community where there would be people in it, people using this free system, and enjoying the benefits of liberty and cooperation, i had to make a system people would use, a system that they would find easy to switch to, that would not have an obstacle making it fail at the very beginning. 
now, making the system upward compatible with unix actually made all the immediate design decisions, because unix consists of many pieces, and they communicate through interfaces that are more or less documented. 
so if you want to be compatible with unix, you have to replace each piece, one by one, with a compatible piece. 
so the remaining design decisions are inside one piece, and they could be made later by whoever decides to write that piece. 
they didn't have to be made at the outset. 
so all we had to do to start work was find a name for the system. 
now, we hackers always look for a funny or naughty name for a program, because thinking of people being amused by the name is half the fun of writing the program. 
[laughter] and we had a tradition of recursive acronyms, to say that the program that you're writing is similar to some existing program. 
you can give it a recursive acronym name which says: this one's not the other. 
so, for instance, there were many tico text editors in the '60's and '70's, and they were generally called something-or-other tico. 
then one clever hacker called his tint, for tint is not tico—the first recursive acronym. 
in 1975, i developed the first emacs text editor, and there were many imitations of emacs, and a lot of them were called something-or-other emacs, but one was called fine, for fine is not emacs, and there was sine, for sine is not emacs, and eine for eine is not emacs, and mince for mince is not complete emacs. 
[laughter] that was a stripped down imitation. 
and then, eine was almost completely rewritten, and the new version was called zwei, for zwei was eine initially. 
[laughter] so i looked for a recursive acronym for something is not unix. 
and i tried all 26 letters, and discovered that none of them was a word. 
[laughter] hmm, try another way. 
i made a contraction. 
that way i could have a three-letter acronym, for something's not unix. 
and i tried letters, and i came across the word "gnu"—the word "gnu" is the funniest word in the english language. 
[laughter] that was it. 
of course, the reason it's funny is that according to the dictionary, it's pronounced "new."
 you see? 
and so that's why people use it for a lot of wordplay. 
let me tell you, this is the name of an animal that lives in africa. 
and the african pronunciation had a click sound in it. 
[laughter] maybe still does. 
and so, the european colonists, when they got there, they didn't bother learning to say this click sound. 
so they just left it out, and they wrote a "g" which meant "there's another sound that's supposed to be here which we are not pronouncing."
 [laughter] so, tonight i'm leaving for south africa, and i have begged them, i hope they're going to find somebody who can teach me to pronounce click sounds, [laughter] so that i'll know how to pronounce gnu the correct way, when it's the animal. 
but, when it's the name of our system, the correct pronunciation is "guh-new"—pronounce the hard "g."
 if you talk about the "new" operating system, you'll get people very confused, because we've been working on it for 17 years now, so it is not new any more. 
[laughter] but it still is, and always will be, gnu—no matter how many people call it linux by mistake. 
[laughter] so, in january 1984, i quit my job at mit to start writing pieces of gnu. 
they were nice enough to let me keep using their facilities though. 
and, at the time, i thought we would write all these pieces, and make an entire gnu system, and then we'd say, "come and get it," and people would start to use it. 
that's not what happened. 
the first pieces i wrote were just equally good replacements, with fewer bugs for some pieces of unix, but they weren't tremendously exciting. 
nobody particularly wanted to get them and install them. 
but then, in september 1984, i started writing gnu emacs, which was my second implementation of emacs, and by early 1985, it was working. 
i could use it for all my editing, which was a big relief, because i had no intention of learning to use vi, the unix editor. 
[laughter] so, until that time, i did my editing on some other machine, and saved the files through the network, so that i could test them. 
but when gnu emacs was running well enough for me to use it, it was also—other people wanted to use it too. 
so i had to work out the details of distribution. 
of course, i put a copy in the anonymous ftp directory, and that was fine for people who were on the net. 
they could then just pull over a tar file, but a lot of programmers then even were not on the net in 1985. 
they were sending me emails saying "how can i get a copy?"
 i had to decide what i would answer them. 
well, i could have said, i want to spend my time writing more gnu software, not writing tapes, so please find a friend who's on the internet and who is willing to download it and put it on a tape for you. 
and i'm sure people would have found some friends, sooner or later, you know. 
they would have got copies. 
but i had no job. 
in fact, i've never had a job since quitting mit in january 1984. 
so, i was looking for some way i could make money through my work on free software, and therefore i started a free software business. 
i announced, "send me $150, and i'll mail you a tape of emacs."
 and the orders began dribbling in. 
by the middle of the year they were trickling in. 
i was getting 8 to 10 orders a month. 
and, if necessary, i could have lived on just that, because i've always lived cheaply. 
i live like a student, basically. 
and i like that, because it means that money is not telling me what to do. 
i can do what i think is important for me to do. 
it freed me to do what seemed worth doing. 
so make a real effort to avoid getting sucked into all the expensive lifestyle habits of typical americans. 
because if you do that, then people with the money will dictate what you do with your life. 
you won't be able to do what's really important to you. 
so, that was fine, but people used to ask me, "what do you mean it's free software if it costs $150?"
 [laughter] well, the reason they asked this was that they were confused by the multiple meanings of the english word "free."
 one meaning refers to price, and another meaning refers to freedom. 
when i speak of free software, i'm referring to freedom, not price. 
so think of free speech, not free beer. 
[laughter] now, i wouldn't have dedicated so many years of my life to making sure programmers got less money. 
that's not my goal. 
i'm a programmer and i don't mind getting money myself. 
i won't dedicate my whole life to getting it, but i don't mind getting it. 
and i'm not—and therefore, ethics is the same for everyone. 
i'm not against some other programmer getting money either. 
i don't want prices to be low. 
that's not the issue at all. 
the issue is freedom. 
freedom for everyone who's using software, whether that person be a programmer or not. 
so at this point i should give you the definition of free software. 
i better get to some real details, you see, because just saying "i believe in freedom" is vacuous. 
there's so many different freedoms you could believe in, and they conflict with each other, so the real political question is: which are the important freedoms, the freedoms that we must make sure everybody has? 
and now, i will give my answer to that question for the particular area of using software. 
a program is free software for you, a particular user, if you have the following freedoms: first, freedom zero is the freedom to run the program for any purpose, any way you like. 
freedom one is the freedom to help yourself by changing the program to suit your needs. 
freedom two is the freedom to help your neighbor by distributing copies of the program. 
and freedom three is the freedom to help build your community by publishing an improved version so others can get the benefit of your work. 
if you have all of these freedoms, the program is free software, for you—and that's crucial. 
that's why i phrase it that way. 
i'll explain why later, when i talk about the gnu general public license, but right now i'm explaining what free software means, which is a more basic question. 
so, freedom zero's pretty obvious. 
if you're not even allowed to run the program anyway you like, it is a pretty damn restrictive program. 
but as it happens, most programs will at least give you freedom zero. 
and freedom zero follows, legally, as a consequence of freedoms one, two, and three—that's the way that copyright law works. 
so the freedoms that distinguish free software from typical software are freedoms one, two, and three, so i'll say more about them and why they are important. 
freedom one is the freedom to help yourself by changing the software to suit your needs. 
this could mean fixing bugs. 
it could mean adding new features. 
it could mean porting it to a different computer system. 
it could mean translating all the error messages into navajo. 
any change you want to make, you should be free to make. 
now, it's obvious that professional programmers can make use of this freedom very effectively, but not just them. 
anybody of reasonable intelligence can learn a little programming. 
you know, there are hard jobs, and there are easy jobs, and most people are not going to learn enough to do hard jobs. 
but lots of people can learn enough to do easy jobs, just the way, you know, 50 years ago, lots and lots of american men learned to repair cars, which is what enabled the u.s. 
to have a motorized army in world war ii and win. 
so, very important, having lots of people tinkering. 
and if you are a people person, and you really don't want to learn technology at all, that probably means that you have a lot of friends, and you're good at getting them to owe you favors. 
[laughter] some of them are probably programmers. 
so you can ask one of your programmer friends. 
"would you please change this for me? 
add this feature?"
 so, lots of people can benefit from it. 
now, if you don't have this freedom, it causes practical, material harm to society. 
it makes you a prisoner of your software. 
i explained what that was like with regard to the laser printer. 
you know, it worked badly for us, and we couldn't fix it, because we were prisoners of our software. 
but it also affects people's morale. 
you know if the computer is constantly frustrating to use, and people are using it, their lives are going to be frustrating, and if they're using it in their jobs, their jobs are going to be frustrating; they're going to hate their jobs. 
and you know, people protect themselves from frustration by deciding not to care. 
so you end up with people whose attitude is, "well, i showed up for work today. 
that's all i have to do. 
if i can't make progress, that's not my problem; that's the boss's problem."
 and when this happens, it's bad for those people, and it's bad for society as a whole. 
that's freedom one, the freedom to help yourself. 
freedom two is the freedom to help your neighbor by distributing copies of the program. 
now, for beings that can think and learn, sharing useful knowledge is a fundamental act of friendship. 
when these beings use computers, this act of friendship takes the form of sharing software. 
friends share with each other. 
friends help each other. 
this is the nature of friendship. 
and, in fact, this spirit of goodwill—the spirit of helping your neighbor, voluntarily—is society's most important resource. 
it makes the difference between a livable society and a dog-eat-dog jungle. 
its importance has been recognized by the world's major religions for thousands of years, and they explicitly try to encourage this attitude. 
when i was going to kindergarten, the teachers were trying to teach us this attitude—the spirit of sharing—by having us do it. 
they figured if we did it, we'd learn. 
so they said, "if you bring candy to school, you can't keep it all for yourself; you have to share some with the other kids."
 teaching us, the society was set up to teach, this spirit of cooperation. 
and why do you have to do that? 
because people are not totally cooperative. 
that's one part of human nature, and there are other parts of human nature. 
there are lots of parts of human nature. 
so, if you want a better society, you've got to work to encourage the spirit of sharing. 
you know, it'll never get to be 100%. 
that's understandable. 
people have to take care of themselves too. 
but if we make it somewhat bigger, we're all better off. 
nowadays, according to the u.s. 
government, teachers are supposed to do the exact opposite. 
"oh, johnny, you brought software to school. 
well, don't share it. 
oh no. 
sharing is wrong. 
sharing means you're a pirate."
 what do they mean when they say "pirate"? 
they're saying that helping your neighbor is the moral equivalent of attacking a ship. 
[laughter] what would buddha or jesus say about that? 
now, take your favorite religious leader. 
i don't know, maybe manson would have said something different. 
[laughter] who knows what l. ron hubbard would say? 
but … question: [inaudible] stallman: of course, he's dead. 
but they don't admit that. 
what? 
question: so are the others, also dead. 
[laughter] [inaudible] charles manson's also dead. 
[laughter] they're dead, jesus's dead, buddha's dead… stallman: yes, that's true. 
[laughter] so i guess, in that regard, l. ron hubbard is no worse than the others. 
[laughter] anyway—[inaudible] question: l. ron always used free software—it freed him from zanu. 
[laughter] stallman: anyway, so, i think this is actually the most important reason why software should be free: we can't afford to pollute society's most important resource. 
it's true that it's not a physical resource like clean air and clean water. 
it's a psycho-social resource, but it's just as real for all that, and it makes a tremendous difference to our lives. 
you see, the actions we take influence the thoughts of other people. 
when we go around telling people, "don't share with each other," if they listen to us, we've had an effect on society, and it's not a good one. 
that's freedom two, the freedom to help your neighbor. 
oh, and by the way, if you don't have that freedom, it doesn't just cause this harm to society's psycho-social resource, it also causes waste—practical, material harm. 
if the program has an owner, and the owner arranges a state of affairs where each user has to pay in order to be able to use it, some people are going to say, "never mind, i'll do without it."
 and that's waste, deliberately inflicted waste. 
and the interesting thing about software, of course, is that fewer users doesn't mean you have to make less stuff. 
you know, if fewer people buy cars, you can make fewer cars. 
there's a saving there. 
there are resources to be allocated, or not allocated, into making cars. 
so that you can say that having a price on a car is a good thing. 
it prevents people from diverting lots of wasted resources into making cars that aren't really needed. 
but if each additional car used no resources, it wouldn't be doing any good saving the making of these cars. 
well, for physical objects, of course, like cars, it is always going to take resources to make an additional one of them, each additional exemplar. 
but for software that's not true. 
anybody can make another copy. 
and it's almost trivial to do it. 
it takes no resources, except a tiny bit of electricity. 
so there's nothing we can save, no resource we're going to allocate better by putting this financial disincentive on the use of the software. 
you often find people taking economic, the consequences of economic reasoning, based on premises that don't apply to software, and trying to transplant them from other areas of life where the premises may apply, and the conclusions may be valid. 
they just take the conclusions and assume that they're valid for software too, when the argument is based on nothing, in the case of software. 
the premises don't work in that case. 
it is very important to examine how you reach the conclusion, and what premises it depends on, to see where it might be valid. 
so, that's freedom two, the freedom to help your neighbor. 
freedom three is the freedom to help build your community by publishing an improved version of the software. 
people used to say to me, "if the software's free, then nobody will get paid to work on it, so why should anybody work on it?"
 well, of course, they were confusing the two meanings of free, so their reasoning was based on a misunderstanding. 
but, in any case, that was their theory. 
today, we can compare that theory with empirical fact, and we find that hundreds of people are being paid to write free software, and over 100,000 are doing it as volunteers. 
we get lots of people working on free software, for various different motives. 
when i first released gnu emacs—the first piece of the gnu system that people actually wanted to use—and when it started having users, after a while, i got a message saying, "i think i saw a bug in the source code, and here's a fix."
 and i got another message, "here's code to add a new feature."
 and another bug fix. 
and another new feature. 
and another, and another, and another, until they were pouring in on me so fast that just making use of all this help i was getting was a big job. 
microsoft doesn't have this problem. 
[laughter] eventually, people noted this phenomenon. 
you see, in the 1980's a lot of us thought that maybe free software wouldn't be as good as the nonfree software, because we wouldn't have as much money to pay people. 
and, of course, people like me, who value freedom and community said, "well, we'll use the free software anyway."
 it's worth making a little sacrifice in some mere technical convenience to have freedom. 
but what people began to note, around 1990 was that our software was actually better. 
it was more powerful, and more reliable, than the proprietary alternatives. 
in the early '90's, somebody found a way to do a scientific measurement of reliability of software. 
here's what he did. 
he took several sets of comparable programs that did the same jobs—the exact same jobs—in different systems. 
because there were certain basic unix-like utilities. 
and the jobs that they did, we know, was all, more or less, imitating the same thing, or they were following the posix spec, so they were all the same in terms of what jobs they did, but they were maintained by different people, written separately. 
the code was different. 
so they said, ok, we'll take these programs and run them with random data, and measure how often they crash, or hang. 
so they measured it, and the most reliable set of programs was the gnu programs. 
all the commercial alternatives which were proprietary software were less reliable. 
so he published this and he told all the developers, and a few years later, he did the same experiment with the newest versions, and he got the same result. 
the gnu versions were the most reliable. 
people—you know there are cancer clinics and 911 operations that use the gnu system, because it's so reliable, and reliability is very important to them. 
anyway, there's even a group of people who focus on this particular benefit as the reason they give, the main reason they give, why users should be permitted to do these various things, and to have these freedoms. 
if you've been listening to me, you've noticed, you've seen that i, speaking for the free software movement, i talk about issues of ethics, and what kind of a society we want to live in, what makes for a good society, as well as practical, material benefits. 
they're both important. 
that's the free software movement. 
that other group of people—which is called the open source movement—they only cite the practical benefits. 
they deny that this is an issue of principle. 
they deny that people are entitled to the freedom to share with their neighbor and to see what the program's doing and change it if they don't like it. 
they say, however, that it's a useful thing to let people do that. 
so they go to companies and say to them, "you know, you might make more money if you let people do this."
 so, what you can see is that to some extent, they lead people in a similar direction, but for totally different, for fundamentally different, philosophical reasons. 
because on the deepest issue of all, you know, on the ethical question, the two movements disagree. 
you know, in the free software movement we say, "you're entitled to these freedoms. 
people shouldn't stop you from doing these things."
 in the open source movement, they say, "yes, they can stop you if you want, but we'll try to convince them to deign to let you to do these things."
 well, they have contributed—they have convinced a certain number of businesses to release substantial pieces of software as free software in our community. 
so they, the open source movement, has contributed substantially to our community. 
and so we work together on practical projects. 
but, philosophically, there's a tremendous disagreement. 
unfortunately, the open source movement is the one that gets the support of business the most, and so most articles about our work describe it as open source, and a lot of people just innocently think that we're all part of the open source movement. 
so that's why i'm mentioning this distinction. 
i want you to be aware that the free software movement, which brought our community into existence and developed the free operating system, is still here—and that we still stand for this ethical philosophy. 
i want you to know about this, so that you won't mislead someone else unknowingly. 
but also, so that you can think about where you stand. 
you know, which movement you support is up to you. 
you might agree with the free software movements and my views. 
you might agree with the open source movement. 
you might disagree with them both. 
you decide where you stand on these political issues. 
but if you agree with the free software movement—if you see that there's an issue here that the people whose lives are controlled and directed by this decision deserve a say in it—then i hope you'll say that you agree with the free software movement, and one way you can do that is by using the term free software and just helping people know we exist. 
so, freedom three is very important both practically and psycho-socially. 
if you don't have this freedom, it causes practical material harm, because this community development doesn't happen, and we don't make powerful, reliable software. 
but it also causes psycho-social harm, which affects the spirit of scientific cooperation—the idea that we're working together to advance human knowledge. 
you see, progress in science crucially depends on people being able to work together. 
and nowadays though, you often find each little group of scientists acting like it's a war with each other gang of scientists and engineers. 
and if they don't share with each other, they're all held back. 
so, those are the three freedoms that distinguish free software from typical software. 
freedom one is the freedom to help yourself, making changes to suit your own needs. 
freedom two is the freedom to help your neighbor by distributing copies. 
and freedom three is the freedom to help build your community by making changes and publishing them for other people to use. 
if you have all of these freedoms, the program is free software for you. 
now, why do i define it that way in terms of a particular user? 
is it free software for you? 
[pointing at member of audience.] is it free software for you? 
[pointing at another member of audience.] is it free software for you? 
[pointing at another member of audience.] yes? 
question: can you explain a bit about the difference between freedom two and three? 
[inaudible] stallman: well, they certainly relate, because if you don't have freedom to redistribute at all, you certainly don't have freedom to distribute a modified version, but they're different activities. 
question: oh. 
stallman: freedom two is, you know, read it, you make an exact copy, and hand it to your friends, so now your friend can use it. 
or maybe you make exact copies and you sell them to a bunch of people, and then they can use it. 
freedom three is where you make improvements—or at least you think they're improvements, and some other people may agree with you. 
so that's the difference. 
oh, and by the way, one crucial point. 
freedoms one and three depend on your having access to the source code. 
because changing a binary-only program is extremely hard. 
[laughter] even trivial changes like using four digits for the date, [laughter] if you don't have source. 
so, for compelling, practical reasons, access to the source code is a precondition, a requirement, for free software. 
so, why do i define it in terms of whether it's free software for you? 
the reason is that sometimes the same program can be free software for some people, and nonfree for others. 
now, that might seem like a paradoxical situation, so let me give you an example to show you how it happens. 
a very big example—maybe the biggest ever—of this problem was the x window system which was developed at mit and released under a license that made it free software. 
if you got the mit version with the mit license, you had freedoms one, two, and three. 
it was free software for you. 
but among those who got copies were various computer manufacturers that distributed unix systems, and they made the necessary changes in x to run on their systems. 
you know, probably just a few thousand lines out of the hundreds of thousands of lines of x. and, then they compiled it, and they put the binaries into their unix system and distributed it under the same non-disclosure agreement as the rest of the unix system. 
and then, millions of people got these copies. 
they had the x window system, but they had none of these freedoms. 
it was not free software for them. 
so, the paradox was that whether x was free software depended on where you made the measurement. 
if you made the measurement coming out of the developers' group, you'd say, "i observe all these freedoms. 
it's free software."
 if you made the measurements among the users you'd say, "hmm, most users don't have these freedoms. 
it's not free software."
 well, the people who developed x didn't consider this a problem, because their goal was just popularity, ego, essentially. 
they wanted a big professional success. 
they wanted to feel, "ah, lots of people are using our software."
 and that was true. 
lots of people were using their software but didn't have freedom. 
well, in the gnu project, if that same thing had happened to gnu software, it would have been a failure, because our goal wasn't just to be popular; our goal was to give people liberty, and to encourage cooperation, to permit people to cooperate. 
remember, never force anyone to cooperate with any other person, but make sure that everybody's allowed to cooperate, everyone has the freedom to do so, if he or she wishes. 
if millions of people were running nonfree versions of gnu, that wouldn't be success at all. 
the whole thing would have been perverted into nothing like the goal. 
so, i looked for a way to stop that from happening. 
the method i came up with is called "copyleft."
 it's called copyleft because it's sort of like taking copyright and flipping it over. 
[laughter] legally, copyleft works based on copyright. 
we use the existing copyright law, but we use it to achieve a very different goal. 
here's what we do. 
we say, "this program is copyrighted."
 and, of course, by default, that means it's prohibited to copy it, or distribute it, or modify it. 
but then we say, "you're authorized to distribute copies of this. 
you're authorized to modify it. 
you're authorized to distribute modified versions and extended versions. 
change it any way you like."
 but there is a condition. 
and the condition, of course, is the reason why we go to all this trouble, so that we could put the condition in. 
the condition says: whenever you distribute anything that contains any piece of this program, that whole program must be distributed under these same terms, no more and no less. 
so you can change the program and distribute a modified version, but when you do, the people who get that from you must get the same freedom that you got from us. 
and not just for the parts of it—the excerpts that you copied from our program—but also for the other parts of that program that they got from you. 
the whole of that program has to be free software for them. 
the freedoms to change and redistribute this program become inalienable rights—a concept from the declaration of independence. 
rights that we make sure can't be taken away from you. 
and, of course, the specific license that embodies the idea of copyleft is the gnu general public license, a controversial license because it actually has the strength to say no to people who would be parasites on our community. 
there are lots of people who don't appreciate the ideals of freedom. 
and they'd be very glad to take the work that we have done, and use it to get a head start in distributing a nonfree program and tempting people to give up their freedom. 
and the result would be—you know, if we let people do that—that we would developing these free programs, and we'd constantly have to compete with improved versions of our own programs. 
that's no fun. 
and, a lot of people also feel—you know, i'm willing to volunteer my time to contribute to the community, but why should i volunteer my time to contribute to that company's, to improving that company's, proprietary program? 
you know, some people might not even think that that's evil, but they want to get paid if they're going to do that. 
i, personally, would rather not do it at all. 
but both of these groups of people—both the ones like me who say, "i don't want to help that nonfree program to get a foothold in our community" and the ones that say, "sure, i'd work for them, but then they better pay me"—both of us have a good reason to use the gnu general public license. 
because that says to that company, "you can't just take my work, and distribute it without the freedom."
 whereas, the non-copyleft licenses, like the x windows license, do permit that. 
so that is the big division between the two categories of free software—license-wise. 
there are the programs that are copylefted so that the license defends the freedom of the software for every user. 
and there are the non-copylefted programs for which nonfree versions are allowed. 
somebody can take those programs and strip off the freedom. 
you may get that program in a nonfree version. 
and that problem exists today. 
there are still nonfree versions of x windows being used on our free operating systems. 
there is even hardware—which is not really supported—except by a nonfree version of x windows. 
and that's a major problem in our community. 
nonetheless, i wouldn't say that x windows is a bad thing, you know. 
i'd say that the developers did not do the best possible thing that they could have done. 
but they did release a lot of software that we could all use. 
you know, there's a big difference between less than perfect, and evil. 
there are many gradations of good and bad. 
we have to resist the temptation to say, if you didn't do the absolute best possible thing, then you're no good. 
you know, the people that developed x windows made a big contribution to our community. 
but there's something better that they could have done. 
they could have copylefted parts of the program and prevented those freedom-denying versions from being distributed by others. 
now, the fact that the gnu general public license defends your freedom, uses copyright law to defend your freedom, is, of course, why microsoft is attacking it today. 
see, microsoft would really like to be able to take all the code that we wrote and put it into proprietary programs, have somebody make some improvements, or even just incompatible changes is all they need. 
[laughter] you know, with microsoft's marketing clout, they don't need to make it better to have their version supplant ours. 
they just have to make it different and incompatible. 
and then, put it on everybody's desktop. 
so they really don't like the gnu gpl. 
because the gnu gpl won't let them do that. 
it doesn't allow "embrace and extend."
 it says, if you want to share our code in your programs, you can. 
but, you've got to share and share alike. 
the changes that you make we have to be allowed to share. 
so, it's a two-way cooperation, which is real cooperation. 
many companies—even big companies like ibm and hp are willing to use our software on this basis. 
ibm and hp contribute substantial improvements to gnu software. 
and they develop other free software. 
but, microsoft doesn't want to do that, so they give it out that businesses just can't deal with the gpl. 
well, if businesses don't include ibm, and hp and sun, then maybe they're right. 
[laughter] more about that later. 
i should finish the historical story. 
you see, we set out in 1984 not just to write some free software but to do something much more coherent: to develop an operating system that was entirely free software. 
so that meant we had to write piece after piece after piece. 
of course, we were always looking for shortcuts. 
the job was so big that people said we'd never be able to finish. 
and, i thought that there was at least a chance that we'd finish it but, obviously, it's worth looking for shortcuts. 
so we kept looking around. 
is there any program that somebody else has written that we could manage to adapt, to plug into here, and that way we won't have to write it from scratch? 
for instance, the x window system. 
it's true it wasn't copylefted, but it was free software, so we could use it. 
now, i had wanted to put a window system into gnu from day one. 
i wrote a couple of window systems at mit before i started gnu. 
and so, even though unix had no window system in 1984, i decided that gnu would have one. 
but, we never ended up writing a gnu window system, because x came along. 
and i said, goody! 
one big job we don't have to do. 
we'll use x. so i basically said, let's take x, and put it into the gnu system. 
and we'll make the other parts of gnu, you know, work with x, when appropriate. 
and we found other pieces of software that had been written by other people, like the text formatter tex, some library code from berkeley. 
at that time there was berkeley unix, but it was not free software. 
this library code, initially, was from a different group at berkeley, that did research on floating point. 
and, so, we kept, we fit in these pieces. 
in october 1985, we founded the free software foundation. 
so please note, the gnu project came first. 
the free software foundation came after, about almost two years after the announcement of the project. 
and the free software foundation is a tax-exempt charity that raises funds to promote the freedom to share and change software. 
and in the 1980's, one of the main things we did with our funds was to hire people to write parts of gnu. 
and essential programs, such as the shell and the c library were written this way, as well as parts of other programs. 
the tar program, which is absolutely essential, although not exciting at all [laughter] was written this way. 
i believe gnu grep was written this way. 
and so, we're approaching our goal. 
by 1991, there was just one major piece missing, and that was the kernel. 
now, why did i put off the kernel? 
probably because it doesn't really matter what order you do the things in, at least technically it doesn't. 
you've got to do them all anyway. 
and partly because i'd hoped we'd be able to find a start at a kernel somewhere else. 
and we did. 
we found mach, which had been developed at carnegie mellon. 
and it wasn't the whole kernel; it was the bottom half of the kernel. 
so we had to write the top half, but i figured, you know, things like the file system, the network code, and so on. 
but running on top of mach they're running essentially as user programs, which ought to make them easier to debug. 
you can debug with a real source-level debugger running at the same time. 
and so, i thought that way we'd be able to get these, the higher level parts of the kernel, done in a short time. 
it didn't work out that way. 
these asynchronous, multi-threaded processes, sending messages to each other turned out to be very hard to debug. 
and the mach-based system that we were using to bootstrap with had a terrible debugging environment, and it was unreliable, and various problems. 
it took us years and years to get the gnu kernel to work. 
but, fortunately, our community did not have to wait for the gnu kernel. 
because in 1991, linus torvalds developed another free kernel called linux. 
and he used the old-fashioned monolithic design and it turns out that he got his working much faster than we got ours working. 
so maybe that's one of the mistakes that i made: that design decision. 
anyway, at first, we didn't know about linux, because he never contacted us to talk about it. 
although he did know about the gnu project. 
but he announced it to other people and other places on the net. 
and so other people then did the work of combining linux with the rest of the gnu system to make a complete free operating system. 
essentially, to make the gnu plus linux combination. 
but, they didn't realize that's what they were doing. 
you see, they said, we have a kernel—let's look around and see what other pieces we can find to put together with the kernel. 
so, they looked around—and lo and behold, everything they needed was already available. 
what good fortune, they said. 
[laughter] it's all here. 
we can find everything we need. 
let's just take all these different things and put it together, and have a system. 
they didn't know that most of what they found was pieces of the gnu system. 
so they didn't realize that they were fitting linux into the gap in the gnu system. 
they thought they were taking linux and making a system out of linux. 
so they called it a linux system. 
question: [inaudible] stallman: can't hear you—what? 
question: [inaudible] stallman: well, it's just not—you know, it's provincial. 
question: but it's more good fortune then finding x and mach? 
stallman: right. 
the difference is that the people who developed x and mach didn't have the goal of making a complete free operating system. 
we're the only ones who had that. 
and, it was our tremendous work that made the system exist. 
we actually did a larger part of the system than any other project. 
no coincidence, because those people—they wrote useful parts of the system. 
but they didn't do it because they wanted the system to be finished. 
they had other reasons. 
now the people who developed x—they thought that designing across the network window system would be a good project, and it was. 
and it turned out to help us make a good free operating system. 
but that's not what they hoped for. 
they didn't even think about that. 
it was an accident. 
an accidental benefit. 
now, i'm not saying that what they did was bad. 
they did a large free software project. 
that's a good thing to do. 
but they didn't have that ultimate vision. 
the gnu project is where that vision was. 
and, so, we were the ones whose—every little piece that didn't get done by somebody else, we did it. 
because we knew that we wouldn't have a complete system without it. 
and even if it was totally boring and unromantic, like tar or mv. 
[laughter] we did it. 
or ld, you know there's nothing very exciting in ld—but i wrote one. 
[laughter] and i did make efforts to have it do a minimal amount of disk i/o so that it would be faster and handle bigger programs. 
but, you know, i like to do a good job. 
i like to improve various things about the program while i'm doing it. 
but the reason that i did it wasn't that i had brilliant ideas for a better ld. 
the reason i did it is that we needed one that was free. 
and we couldn't expect anyone else to do it. 
so, we had to do it, or find someone to do it. 
so, although at this point thousands of people in projects have contributed to this system, there is one project which is the reason that this system exists, and that's the gnu project. 
it is basically the gnu system, with other things added since then. 
so, however, the practice of calling the system linux has been a great blow to the gnu project, because we don't normally get credit for what we've done. 
i think linux, the kernel, is a very useful piece of free software, and i have only good things to say about it. 
but, well, actually, i can find a few bad things to say about it. 
[laughter] but, basically, i have good things to say about it. 
however, the practice of calling the gnu system, linux, is just a mistake. 
i'd like to ask you please to make the small effort necessary to call the system gnu/linux, and that way to help us get a share of the credit. 
question: you need a mascot! 
get yourself a stuffed animal! 
[laughter] stallman: we have one. 
question: you do? 
stallman: we have an animal—a gnu. 
[laughter] anyway. 
so, yes, when you draw a penguin, draw a gnu next to it. 
[laughter] but, let's save the questions for the end. 
i have more to go through. 
so, why am i so concerned about this? 
you know, why do i think it is worth bothering you and perhaps giving you a, perhaps lowering your opinion of me, [laughter] to raise this issue of credit? 
because, you know, some people when i do this, some people think that it's because i want my ego to be fed, right? 
of course, i'm not saying—i'm not asking you to call it "stallmanix," right? 
[laughter] [applause] i'm asking you to call it gnu, because i want the gnu project to get credit. 
and there's a very specific reason for that, which is a lot more important than anybody getting credit, in and of itself. 
you see, these days, if you look around in our community most of the people talking about it and writing about it don't ever mention gnu, and they don't ever mention these goals of freedom—these political and social ideals, either. 
because the place they come from is gnu. 
the ideas associated with linux—the philosophy is very different. 
it is basically the apolitical philosophy of linus torvalds. 
so, when people think that the whole system is linux, they tend to think: "oh, it must have been all started by linux torvalds. 
his philosophy must be the one that we should look at carefully."
 and when they hear about the gnu philosophy, they say: "boy, this is so idealistic, this must be awfully impractical. 
i'm a linux-user, not a gnu-user."
 [laughter] what irony! 
if they only knew! 
if they knew that the system they liked—or, in some cases, love and go wild over—is our idealistic, political philosophy made real. 
they still wouldn't have to agree with us. 
but at least they'd see a reason to take it seriously, to think about it carefully, to give it a chance. 
they would see how it relates to their lives. 
you know, if they realized, "i'm using the gnu system. 
here's the gnu philosophy. 
this philosophy is why this system that i like very much exists," they'd at least consider it with a much more open mind. 
it doesn't mean that everybody will agree. 
people think different things. 
that's ok. 
you know, people should make up their own minds. 
but i want this philosophy to get the benefit of the credit for the results it has achieved. 
if you look around in our community, you'll find that almost everywhere, the institutions are calling the system linux. 
you know, reporters mostly call it linux. 
it's not right, but they do. 
the companies mostly say it that package the system. 
oh, and most of these reporters, when they write articles, they usually don't look at it as a political issue, or social issue. 
they're usually looking at it purely as a business question or what companies are going to succeed more or less, which is really a fairly minor question for society. 
and, if you look at the companies that package the gnu/linux system for people to use, well, most of them call it linux. 
and they all add nonfree software to it. 
see, the gnu gpl says that if you take code, and some code out of a gpl-covered program, and add some more code to make a bigger program, that whole program has to be released under the gpl. 
but you could put other separate programs on the same disk (of either kind, hard disk, or cd), and they can have other licenses. 
that's considered mere aggregation, and, essentially, just distributing two programs to somebody at the same time is not something we have any say over. 
so, in fact, it is not true—sometimes, i wish it were true—that if a company uses a gpl-covered program in a product that the whole product has to be free software. 
it's not—it doesn't go to that range—that scope. 
it's the whole program. 
if there are two separate programs that communicate with each other at arm's length—like by sending messages to each other—then, they're legally separate, in general. 
so, these companies, by adding nonfree software to the system, are giving the users, philosophically and politically, a very bad idea. 
they're telling the users, "it is ok to use nonfree software. 
we're even putting it on this as a bonus."
 if you look at the magazines about the use of the gnu/linux system, most of them have a title like "linux-something or other."
 so they're calling the system linux most of the time. 
and they're filled with ads for nonfree software that you could run on top of the gnu/linux system. 
now those ads have a common message. 
they say: nonfree software is good for you. 
it's so good that you might even pay to get it. 
[laughter] and they call these things "value-added packages," which makes a statement about their values. 
they're saying: value practical convenience, not freedom. 
and, i don't agree with those values, so i call them "freedom-subtracted packages."
 [laughter] because if you have installed a free operating system, then you now are living in the free world. 
you enjoy the benefits of liberty that we worked for so many years to give you. 
those packages give you an opportunity to buckle on a chain. 
and then if you look at the trade shows—about the use of the, dedicated to the use of, the gnu/linux system, they all call themselves "linux" shows. 
and they're filled with booths exhibiting nonfree software, essentially putting the seal of approval on the nonfree software. 
so, almost everywhere you look in our community, the institutions are endorsing the nonfree software, totally negating the idea of freedom that gnu was developed for. 
and the only place that people are likely to come across the idea of freedom is in connection with gnu, and in connection with free software, the term, free software. 
so this is why i ask you: please call the system gnu/linux. 
please make people aware where the system came from and why. 
of course, just by using that name, you won't be making an explanation of the history. 
you can type four extra characters and write gnu/linux; you can say two extra syllables. 
but, gnu/linux is fewer syllables than windows 2000. 
[laughter] but, you're not telling them a lot, but you're preparing them, so that when they hear about gnu, and what it's all about, they'll see how that connects to them and their lives. 
and that, indirectly, makes a tremendous difference. 
so please help us. 
you'll note that microsoft called the gpl an "open source license."
 they don't want people to be thinking in terms of freedom as the issue. 
you'll find that they invite people to think in a narrow way, as consumers, and, of course, not even think very rationally as consumers, if they're going to choose microsoft products. 
but they don't want people to think as citizens or statesmen. 
that's inimical to them. 
at least it's inimical to their current business model. 
now, how does free software…well, i can tell you about how free software relates to our society. 
a secondary topic that might be of interest to some of you is how free software relates to business. 
now, in fact, free software is tremendously useful for business. 
after all, most businesses in the advanced countries use software. 
only a tiny fraction of them develop software. 
and free software is tremendously advantageous for any company that uses software, because it means that you're in control. 
basically, free software means the users are in control of what the program does. 
either individually, if they care enough to be, or, collectively, when they care enough to be. 
whoever cares enough can exert some influence. 
if you don't care, you don't buy. 
then you use what other people prefer. 
but, if you do care, then you have some say. 
with proprietary software, you have essentially no say. 
with free software, you can change what you want to change. 
and it doesn't matter that there are no programmers in your company; that's fine. 
you know, if you wanted to move the walls in your building, you don't have to be a carpentry company. 
you just have to be able to go find a carpenter and say, "what will you charge to do this job?"
 and if you want to change around the software you use, you don't have to be a programming company. 
you just have to go to a programming company and say, "what will you charge to implement these features? 
and when will you have it done?"
 and if they don't do the job, you can go find somebody else. 
there's a free market for support. 
so, any business that cares about support will find a tremendous advantage in free software. 
with proprietary software, support is a monopoly, because one company has the source code, or maybe a small number of companies that paid a gigantic amount of money have the source code, if it's microsoft's shared source program, but, it's very few. 
and so, there aren't very many possible sources of support for you. 
and that means, that unless you're a real giant, they don't care about you. 
your company is not important enough for them to care if they lose your business, or what happens. 
once you're using the program, they figure you're locked in to getting the support from them, because to switch to a different program is a gigantic job. 
so, you end up with things like paying for the privilege of reporting a bug. 
[laughter] and once you've paid, they tell you, "well, ok, we've noted your bug report. 
and in a few months, you can buy an upgrade, and you can see if we've fixed it."
 [laughter] support providers for free software can't get away with that. 
they have to please the customers. 
of course, you can get a lot of good support gratis. 
you post your problem on the internet. 
you may get an answer the next day. 
but that's not guaranteed, of course. 
if you want to be confident, you better make an arrangement with a company and pay them. 
and this is, of course, one of the ways that free software business works. 
another advantage of free software for businesses that use software is security and privacy. 
and this applies to individuals as well, but i brought it up in the context of businesses. 
you see, when a program is proprietary, you can't even tell what it really does. 
it could have features, deliberately put in that you wouldn't like if you knew about them, like it might have a backdoor to let the developer get into your machine. 
it might snoop on what you do and send information back. 
this is not unusual. 
some microsoft software did this. 
but it's not only microsoft. 
there are other proprietary programs that snoop on the user. 
and you can't even tell if it does this. 
and, of course, even assuming that the developer's totally honest, every programmer makes mistakes. 
there could be bugs that affect your security which are nobody's fault. 
but the point is: if it's not free software, you can't find them. 
and you can't fix them. 
nobody has the time to check the source of every program he runs. 
you're not going to do that. 
but with free software there's a large community, and there are people in that community who are checking things. 
and you get the benefit of their checking, because if there's an accidental bug, there surely are, from time to time, in any program, they might find it and fix it. 
and people are much less likely to put in a deliberate trojan horse, or a snooping feature, if they think they might get caught. 
the proprietary software developers figure they won't get caught. 
they'll get away with it undetected. 
but a free software developer has to figure that people will look at that and see it's there. 
so, in our community, we don't feel we can get away with ramming a feature down the users' throats that the users wouldn't like. 
so we know that if the users don't like it, they'll make a modified version which doesn't have it. 
and then, they'll all start using that version. 
in fact, we can all reason enough, we can all figure this out enough steps ahead, that we probably won't put in that feature. 
after all, you're writing a free program; you want people to like your version; you don't want to put in a thing that you know a lot of people are going to hate, and have another modified version catch on instead of yours. 
so you just realize that the user is king in the world of free software. 
in the world of proprietary software, the customer is not king. 
because you are only a customer. 
you have no say in the software you use. 
in this respect, free software is a new mechanism for democracy to operate. 
professor lessig, now at stanford, noted that code functions as a kind of law. 
whoever gets to write the code that just about everybody uses for all intents and purposes is writing the laws that run people's lives. 
with free software, these laws get written in a democratic way. 
not the classical form of democracy—we don't have a big election and say, "everybody vote which way should this feature be done."
 [laughter] instead we say, basically, those of you who want to work on implementing the feature this way, do it. 
and if you want to work on implementing the feature that way, do it. 
and, it gets done one way or the other, you know? 
and so, if a lot of people want it this way, it'll get done this way. 
so, in this way, everybody contributes to the social decision by simply taking steps in the direction that he wants to go. 
and you're free to take as many steps, personally, as you want to take. 
a business is free to commission as many steps as they find useful to take. 
and, after you add all these things up, that says which direction the software goes. 
and it's often very useful to be able to take pieces out of some existing program, presumably usually large pieces, of course, and then write a certain amount of code of your own, and make a program that does exactly what you need, which would have cost you an arm and a leg to develop, if you had to write it all from scratch, if you couldn't cannibalize large pieces from some existing free software package. 
another thing that results from the fact that the user is king is that we tend to be very good about compatibility and standardization. 
why? 
because users like that. 
users are likely to reject a program that has gratuitous incompatibilities in it. 
now, sometimes there's a certain group of users which actually have a need for a certain kind of incompatibility, and then they'll have it. 
that's ok. 
but when users want is to follow a standard, we developers have to follow it, and we know that. 
and we do it. 
by contrast, if you look at proprietary software developers, they often find it advantageous to deliberately not follow a standard, and not because they think that they're giving the user an advantage that way, but rather because they're imposing on the user, locking the user in. 
and you'll even find them making changes in their file formats from time to time, just to force people to get the newest version. 
archivists are finding a problem now, that files written on computers ten years ago often can't be accessed; they were written with proprietary software that's essentially lost now. 
if it were written with free software, then it could be brought up-to-date and run. 
and those things would not, those records would not be lost, would not be inaccessible. 
they were even complaining about this on npr recently in citing free software as a solution. 
and so, in effect, by using a nonfree program to store your own data, you are putting your head in a noose. 
so, i've talked about how free software affects most business. 
but how does it affect that particular narrow area which is software business? 
well, the answer is mostly not at all. 
and the reason is that 90% of the software industry, from what i'm told, is development of custom software, software that's not meant to be released at all. 
for custom software, this issue, or the ethical issue of free or proprietary, doesn't arise. 
you see, the issue is, are you users free to change, and redistribute, the software? 
if there's only one user, and that user owns the rights, there's no problem. 
that user is free to do all these things. 
so, in effect, any custom program that was developed by one company for use in-house is free software, as long as they have the sense to insist on getting the source code and all the rights. 
and the issue doesn't really arise for software that goes in a watch or a microwave oven or an automobile ignition system. 
because those are places where you don't download software to install. 
it's not a real computer, as far as the user is concerned. 
and so, it doesn't raise these issues enough for them to be ethically important. 
so, for the most part, the software industry will go along, just as it's been going. 
and the interesting thing is that since such a large fraction of the jobs are in that part of the industry, even if there were no possibilities for free software business, the developers of free software could all get day jobs writing custom software. 
[laughter] there's so many; the ratio is so big. 
but, as it happens, there is free software business. 
there are free software companies, and at the press conference that i'm going to have, people from a couple of them will join us. 
and, of course, there are also companies which are not free software businesses but do develop useful pieces of free software to release, and the free software that they produce is substantial. 
now, how do free software businesses work? 
well, some of them sell copies. 
you know, you're free to copy it but they can still sell thousands of copies a month. 
and others sell support and various kinds of services. 
i, personally, for the second half of the '80's, i sold free software support services. 
basically i said, for $200 an hour, i'll change whatever you want me to change in gnu software that i'd written. 
and, yes, it was a stiff rate, but if it was a program that i was the author of, people would figure that i might get the job done in a lot fewer hours. 
[laughter] and i made a living that way. 
in fact, i'd made more than i'd ever made before. 
i also taught classes. 
and i kept doing that until 1990, when i got a big prize and i didn't have to do it any more. 
but, 1990 was when the first corporation free software business was formed, which was cygnus support. 
and their business was to do, essentially, the same kind of thing that i'd been doing. 
i certainly could have worked for them, if i had needed to do that. 
since i didn't need to, i felt it was good for the movement if i remained independent of any one company. 
that way, i could say good and bad things about the various free software and nonfree software companies, without a conflict of interest. 
i felt that i could serve the movement more. 
but, if i had needed that to make a living, sure, i would have worked for them. 
it's an ethical business to be in. 
no reason i would have felt ashamed to take a job with them. 
and that company was profitable in its first year. 
it was formed with very little capital, just the money its three founders had. 
and it kept growing every year and being profitable every year until they got greedy, and looked for outside investors, and then they messed things up. 
but it was several years of success, before they got greedy. 
so, this illustrates one of the exciting things about free software. 
free software demonstrates that you don't need to raise capital to develop free software. 
i mean, it's useful; it can help. 
you know, if you do raise some capital, you can hire people and have them write a bunch of software. 
but you can get a lot done with a small number of people. 
and, in fact, the tremendous efficiency of the process of developing free software is one of the reasons it's important for the world to switch to free software. 
and it also belies what microsoft says when they say the gnu gpl is bad, because it makes it harder for them to raise capital to develop nonfree software and take our free software and put our code into their programs that they won't share with us. 
basically, we don't need to have them raising capital that way. 
we'll get the job done anyway. 
we are getting the job done. 
people used to say we could never do a complete free operating system. 
now we've done that and a tremendous amount more. 
and i would say that we're about an order of magnitude away from developing all the general purpose published software needs of the world. 
and this is in a world where more than 90% of the users don't use our free software yet. 
this is in a world where, although in certain areas of business, you know, more than half of all the web servers in the world are running on gnu/linux with apache as the web server. 
question: [inaudible] … what did you say before, linux? 
stallman: i said gnu/linux. 
question: you did? 
stallman: yes, if i'm talking about the kernel, i call it linux. 
you know, that's it's name. 
the kernel was written by linus torvalds, and we should only call it by the name that he chose, out of respect for the author. 
anyway, but in general, in business most users are not using it. 
most home users are not using our system yet. 
so, when they are, we should automatically get 10 times as many volunteers and 10 times as many customers for the free software businesses that there will be. 
and so that will take us that order of magnitude. 
so at this point, i am pretty confident that we can do the job. 
and, this is important, because microsoft asks us to feel desperate. 
they say, the only way you can have software to run, the only way you can have innovation, is if you give us power. 
let us dominate you. 
let us control what you can do with the software you're running, so that we can squeeze a lot of money out of you, and use a certain fraction of that to develop software, and take the rest as profit. 
well, you shouldn't ever feel that desperate. 
you shouldn't ever feel so desperate that you give up your freedom. 
that's very dangerous. 
another thing that microsoft, well, not just microsoft, people who don't support free software generally adopt a value system in which the only thing that matters is short-term practical benefits: how much money am i going to make this year? 
what job can i get done today? 
short-term thinking and narrow thinking. 
their assumption is that it is ridiculous to imagine that anybody ever might make a sacrifice for the sake of freedom. 
yesterday, a lot of people were making speeches about americans who made sacrifices for the freedom of their compatriots. 
some of them made great sacrifices. 
they even sacrificed their lives for the kinds of freedom that everyone in our country has heard about, at least. 
(at least, in some of the cases; i guess we have to ignore the war in vietnam.) [editor's note: the day before was "memorial day" in the usa. 
memorial day is a day where war heros are commemorated.] but, fortunately, to maintain our freedom in using software, doesn't call for big sacrifices. 
just tiny, little sacrifices are enough, like learning a command-line interface, if we don't have a gui interface program yet. 
like doing the job in this way, because we don't have a free software package to do it that way, yet. 
like, paying some money to a company that's going to develop a certain free software package, so that you can have it in a few years. 
various little sacrifices that we can all make. 
and, in the long run, even we will have benefited from it. 
you know, it is really an investment more than a sacrifice. 
we just have to have enough long-term view to realize it's good for us to invest in improving our society, without counting the nickels and dimes of who gets how much of the benefit from that investment. 
so, at this point, i'm essentially done. 
i'd like to mention that there's a new approach to free software business being proposed by tony stanco, which he calls "free developers," which involves a certain business structure which hopes eventually to pay out a certain share of the profits to every, to all the authors of the free software who've joined the organization. 
and they're looking at the prospects of getting me some rather large government software development contracts in india now, because they're going to be using free software as the basis, having tremendous cost savings that way. 
and so now i guess that i should ask for questions. 
question: [inaudible] stallman: could you speak up a bit louder please? 
i can't really hear you. 
question: how could a company like microsoft include a free software contract? 
stallman: well, actually, microsoft is planning to shift a lot of its activity into services. 
and what they're planning to do is something dirty and dangerous, which is tie the services to the programs, one to the next, in a sort of zigzag, you know? 
so that to use this service, you've got to be using this microsoft program, which is going to mean you need to use this service, to this microsoft program, so it's all tied together. 
that's their plan. 
now, the interesting thing is that selling those services doesn't raise the ethical issue of free software or nonfree software. 
it might be perfectly fine for them to have the business for those businesses selling those services over the net to exist. 
however, what microsoft is planning to do is to use them to achieve an even greater lock, an even greater monopoly, on the software and the services, and this was described in an article, i believe in business week, recently. 
and, other people said that it is turning the net into the microsoft company town. 
and this is relevant because, you know, the trial court in the microsoft antitrust trial recommended breaking up the company, microsoft. 
but in a way, that makes no sense—it wouldn't do any good at all—into the operating part and the applications part. 
but having seen that article, i now see a useful, effective way to split up microsoft into the services part and the software part, to require them to deal with each other only at arm's length, that the services must publish their interfaces, so that anybody can write a client to talk to those services, and, i guess, that they have to pay to get the service. 
well, that's ok. 
that's a totally different issue. 
if microsoft is split up in this way […] services and software, they will not be able to use their software to crush competition with microsoft services. 
and they won't be able to use the services to crush competition with microsoft software. 
and we will be able to make the free software, and maybe you people will use it to talk to microsoft services, and we won't mind. 
because, after all, although microsoft is the proprietary software company that has subjugated the most people—the others have subjugated fewer people, it's not for want of trying. 
[laughter] they just haven't succeeded in subjugating as many people. 
so, the problem is not microsoft and only microsoft. 
microsoft is just the biggest example of the problem we're trying to solve, which is proprietary software taking away users' freedom to cooperate and form an ethical society. 
so we shouldn't focus too much on microsoft, you know, even though they did give me the opportunity for this platform. 
that doesn't make them all-important. 
they're not the be-all and end-all. 
question: earlier, you were discussing the philosophical differences between open source software and free software. 
how do you feel about the current trend of gnu/linux distributions as they head towards supporting only intel platforms? 
and the fact that it seems that less and less programmers are programming correctly, and making software that will compile anywhere? 
and making software that simply works on intel systems? 
stallman: i don't see an ethical issue there. 
although, in fact, companies that make computers sometimes port the gnu/linux system to it. 
hp apparently did this recently. 
and, they didn't bother paying for a port of windows, because that would have cost too much. 
but getting gnu/linux supported was, i think, five engineers for a few months. 
it was easily doable. 
now, of course, i encourage people to use autoconf, which is a gnu package that makes it easier to make your programs portable. 
i encourage them to do that. 
or when somebody else fixes the bug that it didn't compile on that version of the system, and sends it to you, you should put it in. 
but i don't see that as an ethical issue. 
question: two comments. 
one is: recently, you spoke at mit. 
i read the transcript. 
and someone asked about patents, and you said that "patents are a totally different issue. 
i have no comments on that."
 stallman: right. 
i actually have a lot to say about patents, but it takes an hour. 
[laughter] question: i wanted to say this: it seems to me that there is an issue. 
i mean, there is a reason that companies call both patents and copyrights things like hard property in trying to get this concept which is, if they want to use the power of the state to create a course of monopoly for themselves. 
and so, what's common about these things is not that they revolve around the same issues, but that motivation is not really the public service issues but the motivation of companies to get a monopoly for their private interests. 
stallman: i understand. 
but, well, i want to respond because there's not too much time. 
so i'd like to respond to that. 
you're right that that's what they want. 
but there's another reason why they want to use the term intellectual property. 
it's that they don't want to encourage people to think carefully about copyright issues or patent issues. 
because copyright law and patent law are totally different, and the effects of software copyrighted and software patents are totally different. 
software patents are a restriction on programmers, prohibiting them from writing certain kinds of programs, whereas copyright doesn't do that. 
with copyright, at least if you wrote it yourself, you're allowed to distribute it. 
so, it's tremendously important to separate these issues. 
they have a little bit in common, at a very low level, and everything else is different. 
so, please, to encourage clear thinking, discuss copyright or discuss patents. 
but don't discuss intellectual property. 
i don't have an opinion on intellectual property. 
i have opinions on copyrights and patents and software. 
question: you mentioned at the beginning that a functional language, like recipes, are computer programs. 
there's a cross a little bit different than other kinds of language created on. 
this is also causing a problem in the dvd case. 
stallman: the issues are partly similar but partly different, for things that are not functional in nature. 
part of the issue transfers but not all of it. 
unfortunately, that's another hour speech. 
i don't have time to go into it. 
but i would say that all functional works ought to be free in the same sense as software. 
you know, textbooks, manuals, dictionaries, and recipes, and so on. 
question: i was just wondering on online music. 
there are similarities and differences created all through. 
stallman: right. 
i'd say that the minimum freedom that we should have for any kind of published information is the freedom to non-commercially redistribute it, verbatim. 
for functional works, we need the freedom to commercially publish a modified version, because that's tremendously useful to society. 
for non-functional works, you know, things that are to entertain, or to be aesthetic, or to state a certain person's views, you know, perhaps they shouldn't be modified. 
and, perhaps that means that it's ok, to have copyright covering all commercial distribution of them. 
please remember that according to the u.s. 
constitution, the purpose of copyright is to benefit the public. 
it is to modify the behavior of certain private parties, so that they will publish more books. 
and the benefit of this is that society gets to discuss issues and learn. 
and, you know, we have literature. 
we have scientific works. 
the purpose is encourage that. 
copyrights do not exist for the sake of authors, let alone for the sake of publishers. 
they exist for the sake of readers and all those who benefit from the communication of information that happens when people write and others read. 
and that goal i agree with. 
but in the age of the computer networks, the method is no longer tenable, because it now requires draconian laws that invade everybody's privacy and terrorize everyone. 
you know, years in prison for sharing with your neighbor. 
it wasn't like that in the age of the printing press. 
then copyright was an industrial regulation. 
it restricted publishers. 
now, it's a restriction imposed by the publishers on the public. 
so, the power relationship is turned around 180 degrees, even if it's the same law. 
question: so you can have the same thing—but like in making music from other music? 
stallman: right. 
that is an interesting … question: and unique, new works, you know, it's still a lot of cooperation. 
stallman: it is. 
and i think that probably requires some kind of fair use concept. 
certainly making a few seconds of sample and using that in making some musical work, obviously that should be fair use. 
even the standard idea of fair use includes that, if you think about it. 
whether courts agree, i'm not sure, but they should. 
that wouldn't be a real change in the system as it has existed. 
question: what do you think about publishing public information in proprietary formats? 
stallman: oh, it shouldn't be. 
i mean, the government should never require citizens to use a nonfree program to access, to communicate with the government in any way, in either direction. 
question: i have been, what i will now say, a gnu/linux user… stallman: thank you. 
[laughter] question: …for the past four years. 
the one thing that has been problematical for me and is something that is essential, i think, to all of us, is browsing the web. 
stallman: yes. 
question: one thing that has been decidedly a weakness in using a gnu/linux system has been browsing the web, because the prevailing tool for that, netscape… stallman: …is not free software. 
let me respond to this. 
i want to get to the point, for the sake of getting in more. 
so, yes. 
there has been a terrible tendency for people to use netscape navigator on their gnu/linux systems. 
and, in fact all the commercially packaged systems come with it. 
so this is an ironic situation: we worked so hard to make a free operating system, and now, if you go to the store, and you can find versions of gnu/linux there, most of them are called linux, and they're not free. 
oh, well, part of them is. 
but then, there's netscape navigator, and maybe other nonfree programs as well. 
so, it's very hard to actually find a free system, unless you know what you're doing. 
or, of course, you can not install netscape navigator. 
now, in fact, there have been free web browsers for many years. 
there is a free web browser that i used to use called lynx. 
it's a free web browser that is non-graphical; it's text-only. 
this has a tremendous advantage, in you don't see the ads. 
[laughter] [applause] but anyway, there is a free graphical project called mozilla, which is now getting to the point where you can use it. 
and i occasionally use it. 
question: konqueror 2.01 has been very good. 
stallman: oh, ok. 
so that's another free graphical browser. 
so, we're finally solving that problem, i guess. 
question: can you talk to me about that philosophical/ethical division between free software and open source? 
do you feel that those are irreconcilable? 
… [recording switches tapes; end of question and start of answer is missing] stallman: … to a freedom, and ethics. 
or whether you just say, well, i hope that you companies will decide it's more profitable to let us be allowed to do these things. 
but, as i said, in a lot of practical work, it doesn't really matter what a person's politics are. 
when a person offers to help the gnu project, we don't say: "you have to agree with our politics."
 we say that in a gnu package, you've got to call the system gnu/linux, and you've got to call it free software. 
what you say when you're not speaking to the gnu project, that's up to you. 
question: the company, ibm, started a campaign for government agencies, to sell their big new machines, that they used linux as selling point, and say linux. 
stallman: yes, of course, it's really the gnu/linux systems. 
[laughter] question: that's right! 
well, tell the top sales person. 
he doesn't know anything for gnu. 
stallman: i have to tell who? 
question: the top sales person. 
stallman: oh yes. 
the problem is that they've already carefully decided what they want to say for reasons of their advantage. 
and the issue of what is a more accurate, or fair, or correct way to describe it is not the primary issue that matters to a company like that. 
now, some small companies, yes, there'll be a boss. 
and if the boss is inclined to think about things like that, he might make a decision that way. 
not a giant corporation though. 
it's a shame, you know. 
there's another more important and more substantive issue about what ibm is doing. 
they're saying that they're putting a billion dollars into "linux."
 but perhaps, i should also put quotes around "into," as well, because some of that money is paying people to develop free software. 
that really is a contribution to our community. 
but other parts is paying to pay people to write proprietary software, or port proprietary software to run on top of gnu/linux, and that is not a contribution to our community. 
but ibm is lumping that altogether into this. 
some of it might be advertising, which is partly a contribution, even if it's partly wrong. 
so, it's a complicated situation. 
some of what they're doing is contribution and some is not. 
and some is sort is somewhat, but not exactly. 
and you can't just lump it altogether and think, wow! 
whee! 
a billion dollars from ibm. 
[laughter] that's oversimplification. 
question: can you talk a little bit more about the thinking that went into the general public license? 
stallman: well, here's the—i'm sorry, i'm answering his question now. 
[laughter] schonberg: do you want to reserve some time for the press conference? 
or do you want to continue here? 
stallman: who is here for the press conference? 
not a lot of press. 
oh, three… ok. 
can you afford if we… if i go on answering everybody's questions for another ten minutes or so? 
ok. 
so, we'll go on answering everybody's questions. 
so, the thinking that went into the gnu gpl? 
part of it was that i wanted to protect the freedom of the community against the phenomena that i just described with x windows, which has happened with other free programs as well. 
in fact, when i was thinking about this issue, x windows was not yet released. 
but i had seen this problem happen in other free programs. 
for instance, tex. 
i wanted to make sure that the users would all have freedom. 
otherwise, i realized that i might write a program, and maybe a lot of people would use the program, but they wouldn't have freedom. 
and what's the point of that? 
but the other issue i was thinking about was, i wanted to give the community a feeling that it was not a doormat, a feeling that it was not prey to any parasite who would wander along. 
if you don't use copyleft, you are essentially saying: [speaking meekly] "take my code. 
do what you want. 
i don't say no."
 so, anybody can come along and say: [speaking very firmly] "ah, i want to make a nonfree version of this. 
i'll just take it."
 and, then, of course, they probably make some improvements, those nonfree versions might appeal to users, and replace the free versions. 
and then, what have you accomplished? 
you've only made a donation to some proprietary software project. 
and when people see that that's happening, when people see, other people take what i do, and they don't ever give back, it can be demoralizing. 
and, this is not just speculation. 
i had seen that happen. 
that was part of what happened to wipe out the old community that i belonged to the '70's. 
some people started becoming uncooperative. 
and we assumed that they were profiting thereby. 
they certainly acted as if they thought they were profiting. 
and we realized that they can just take off cooperation and not give back. 
and there was nothing we could do about it. 
it was very discouraging. 
we, those of us who didn't like the trend, even had a discussion and we couldn't come up with any idea for how we could stop it. 
so, the gpl is designed to stop that. 
and it says, yes, you are welcome to join the community and use this code. 
you can use it to do all sorts of jobs. 
but, if you release a modified version, you've got to release that to our community, as part of our community, as part of the free world. 
so, in fact, there are still many ways that people can get the benefit of our work and not contribute, like you don't have to write any software. 
lots of people use gnu/linux and don't write any software. 
there's no requirement that you've got to do anything for us. 
but if you do a certain kind of thing, you've got to contribute to it. 
so what that means is that our community is not a doormat. 
and i think that that helped give people the strength to feel, yes, we won't just be trampled underfoot by everybody. 
we'll stand up to this. 
question: yes, my question was, considering free but not copylefted software, since anybody can pick it up and make it proprietary, is it not possible also for someone to pick it up and make some changes and release the whole thing under the gpl? 
stallman: yes, it is possible. 
question: then, that would make all future copies then be gpl'ed. 
stallman: from that branch. 
but here's why we don't do that. 
question: hmm? 
stallman: here's why we don't generally do that. 
let me explain. 
question: ok, yes. 
stallman: we could, if we wanted to, take x windows, and make a gpl-covered copy and make changes in that. 
but there's a much larger group of people working on improving x windows and not gpl-ing it. 
so, if we did that, we would be forking from them. 
and that's not very nice treatment of them. 
and, they are a part of our community, contributing to our community. 
second, it would backfire against us, because they're doing a lot more work on x than we would be. 
so, our version would be inferior to theirs, and people wouldn't use it, which means, why go to the trouble at all? 
question: mmm hmm. 
stallman: so when a person has written some improvement to x windows, what i say that person should do is cooperate with the x development team. 
send it to them and let them use it their way. 
because they are developing a very important piece of free software. 
it's good for us to cooperate with them. 
question: except, considering x, in particular, about two years ago, the x consortium that was far into the nonfree open source… stallman: well, actually it wasn't open sourced. 
it wasn't open sourced, either. 
they may have said it was. 
i can't remember if they said that or not. 
but it wasn't open source. 
it was restricted. 
you couldn't commercially distribute, i think. 
or you couldn't commercially distribute a modified version, or something like that. 
there was a restriction that's considered unacceptable by both the free software movement and the open source movement. 
and yes, that's what using a non-copyleft license leaves you open to. 
in fact, the x consortium, they had a very rigid policy. 
they say: if your program if copylefted even a little bit, we won't distribute it at all. 
we won't put it in our distribution. 
so, a lot of people were pressured in this way into not copylefting. 
and the result was that all of their software was wide open, later on. 
when the same people who had pressured a developer to be too all-permissive, then the x people later said, all right, now we can put on restrictions, which wasn't very ethical of them. 
but, given the situation, would we really want to scrape up the resources to maintain an alternate gpl-covered version of x? and it wouldn't make any sense to do that. 
there are so many other things we need to do. 
let's do them instead. 
we can cooperate with the x developers. 
question: do you have a comment, is the gnu a trademark? 
and is it practical to include it as part of the gnu general public license allowing trademarks? 
stallman: we are, actually, applying for trademark registration on gnu. 
but it wouldn't really have anything to do with that. 
it's a long story to explain why. 
question: you could require the trademark be displayed with gpl-covered programs. 
stallman: no, i don't think so. 
the licenses cover individual programs. 
and when a given program is part of the gnu project, nobody lies about that. 
the name of the system as a whole is a different issue. 
and this is an aside. 
it's not worth discussing more. 
question: if there was a button that you could push and force all companies to free their software, would you press it? 
stallman: well, i would only use this for published software. 
you know, i think that people have the right to write a program privately and use it. 
and that includes companies. 
this is privacy issue. 
and it's true, there can be times when it is wrong to do that, like if it is tremendously helpful to humanity, and you are withholding it from humanity. 
that is a wrong but that's a different kind of wrong. 
it's a different issue, although it's in the same area. 
but yes, i think all published software should be free software. 
and remember, when it's not free software, that's because of government intervention. 
the government is intervening to make it nonfree. 
the government is creating special legal powers to hand out to the owners of the programs, so that they can have the police stop us from using the programs in certain ways. 
so i would certainly like to end that. 
schonberg: richard's presentation has invariably generated an enormous amount of intellectual energy. 
i would suggest that some of it should be directed to using, and possibly writing, free software. 
we should close the proceedings shortly. 
i want to say that richard has injected into a profession which is known in the general public for its terminal apolitical nerditude a level of political and moral discussion which is, i think, unprecedented in our profession. 
and we owe him very big for this. 
i'd like to note to people that there is a break. 
[applause] stallman: you are free to leave at any time, you know. 
[laughter] i'm not holding you prisoner here. 
[audience adjourns…] [overlapping conversations…] stallman: one final thing. 
our website: www.gnu.org 
rms on radio new zealand. 
transcript (by jim cheetham) of an interview between kim hill (presenter) and richard stallman in october 2009; originally published on inode: nota bene. 
interesting sections. 
[00:00] introduction [00:40] surveillance [00:19] terrorism and 9/11 [04:30] barack obama [06:23] airline security [08:02] digital surveillance [10:26] systematic surveillance [12:20] taxi surveillance [14:25] matters of principle—cellphones [15:33] free software and freedom [17:24] free trade treaties [20:08] cars, microwaves and planes [21:05] copying books [25:31] e-books & supporting artists [28:42] micropayments [30:47] a simplistic political philosophy? 
[32:51] income [33:48] digital handcuffs—amazon kindle [36:13] buying books [37:16] social networking [38:08] the acta [00:00] kh we spoke to richard stallman a while ago last year about his campaign for free software. 
he's a hero, of course, of the movement; launched the free software foundation, campaigns against software patents and extensions of copyright laws. 
his battle is, as he told us last year, against what he calls extreme capitalism. 
his gnu operating system with linux was the first free operating system that could run on a pc. 
richard stallman says "it's all about freedom," a cause which goes beyond software; and we could talk about the others he's identified, surveillance and censorship, because he joins me now, hello. 
[00:40] rms hello kh let us talk about surveillance and censorship. 
i've been looking at your personal website and you're talking about fingerprinting of air travelers, for example, which is something you're very hot about. 
rms yes, i urge people to refuse to go to the us where they would be mistreated that way. 
kh why is that mistreatment, do you think? 
rms because it's too much information to collect about people who aren't criminals. 
and by the way for the same reason i will not ever go to japan again unless they changed that policy, which makes me sad, but one must… [01:19] kh it's not justifiable in order to make sure that terrorists aren't getting on the plane? 
rms there's no need. 
basically terrorism, and by the way we don't really know who was behind the september 11th attacks in the us, we don't know whether it was a bunch of muslim fanatics, or it was a bunch of christian fanatics and the white house. 
we do know that bush corrupted and sabotaged the investigation when he was unable to prevent it from happening. 
kh so, are you an advocate of the conspiracy theories surrounding 9/11? 
rms i can't say … first of all i think it's unfair—we know that the attack was a conspiracy. 
all the theories are conspiracies. 
kh well, all right, the conspiracy theory for example, that has the bush administration staging the 9/11 attack in order to justify… rms i don't know. 
the only way there could ever be proof of that is with a real investigation, but when you have a government not allowing a real investigation of a horrible crime then you've got to suspect that they're hiding something. 
now i can't know for certain what they're hiding, but i want a real investigation to be carried out with the power to subpoena anyone possibly concerned, including bush, and make those people testify under oath and show them no deference that everyone else wouldn't get. 
kh putting 9/11 aside then because we haven't got time here to go into the various theories about what could possibly have caused 9/11, there is undoubtedly a thing called terrorism. 
rms yes, but it's a minor problem. 
more people died in the us in september 2001 from car accidents than from a terrorist attack, and that continues month after month, but we don't have a global war on accidents, so basically politicians used a real danger, but not the world's biggest danger, as an excuse for what they want to do, which is … and remember that these governments are much more dangerous, it's quite clear that bush's invasion of iraq was far more destructive than anything non state-sponsored terrorists have been able to do—that's assuming that those terrorists in september 2001 were not state-sponsored, which we don't know—but the point is, what bush did by invading iraq, using those attacks as an excuse, was tremendously worse and we must remember than governments gone amok can do far more damage than anybody not state-sponsored. 
after all, governments have a lot more men under arms and they don't have to hide the fact that they have men under arms, so they're in a much bigger position to do damage, so we must be concerned about letting them have too much power. 
a world in which the police can easily do whatever they'd like to do is a world in which the police are a threat. 
[04:30] kh last time we spoke, and we were talking about the issue of free software, but specifically in relation to that you doubted that president bush's successor, who we now know is barack obama, would be pretty much any different from bush. 
rms he's a little different, but i have to say he's small change. 
on human rights issues he's not very different. 
he's still in favor of keeping people in prison, without charges, indefinitely, and you can't get much worse than that in terms of human rights. 
kh well except he's addressing guantanamo bay. 
rms well that's just one of the places where it's done, it's done also in bagram in afghanistan, and i really don't see why it would be better to move those people to bagram. 
what has to be done is charge them or release them. 
they're entitled to that. 
kh yeah, they may be entitled to that but he's also democratically elected president who… rms that doesn't mean he's entitled to violate human rights. 
kh no, but would the american people be in favor of the release of those… rms i don't know. 
kh … that's got to be a consideration. 
rms no it's not, if they're not that just makes them responsible. 
kh i know you're… rms i don't think i can excuse massive violations of human rights by saying that the public is maddened and supports it. 
especially, why are they so maddened? 
because of a constant propaganda campaign telling you "be terrified of terrorists, throw away your human rights and everyone else's because you're so scared of these terrorists."
 it's disproportionate, we have to keep these dangers in their proportion, there isn't a campaign saying "be terrified of getting in a car" but maybe there ought to be. 
[06:23] kh most airline security, getting back to the fingerprinting issue, you've said is just for show. 
rms a lot of it is, not all of it is, i'm very glad that they have reinforced the cabin doors so that hijackers can't get at the pilots, ok, that's a sensible measure. 
kh but are you? 
i would have thought that you would have said "why would they spend money reinforcing the cabin doors because hijackers are a minor issue."
 rms i'm not against spending a little bit of money. 
kh you're saying that that issue isn't an infringement of human rights. 
rms ok, and i don't mind spending some money for safety, i even make some compromises you know on issues of rights, i'm not saying police shouldn't be able to get a search warrant, but they should have to go to a judge, to present probable cause, to keep them in check because police are very dangerous when they run amok, as people discovered a few months ago in london, when the police did run amok, and they killed somebody who was trying to walk home past a protest, and he couldn't get home because the police were just deliberately blocking the streets, and then they hit him. 
and then they lied about it too, which they typically do. 
whenever the police attack someone they lie about him, they lie about what they did, and they lie about what he was doing, to make it sound that they were justified in mistreating him in the first place, it's standard practice, they're like an armed gang. 
[08:02] kh if you don't agree with surveillance, is there any way that you would accept that it might be quite a handy thing, cctv… rms wait a second, your view of surveillance is oversimplifying things, what i see happening with computers is they make possible a form of total surveillance which wasn't feasible in the past, even governments like romania under ceau&#x0219;escu, or east germany with the stasi, they did a lot of surveillance but it took a lot of people working on it and even then it was limited what they could actually watch and record because it was so hard. 
now, we're entering a kind of surveillance society that has never been seen before… kh you're talking about digital surveillance. 
rms yes, but as people do more things using digital technology it becomes easy to keep a record of everything everyone has done, things that weren't done in the past and still aren't done with other media, there's no record of who sends a letter to who for all letters, it just isn't done. 
but there are records in many countries of who sends an email to whom and those records can be saved for years and we don't know that they'll ever be disposed of. 
kh if you think that governments are not to be trusted, which is a legitimate position of course, and if you think that the police are not to be trusted, again a legitimate position, why can't you feel happier about digital surveillance and cctv surveillance given that it may well give the people more protection. 
rms oh, i'm all in favor of the right to make and record videos, such as when you're on the street or when you're watching a protest or whatever, i'm concerned about systematic surveillance. 
kh what is that, systematic surveillance? 
rms well suppose the police set up a camera that always watches the street, and connects it to a face recognition program and make a database of everyone who passes, that's systematic surveillance. 
now if you walk down the street and maybe you see somebody you know and you recognize him, that's not systematic surveillance, that's a whole bunch of people knowing something, there's nothing wrong with that, that's just what life is. 
[10:26] kh what makes systematic surveillance more sinister to you? 
rms because we know that there's a tendency for many different governments to treat dissenters as terrorists, and investigate them using laws that were set up supposedly to help them prevent terrorism. 
we know also that they tend to sabotage political activities, and this is dangerous. 
kh what's wrong with being investigated? 
rms well, it depends if the government's investigating you because you're a political dissident, there are a lot of things they could do to harass you. 
one thing i remember was in england, a busload of protesters, they were on they way to a protest, the police stopped their bus and drove them away from the protest, and they cited a law that had been passed to supposedly prevent terrorism. 
well this is sabotaging political activity. 
and then another thing that happens i know in england, is people have been prosecuted for copies of texts that they have, you know reading is sometimes illegal, it's really dangerous. 
what we see is a global tendency for governments to bring out the worst side of themselves with terrorism as the excuse, so we must be on guard against that, that's potentially a much bigger danger than the terrorists it's supposed to protect us from. 
i don't have to say that they don't exist, or that they're no danger at all. 
kh no, the difficulty is being on guard against the danger that you've cited, without giving quarter to… [12:20] rms ah, no i don't see it's any problem at all. 
police have lots of things they can do to investigate people and it's more all the time and whenever there's a specific reason to suspect particular people they can basically get permission to search whatever. 
so ok, that's necessary, but beyond that we've got to be careful not to go, and the digital surveillance society goes far beyond that, there's a tendency to keep records of everything, check everything. 
in new york city for instance a taxi driver told me he had been required to install a camera which transmits by radio people's faces to the police where they run face recognition over it. 
i don't think that should be allowed. 
i don't mind if they have a system that records people's faces and keeps it for a week in case somebody attacks the taxi driver, that's not going to do anything to us if we don't attack taxi drivers. 
we can make use of surveillance technology in ways that don't threaten people's rights but we've got to make sure we use them in those ways. 
kh how come you can justify people being treated as if they're going to attack taxi drivers… rms but you see there the point is, those are not looked at unless there's a crime to investigate and then they get erased if it's done right, but the way it's actually being done in new york city is they're sent to the police, and the police keep track of who goes where, and that's what scares me. 
having all the information about what you do available to the police for years in the past whenever they want to look. 
well part of what i do about this is i don't buy things with credit cards unless it's something where they demand to know who i am anyway, i don't use a credit card or any digital method, i use cash, and that way big brother's not making a database of every place i've been, that i bought anything in, what i bought. 
[14:25] kh as a matter of principle, rather than… rms as a matter of principle. 
it's not an issue of convenience. 
kh you don't do quite a lot of things actually. 
rms yeah, i don't carry a cellphone because i really don't want to be telling big brother where i am all the time, every place i go. 
kh is that why? 
rms yes, that's why. 
well now there's another reason. 
today, cellphones are powerful computers and there's no way to run one without proprietary software. 
kh i thought that would be your main reason. 
rms actually there is one you can get, although they're not producing it anymore, it didn't work all that well, it's mark one. 
so that's another issue, but that didn't exist, that issue wasn't there when cellphones first came out, people didn't install programs in them, they were just fixed appliances, but they have always raised the issue that they're constantly saying where you are, and i just don't want to participate in a system like that, i think people shouldn't. 
it would be very convenient for me to have a cellphone, i'm not one of those people who would, who says "i resent the fact that people can call me," it's convenient when people can call me, but i'm not going to do it that way. 
[15:33] kh it's interesting that your battle for free software and the issues of freedom that you identify intersect. 
they didn't start out being the same—or did they? 
rms well they didn't start out being the same. 
pervasive digital surveillance wasn't a big problem twenty-seven years ago. 
kh but the people who were in charge were still the people who were in charge, the people who you identified as the people you didn't want to see… rms well actually they're not the same people. 
proprietary software's mostly controlled by various private entities that are developers, maybe apple, microsoft, adobe, google, amazon, they're all distributing proprietary software. 
kh i would have thought you'd identify them all as forces of extreme capitalism. 
rms well i'm sorry, when i say extreme capitalism i'm talking about a philosophy, and that philosophy says "the market should control everything, everything should be for sale, and business should be allowed to dominate politics and get the laws it wants," which is very different from mere capitalism, which says "within a society which we set up to protect peoples rights and so on, there are lots of things that people should be free to do, and make businesses to do them, as they wish."
 that difference is why today's form of capitalism is running wild and why we see free exploitation treaties which basically undermine democracy and turn it in to a sham. 
kh what are you talking about there? 
[17:24] rms well, the so-called free trade treaties, which i don't like to call that, they're designed to transfer power from our governments to companies. 
they all do this in one way, which is they let companies threaten to move to another country, or move their operations; and so any time the people are demanding that a government protect the environment, or the public health, or the general standard of living, or anything else that's more important than just who's going to buy and sell what, companies can say "we're against this, and if you do this we'll just move our operations elsewhere" and the politicians now have a wonderful excuse for why they're not going to do it. 
of course it was they who decided to adopt that treaty in the first place which they shouldn't have done. 
but then a lot of these treaties go beyond that, and they explicitly deny democracy. 
now the us had a law that said it wouldn't sell tuna—you weren't allowed to sell tuna in the us if it had been caught in a way that endangered dolphins. 
well that law had to be scrapped because of the world trade organization, that's just one example. 
kh because it was regarded as a trade barrier. 
rms exactly. 
then nafta, which is between the us, canada and mexico, allows companies to sue the government if they believe some law reduces their profits; effectively saying the highest value in society is how much money a company can make, and anything that gets in the way of that, we owe them. 
kh of course, we're in favor of free trade here, richard, because we rely on it… rms well i'm not in favor of free trade beyond a certain point. 
the people who are in favor of free trade say that it can make everyone more prosperous and that's true up to a point, and that point is where it starts subverting democracy. 
but the point of these treaties is precisely to stretch free trade to the point where it does subvert democracy. 
and you can see business think-tanks reporting how they expect in a few decades governments will have much less control over what goes on in the world and business will have more control. 
what they're predicting is essentially that these treaties will march on. 
[20:08] kh one of the other things you don't do, is you don't drive a car, is that right? 
rms no, that's not true, i don't own a car. 
i do have a driver's license. 
kh ok, one of the other things you don't do is you don't own a car. 
rms yeah, well that's to save money. 
i live in a city. 
kh no philosophy. 
rms no, i don't think it's wrong to own a car, it's good if we all drove somewhat less. 
kh i thought that it was because of the proprietary software in cars. 
rms now that's an interesting issue. 
i have appliances, i have a microwave oven which might have some proprietary software in it. 
kh and you fly in planes. 
rms yeah. 
well i don't own a plane though. 
i don't boycott everybody who uses proprietary software. 
if a company uses proprietary software i say that's too bad for them, but i'm not going to punish them by boycotting them, what i will try to do is explain to them why they deserve to have control over their computing rather than letting somebody else control their computing. 
[21:05] kh what are you going to tell the library and information association conference with regard to copyright and community? 
rms well, i'm going to explain why copyright law today is an injustice, because it forbids sharing, and sharing is absolutely essential. 
people must be free to share, so the new zealand copyright law that was adopted about a year ago, and only one of several unjust things in it was temporarily withdrawn, that went in the wrong direction, but it was already too restrictive, people must be free to non-commercially share exact copies of any published work. 
kh so just let me … how would this work, for a moment? 
i write a book, i spend, you know, five years of my life writing a book. 
rms well who knows, maybe you do it in a month. 
kh maybe i don't do it in a month. 
rms the point is, you do it by choice. 
people wrote books before there was copyright. 
i think you're going about this backwards. 
it's your choice whether to spend time writing, and the main reason most writers spend their time writing is because they have something they say they want to write and they hope people will appreciate it. 
it's only a few who get enough money that it starts to corrupt their spirit. 
kh don't most societies want to, and they don't do it fantastically efficiently, but to some extent they try to encourage people to write. 
rms oh, i'm all in favor of encouraging people to write. 
kh now how would you encourage people to write? 
rms well first of all remember that i'm not talking about abolishing copyright on artistic works, i'm saying that people must be free to non-commercially share them. 
commercial use would still be covered by copyright as it is now. 
kh if i can print off a whole book and pass it on, and they pass it on, pass it on, pass it on, pass it on, as an author i'm not going to sell many. 
rms well that may be so, or may not be. 
i've seen people claim that it's only works that are bestsellers that are likely to sell less, because remember if you're not a big hit and people pass along copies what they're doing is getting you more fans. 
if you're not a bestseller then what you mainly want commercially is exposure, and this is a way you'll get more exposure, and without having to pay for it either, and without having to give control to a company that would take most of the profits anyway. 
kh so hang on, the only reason an author would want exposure would be to increase the sales of their next book. 
rms oh no, no no no no no. 
only the ones who've been morally corrupted and are no longer yearning to be read and appreciated, that's what they start out wanting, and a few, only a few get rich, and then those few who get rich, when people are paid to do something that they originally did from pleasure or a yearning, they tend to start wanting the money more, and the thing that they used to yearn to do, they want less. 
kh so if being read and appreciated is what authors want… rms well they start out wanting. 
those who have got rich, some of them want to be rich. 
kh well we'll forget about those because you're implying they write bad books as a consequence. 
rms no i'm not saying that they're all bad, i'm not making a simple generalization like that, i say that their feelings have been corrupted, that doesn't necessarily mean their books are bad, i enjoy some of them. 
the point is that that's not a typical author. 
kh but a typical author you seem to be condemning to even more penury. 
rms oh no i'm not, you're mistaken. 
kh if they cannot sell the book… rms you're mistaken, you're making a projection which people who know more about this disagree. 
cory doctorow who has been a bestselling author puts all his works on the net and he doesn't even think he sells less. 
kh so people still go out and buy the hard copy from the shop? 
rms yes they do. 
kh even though people can pass his book from hand to hand willy-nilly. 
[25:31] rms they can do that anyway you know with printed books, that's the motive for e-books. 
e-books are designed to stop you from doing things like lending the book to your friend or selling it to a used bookstore and borrowing it from a public library. 
they're designed to turn public libraries into retail outlets. 
and the reason they do this is they want to establish a pay-per-read universe. 
they're following the twisted logic that says the most important thing is how much money people pay and everybody who reads had a debt, now owes money and he has to be made to pay. 
i think this is entirely twisted and i'm against it, because the freedom to share must be respected. 
but i have other proposals for ways to support artists. 
and remember the current system mostly supports corporations, so i don't think it works very well. 
and it makes a few authors quite rich, and those get treated with great deference by the corporations, and the rest basically get ground into the dust. 
my proposals—i have two, and another that combines them—one proposal is support artists using taxes, it could either be a specific tax on internet connectivity or general funds, it wouldn't be a tremendous amount of money by comparison with other government expenditures, and then you divide this among artists by measuring their popularity, but you don't divide it in linear proportion, 'cos if you did that a large portion of this money would go to making superstars richer and it's not needed, what i propose is take the cube root of the popularity. 
kh how do you assess their popularity? 
rms you could do it with polling. 
kh how polling? 
internet polling? 
rms all sorts of polling, there's public opinion polling and anything, use a sample, the point is you don't ask everybody, nobody's required to participate. 
but you use a sample, and you use that to measure popularity. 
kh i'm just holding that thought, popularity. 
you're equating popularity with merit? 
rms no i'm not, but i'm saying you don't want bureaucrats to be deciding who gets these funds. 
so this is one way, you could do it by polling, after all the current system bases it on popularity to some extent. 
take the cube root, so if a is a thousand times as popular as b, a will get ten times as much money as b, so this way it's the counterpart to a progressive income tax. 
so this way, yes if you're tremendously successful you do get more, but you don't get tremendously more, and most of the money goes to support a large number of artists of mid-range popularity. 
kh and tell me again, where does the money come from? 
rms it comes from taxes. 
it comes from all of us. 
kh general taxes. 
rms could be general taxes, or a specific special tax. 
either way is ok. 
[28:42] kh why don't you just ask people, if you're basing it on popularity, why don't you just ask people just to send in the money? 
rms well that's my other proposal. 
if every player had a button to send a dollar i think people would do it often, after all the main reason we don't do it is how much trouble it is. 
it's not that you or i would miss a dollar, i often would be glad to send a dollar to some artists, but how am i going to do it? 
i need to use a credit card and identify myself and i need to find where to send it to them and that's a lot of work. 
well, this button, which i hope would be implemented in an anonymous way, would take away all the work, it would be totally painless to send a dollar, and then i think a lot of people would do it. 
kh what about getting rid of taxes entirely, and giving us all the power to direct… rms i'm not against taxes. 
kh i'm not suggesting you are, but i'm asking you why not? 
rms because we need to make sure that rich people pay their fair share, which is a bigger share than what poor people have to pay, to keep society going. 
we need a welfare state, at least at our current level of technology and the way society works, we need a welfare state, and the rich shouldn't be exempt from funding it. 
kh does it not matter that your popularity contest for artists may let the rich completely off the hook? 
rms well, i'm not sure it matters. 
supporting artists is desirable but it's not a matter of life and death in the same way that giving poor people food and shelter and medical care is, whether they're artists or not. 
kh i don't know, i think that if you look at society it's made up of all sorts of things that are contingent on one another for the health of the society. 
[30:47] rms yes, but i don't want to have one answer for every question in society. 
i'm not a proponent of a very simplistic political philosophy, and i hope that that's visible. 
there are such people. 
kh yes, i'm sure there are. 
no, god no, i would never ever accuse you of being an advocate of a simplistic political philosophy :-) rms there are people who are totally opposed to copyright and criticize me for not going far enough, but what i say is that works whose use is to do practical jobs, these works must be free in the sense of the four freedoms that define free software. 
you've got to be free to republish them, to modify them, publish your modified versions, because this is what the users of the works need in their lives. 
but of course there are lots of works that don't, that contribute to society in other ways, they're not functional practical works. 
art for instance, the contribution of an artistic work is in the impact it makes on your mind, not in whatever practical job you might figure out how to do with it sometime. 
and then there are works that state people's opinions and thoughts and what they've seen, which is a different way that works can contribute to society, and i have different recommendations for these. 
but the freedom to non-commercially share, that must be respected, and that's why the new new zealand copyright law and the old one were both unjust, and the purpose of the new one is, specifically the punishing people by disconnecting them from the internet, the purpose of that is to stop people from sharing, and it's wrong to stop people from sharing, so even if they work out a different way of achieving this unjust goal, the goal is what's wrong, not only the nasty methods that are, because only draconian methods can stop people from sharing. 
[32:51] kh how do you make your income, if you don't mind me asking? 
rms from speeches; not all my speeches, a lot of them i give unpaid, and a lot of them i get paid. 
kh and that's how you make your income? 
rms yes. 
i don't spend a lot of money. 
kh and you wouldn't consider that being paid for something you should share happily? 
it's a donation. 
rms i'd generally try to avoid having any admission charges. 
once in a while i do agree to give a speech at a conference where they're charged people to register but often i will ask them to let the public in to my speech. 
so, in general i try to have it open to the public without charge because i want as many people as possible to come because i'm working for a cause, after all, and i want to do as much good as i can for this cause. 
[33:48] kh do you think that you're winning? 
rms you know, gradually we are. 
but of course we still have a lot of opposition, we still have a lot to fight. 
you know, there's something else in the new zealand copyright law that was adopted a year ago, which is unjust, and it prohibits in some cases the distribution of free software that can break digital handcuffs. 
more and more products are designed with digital handcuffs, that is features to stop the user from doing things. 
so nowadays when i hear about a new product or a new service my first thought is "what's malicious in that? 
how is it designed to restrict what you can do?"
 and these products are very malicious, for instance there is the amazon kindle, it's an e-book reader, and they call it the kindle to express what it's designed to do to our books [1]. 
kh that's not true :-) rms but it does express what it will do with our books. 
the point is this product does surveillance, it forces the user to identify herself to buy a book, and amazon has a list, knows exactly what everybody has bought. 
then it is also designed to restrict the user, to stop people from sharing, from lending books to their friends, from selling them to a used bookstore, and various things that with printed books we can lawfully do. 
even worse, it has a back door, that is amazon can send commands remotely and do things to you, we found out about this a few months ago. 
kh do what to you? 
rms well amazon sent a command to all the kindles, ordering them to erase all copies of a particular book, namely 1984 by george orwell. 
somebody said that they had burned up the year's supply of irony by choosing that book. 
so now we know amazon can remotely erase your books. 
now amazon, after doing this, promised it would never do that again, but our freedom to keep a book for as long as we want, and read it as many times as we want, should not be dependent on any company's goodwill. 
kh where do you get your books from? 
[36:13] rms i buy books from bookstores, yes i go to a store and i say "i want that one."
 kh and you hand money over for it? 
even though you think that that's not particularly a good system? 
rms well i didn't say that's a bad system. 
kh well aren't you handing money over to the corporates rather than the author? 
rms to a large extent yes, but i'm not going to refuse to buy just because of that, with books actually typically some of the authors do get some money. 
with academic textbooks they generally don't. 
kh as a matter of interest we've been talking about freedoms, surveillance and digital monitoring, does the extraordinary rise of social networking… rms i buy cds of music as well even though in that case i know the musicians are not going to get paid, so i'd rather send them some money. 
kh ok. 
and do you? 
rms i wish i could, i don't have a way, so i try to convince people to set up the system to make it easy. 
[37:16] kh i'm sure they're sending us their addresses as you speak. 
very briefly, the rise of social networking, is that a concern in terms of privacy for you? 
rms it is, and i don't use those sites, it's more because i don't have time, i'm busy doing other things. 
i don't think social network sites are necessarily bad but they lead people into foolish activities. 
so i think an ethical social network site should warn people, and every time you connect to it it should warn you, "anything you post here might get known to the public no matter how you set up settings about supposed privacy. 
so if you don't want it published, you shouldn't say it here."
 kh that's a nice warning. 
thank you, it's very nice to talk to you richard stallman. 
[38:08] rms we didn't even mention acta, the secret treaty that new zealand is negotiating to restrict its citizens, and they won't; they tell publishers what's in the text that they're working on, but they won't tell the public. 
so the point is that the; many governments, including of course the us are conspiring in secret to impose new restrictions on us relating to copyright and part of their latest propaganda is they call sharing "counterfeiting."
 but the point is that this treaty will have provisions to restrict the public, we think, but they won't tell us. 
this is called policy laundering, this general practice; instead of democratically considering a law, which means the public gets to know what's being considered, gets to talk to the legislators, sees how they voted and so on, in secret they negotiate a treaty and then they come back and they say "we can't change the treaty and we obviously can't refuse it, so we're all now, we've just arranged for our country to be stuck with this law."
 kh and we may well look at that law in a couple or three weeks time. 
footnote. 
[2019] we call it the swindle because it's designed to swindle readers out of the traditional freedoms of readers of books. 
solutions to the software patent problem. 
speech given at the locatelli center, santa clara university, in november 2012  (video,  metadata) andrew chen: thank you, eric. 
my name is andrew chen. 
i teach patent law at the university of north carolina, and i had a previous life as a computer science professor. 
i have the easiest job today, which is introducing two men who need no introduction. 
richard stallman, we know, is the founder of the free software movement, co-founder of the league for programming freedom, lead software architect for the gnu project and author of emacs, which he's described as a text editor and also a way of life. 
something that i can agree with, having written my doctoral dissertation using his program. 
dr stallman has decided not to participate in the live streaming facility for today. 
he explains that use of the streaming online would require use of the microsoft silverlight plugin, which would pressure people to use proprietary software. 
dr stallman considers it wrong to pressure people to do that. 
he would like you to know that he plans to make a recording of his presentation available at a later time in either the ogg theora or webm formats. 
dr stallman. 
[applause] richard stallman: can the tech people please confirm that the streaming is off? 
ok, i think that's confirmation. 
so, why are software patents bad? 
or, "computational idea patents" as i think we should really call them, because each one is a monopoly on a computational idea. 
most people, when you say "software patents," they think it's a question of patenting a specific program. 
i'm sure all of you know that that's not what those patents do, but most people don't know that, so, to try to avoid misleading people, i call them "computational idea patents."
 so, anyway, the reason these are bad is that they deny people the freedom to use their computers as they wish and do their computing as they wish, freedom that everyone must have. 
these patents put all software developers in danger, and their users as well. 
a danger that there is no reason we should stand for. 
so: we should protect software from patents. 
software needs patent protection: protection from patents. 
but most people don't know enough about what patents do to appreciate why patents that can restrict software are so harmful. 
most people think that patents are like copyrights, which is not true at all. 
the sum total of what they have in common is one sentence in the constitution, and that similarity is so little and abstract it has nothing to do with the practical effects. 
so, the last thing we should ever do is use the term "intellectual property" that confuses not just these two laws, but a bunch of other unrelated, disparate laws, that don't even share one sentence in the constitution with those two. 
so that term spreads confusion whenever it's used and about eight years ago i decided i should never use it and i have never used it since then. 
it's surprisingly easy to avoid, because in general there's no reason whatsoever to use it except that it's chic. 
and once you learn to resist that, it's as easy as pie, just talk about one law, and then you call that law by its name, and you're making a coherent, clear statement. 
so, i have to explain to people what patents do, and show them that it's not at all like what copyrights do. 
an analogy is a good way to do this. 
what can you say about programs? 
well, they're large works, full of details that all have to work together to get the desired result. 
well, what else is there like that? 
a novel, or a symphony. 
so, imagine if the governments of europe in the 1700s had had the cockeyed idea of promoting the progress of symphonic music with a system of "musical idea patents."
 so, any musical idea statable in words could have been patented. 
a melodic motif could have been patented, or a series of chords, or a rhythmic pattern, or a pattern of repetitions in a movement, or the use of certain instruments while the rest of the orchestra is silent and a bunch of other musical ideas that i can't think of, but maybe a composer would. 
so, now imagine it's 1800 and you're beethoven and you want to write a symphony. 
you're going to find that it's harder to write a symphony that you don't get sued for than to write a good symphony. 
now, you'd probably have complained, and the patent holders would have said "oh, beethoven, you're just jealous because we had these ideas before you. 
why don't you go think of some ideas of your own?"
 of course, beethoven is considered a great composer because he had lots of new ideas, and not only that, he knew how to use them effectively. 
and that is: combined with lots of familiar ideas, so that his pieces were merely shocking for a while, but people could get used to them. 
they were not so alien and incomprehensible that they got rejected. 
they shocked people for a while, people got used to them, and now we don't see what's shocking any more, because we're used to those ideas. 
well, that's the proof that he used those ideas well. 
so, the idea that anyone could, or should have to, reinvent music from zero, is absurd. 
not even a beethoven could do that, and it would be silly to ask someone to try. 
it's the same with computing. 
just as a symphony implements many musical ideas together, but the hard part is not picking a bunch of ideas. 
the hard part is implementing them together with notes. 
it's the same with software. 
a large program will implement thousands of ideas together. 
but the hard part is not picking some ideas. 
it's easy to pick some ideas. 
what's hard is to implement them all together and make it work well. 
so "computational idea patents" obstruct the hard and big job by promoting resources that we get plenty of anyways. 
so it's a misconceived system. 
designed to give us help we don't want at the cost of tremendous problems. 
so what we need is to get rid of the problem. 
what is the problem? 
the problem is: software developers and their users are threatened by patents. 
they are in danger. 
how can you prevent that? 
well, one way is: don't issue patents that could affect software. 
that solution works if you apply it from the beginning. 
if a country never issues such patents, then its patent system doesn't attack software. 
ok, it's a good solution. 
but it's not applicable if a country has already issued hundreds of thousands of software patents. 
now, i've proposed that constitutions should explicitly say that patent privileges can be reduced just as they can be increased. 
that they are not in any sense somebody's property; they are privileges given out by the government which can be changed at will. 
after all, if you allow the government by legislation to increase them, it's absurd to make this a one-way ratchet. 
but that's not in the us constitution. 
so, what can we do? 
well, we can ask courts to rule that all those patents that restrict software were invalid from the beginning and always have been invalid, and that gets rid of them all. 
however, that's not something that people can lobby for. 
it's not something we can say to officials, "do this because we want you to."
 so, if we're going to look for a solution that we can get implemented, what is there? 
well, the only way i can see is to legislate that software is a safe harbor. 
if it's software, then you're safe. 
circuits to do the same computation would be covered by a patent, but if it's software, then you're safe. 
but what does that mean? 
what does it mean for something to be software? 
well, it runs on a general purpose, universal machine. 
so first you make a universal machine and then you put in the program to say what it should do. 
well, if the machine's only function is to be universal, then the program is all that implements any specific, patented idea. 
so, that's the case i want to get at, and i'm trying to separate it from a case like that in diamond v. diehr where there was a patent for a system, a method of curing rubber. 
the implementation involved a computer, but it also involved special purpose hardware, not a general purpose universal machine, and that special purpose hardware was crucial to carrying out the patented technique. 
it wasn't actually a software technique. 
and, actually, i read an article by pamela samuelson arguing that the cafc twisted that decision and basically got the quantifiers in the wrong order. 
that the supreme court said, "the fact that there's a computer in there somewhere doesn't automatically make it non-patentable," and the cafc twisted that into "the computer makes it patentable."
 anyway, we might have some hope with the courts, but i'm proposing a method that will separate the cases that we must protect from non-computational idea patents that affect systems that might be implemented with a computer in there somewhere. 
the precise words to use? 
well, the best i could come up with was: "software running on generally used computing hardware."
 we certainly want things like smartphones to be covered; we don't want it to exclude anything that has any kind of special-purpose hardware in there. 
the portable phone obviously has specialised hardware to talk to the phone network, but that shouldn't automatically mean that if it's running on a portable phone, it's vulnerable to patents. 
because that is a general purpose computer and people use it for all sorts of things. 
but my words, "generally used computing hardware," they may not be the best possible words. 
this is a subject that i think calls for study, because we've got to look at each possible wording that might be used and see which cases would be protected from patents and which would be exposed to come up with the right method. 
now, every time i suggest a method to solve this problem, the first thing people try to look for is how to half solve it instead. 
the idea of really solving the problem shocks people because it strikes them as radical. 
they think "i can't advocate something so radical as to really solve this whole problem. 
i've got to look for some partial solution that will only protect some software developers."
 well, that's a mistake. 
it's a mistake a) because it wouldn't do the whole job, but b) because it would be harder to get it passed. 
there are lots of software developers and they are all threatened and if we propose to protect them all, they will all have a reason to support it. 
but if we propose to only protect some of them, the rest will say "well, this doesn't do me any good, why should i care?"
 so, let's propose a real solution. 
and, besides, partial solutions tend to be vulnerable to the problem that boldrin and levine have written about very effectively, that it's easy for the pressures for patents to stretch the boundaries if you give them any kind of boundary that they can stretch. 
and this, by the way, is another advantage of applying a change to suing people, rather than to what's patentable. 
because there, the criteria are just "what kind of situation is this?"
 it's harder to stretch those, and if they tried, it would always be in a case against somebody who's going to be fighting not to stretch it. 
so it's less vulnerable to being distorted from an intended restriction of substance into an actual requirement of form of patent applications, which tends to happen to any kind of requirement about what patent applications have to look like. 
so, there i go. 
[applause] andrew chen: thank you, dr stallman. 
pavia doctoral address: innovation is secondary when freedom is at stake. 
on september 24th, 2007, richard stallman received an honoris causa doctorate in computer engineering from the university of pavia, italy. 
stallman began by criticizing the overvaluing of innovation as a response to previous speakers at the same event. 
here is the speech that he gave at the ceremony, transcribed by alessandro rubini. 
innovation can create riches, and once in a while those riches can lead to general economic prosperity, especially if you don't have neo-liberal economics to impede the result. 
but innovation affects things much more important than riches or even economic prosperity. 
democracy was an innovation, fascism was an innovation. 
today, in italy, we see the innovation of placing criminal charges against fishermen for saving people from drowning in the sea&#8239;[1]. 
innovations can directly affect our freedom, which is more important than anything else. 
innovation can affect social solidarity, for good or for ill. 
so when we consider technical progress in computers or in software, the most important question to ask is: how does this affect our freedom? 
how does this affect our social solidarity? 
technically speaking, it's progress, but is it really progress in social and ethical terms, or is it the opposite? 
during my career in programming, as computers developed from something used by a few specialists and enthusiasts into something that most people use, there has been tremendous technical progress and it was accompanied by ghastly social and ethical regression. 
in fact, nearly everyone who uses computers began using them under a social system that can only be described as dictatorship. 
the developer of the program controls what it does. 
if you use it, the developer controls what you can do, and what you can't do. 
and controls what it does to you. 
so that the software that you think is yours is not there to serve you. 
it is there to control you. 
companies such as microsoft and apple designed their software specifically to restrict you. 
windows vista is primarily an advance in how to restrict the user, which is why we have the badvista.org campaign. 
and when this is over, outside the building i will offer you stickers from that campaign, if you wish to help teach people why they shouldn't downgrade to vista. 
apple designs software specifically to restrict the users. 
it's known as "digital restrictions management," or drm. 
we have helped protests against apple just as we helped protests against microsoft. 
see the site defectivebydesign.org for more information and for how to participate. 
google designs software specifically to restrict the user. 
that's the nature of the google earth client: it is made the way it is specifically to restrict the people who use it. 
obviously, it's not free software, because free software develops under the democratic control of its users. 
with the four freedoms—the freedom to run the program as you wish, to study the source code and change it so the program does what you wish, the freedom to distribute exact copies to others (which is the freedom to help your neighbor), and the freedom to distribute copies of your modified version (which is the freedom to contribute to your community)—with these four freedoms the users, individually and collectively, are in charge. 
and therefore free software cannot be designed to restrict the users. 
to design to restrict the user is only possible when there is a dictator, when someone has power to control what the program will do and what it won't do. 
when the users have the control, when they can control their own computing, then nobody has the kind of power that would enable him to impose malicious features to restrict users or spy on users or attack users. 
if you use macos or windows vista, you are completely at the mercy of that system's developer. 
those developers have the power to forcibly change your software in any way they like, whenever the machine is connected to the network. 
the user no longer has even the chance to say yes or no. 
the system is one big backdoor. 
but with free software, you are in charge of what the computer will do. 
so it will serve you, instead of subjugating you. 
the question of free software is therefore not a technical question, it's an ethical, social and political question. 
it's a question of the human rights that the users of software ought to have. 
proprietary software developers say, "no rights, we are in control, we should be in control, we demand total power over what your computer does; we will implement certain features and let you use them, but meanwhile we may spy on you as you use them and we can take them away at any time."
 but free software developers respect your freedom, and this is the ethical obligation of every software developer: to respect the freedom of the users of that software. 
making proprietary user-subjugating software sometimes is profitable, but it is never ethical, and it should never happen. 
but it will be up to you to make that be true. 
i, alone, can say these things, but i, alone, cannot make them reality. 
we must all work together to establish freedom and democracy for the users of software. 
and this freedom and democracy is now essential to enjoy freedom and democracy in other aspects of life. 
right now, some of the biggest internet service providers in the united states are carrying out political censorship of email. 
a major organization called truthout, whose website you may have seen, truthout.org, is being blocked from sending mail to their subscribers by yahoo and hotmail and webtv. 
and they have done this for more than a week, despite the complaints from many of the users of those companies. 
apparently they think they have gone beyond the point where they have to care what anyone says about them. 
all the forms of freedom that we hold dear are transformed when we carry out the relevant activities through computers. 
we must re-found these freedoms in such a way that we can depend on them while we use digital technology. 
an essential part of this re-foundation is insisting that the software we use be under our control. 
not everyone wants to be a programmer, not everyone will learn personally how to study the source code and change it. 
but in a world where your software is free, you can, if you feel it necessary, hire someone else to change it for you. 
you can persuade your cousin programmer to change it for you if you say it's really important. 
you can join together with other users and pool your funds to hire a programmer. 
and the simple fact that there are millions of programmers who can study and change the software will mean that if the software is malicious, almost certainly somebody else, who has the requisite skills, will find that and correct it, and you will get the corrected version without any special effort of your own. 
so we all benefit, programmers and non-programmers alike, from the freedoms that free software grants to us. 
the freedom to cooperate and the freedom to control our own lives personally. 
they go together because both of them are the opposite of being under the power of the dictatorial software developer that unilaterally make decisions that nobody else can change. 
free software has a special connection with universities—and indeed all schools of all levels—because free software supports education, proprietary software forbids education. 
there is no compatibility between education and proprietary software, not at the ethical level. 
the source code and the methods of free software are part of human knowledge. 
the mission of every school is to disseminate human knowledge. 
proprietary software is not part of human knowledge. 
it's secret, restricted knowledge which schools are not allowed to disseminate. 
schools that recognize this exclude proprietary software from their grounds. 
and this is what every school should do. 
not only to save money, which is an obvious advantage that will appeal immediately to many school administrators, but for ethical reasons as well. 
for instance, why do many proprietary software developers offer discounts, or even gratis copies of their nonfree software to schools and students? 
i'm told that microsoft offered a discount to those who wish to accept the shiny new chains of windows vista to the employees of this university. 
why would they do such a thing? 
is it because they wish to contribute to education? 
obviously not. 
rather, microsoft and other similar companies wish to convert the university into an instrument for imposing the dependency on the user-subjugating software on society as a whole. 
they figured that if they get their software into schools, then students will learn to use it, and become dependent on it. 
they will develop a dependency. 
and thus after they graduate you can be sure that microsoft and these other companies would no longer offer them discounted copies. 
and especially, the companies that these former students go to work for will not be offered discounted copies. 
so, the software developers push on the schools, then push on arresting society and push it deep into a pit. 
this is not something schools should do. 
this is the opposite of the mission of the school, which is to build a strong, capable, independent and free society. 
schools should teach their students to be citizens of a strong, capable, independent and free society. 
and this means teaching them to use free software, not proprietary software. 
so none of the classes in this university should teach proprietary software. 
for those who will be great programmers, there is another reason why their schools must teach and use free software. 
because when they get to the age of 13 or so, they are fascinated with software and they want to learn everything about how their computer and their system are functioning. 
so they will ask the teacher, "how does this work?," and if this is proprietary software, the teacher has to say, "i'm sorry, it's a secret, you can't find out."
 so there is no room for education. 
but if it's free software, the teacher can explain the basic subject and then say, "here is the source code, read this and you'll understand everything."
 and those programmers will read the whole source code because they are fascinated, and this way they will learn something very important: how to write software well. 
they don't need to be taught how to program, because for them programming is obvious, but writing good code is a different story. 
you have to learn that by reading lots of code and writing lots of code. 
only free software provides that opportunity. 
but there is a particular reason, for the sake of education in good citizenship. 
you see, schools must teach not just facts, not just skills, but above all the spirit of good will, the habit of helping your neighbor. 
so every class, at every level, should have this rule: "students, if you bring software to class, you may not keep it for yourself, you must share copies with the rest of the class."
 however, the school has to practice its own rule; it has to set a good example. 
so every school should bring only free software to class, and set an example with its software of the practice of disseminating human knowledge while building a strong, capable, independent and free society. 
and encouraging the spirit of good will, of helping other people. 
every school must migrate to free software, and i call on you, those of you who are faculty, or staff, or students of this university, to work together to bring about the migration of this university to free software, completely to free software, within a few years. 
it can be done in a few years; it requires taking a substantial step each year. 
other universities are doing this or have done it, you can do it too. 
you only have to reject social inertia as a valid reason for going deeper and deeper into the pit. 
for those of you who are interested, after we leave this hall and this ceremony, outside i will have various things from the free software foundation that you might be interested in. 
and you can support the free software foundation by going to fsf.org and become an associate member. 
for more information about the free software movement and the gnu operating system, and for where to find the entirely free distributions of the gnu/linux operating system please look at gnu.org. 
thank you. 
footnote. 
[1] shortly before stallman's award ceremony, some tunisian fishermen who had rescued shipwrecked migrants at sea were arrested in italy on charges of facilitating illegal immigration. 
gpl-compliant version of rtlinux open patent license in works. 
here is our new announcement as of oct 8, 2001 (its actual posting was delayed). 
the free software foundation and finite state machine labs inc. 
(fsmlabs) today announced the release of the open rtlinux patent license version 2 fully compliant with the free software foundation's gnu general public license (gnu gpl). 
the open patent license grants the right to use u.s. 
patent no. 
5,995,745 in gpl-covered free software without payment of a royalty. 
this license protects gpl use of the rtlinux process. 
fsmlabs and fsf expect the release of this license to accelerate the rate of the free software revolution in the fields of embedded and realtime computing. 
these areas have been isolated from the mainstream of progress in software development by proprietary software based on secrets and incompatibilities designed to lock customers into proprietary technology. 
the availability of superior free software has already lead to many innovative projects from large corporations thousands of individuals and small companies all over the world. 
fsf thanks fsmlabs for its continuing contributions to the free software community. 
here is the previous announcement, which was the subject of our 18 september press release. 
the free software foundation and finite state machine labs (fsmlabs) have come to an agreement on a fully gpl-compliant version of fsmlabs rtlinux open patent license. 
fsf and fsmlabs are working to finalize the license language; fsmlabs will be publishing on its website the text of that license, with a statement by fsf confirming its gpl-compliant status, in the very near future. 
fsf has already withdrawn its press statement issued friday september 14 concerning rtlinux license terms. 
our differences turned out to be mostly a result of unfortunate miscommunications and we urge everyone to put this dispute behind them. 
fsf and fsmlabs expect to continue their cooperation to secure availability of fsmlabs patented technology for use in gnu/linux systems. 
the fsf thanks fsmlabs for its contribution of this patent license to the free software community, and for its longstanding support and publication of free software under the gpl. 
saving europe from software patents. 
imagine that each time you made a software design decision, and especially whenever you used an algorithm that you read in a journal or implemented a feature that users ask for, you took a risk of being sued. 
that's how it is today in the us, because of software patents. 
soon it may be the same in most of europe (1). 
the countries that operate the european patent office, spurred by large companies and encouraged by patent lawyers, are moving to allow patents covering mathematical computations. 
to block this move, european citizens must take action, and do it soon—by talking with their national governments to raise opposition to the change. 
action in germany, sweden, finland, the netherlands, and/or denmark is especially important, to join a campaign already under way in france. 
patents have played havoc with free software already. 
during the 1980s, the patent holders for public key encryption entirely suppressed free software for that job. 
they wanted to suppress pgp too, but facing public criticism, they accepted a compromise: adding restrictions to pgp so that it was no longer free software. 
(we began developing the gnu privacy guard after the broadest patent expired.) compuserve developed gif format for images, then was stunned when unisys threatened to sue them and everyone else who developed or ran software to produce gifs. 
unisys had obtained a patent on the lzw data compression algorithm, which is one part of generating gif format, and refuses to permit free software to use lzw (2). 
as a result, any free software in the us that supports making true compressed gifs is at risk of a lawsuit. 
in the us and some other countries, free software for mp3(3) is impossible; in 1998, us developers who had developed free mp3-generation programs were threatened with patent lawsuits, and forced to withdraw them. 
some are now distributed in european countries—but if the european patent office makes this planned change, they may become unavailable there too. 
later in 1998, microsoft menaced the world wide web, by obtaining a patent affecting style sheets—after encouraging the www consortium to incorporate the feature in the standard. 
it's not the first time that a standards group has been lured into a patent's maw. 
public reaction convinced microsoft to back down from enforcing this patent; but we can't count on mercy every time. 
the list could go on and on, if i had time to look through my old mail for examples and space to describe them. 
on the issue of patents, free software developers can make common cause with most proprietary software developers, because in general they too stand to lose from patents. 
so do the many developers of specialized custom software. 
to be sure, not everyone loses from software patents; if that were so, the system would soon be abolished. 
large companies often have many patents, and can force most other companies, large or small, to cross-license with them. 
they escape most of the trouble patents cause, while enjoying a large share of the power patents confer. 
this is why the chief supporters of software patents are multinational corporations. 
they have a great deal of influence with governments. 
occasionally a small company benefits from a patent, if its product is so simple that it escapes infringing the large companies' patents and thus being forced to cross-license with them. 
and patent owners who develop no products, but only squeeze money out of those who do, can laugh all the way to the bank while obstructing progress. 
but most software developers, as well as users, lose from software patents, which do more to obstruct software progress than to encourage it. 
people used to call free software an absurd idea, saying we lacked the ability to develop a large amount of software. 
we have refuted them with empirical fact, by developing a broad range of powerful software that respects users' freedom. 
giving the public the full spectrum of general-purpose software is within our reach—unless giving software to the public is prohibited. 
software patents threaten to do that. 
the time to take action is now. 
please visit ffii.org for more information, plus detailed suggestions for action. 
and please take time to help. 
footnotes. 
the european patent office, used by many european countries, has issued quite a number of patents that affect software, which were presented as something other than software patents. 
the change now being considered would open the door to unlimited patenting of algorithms and software features, which would greatly increase the number of software patents issued. 
unisys issued a cleverly worded statement which is often taken to permit free software for making gifs, but which i believe does not do so. 
i wrote to their legal department to ask for clarification and/or a change in the policy, but received no reply. 
as of 2017 the patents on playing mp3 files have reportedly expired. 
saying no to unjust computing even once is help. 
a misunderstanding is circulating that the gnu project demands you run 100% free software, all the time. 
anything less (90%?), and we will tell you to get lost—they say. 
nothing could be further from the truth. 
our ultimate goal is digital freedom for all, a world without nonfree software. 
some of us, who have made campaigning for digital freedom our goal, reject all nonfree programs. 
however, as a practical matter, even a little step towards that goal is good. 
a walk of a thousand miles consists of lots of steps. 
each time you don't install some nonfree program, or decide not to run it that day, that is a step towards your own freedom. 
each time you decline to run a nonfree program with others, you show them a wise example of long-term thinking. 
that is a step towards freedom for the world. 
if you're caught in a web of nonfree programs, you're surely looking for a chance to pull a few strands off of your body. 
each one pulled off is an advance. 
each time you tell the people in some activity, "i'd rather use zoom less—please count me out today," you help the free software movement. 
"i'd like to do this with you, but with zoom on the other side of the scale, i've decided to decline."
 if you accepted the nonfree software before, you could say this: "i'd like to participate, but the software we are using is not good for us. 
i've decided i should cut down."
 once in a while, you may convince them to use free software instead. 
at least they will learn that some people care about freedom enough to decline participation for freedom's sake. 
if you say no, on one occasion, to conversing with someone or some group via skype, you have helped. 
if you say no, on one occasion, to conversing via whatsapp, facebook, or slack, you have helped. 
if you say no, on one occasion, to editing something via google docs, you have helped. 
if you say no to registering for one meeting in eventbrite.com or meetup.com, you have helped. 
if you tell one organization you won't use its "portal" or app, so you will deal with it by phone, that helps. 
of course, you help more if you stick to your refusal (with kind firmness, of course) and don't let the others change your mind. 
steps add up. 
if on another day you decline the nonfree program again, you will have helped again. 
if you say no a few times a week, that adds up over time. 
when people see you say no, even once, you may inspire them to follow your example. 
to give help consistently, you can make this refusal a firm practice, but refusing occasionally is still help. 
you will help more if you reject several of the nonfree programs that communities have blindly swallowed. 
would you ever want to reject them all? 
there is no need to decide that now. 
so tell someone, "thanks for inviting me, but zoom/skype/whatsapp/whichever is a freedom-denying program, and almost surely snoops on its users; please count me out. 
i want a different kind of world, and by declining to use it today i am taking a step towards that world."
 the fsf recommends freedom-respecting methods for the sorts of communication that unjust systems do. 
if one of them would be usable, you could add, "if we use xyz for this conversation, or some other libre software, i could participate."
 you can take one step. 
and once you've done it, sooner or later you can do it again. 
eventually you may find you have changed your practices; if you get used to saying no to some nonfree program, you could do it most of the time, maybe even every time. 
not only will you have gained an increment of freedom; you will have helped your whole community by spreading awareness of the issue. 
 educational activities, including schools of all levels from kindergarten to university, have a moral duty to teach only free software. 
all computer users ought to insist on free software: it gives users the freedom to control their own computers—with proprietary software, the program does what its owner or developer wants it to do, not what the user wants it to do. 
free software also gives users the freedom to cooperate with each other, to lead an upright life. 
these reasons apply to schools as they do to everyone. 
however, the purpose of this article is to present the additional reasons that apply specifically to education. 
free software can save schools money, but this is a secondary benefit. 
savings are possible because free software gives schools, like other users, the freedom to copy and redistribute the software; the school system can give a copy to every school, and each school can install the program in all its computers, with no obligation to pay for doing so. 
this benefit is useful, but we firmly refuse to give it first place, because it is shallow compared to the important ethical issues at stake. 
moving schools to free software is more than a way to make education a little "better": it is a matter of doing good education instead of bad education. 
so let's consider the deeper issues. 
schools have a social mission: to teach students to be citizens of a strong, capable, independent, cooperating and free society. 
they should promote the use of free software just as they promote conservation and voting. 
by teaching students free software, they can graduate citizens ready to live in a free digital society. 
this will help society as a whole escape from being dominated by megacorporations. 
in contrast, to teach a nonfree program is implanting dependence, which goes counter to the schools' social mission. 
schools should never do this. 
why, after all, do some proprietary software developers offer gratis copies(1) of their nonfree programs to schools? 
because they want to use the schools to implant dependence on their products, like tobacco companies distributing gratis cigarettes to school children(2). 
they will not give gratis copies to these students once they've graduated, nor to the companies that they go to work for. 
once you're dependent, you're expected to pay, and future upgrades may be expensive. 
free software permits students to learn how software works. 
some students, natural-born programmers, on reaching their teens yearn to learn everything there is to know about their computer and its software. 
they are intensely curious to read the source code of the programs that they use every day. 
proprietary software rejects their thirst for knowledge: it says, "the knowledge you want is a secret—learning is forbidden!"
 proprietary software is the enemy of the spirit of education, so it should not be tolerated in a school, except as an object for reverse engineering. 
free software encourages everyone to learn. 
the free software community rejects the "priesthood of technology", which keeps the general public in ignorance of how technology works; we encourage students of any age and situation to read the source code and learn as much as they want to know. 
schools that use free software will enable gifted programming students to advance. 
how do natural-born programmers learn to be good programmers? 
they need to read and understand real programs that people really use. 
you learn to write good, clear code by reading lots of code and writing lots of code. 
only free software permits this. 
how do you learn to write code for large programs? 
you do that by writing lots of changes in existing large programs. 
free software lets you do this; proprietary software forbids this. 
any school can offer its students the chance to master the craft of programming, but only if it is a free software school. 
the deepest reason for using free software in schools is for moral education. 
we expect schools to teach students basic facts and useful skills, but that is only part of their job. 
the most fundamental task of schools is to teach good citizenship, including the habit of helping others. 
in the area of computing, this means teaching people to share software. 
schools, starting from nursery school, should tell their students, "if you bring software to school, you must share it with the other students. 
you must show the source code to the class, in case someone wants to learn. 
therefore bringing nonfree software to class is not permitted, unless it is for reverse-engineering work."
 of course, the school must practice what it preaches: it should bring only free software to class (except objects for reverse-engineering), and share copies including source code with the students so they can copy it, take it home, and redistribute it further. 
teaching the students to use free software, and to participate in the free software community, is a hands-on civics lesson. 
it also teaches students the role model of public service rather than that of tycoons. 
all levels of school should use free software. 
if you have a relationship with a school —if you are a student, a teacher, an employee, an administrator, a donor, or a parent— it's your responsibility to campaign for the school to migrate to free software. 
if a private request doesn't achieve the goal, raise the issue publicly in those communities; that is the way to make more people aware of the issue and find allies for the campaign. 
warning: a school that accepts such an offer may find subsequent upgrades rather expensive. 
rj reynolds tobacco company was fined $15m in 2002 for handing out free samples of cigarettes at events attended by children. 
see http://www.bbc.co.uk/worldservice/sci_tech/features/health/tobaccotrial/usa.htm. 
back to top &#9650; education. 
main page case studies resources big tech threats resistance successful resistance online teaching faq our team in depth why educational institutions should use and teach free software = why schools should exclusively use free software = the education system in india drm in school ebooks: when life imitates dystopian stories miscellaneous materials 
fsf's position regarding sco's attacks on free software. 
much press coverage has been given in the last months to sco's press and legal attacks on free software and the gnu/linux system. 
even though these attacks have narrowed from a focus on the whole gnu/linux system to the kernel named linux specifically, fsf, particularly through our general counsel eben moglen, remains deeply involved in strategic planning for the community's responses to sco. 
professor moglen has been coordinating with ibm's lawyers on the matter, including both their inside and outside counsel. 
he has coordinated with osdl, who employ linus torvalds, the original author and a key copyright holder of the kernel named linux. 
professor moglen continues diplomatic efforts throughout the free software and open source movements, and throughout the technology industry, to bring together a broad, coordinated coalition to oppose sco, both legally and in the media. 
on this site, we will publish documents related to our work opposing sco. 
the sco subpoena of fsf, by bradley m. kuhn, released on tuesday 18 may 2004. 
sco: without fear and without research, by eben moglen, released on monday 24 november 2003. 
sco scuttles sense, claiming gpl invalidity, by eben moglen, released on monday 18 august 2003. 
questioning sco: a hard look at nebulous claims, by eben moglen, released on friday 1 august 2003. 
sco, gnu, and linux, by richard stallman, released on sunday 29 june 2003. 
fsf statement on sco v. ibm, by eben moglen, released on friday 27 june 2003. 
questioning sco: a hard look at nebulous claims. 
href="#moglen">[*] friday 1 august 2003 users of free software around the world are being pressured to pay the sco group, formerly caldera, on the basis that sco has "intellectual property" claims against the linux operating system kernel or other free software that require users to buy a "license" from sco. 
allegations apparently serious have been made in an essentially unserious way: by press release, unaccompanied by evidence that would permit serious judgment of the factual basis for the claims. 
firms that make significant use of free software are trying to evaluate the factual and legal basis for the demand. 
failure to come forward with evidence of any infringement of sco's legal rights is suspicious in itself; sco's public announcement of a decision to pursue users, rather than the authors or distributors of allegedly-infringing free software only increases doubts. 
it is impossible to assess the weight of undisclosed evidence. 
based on the facts currently known, which are the facts sco itself has chosen to disclose, a number of very severe questions arise concerning sco's legal claims. 
as a lawyer with reasonably extensive experience in free software licensing, i see substantial reason to reject sco's assertions. 
what follows isn't legal advice: firms must make their own decisions based upon an assessment of their particular situations through consultation with their own counsel. 
but i would like to suggest some of the questions that clients and lawyers may want to ask themselves in determining their response to sco's licensing demands. 
where's the beef?. 
what does sco actually claim belongs to it that someone else has taken or is misusing? 
though sco talks about "intellectual property," this is a general term that needs specification. 
sco has not alleged in any lawsuit or public statement that it holds patents that are being infringed. 
no trademark claims have been asserted. 
in its currently-pending lawsuit against ibm, sco makes allegations of trade secret misappropriation, but it has not threatened to bring such claims against users of the linux os kernel, nor can it. 
it is undisputed that sco has long distributed the linux os kernel itself, under the free software foundation's gnu general public license (gpl).[1] to claim that one has a trade secret in any material which one is oneself fully publishing under a license that permits unlimited copying and redistribution fails two basic requirements of any trade secret claim: (1) that there is a secret; and (2) that the plaintiff has taken reasonable measures to maintain secrecy. 
so sco's claims against users of the linux kernel cannot rest on patent, trademark, or trade secret. 
they can only be copyright claims. 
indeed, sco has recently asserted, in its first specific public statement, that certain versions of the linux os kernel, the 2.4 "stable" and 2.5 "development" branches, have since 2001 contained code copied from sco's sys v unix in violation of copyright.[2] the usual course in copyright infringement disputes is to show the distributor or distributors of the supposedly-infringing work the copyrighted work upon which it infringes. 
sco has not done so. 
it has offered to show third parties, who have no interest in linux kernel copyrights, certain material under non-disclosure agreements. 
sco's press release of july 21 asserts that the code in recent versions of the linux kernel for symmetric multi-processing violates their copyrights. 
contributions of code to the linux kernel are matters of public record: smp support in the kernel is predominantly the work of frequent contributors to the kernel employed by red hat, inc. 
and intel corp. 
yet sco has not shown any of its code said to have been copied by those programmers, nor has it brought claims of infringement against their employers. 
instead, sco has demanded that users take licenses. 
which lead to the next question. 
why do users need licenses?. 
in general, users of copyrighted works do not need licenses. 
the copyright act conveys to copyright holders certain exclusive rights in their works. 
so far as software is concerned, the rights exclusively granted to the holder are to copy, to modify or make derivative works, and to distribute. 
parties who wish to do any of the things that copyright holders are exclusively entitled to do need permission; if they don't have permission, they're infringing. 
but the copyright act doesn't grant the copyright holder the exclusive right to use the work; that would vitiate the basic idea of copyright. 
one doesn't need a copyright license to read the newspaper, or to listen to recorded music; therefore you can read the newspaper over someone's shoulder or listen to music wafting on the summer breeze even though you haven't paid the copyright holder. 
software users are sometimes confused by the prevailing tendency to present software products with contracts under shrinkwrap; in order to use the software one has to accept a contract from the manufacturer. 
but that's not because copyright law requires such a license. 
this is why lawsuits of the form that sco appears to be threatening—against users of copyrighted works for infringement damages—do not actually happen. 
imagine the literary equivalent of sco's current bluster: publishing house a alleges that the bestselling novel by author x topping the charts from publisher b plagiarizes its own more obscure novel by author y. "but," the chairman of publisher a announces at a news conference, "we're not suing author x or publisher b; we're only suing all the people who bought x's book. 
they have to pay us for a license to read the book immediately, or we'll come after them."
 that doesn't happen, because that's not the law. 
but don't users of free software make copies, and need a license for that activity? 
the copyright act contains a special limitation on the exclusive right to copy with respect to software. 
it does not infringe the copyright holder's exclusive right to copy software for the purpose of executing that software on one machine, or for purposes of maintenance or archiving. 
such copying also requires no license. 
but what if a firm has gotten a single copy of the linux kernel from some source, and has made many hundreds or thousands of copies for installation on multiple machines? 
would it need a license for that purpose? 
yes, and it already has one. 
do users already have a license?. 
the linux kernel is a computer program that combines copyrighted contributions from tens of thousands of individual programmers and firms. 
it is published and distributed under the gpl, which gives everyone everywhere permission to copy, modify and distribute the code, so long as all distribution of modified and unmodified copies occurs under the gpl and only the gpl. 
the gpl requires that everyone receiving executable binaries of gpl'd programs must get the full source code, or an offer for the full source code, and a copy of the license. 
the gpl specifies that everyone receiving a copy of a gpl'd program receives a license, on gpl terms, from every copyright holder whose work is included in any combined or derived work released under the license. 
sco, it bears repeating, has long distributed the linux kernel under gpl, and continues to do so as of this writing. 
it has directly given users copies of the work and copies of the license. 
sco cannot argue that people who received a copyrighted work from sco, with a license allowing them to copy, modify and redistribute, are not permitted to copy, modify and distribute. 
those who have received the work under one license from sco are not required, under any theory, to take another license simply because sco wishes the license it has already been using had different terms. 
in response to this simple fact, some sco officials have recently argued that there is somehow a difference between their "distribution" of the linux kernel and "contribution" of their copyrighted code to the kernel, if there is any such code in the work. 
for this purpose they have quoted section 0 of the gpl, which provides that "this license applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this general public license."
 the linux kernel contains such notices in each and every appropriate place in the code; no one has ever denied that the combined work is released under gpl. 
sco, as caldera, has indeed contributed to the linux kernel, and its contributions are included in modules containing gpl notices. 
section 0 of the gpl does not provide sco some exception to the general rule of the license; it has distributed the linux kernel under gpl, and it has granted to all the right to copy, modify and distribute the copyrighted material the kernel contains, to the extent that sco holds such copyrights. 
sco cannot argue that its distribution is inadvertent: it has intentionally and commercially distributed linux for years. 
it has benefited in its business from the copyrighted originality of tens of thousands of other programmers, and it is now choosing to abuse the trust of the community of which it long formed a part by claiming that its own license doesn't mean what it says. 
when a copyright holder says "you have one license from me, but i deny that license applies; take another license at a higher price and i'll leave you alone," what reason is there to expect any better faith in the observance of the second license than there was as to the first? 
conclusion. 
users asked to take a license from sco on the basis of alleged copyright infringement by the distributors of the linux kernel have a right to ask some tough questions. 
first, what's the evidence of infringement? 
what has been copied from sco copyrighted work? 
second, why do i need a copyright license to use the work, regardless of who holds copyright to each part of it? 
third, didn't you distribute this work yourself, under a license that allows everyone, including me, to copy, modify and distribute freely? 
when i downloaded a copy of the work from your ftp site, and you gave me the source code and a copy of the gpl, do you mean that you weren't licensing me all of that source code under gpl, to the extent that it was yours to license? 
asking those questions will help firms decide how to evaluate sco's demands. 
i hope we shall soon hear some answers. 
footnotes. 
linux kernel source under gpl was available from sco's ftp site as of july 21, 2003. 
see sco press release, july 21, 2003. 
[*] eben moglen is professor of law at columbia university law school. 
he serves without fee as general counsel of the free software foundation. 
fsf's position regarding sco's attacks on free software. 
much press coverage has been given in the last months to sco's press and legal attacks on free software and the gnu/linux system. 
even though these attacks have narrowed from a focus on the whole gnu/linux system to the kernel named linux specifically, fsf, particularly through our general counsel eben moglen, remains deeply involved in strategic planning for the community's responses to sco. 
professor moglen has been coordinating with ibm's lawyers on the matter, including both their inside and outside counsel. 
he has coordinated with osdl, who employ linus torvalds, the original author and a key copyright holder of the kernel named linux. 
professor moglen continues diplomatic efforts throughout the free software and open source movements, and throughout the technology industry, to bring together a broad, coordinated coalition to oppose sco, both legally and in the media. 
on this site, we will publish documents related to our work opposing sco. 
the sco subpoena of fsf, by bradley m. kuhn, released on tuesday 18 may 2004. 
sco: without fear and without research, by eben moglen, released on monday 24 november 2003. 
sco scuttles sense, claiming gpl invalidity, by eben moglen, released on monday 18 august 2003. 
questioning sco: a hard look at nebulous claims, by eben moglen, released on friday 1 august 2003. 
sco, gnu, and linux, by richard stallman, released on sunday 29 june 2003. 
fsf statement on sco v. ibm, by eben moglen, released on friday 27 june 2003. 
sco, gnu and linux. 
by richard stallman sco's contract dispute with ibm has been accompanied by a smear campaign against the whole gnu/linux system. 
but sco made an obvious mistake when it erroneously quoted me as saying that "linux is a copy of unix."
 many readers immediately smelled a rat—not only because i did not say that, and not only because the person who said it was talking about published ideas (which are uncopyrightable) rather than code, but because they know i would never compare linux with unix. 
unix is a complete operating system, but linux is just part of one. 
sco is using the popular confusion between linux and the gnu/linux system to magnify the fear that it can spread. 
gnu/linux is the gnu operating system running with linux as the kernel. 
the kernel is the part of the system that allocates the machine's resources to the other programs you run. 
that part is linux. 
we developed gnu starting in 1984 as a campaign for freedom, whose aim was to eliminate nonfree software from our lives. 
gnu is free software, meaning that users are free to run it, study it and change it (or pay programmers to do this for them), redistribute it (gratis or for a fee), and publish modified versions. 
(see an overview of the gnu project.) in 1991, gnu was mostly finished, lacking only a kernel. 
in 1992, linus torvalds made his kernel, linux, free software. 
others combined gnu and linux to produce the first complete free operating system, gnu/linux. 
(see our gnu/linux faq.) gnu/linux is also free software, and sco made use of this freedom by selling their version of it. 
today, gnu runs with various kernels including linux, the gnu hurd (our kernel), and the netbsd kernel. 
it is basically the same system whichever kernel you use. 
those who combined linux with gnu didn't recognize that's what they were doing, and they spoke of the combination as "linux."
 the confusion spread; many users and journalists call the whole system "linux."
 since they also properly call the kernel "linux," the result is even more confusion: when a statement says "linux," you can only guess what software it refers to. 
sco's irresponsible statements are shot through with ambiguous references to "linux."
 it is impossible to attribute any coherent meaning to them overall, but they appear to accuse the entire gnu/linux system of being copied from unix. 
the name gnu stands for "gnu's not unix."
 the whole point of developing the gnu system is that it is not unix. 
unix is and always was nonfree software, meaning that it denies its users the freedom to cooperate and to control their computers. 
to use computers in freedom as a community, we needed a free software operating system. 
we did not have the money to buy and liberate an existing system, but we did have the skill to write a new one. 
writing gnu was a monumental job. 
we did it for our freedom, and your freedom. 
to copy unix source code would not be ethically wrong [1], but it is illegal; our work would fail to give users lawful freedom to cooperate if it were not done lawfully. 
to make sure we would not copy unix source code or write anything similar, we told gnu contributors not even to look at unix source code while developing code for gnu. 
we also suggested design approaches that differ from typical unix design approaches, to ensure our code would not resemble unix code. 
we did our best to avoid ever copying unix code, despite our basic premise that to prohibit copying of software is morally wrong. 
another sco tool of obfuscation is the term "intellectual property."
 this fashionable but foolish term carries an evident bias: that the right way to treat works, ideas, and names is as a kind of property. 
less evident is the harm it does by inciting simplistic thinking: it lumps together diverse laws—copyright law, patent law, trademark law and others—which really have little in common. 
this leads people to suppose those laws are one single issue, the "intellectual property issue," and think about "it"—which means, to think at such a broad abstract level that the specific social issues raised by these various laws are not even visible. 
any opinion "about intellectual property" is thus bound to be foolish. 
(see our list of words to avoid for more explanation of the confusion caused by this term.) in the hands of a propagandist for increased copyright or patent powers, the term is a way to prevent clear thinking. 
in the hands of someone making threats, the term is a tool for obfuscation: "we claim we can sue you over something, but we won't say what it is."
 in an actual lawsuit, such ambiguity would make their case fail, or even prevent it from getting off the ground. 
if, however, sco's aim is to shake the tree and see if any money falls down, or simply to spread fear, they may regard vagueness and mystery as advantageous. 
i cannot prognosticate about the sco vs ibm lawsuit itself: i don't know what was in their contract, i don't know what ibm did, and i am not a lawyer. 
the free software foundation's lawyer, professor moglen, believes that sco gave permission for the community's use of the code that they distributed under the gnu gpl and other free software licenses in their version of gnu/linux. 
however, i can address the broader issue of such situations. 
in a community of over half a million developers, we can hardly expect that there will never be plagiarism. 
but it is no disaster; we discard that material and move on. 
if there is material in linux that was contributed without legal authorization, the linux developers will learn what it is and replace it. 
sco cannot use its copyrights, or its contracts with specific parties, to suppress the lawful contributions of thousands of others. 
linux itself is no longer essential: the gnu system became popular in conjunction with linux, but today it also runs with two bsd kernels and the gnu kernel. 
our community cannot be defeated by this. 
footnote. 
since this statement directly contradicts the establishment views of the proprietary software developers, some readers suppose that the word "not" was inserted by mistake. 
it is entirely intentional. 
it is not wrong to copy software. 
it is wrong to stop others from copying software. 
thus, software should be free. 
this article was first published on zdnet. 
sco scuttles sense, claiming gpl invalidity. 
moglen&#8239;[*] monday 18 august 2003 now that the tide has turned, and sco is facing the dissolution of its legal position, claiming to "enforce its intellectual property rights" while actually massively infringing the rights of others, the company and its lawyers have jettisoned even the appearance of legal responsibility. 
last week's wall street journal carried statements by mark heise, outside counsel for sco, challenging the "legality" of the free software foundation's gnu general public license (gpl). 
the gpl both protects against the baseless claims made by sco for license fees to be paid by users of free software, and also prohibits sco from its ongoing distribution of the linux kernel, a distribution which infringes the copyrights of thousands of contributors to the kernel throughout the world. 
as ibm's recently-filed counterclaim for copyright infringement and violation of the gpl shows, the gpl is the bulwark of the community's legal defense against sco's misbehavior. 
so naturally, one would expect sco to bring forward the best possible arguments against the gpl and its application to the current situation. 
but there aren't any best arguments; there aren't even any good arguments, and what sco's lawyer actually said was arrant, unprofessional nonsense. 
according to the journal, mr heise announced that sco would challenge the gpl's "legality" on the ground that the gpl permits licensees to make unlimited copies of programs it covers, while copyright law only allows a single copy to be made. 
the gpl, the journal quoted mr heise as saying, "is preempted by federal copyright law."
 this argument is frivolous, by which i mean that it would be a violation of professional obligation for mr heise or any other lawyer to submit it to a court. 
if it were true, no copyright license could permit the licensee to make multiple copies of the licensed program. 
that would make not just the gpl "illegal."
 mr heise's supposed theory would also invalidate the bsd, apache, afl, osl, mit/x11, and all other free software licenses. 
it would invalidate the microsoft shared source license. 
it would also eliminate microsoft's method for the distribution of the windows operating system, which is pre-loaded by hard drive manufacturers onto disk drives they deliver by the hundreds of thousands to pc manufacturers. 
the licenses under which the disk drive and pc manufacturers make multiple copies of microsoft's os would also, according to mr heise, violate the law. 
redmond will be surprised. 
of course, mr heise's statement is nothing but moonshine, based on an intentional misreading of the copyright act that would fail on any law school copyright examination. 
mr heise is referring to section 117 of the us copyright act, which is entitled "limitation on exclusive rights: computer programs," and which provides that: (a) notwithstanding the provisions of section 106, it is not an infringement for the owner of a copy of a computer program to make or authorize the making of another copy or adaptation of that computer program provided: (1) that such a new copy or adaptation is created as an essential step in the utilization of the computer program in conjunction with a machine and that it is used in no other manner, or (2) that such new copy or adaptation is for archival purposes only and that all archival copies are destroyed in the event that continued possession of the computer program should cease to be rightful. 
as the language makes absolutely clear, section 117 says that although the act generally prohibits making any copy of a copyrighted work without license, in the case of computer programs one can both make and even alter the work for certain purposes without any license at all. 
the claim that this provision sets a limit on what copyright owners may permit through licensing their exclusive right is utterly bogus. 
it has no support in statutory language, legislative history, case law, or the constitutional policy that lies behind the copyright system. 
were this argument actually presented to a court it would certainly fail. 
the release of this astounding statement is actually good news for developers and users of free software. 
it shows that sco has no defense whatever against the gpl; already it has resorted to nonsense to give investors the impression that it can evade the inevitable day of reckoning. 
far from marking the beginning of a significant threat to the vitality of the gpl, the day sco scuttled sense altogether confirmed the strength of the gpl, and its importance in protecting freedom. 
[*] eben moglen is professor of law at columbia university law school. 
he serves without fee as general counsel of the free software foundation. 
fsf statement on sco v. ibm. 
moglen&#8239;[*] june 25, 2003 the lawsuit brought by the sco group against ibm has generated many requests for comment by fsf. 
the foundation has refrained from making official comments on the litigation because only the plaintiff's allegations have been reported; comment on unverified allegations would ordinarily be premature. 
more disturbing than the lawsuit itself, however, have been public statements by representatives of sco, which have irresponsibly suggested doubts about the legitimacy of free software overall. 
these statements require response. 
sco's lawsuit asserts that ibm has breached contractual obligations between the two companies, and also that ibm has incorporated trade secret information concerning the design of the unix operating system into what sco calls generally "linux."
 this latter claim has recently been expanded in extra-judicial statements by sco employees and officers to include suggestions that "linux" includes material copied from unix in violation of sco's copyrights. 
an allegation to this effect was contained in letters apparently sent by sco to 1500 of the world's largest companies warning against use of free software on grounds of possible infringement liability. 
it is crucial to clarify certain confusions that sco's spokesmen have shown no disposition to dispel. 
in the first place, sco has used "linux" to mean "all free software," or "all free software constituting a unix-like operating system."
 this confusion, which the free software foundation warned against in the past, is here shown to have the misleading consequences the foundation has often predicted. 
"linux" is the name of the kernel most often used in free software systems. 
but the operating system as a whole contains many other components, some of them products of the foundation's gnu project, others written elsewhere and published under free software licenses; the totality is gnu, the free operating system on which we have been working since 1984. 
approximately half gnu's components are copyrighted works of the free software foundation, including the c-compiler gcc, the gdb debugger, the c library glibc, the bash shell, among other essential parts. 
the combination of gnu and the linux kernel produces the gnu/linux system, which is widely used on a variety of hardware and which taken as a whole duplicates the functions once only performed by the unix operating system. 
sco's confusing use of names makes the basis of its claims unclear: has sco alleged that trade secrets of unix's originator, at&t—of which sco is by intermediate transactions the successor in interest—have been incorporated by ibm in the kernel, linux, or in parts of gnu? 
if the former, there is no justification for the broad statements urging the fortune 1500 to be cautious about using free software, or gnu programs generally. 
if, on the other hand, sco claims that gnu contains any unix trade secret or copyrighted material, the claim is almost surely false. 
contributors to the gnu project promise to follow the free software foundation's rules for the project, which specify—among other things—that contributors must not enter into non-disclosure agreements for technical information relevant to their work on gnu programs, and that they must not consult or make any use of source code from nonfree programs, including specifically unix. 
the foundation has no basis to believe that gnu contains any material about which sco or anyone else could assert valid trade secret or copyright claims. 
contributors could have made misrepresentations of fact in their copyright assignment statements, but failing willful misrepresentation by a contributor, which has never happened so far as the foundation is aware, there is no significant likelihood that our supervision of the freedom of our free software has failed. 
the foundation notes that despite the alarmist statements sco's employees have made, the foundation has not been sued, nor has sco, despite our requests, identified any work whose copyright the foundation holds—including all of ibm's modifications to the kernel for use with ibm's s/390 mainframe computers, assigned to the foundation by ibm—that sco asserts infringes its rights in any way. 
moreover, there are straightforward legal reasons why sco's assertions concerning claims against the kernel or other free software are likely to fail. 
as to its trade secret claims, which are the only claims actually made in the lawsuit against ibm, there remains the simple fact that sco has for years distributed copies of the kernel, linux, as part of gnu/linux free software systems. 
those systems were distributed by sco in full compliance with gpl, and therefore included complete source code. 
so sco itself has continuously published, as part of its regular business, the material which it claims includes its trade secrets. 
there is simply no legal basis on which sco can claim trade secret liability in others for material it widely and commercially published itself under a license that specifically permitted unrestricted copying and distribution. 
the same fact stands as an irrevocable barrier to sco's claim that "linux" violates sco's copyright on unix source code. 
copyright, as the united states supreme court has repeatedly emphasized, covers expressions, not ideas. 
copyright on source code covers not how a program works, but only the specific language in which the functionality is expressed. 
a program written from scratch to express the function of an existing program in a new way does not infringe the original program's copyright. 
gnu and linux duplicate some aspects of unix functionality, but are independent bodies, not copies of existing expressions. 
but even if sco could show that some portions of its unix source code were copied into the kernel, the claim of copyright infringement would fail, because sco has itself distributed the kernel under gpl. 
by doing so, sco licensed everyone everywhere to copy, modify, and redistribute that code. 
sco cannot now turn around and argue that it sold people code under gpl, guaranteeing their right to copy, modify and redistribute anything included, but that it somehow did not license the copying and redistribution of any copyrighted material of their own which that code contained. 
in the face of these facts, sco's public statements are at best misleading and irresponsible. 
sco has profited handily from the work of free software contributors throughout the world. 
its current public statement constitute a gross abuse of the principles of the free software community, by a participant who has employed all our work for its own economic benefit. 
the free software foundation calls upon sco to retract its ill-advised and irresponsible statements, and to proceed immediately to separate its commercial disagreements with ibm from its obligations and responsibilities to the free software community. 
[*] eben moglen is general counsel to fsf, and serves on its board of directors. 
sco: without fear and without research. 
moglen&#8239;[*] monday 24 november 2003 there's a traditional definition of a shyster: a lawyer who, when the law is against him, pounds on the facts; when the facts are against him, pounds on the law; and when both the facts and the law are against him, pounds on the table. 
the sco group's continuing attempts to increase its market value at the expense of free software developers, distributors and users through outlandish legal theories and unsubstantiated factual claims show that the old saying hasn't lost its relevance. 
just the facts. 
sco continues to claim in public statements about its lawsuit against ibm that it can show infringement of its copyrights in unix sys v source code by the free software operating system kernel called linux. 
but on the one occasion when sco has publicly shown what it claimed were examples of code from linux taken from unix sys v, its demonstration backfired, showing instead sco's cavalier attitude toward copyright law and its even greater sloppiness at factual research. 
on august 18, 2003, sco's ceo, darl mcbride, offered a slide presentation of supposed examples of infringing literal copying from sys v to linux at a public speech in las vegas. 
within hours the free software and open source communities had analyzed sco's supposed best evidence, and the results were not encouraging for those investors and others who hope sco knows what it is talking about.[1] in las vegas mr. 
mcbride offered two examples of code from the linux program that were supposedly copied from sys v. the first implements the "berkeley packet filter" (bpf) firewall. 
indeed, the linux kernel program contains a bpf implementation, but it is the original work of linux developer jay schulist. 
nor did sco ever hold an ownership interest in the original bpf implementation, which as the very name shows was originally part of bsd unix, and which was copied, perfectly legally, into sco's sys v unix from bsd. 
because the bpf implementations in sys v and linux have a common intellectual ancestor and perform the same function, sco's "pattern-matching" search of the two code bases turned up an apparent example of copying. 
but sco didn't do enough research to realize that the work they were claiming was infringed wasn't their own (probably because they had "carelessly" removed the original copyright notice). 
mr. 
mcbride's second example was only slightly less unconvincing. 
mr mcbride showed several dozen lines of memory allocation code from "linux," which was identical to code from sys v. once again, however, it turned out that sco had relied on "pattern-matching" in the source code without ascertaining the actual history and copyright status of the work as to which it claimed ownership and infringement. 
the c code shown in the slides was first incorporated in unix version 3, and was written in 1973; it descends from an earlier version published by donald knuth in his classic the art of computer programming in 1968. 
at&t claimed this code, among other portions of its unix os, as infringed by the university of california in the bsd litigation, and was denied a preliminary injunction on the ground that it could not show a likelihood of success on its copyright claim, because it had published the code without copyright notices and therefore, under pre-1976 us copyright law, had put the code in the public domain. 
in 2002, sco's predecessor caldera released this code again under a license that permitted free copying and redistribution. 
silicon graphics, inc. 
(sgi) then used the code in the variant of the linux program for "trillium" 64-bit architecture computers it was planning to sell but never shipped. 
in incorporating the code, sgi violated the terms of caldera's license by erroneously removing caldera's (incorrect) copyright notice. 
thus sco's second example was of supposedly impermissible copying of code that was in the public domain to begin with, and which sco itself had released under a free software license after erroneously claiming copyright. 
sgi had complicated matters by improperly removing the inaccurate copyright notice. 
so how many pcs and intel-architecture servers around the world contained this supposedly infringing code? 
zero. 
no version of the linux program for intel architectures had ever contained it. 
no sgi hardware for which this code was written ever shipped. 
hp, which sells 64-bit itanium servers, has removed the code from the ia-64 branch of the linux code tree; it was technically redundant anyway. 
but sco's research went no farther than discovering a supposed instance of "copying," without asking whether sco had any rights in what had been copied, and certainly without providing the audience to whom it was speaking any indication that the "linux" it was talking about was a variant for rare computers from which the supposedly-offending code had already been removed. 
what the las vegas "examples" actually demonstrated was that sco's factual claims were irresponsibly inflated when they weren't being kept artfully "secret."
 with the facts running against them even when the facts were of their own choosing, it was unsurprising that after august sco turned to the law. 
but the law was not on their side either. 
making up the law. 
sco's legal situation contains an inherent contradiction. 
sco claims, in the letters it has sent to large corporate users of free software and in public statements demanding that that users of recent versions of the kernel take licenses, that the linux program contains material over which sco holds copyright. 
it also has brought trade secret claims against ibm, alleging that ibm contributed material covered by non-disclosure licenses or agreements to the linux kernel. 
but it has distributed and continues to distribute linux under gpl. 
it has therefore published its supposed trade secrets and copyrighted material, under a license that gives everyone permission to copy, modify, and redistribute. 
if the gpl means what it says, sco loses its trade secret lawsuit against ibm, and cannot carry out its threats against users of the linux kernel. 
but if the gpl is not a valid and effective copyright permission, by what right is sco distributing the copyrighted works of linux's contributors, and the authors of all the other copyrighted software it currently purports to distribute under gpl? 
ibm's counterclaim against sco raises that question with respect to ibm's contributions to the linux kernel. 
under gpl section 6, no redistributor of gpl'd code can add any terms to the license; sco has demanded that parties using the linux kernel buy an additional license from it, and conform to additional terms. 
under gpl section 4, anyone who violates gpl automatically loses the right to distribute the work as to which it is violating. 
ibm therefore rightly claims that sco has no permission to distribute the kernel, and is infringing not only its copyrights, but those of all kernel contributors. 
unless sco can show that the gpl is a valid form of permission, and that it has never violated that permission's terms, it loses the counterclaim, and should be answerable in damages not only to ibm but to all kernel contributors. 
ibm's counterclaim painted sco into a corner on the subject of the gpl. 
not only the facts but also the law are now fundamentally against sco's increasingly desperate position. 
sco and its predecessor, caldera, have benefited enormously from the protections of the gpl. 
thanks to the gpl, sco has been able, for example, to use the invaluable work of compiler designers and implementers around the world who have made gcc the premier cross-platform c compiler. 
customer applications run on sco's sys v unix because of gcc, to which sco contributed modifications particular to its system, and for which it assigned copyright to the free software foundation. 
caldera and sco could not have marketed a usable operating system product without the contributions of the free software community. 
sco was happy to take the benefits, but it has unethically sought to avoid its responsibilities. 
the law does not permit sco to have it both ways. 
so now it has become time for sco and its lawyers to pound the table. 
sco's response to ibm's counterclaim has been a round of absurd attacks on the gpl, its users, and its publisher, the free software foundation. 
the gpl, sco's answer to ibm's counterclaim alleges, violates not just federal statutes but also the united states constitution. 
how a private copyright holder can violate the us constitution by giving others permission to copy, modify and redistribute its work sco does not deign to say. 
legal theories aren't secrets; if sco's lawyers had anything to offer in support of this novel proposition, they would offer it. 
not one case decided in the long history of us copyright affords support to this ridiculous conception of an unconstitutional copyright license. 
no lawyer of my reasonably broad acquaintance, no matter what his or her view of the gpl may be, takes this moonshine seriously. 
after failing on the facts, failing on the law, and raising no more than derisive laughter from pounding the table, even the proverbial shyster is out of luck. 
what will we see next from sco, an attack on the umpire? 
footnote. 
the most complete review of the sco las vegas presentation was written by bruce perens, and is archived. 
[*] eben moglen is general counsel to fsf, and serves on its board of directors. 
the sco subpoena of fsf. 
tuesday 18 may 2004 late last year, we were subpoenaed by sco as part of the ongoing dispute between sco and ibm. 
today, we made that subpoena available on our website. 
this is a broad subpoena that effectively asks for every single document about the gpl and enforcement of the gpl since 1999. 
they also demand every document and email that we have exchanged with linus torvalds, ibm, and other players in the community. 
in many cases, they are asking for information that is confidential communication between us and our lawyers, or between us and our contributors. 
as the sco lawsuit drags on, we will have to make some tough decisions about how to answer this subpoena. 
we are certain that we will not produce all the material requested; we will not betray our legally protected confidences, particularly when they relate to our work upholding the integrity of the gpl. 
however, regardless of whether we dispute the whole subpoena in court, or provide those documents which we are able to determine are reasonable and relevant to produce, there is much work for fsf. 
if we fight the subpoena, it means substantial legal fees associated with litigation. 
if we produce materials, it means substantial effort to gather the relevant documents. 
even though we'll be reimbursed for the direct costs, the indirect costs in staff time will be ours to bear. 
meanwhile, the leaked sco documents have confirmed what we long believed: microsoft, having found that the smear campaign against gpl was not succeeding, has instead bought their fud at a bargain price from a third party. 
the "license" that microsoft bought for sco's "technology" was, more than anything else, a fee for the service of attacking the free software movement and its lowest-level program, the kernel named linux. 
now that there has once been a "sco," there will always be some "sco" to come and attack our movement and our work. 
even though we believe that sco has no basis to make the claims they make, that does not mean our community should assume it has nothing to learn from these events. 
early in the lawsuit, we at fsf were unsure if sco would attack only the kernel linux, or the entire gnu/linux operating system. 
as copyright holder on most major components of the gnu/linux system, we of course feared that even while our copyright assignment process is the best and most diligent in the whole free software world, we would still be required to expend great effort in showing a judge how exactly we did this job. 
we are grateful for sco's tactical error of attacking one of the deepest pockets on earth, ibm, who has the checkbook needed to efficiently fight such a nuisance lawsuit. 
however, this does not mean fsf's work is done. 
in addition to answering and/or disputing the subpoena, we must also educate the community about why it is that linux was attacked and gnu was not. 
for more than a decade, fsf has urged projects to build a process whereby the legal assembly of the software is as sound as the software development itself. 
many free software developers saw the copyright assignment process used for most gnu components as a nuisance, but we arduously designed and redesigned the process to remove the onerousness. 
now the sco fiasco has shown the community the resilience and complete certainty that a good legal assembly process can create. 
(sco, after all, eventually dropped their claims against gnu as a whole and focused on the linux project which, for all its wonderful technical achievements, has a rather loose legal assembly process.) we have just begun a project here at fsf to document and codify our process, so that it can be disseminated in the form of a policy manual and accompanying software, to all other free software projects who wish to solidify their legal assembly process. 
distilling nearly two decades of organizational know-how into easy-to-understand software and documentation is no easy task, and we will rely greatly on your financial support to aid us in carrying out this momentous task. 
as always, we at fsf look to the long-term future. 
sco is a blip—a precursor to the challenges free software will face. 
we strive to be ahead of that curve and lead the way for a legally certain future for free software. 
we need your support to continue this work. 
we ask that if you are not yet an associate member of fsf, that you join now. 
if you join before 15 june 2004, you will receive a complimentary print copy of lawrence lessig's new book, free culture. 
we are happy to celebrate the addition of professor lessig to our board of directors by sharing his latest written work with you as we continue our work. 
if you are already an associate member, please encourage a friend to join! 
free software and (e-)government. 
stallman the uk government has funded the development of software useful for e-government, and now doesn't know what to do with it. 
someone had the bright idea to hand it over to local councils, inviting them to turn themselves into software companies. 
the public have already paid to develop this software. 
isn't it absurd to make them pay, now, for permission to use it? 
isn't it absurd to restrict what they can do with it? 
alas, such absurdity is not unusual; it is standard practice for governments to deliver publicly funded software into private hands, to companies that make the public—and even the government—beg for permission to use it afterwards. 
even worse, they impose frustrating restrictions on the users, denying them access to the software's source code, the plans that a programmer can read and understand and change. 
all the users get is an executable, a "black box," so that they cannot adapt it, understand it or even verify what it does. 
there is a sensible motive for this senseless policy. 
the motive is to make sure that someone cares for the software, fixing the problems that inevitably appear and adapting it to new needs. 
people used to believe that having some company control all use of the software, and keep all users under its thumb, was the only way to do this. 
today, we know another way: free software (also known as open source or foss). 
free software means the users are free to use this software, redistribute it, study it, or even extend it to do more jobs. 
the word "free" refers to freedom, not price; think "free speech," not "free beer."
 when there are users that value support and are willing to pay for it, free software means a free market for support, instead of a monopoly. 
free software also offers government agencies a way to fulfil their responsibility to maintain sovereign control over the state's computers, and not let that control fall into private hands. 
since 1984, groups of volunteers have developed and maintained powerful and useful free programs—a few at first, then entire operating systems such as gnu/linux and bsd. 
today, the free software directory lists almost 4,000 free software packages. 
the uk government has already decided to increase its use of free software; here is a perfect opportunity to both use it and contribute. 
the office of the deputy prime minister should make the e-government programs free software, set up a site to host their development, and hire a handful of people to oversee the work. 
then governments around the world will begin to use this software, fix it, extend it, and contribute the improvements back. 
the whole world will benefit, and all the users will admire britain's leadership. 
this article originally appeared in the guardian, march 3, 2005, under the title "second sight."
self-interest. 
is self-interest sufficient to organize a free economy? 
the quick answer is, "no."
 and few of the better-known theoreticians of the free-market have ever thought that self-interest was, or even could be, sufficient to organize, or long maintain, a free economy. 
among those theoreticians, adam smith is often regarded as having been the primary philosopher of self-interest. 
in a book written to correct a number of misunderstandings of smith's teachings, we find the following summaries of smith's view about self-interest: far from being an individualist, smith believed it is the influence of society that transforms people into moral beings. 
he thought that people often misjudge their own self-interest. 
even more directly to the point: [adam smith] regarded the attempt to explain all human behavior on the basis of self-interest as analytically misguided and morally pernicious. 
[1] as adam smith certainly realized, self-interest will be one of the principal forces organizing economic activities in any society, but that is as true of the most repressive or brutal society as it is of a relatively free and open society. 
most of us will not like the results of self-interest untempered by a respect for other creatures. 
as a recent example, in running their country to the disadvantage of most soviet citizens, the leaders of the communist party and of the soviet military and intelligence services were advancing their own self-interests, at least as they understood or misunderstood those interests. 
the advantages enjoyed by americans over citizens of the soviet countries, and the advantages we still enjoy over the nominally free citizens of russia and other eastern european countries, are those of a society organized to allow a high percentage of americans to act in such a way as to serve both their self-interest and some substantial stock of moral principles. 
not only our habits and customs, but also our positive laws—such as those of copyright—enter into that organization of our society, for good or bad, but not in a morally neutral manner. 
self-interest is not necessarily evil, though it can lead people to act in morally reprehensible ways. 
the love of self, and the consequent development of self-interest, is one aspect of a creature who is also a social, and hence moral, being. 
self-interest itself can serve moral interests in a free society so long as that society has the proper foundations. 
the elements of those foundations include not only a populace sharing a substantial body of moral beliefs and habits but also the formal political structures, positive laws, and accepted court decisions capable of supporting both social order and personal freedom. 
once those are in place, and once they have been internalized by the bulk of the citizens, then self-interest will provide a fuel of sorts to keep an economy functioning effectively without leading to immoral results on the whole. 
the question is always: is our society organized properly, in its positive laws and in the habits we teach our children and reinforce in ourselves, so that self-interest and moral principles do not generally come into conflict? 
those people aware of modern mathematics or of programming techniques should appreciate the recursive, and inherently unstable, interactions between individual morality and social structure. 
to oversimplify in a useful manner: people with substantial moral beliefs organize societies along those beliefs and those societies then begin to form the habits and beliefs of children, immigrants, etc. 
according to those same beliefs. 
always, it is a messy historical process which can be destroyed or rerouted into less desirable paths. 
there is inevitably a question as to whether we are straying from a proper path and also a question as to how robust the society is, i.e., how much of a disturbance it would take to destroy much of what is good about that society. 
sometimes, good people will decide that something has gone wrong and it is time to fight for a moral principle even if it becomes necessary to sacrifice, or at least qualify, their own self-interest. 
in the words of thomas sowell, a free-market theorist of our time: there are, of course, noneconomic values. 
indeed, there are only noneconomic values. 
economics is not a value itself but merely a method of trading off one value against another. 
if statements about "noneconomic values" (or, more specifically, "social values" or "human values") are meant to deny the inherent reality of trade-offs, or to exempt some particular value from the trade-off process, then such selfless ideals can be no more effectively demonstrated than by trading off financial gains in the interest of such ideals. 
this is an economic trade-off. 
[2] in context, professor sowell was not arguing against those imputing some sort of moral power to self-interest; he was instead arguing against those who think there should be an easy path to the reform of a society which may have a particular moral defect. 
those are two sides to the same coin—serving self-interest may put a person in conflict with moral values and the attempt to serve moral values may lead to some sacrifice of one's self-interest. 
self-interest can be a powerful fuel for a society, at least when the citizens of that society are well-formed individuals, but there is no mystical or magical aspect to self-interest that guarantees moral results. 
self-interest will lead to generally moral results to the extent that moral constraints, external but mostly internal, guide the actions of the self-interested parties. 
a society with the proper constraints does not come into existence by some act of magic, but rather by the acts of people who are aiming at a higher purpose, whether the preservation of liberty in the society as a whole or the preservation of a cooperative spirit within communities of programmers, or maybe both of those at the same time. 
footnotes. 
both quotes are from page 2 of adam smith: in his time and ours, jerry z. muller, princeton: princeton university press, 1993. 
from page 79 of knowledge & decisions, thomas sowell, new york: basic books, 1980. 
selling free software. 
some views on the ideas of selling exceptions to free software licenses, such as the gnu gpl are also available. 
many people believe that the spirit of the gnu project is that you should not charge money for distributing copies of software, or that you should charge as little as possible—just enough to cover the cost. 
this is a misunderstanding. 
actually, we encourage people who redistribute free software to charge as much as they wish or can. 
if a license does not permit users to make copies and sell them, it is a nonfree license. 
if this seems surprising to you, please read on. 
the word "free" has two legitimate general meanings; it can refer either to freedom or to price. 
when we speak of "free software," we're talking about freedom, not price. 
(think of "free speech," not "free beer."
) specifically, it means that a user is free to run the program, study and change the program, and redistribute the program with or without changes. 
free programs are sometimes distributed gratis, and sometimes for a substantial price. 
often the same program is available in both ways from different places. 
the program is free regardless of the price, because users have freedom in using it. 
nonfree programs are usually sold for a high price, but sometimes a store will give you a copy at no charge. 
that doesn't make it free software, though. 
price or no price, the program is nonfree because its users are denied freedom. 
since free software is not a matter of price, a low price doesn't make the software free, or even closer to free. 
so if you are redistributing copies of free software, you might as well charge a substantial fee and make some money. 
redistributing free software is a good and legitimate activity; if you do it, you might as well make a profit from it. 
free software is a community project, and everyone who depends on it ought to look for ways to contribute to building the community. 
for a distributor, the way to do this is to give a part of the profit to free software development projects or to the free software foundation. 
this way you can advance the world of free software. 
distributing free software is an opportunity to raise funds for development. 
don't waste it! 
in order to contribute funds, you need to have some extra. 
if you charge too low a fee, you won't have anything to spare to support development. 
will a higher distribution price hurt some users?. 
people sometimes worry that a high distribution fee will put free software out of range for users who don't have a lot of money. 
with proprietary software, a high price does exactly that—but free software is different. 
the difference is that free software naturally tends to spread around, and there are many ways to get it. 
software hoarders try their damnedest to stop you from running a proprietary program without paying the standard price. 
if this price is high, that does make it hard for some users to use the program. 
with free software, users don't have to pay the distribution fee in order to use the software. 
they can copy the program from a friend who has a copy, or with the help of a friend who has network access. 
or several users can join together, split the price of one cd-rom, then each in turn can install the software. 
a high cd-rom price is not a major obstacle when the software is free. 
will a higher distribution price discourage use of free software?. 
another common concern is for the popularity of free software. 
people think that a high price for distribution would reduce the number of users, or that a low price is likely to encourage users. 
this is true for proprietary software—but free software is different. 
with so many ways to get copies, the price of distribution service has less effect on popularity. 
in the long run, how many people use free software is determined mainly by how much free software can do, and how easy it is to use. 
many users do not make freedom their priority; they may continue to use proprietary software if free software can't do all the jobs they want done. 
thus, if we want to increase the number of users in the long run, we should above all develop more free software. 
the most direct way to do this is by writing needed free software or manuals yourself. 
but if you do distribution rather than writing, the best way you can help is by raising funds for others to write them. 
the term "selling software" can be confusing too. 
strictly speaking, "selling" means trading goods for money. 
selling a copy of a free program is legitimate, and we encourage it. 
however, when people think of "selling software," they usually imagine doing it the way most companies do it: making the software proprietary rather than free. 
so unless you're going to draw distinctions carefully, the way this article does, we suggest it is better to avoid using the term "selling software" and choose some other wording instead. 
for example, you could say "distributing free software for a fee"—that is unambiguous. 
high or low fees, and the gnu gpl. 
except for one special situation, the gnu general public license (gnu gpl) has no requirements about how much you can charge for distributing a copy of free software. 
you can charge nothing, a penny, a dollar, or a billion dollars. 
it's up to you, and the marketplace, so don't complain to us if nobody wants to pay a billion dollars for a copy. 
the one exception is in the case where binaries are distributed without the corresponding complete source code. 
those who do this are required by the gnu gpl to provide source code on subsequent request. 
without a limit on the fee for the source code, they would be able set a fee too large for anyone to pay—such as a billion dollars—and thus pretend to release source code while in truth concealing it. 
so in this case we have to limit the fee for source in order to ensure the user's freedom. 
in ordinary situations, however, there is no such justification for limiting distribution fees, so we do not limit them. 
sometimes companies whose activities cross the line stated in the gnu gpl plead for permission, saying that they "won't charge money for the gnu software" or such like. 
that won't get them anywhere with us. 
free software is about freedom, and enforcing the gpl is defending freedom. 
when we defend users' freedom, we are not distracted by side issues such as how much of a distribution fee is charged. 
freedom is the issue, the whole issue, and the only issue. 
selling exceptions to the gnu gpl. 
stallman selling exceptions means that the copyright holder of the code releases it to the general public under a valid free software license, then separately offers users the option of paying for permission to use the same code under different terms, for instance terms allowing its inclusion in proprietary applications. 
we must distinguish the practice of selling exceptions from something crucially different: purely proprietary extensions or versions of a free program. 
these two activities, even if practiced simultaneously by one company, are different issues. 
in selling exceptions, the same code that the exception applies to is available to the general public as free software. 
an extension or a modified version that is only available under a proprietary license is proprietary software, pure and simple, and just as wrong as any other proprietary software. 
this article is concerned with cases that involve strictly and only the sale of exceptions. 
we must also distinguish selling exceptions from dual licensing, which means releasing the program under a choice of licenses. 
with dual licensing, each user can choose to use the program under either one of the licenses, or under both in parallel for activities that fit both. 
(thus, redistributors normally pass along both of the licenses.) for instance, perl was distributed for many years under a dual license whose alternatives were the gnu gpl and the artistic license. 
that is not necessary any more because version 2 of the artistic license is compatible with the gnu gpl. 
in selling exceptions, the exception's terms are not a second license that the program is released under. 
rather, they are available only to those users that buy an exception. 
the only license that the release carries is the gnu gpl, so this is not dual licensing. 
we must distinguish selling of exceptions from the usual kind of "exception to the gpl," which simply gives all users permission to go beyond the gpl's conditions in some specific way. 
these exceptions are governed by section 7 of the gnu gpl. 
selling exceptions is legally independent of the gnu gpl. 
to avoid confusion it is best not to refer to exceptions that are sold as "exceptions to the gpl."
 i've considered selling exceptions acceptable since the 1990s, and on occasion i've suggested it to companies. 
sometimes this approach has made it possible for important programs to become free software. 
the kde desktop was developed in the 90s based on the qt library. 
qt was proprietary software, and trolltech charged for permission to embed it in proprietary applications. 
trolltech allowed gratis use of qt in free applications, but this did not make it free/libre software. 
completely free operating systems therefore could not include qt, so they could not use kde either. 
in 1998, the management of trolltech recognized that they could make qt free software and continue charging for permission to embed it in proprietary software. 
i do not recall whether the suggestion came from me, but i certainly was happy to see the change, which made it possible to use qt and thus kde in the free software world. 
initially, they used their own license, the q public license (qpl)—quite restrictive as free software licenses go, and incompatible with the gnu gpl. 
later they switched to the gnu gpl; i think i had explained to them that it would work for the purpose. 
selling exceptions depends fundamentally on using a copyleft license, such as the gnu gpl, for the free software release. 
a copyleft license permits embedding in a larger program only if the whole combined program is released under that license; this is how it ensures extended versions will also be free. 
thus, users that want to make the combined program proprietary need special permission. 
only the copyright holder can grant that, and selling exceptions is one style of doing so. 
someone else, who received the code under the gnu gpl or another copyleft license, cannot grant an exception. 
when i first heard of the practice of selling exceptions, i asked myself whether the practice is ethical. 
if someone buys an exception to embed a program in a larger proprietary program, he's doing something wrong (namely, making proprietary software). 
does it follow that the developer that sold the exception is doing something wrong too? 
if that implication were valid, it would also apply to releasing the same program under a noncopyleft free software license, such as the x11 license. 
that also permits such embedding. 
so either we have to conclude that it's wrong to release anything under the x11 license—a conclusion i find unacceptably extreme—or reject the implication. 
using a noncopyleft license is weak, and usually an inferior choice, but it's not wrong. 
in other words, selling exceptions permits limited embedding of the code in proprietary software, but the x11 license goes even further, permitting unlimited use of the code (and modified versions of it) in proprietary software. 
if this doesn't make the x11 license unacceptable, it doesn't make selling exceptions unacceptable. 
there are three reasons why the fsf doesn't practice selling exceptions. 
one is that it doesn't lead to the fsf's goal: assuring freedom for each user of our software. 
that's what we wrote the gnu gpl for, and the way to achieve this most thoroughly is to release under gpl version 3-or-later and not allow embedding in proprietary software. 
selling exceptions wouldn't achieve this, just as release under the x11 license wouldn't. 
so normally we don't do either of those things: we release under the gpl only. 
another reason we release only under the gpl is so as not to permit proprietary extensions that would present practical advantages over our free programs. 
users for whom freedom is not a value might choose those nonfree versions rather than the free programs they are based on—and lose their freedom. 
we don't want to encourage that. 
there are occasional cases where, for specific reasons of strategy, we decide that using a more permissive license on a certain program is better for the cause of freedom. 
in those cases, we release the program to everyone under that permissive license. 
this is because of another ethical principle that the fsf follows: to treat all users the same. 
an idealistic campaign for freedom should not discriminate, so the fsf is committed to giving the same license to all users. 
the fsf never sells exceptions; whatever license or licenses we release a program under, that is available to everyone. 
but we need not insist that companies follow that principle. 
i consider selling exceptions an acceptable thing for a company to do, and i will suggest it where appropriate as a way to get programs freed. 
why software should be free. 
stallman the existence of software inevitably raises the question of how decisions about its use should be made. 
for example, suppose one individual who has a copy of a program meets another who would like a copy. 
it is possible for them to copy the program; who should decide whether this is done? 
the individuals involved? 
or another party, called the "owner"? 
software developers typically consider these questions on the assumption that the criterion for the answer is to maximize developers' profits. 
the political power of business has led to the government adoption of both this criterion and the answer proposed by the developers: that the program has an owner, typically a corporation associated with its development. 
i would like to consider the same question using a different criterion: the prosperity and freedom of the public in general. 
this answer cannot be decided by current law—the law should conform to ethics, not the other way around. 
nor does current practice decide this question, although it may suggest possible answers. 
the only way to judge is to see who is helped and who is hurt by recognizing owners of software, why, and how much. 
in other words, we should perform a cost-benefit analysis on behalf of society as a whole, taking account of individual freedom as well as production of material goods. 
in this essay, i will describe the effects of having owners, and show that the results are detrimental. 
my conclusion is that programmers have the duty to encourage others to share, redistribute, study, and improve the software we write: in other words, to write "free" software.(1) how owners justify their power. 
those who benefit from the current system where programs are property offer two arguments in support of their claims to own programs: the emotional argument and the economic argument. 
the emotional argument goes like this: "i put my sweat, my heart, my soul into this program. 
it comes from me, it's mine!"
 this argument does not require serious refutation. 
the feeling of attachment is one that programmers can cultivate when it suits them; it is not inevitable. 
consider, for example, how willingly the same programmers usually sign over all rights to a large corporation for a salary; the emotional attachment mysteriously vanishes. 
by contrast, consider the great artists and artisans of medieval times, who didn't even sign their names to their work. 
to them, the name of the artist was not important. 
what mattered was that the work was done—and the purpose it would serve. 
this view prevailed for hundreds of years. 
the economic argument goes like this: "i want to get rich (usually described inaccurately as "making a living"), and if you don't allow me to get rich by programming, then i won't program. 
everyone else is like me, so nobody will ever program. 
and then you'll be stuck with no programs at all!"
 this threat is usually veiled as friendly advice from the wise. 
i'll explain later why this threat is a bluff. 
first i want to address an implicit assumption that is more visible in another formulation of the argument. 
this formulation starts by comparing the social utility of a proprietary program with that of no program, and then concludes that proprietary software development is, on the whole, beneficial, and should be encouraged. 
the fallacy here is in comparing only two outcomes—proprietary software versus no software—and assuming there are no other possibilities. 
given a system of software copyright, software development is usually linked with the existence of an owner who controls the software's use. 
as long as this linkage exists, we are often faced with the choice of proprietary software or none. 
however, this linkage is not inherent or inevitable; it is a consequence of the specific social/legal policy decision that we are questioning: the decision to have owners. 
to formulate the choice as between proprietary software versus no software is begging the question. 
the argument against having owners. 
the question at hand is, "should development of software be linked with having owners to restrict the use of it?"
 in order to decide this, we have to judge the effect on society of each of those two activities independently: the effect of developing the software (regardless of its terms of distribution), and the effect of restricting its use (assuming the software has been developed). 
if one of these activities is helpful and the other is harmful, we would be better off dropping the linkage and doing only the helpful one. 
to put it another way, if restricting the distribution of a program already developed is harmful to society overall, then an ethical software developer will reject the option of doing so. 
to determine the effect of restricting sharing, we need to compare the value to society of a restricted (i.e., proprietary) program with that of the same program, available to everyone. 
this means comparing two possible worlds. 
this analysis also addresses the simple counterargument sometimes made that "the benefit to the neighbor of giving him or her a copy of a program is cancelled by the harm done to the owner."
 this counterargument assumes that the harm and the benefit are equal in magnitude. 
the analysis involves comparing these magnitudes, and shows that the benefit is much greater. 
to elucidate this argument, let's apply it in another area: road construction. 
it would be possible to fund the construction of all roads with tolls. 
this would entail having toll booths at all street corners. 
such a system would provide a great incentive to improve roads. 
it would also have the virtue of causing the users of any given road to pay for that road. 
however, a toll booth is an artificial obstruction to smooth driving—artificial, because it is not a consequence of how roads or cars work. 
comparing free roads and toll roads by their usefulness, we find that (all else being equal) roads without toll booths are cheaper to construct, cheaper to run, safer, and more efficient to use.(2) in a poor country, tolls may make the roads unavailable to many citizens. 
the roads without toll booths thus offer more benefit to society at less cost; they are preferable for society. 
therefore, society should choose to fund roads in another way, not by means of toll booths. 
use of roads, once built, should be free. 
when the advocates of toll booths propose them as merely a way of raising funds, they distort the choice that is available. 
toll booths do raise funds, but they do something else as well: in effect, they degrade the road. 
the toll road is not as good as the free road; giving us more or technically superior roads may not be an improvement if this means substituting toll roads for free roads. 
of course, the construction of a free road does cost money, which the public must somehow pay. 
however, this does not imply the inevitability of toll booths. 
we who must in either case pay will get more value for our money by buying a free road. 
i am not saying that a toll road is worse than no road at all. 
that would be true if the toll were so great that hardly anyone used the road—but this is an unlikely policy for a toll collector. 
however, as long as the toll booths cause significant waste and inconvenience, it is better to raise the funds in a less obstructive fashion. 
to apply the same argument to software development, i will now show that having "toll booths" for useful software programs costs society dearly: it makes the programs more expensive to construct, more expensive to distribute, and less satisfying and efficient to use. 
it will follow that program construction should be encouraged in some other way. 
then i will go on to explain other methods of encouraging and (to the extent actually necessary) funding software development. 
the harm done by obstructing software. 
consider for a moment that a program has been developed, and any necessary payments for its development have been made; now society must choose either to make it proprietary or allow free sharing and use. 
assume that the existence of the program and its availability is a desirable thing.(3) restrictions on the distribution and modification of the program cannot facilitate its use. 
they can only interfere. 
so the effect can only be negative. 
but how much? 
and what kind? 
three different levels of material harm come from such obstruction: fewer people use the program. 
none of the users can adapt or fix the program. 
other developers cannot learn from the program, or base new work on it. 
each level of material harm has a concomitant form of psychosocial harm. 
this refers to the effect that people's decisions have on their subsequent feelings, attitudes, and predispositions. 
these changes in people's ways of thinking will then have a further effect on their relationships with their fellow citizens, and can have material consequences. 
the three levels of material harm waste part of the value that the program could contribute, but they cannot reduce it to zero. 
if they waste nearly all the value of the program, then writing the program harms society by at most the effort that went into writing the program. 
arguably a program that is profitable to sell must provide some net direct material benefit. 
however, taking account of the concomitant psychosocial harm, there is no limit to the harm that proprietary software development can do. 
obstructing use of programs. 
the first level of harm impedes the simple use of a program. 
a copy of a program has nearly zero marginal cost (and you can pay this cost by doing the work yourself), so in a free market, it would have nearly zero price. 
a license fee is a significant disincentive to use the program. 
if a widely useful program is proprietary, far fewer people will use it. 
it is easy to show that the total contribution of a program to society is reduced by assigning an owner to it. 
each potential user of the program, faced with the need to pay to use it, may choose to pay, or may forego use of the program. 
when a user chooses to pay, this is a zero-sum transfer of wealth between two parties. 
but each time someone chooses to forego use of the program, this harms that person without benefiting anyone. 
the sum of negative numbers and zeros must be negative. 
but this does not reduce the amount of work it takes to develop the program. 
as a result, the efficiency of the whole process, in delivered user satisfaction per hour of work, is reduced. 
this reflects a crucial difference between copies of programs and cars, chairs, or sandwiches. 
there is no copying machine for material objects outside of science fiction. 
but programs are easy to copy; anyone can produce as many copies as are wanted, with very little effort. 
this isn't true for material objects because matter is conserved: each new copy has to be built from raw materials in the same way that the first copy was built. 
with material objects, a disincentive to use them makes sense, because fewer objects bought means less raw material and work needed to make them. 
it's true that there is usually also a startup cost, a development cost, which is spread over the production run. 
but as long as the marginal cost of production is significant, adding a share of the development cost does not make a qualitative difference. 
and it does not require restrictions on the freedom of ordinary users. 
however, imposing a price on something that would otherwise be free is a qualitative change. 
a centrally imposed fee for software distribution becomes a powerful disincentive. 
what's more, central production as now practiced is inefficient even as a means of delivering copies of software. 
this system involves enclosing physical disks or tapes in superfluous packaging, shipping large numbers of them around the world, and storing them for sale. 
this cost is presented as an expense of doing business; in truth, it is part of the waste caused by having owners. 
damaging social cohesion. 
suppose that both you and your neighbor would find it useful to run a certain program. 
in ethical concern for your neighbor, you should feel that proper handling of the situation will enable both of you to use it. 
a proposal to permit only one of you to use the program, while restraining the other, is divisive; neither you nor your neighbor should find it acceptable. 
signing a typical software license agreement means betraying your neighbor: "i promise to deprive my neighbor of this program so that i can have a copy for myself."
 people who make such choices feel internal psychological pressure to justify them, by downgrading the importance of helping one's neighbors—thus public spirit suffers. 
this is psychosocial harm associated with the material harm of discouraging use of the program. 
many users unconsciously recognize the wrong of refusing to share, so they decide to ignore the licenses and laws, and share programs anyway. 
but they often feel guilty about doing so. 
they know that they must break the laws in order to be good neighbors, but they still consider the laws authoritative, and they conclude that being a good neighbor (which they are) is naughty or shameful. 
that is also a kind of psychosocial harm, but one can escape it by deciding that these licenses and laws have no moral force. 
programmers also suffer psychosocial harm knowing that many users will not be allowed to use their work. 
this leads to an attitude of cynicism or denial. 
a programmer may describe enthusiastically the work that he finds technically exciting; then when asked, "will i be permitted to use it?"
 his face falls, and he admits the answer is no. 
to avoid feeling discouraged, he either ignores this fact most of the time or adopts a cynical stance designed to minimize the importance of it. 
since the age of reagan, the greatest scarcity in the united states is not technical innovation, but rather the willingness to work together for the public good. 
it makes no sense to encourage the former at the expense of the latter. 
obstructing custom adaptation of programs. 
the second level of material harm is the inability to adapt programs. 
the ease of modification of software is one of its great advantages over older technology. 
but most commercially available software isn't available for modification, even after you buy it. 
it's available for you to take it or leave it, as a black box—that is all. 
a program that you can run consists of a series of numbers whose meaning is obscure. 
no one, not even a good programmer, can easily change the numbers to make the program do something different. 
programmers normally work with the "source code" for a program, which is written in a programming language such as fortran or c. it uses names to designate the data being used and the parts of the program, and it represents operations with symbols such as + for addition and - for subtraction. 
it is designed to help programmers read and change programs. 
here is an example; a program to calculate the distance between two points in a plane: float distance (p0, p1) struct point p0, p1; { float xdist = p1.x - p0.x; float ydist = p1.y - p0.y; return sqrt (xdist * xdist + ydist * ydist); } precisely what that source code means is not the point; the point is that it looks like algebra, and a person who knows this programming language will find it meaningful and clear. 
by contrast, here is same program in executable form, on the computer i normally used when i wrote this: 1314258944 -232267772 -231844864 1634862 1411907592 -231844736 2159150 1420296208 -234880989 -234879837 -234879966 -232295424 1644167167 -3214848 1090581031 1962942495 572518958 -803143692 1314803317 source code is useful (at least potentially) to every user of a program. 
but most users are not allowed to have copies of the source code. 
usually the source code for a proprietary program is kept secret by the owner, lest anybody else learn something from it. 
users receive only the files of incomprehensible numbers that the computer will execute. 
this means that only the program's owner can change the program. 
a friend once told me of working as a programmer in a bank for about six months, writing a program similar to something that was commercially available. 
she believed that if she could have gotten source code for that commercially available program, it could easily have been adapted to their needs. 
the bank was willing to pay for this, but was not permitted to—the source code was a secret. 
so she had to do six months of make-work, work that counts in the gnp but was actually waste. 
the mit artificial intelligence lab (ai lab) received a graphics printer as a gift from xerox around 1977. 
it was run by free software to which we added many convenient features. 
for example, the software would notify a user immediately on completion of a print job. 
whenever the printer had trouble, such as a paper jam or running out of paper, the software would immediately notify all users who had print jobs queued. 
these features facilitated smooth operation. 
later xerox gave the ai lab a newer, faster printer, one of the first laser printers. 
it was driven by proprietary software that ran in a separate dedicated computer, so we couldn't add any of our favorite features. 
we could arrange to send a notification when a print job was sent to the dedicated computer, but not when the job was actually printed (and the delay was usually considerable). 
there was no way to find out when the job was actually printed; you could only guess. 
and no one was informed when there was a paper jam, so the printer often went for an hour without being fixed. 
the system programmers at the ai lab were capable of fixing such problems, probably as capable as the original authors of the program. 
xerox was uninterested in fixing them, and chose to prevent us, so we were forced to accept the problems. 
they were never fixed. 
most good programmers have experienced this frustration. 
the bank could afford to solve the problem by writing a new program from scratch, but a typical user, no matter how skilled, can only give up. 
giving up causes psychosocial harm—to the spirit of self-reliance. 
it is demoralizing to live in a house that you cannot rearrange to suit your needs. 
it leads to resignation and discouragement, which can spread to affect other aspects of one's life. 
people who feel this way are unhappy and do not do good work. 
imagine what it would be like if recipes were hoarded in the same fashion as software. 
you might say, "how do i change this recipe to take out the salt?"
 and the great chef would respond, "how dare you insult my recipe, the child of my brain and my palate, by trying to tamper with it? 
you don't have the judgment to change my recipe and make it work right!"
 "but my doctor says i'm not supposed to eat salt! 
what can i do? 
will you take out the salt for me?"
 "i would be glad to do that; my fee is only $50,000."
 since the owner has a monopoly on changes, the fee tends to be large. 
"however, right now i don't have time. 
i am busy with a commission to design a new recipe for ship's biscuit for the navy department. 
i might get around to you in about two years."
 obstructing software development. 
the third level of material harm affects software development. 
software development used to be an evolutionary process, where a person would take an existing program and rewrite parts of it for one new feature, and then another person would rewrite parts to add another feature; in some cases, this continued over a period of twenty years. 
meanwhile, parts of the program would be "cannibalized" to form the beginnings of other programs. 
the existence of owners prevents this kind of evolution, making it necessary to start from scratch when developing a program. 
it also prevents new practitioners from studying existing programs to learn useful techniques or even how large programs can be structured. 
owners also obstruct education. 
i have met bright students in computer science who have never seen the source code of a large program. 
they may be good at writing small programs, but they can't begin to learn the different skills of writing large ones if they can't see how others have done it. 
in any intellectual field, one can reach greater heights by standing on the shoulders of others. 
but that is no longer generally allowed in the software field—you can only stand on the shoulders of the other people in your own company. 
the associated psychosocial harm affects the spirit of scientific cooperation, which used to be so strong that scientists would cooperate even when their countries were at war. 
in this spirit, japanese oceanographers abandoning their lab on an island in the pacific carefully preserved their work for the invading u.s. 
marines, and left a note asking them to take good care of it. 
conflict for profit has destroyed what international conflict spared. 
nowadays scientists in many fields don't publish enough in their papers to enable others to replicate the experiment. 
they publish only enough to let readers marvel at how much they were able to do. 
this is certainly true in computer science, where the source code for the programs reported on is usually secret. 
it does not matter how sharing is restricted. 
i have been discussing the effects of preventing people from copying, changing, and building on a program. 
i have not specified how this obstruction is carried out, because that doesn't affect the conclusion. 
whether it is done by copy protection, or copyright, or licenses, or encryption, or rom cards, or hardware serial numbers, if it succeeds in preventing use, it does harm. 
users do consider some of these methods more obnoxious than others. 
i suggest that the methods most hated are those that accomplish their objective. 
software should be free. 
i have shown how ownership of a program—the power to restrict changing or copying it—is obstructive. 
its negative effects are widespread and important. 
it follows that society shouldn't have owners for programs. 
another way to understand this is that what society needs is free software, and proprietary software is a poor substitute. 
encouraging the substitute is not a rational way to get what we need. 
vaclav havel has advised us to "work for something because it is good, not just because it stands a chance to succeed."
 a business making proprietary software stands a chance of success in its own narrow terms, but it is not what is good for society. 
why people will develop software. 
if we eliminate copyright as a means of encouraging people to develop software, at first less software will be developed, but that software will be more useful. 
it is not clear whether the overall delivered user satisfaction will be less; but if it is, or if we wish to increase it anyway, there are other ways to encourage development, just as there are ways besides toll booths to raise money for streets. 
before i talk about how that can be done, first i want to question how much artificial encouragement is truly necessary. 
programming is fun. 
there are some lines of work that few will enter except for money; road construction, for example. 
there are other fields of study and art in which there is little chance to become rich, which people enter for their fascination or their perceived value to society. 
examples include mathematical logic, classical music, and archaeology; and political organizing among working people. 
people compete, more sadly than bitterly, for the few funded positions available, none of which is funded very well. 
they may even pay for the chance to work in the field, if they can afford to. 
such a field can transform itself overnight if it begins to offer the possibility of getting rich. 
when one worker gets rich, others demand the same opportunity. 
soon all may demand large sums of money for doing what they used to do for pleasure. 
when another couple of years go by, everyone connected with the field will deride the idea that work would be done in the field without large financial returns. 
they will advise social planners to ensure that these returns are possible, prescribing special privileges, powers, and monopolies as necessary to do so. 
this change happened in the field of computer programming in the 1980s. 
in the 1970s, there were articles on "computer addiction": users were "onlining" and had hundred-dollar-a-week habits. 
it was generally understood that people frequently loved programming enough to break up their marriages. 
today, it is generally understood that no one would program except for a high rate of pay. 
people have forgotten what they knew back then. 
when it is true at a given time that most people will work in a certain field only for high pay, it need not remain true. 
the dynamic of change can run in reverse, if society provides an impetus. 
if we take away the possibility of great wealth, then after a while, when the people have readjusted their attitudes, they will once again be eager to work in the field for the joy of accomplishment. 
the question "how can we pay programmers?"
 becomes an easier question when we realize that it's not a matter of paying them a fortune. 
a mere living is easier to raise. 
funding free software. 
institutions that pay programmers do not have to be software houses. 
many other institutions already exist that can do this. 
hardware manufacturers find it essential to support software development even if they cannot control the use of the software. 
in 1970, much of their software was free because they did not consider restricting it. 
today, their increasing willingness to join consortiums shows their realization that owning the software is not what is really important for them. 
universities conduct many programming projects. 
today they often sell the results, but in the 1970s they did not. 
is there any doubt that universities would develop free software if they were not allowed to sell software? 
these projects could be supported by the same government contracts and grants that now support proprietary software development. 
it is common today for university researchers to get grants to develop a system, develop it nearly to the point of completion and call that "finished," and then start companies where they really finish the project and make it usable. 
sometimes they declare the unfinished version "free"; if they are thoroughly corrupt, they instead get an exclusive license from the university. 
this is not a secret; it is openly admitted by everyone concerned. 
yet if the researchers were not exposed to the temptation to do these things, they would still do their research. 
programmers writing free software can make their living by selling services related to the software. 
i have been hired to port the gnu c compiler to new hardware, and to make user-interface extensions to gnu emacs. 
(i offer these improvements to the public once they are done.) i also teach classes for which i am paid. 
i am not alone in working this way; there is now a successful, growing corporation which does no other kind of work. 
several other companies also provide commercial support for the free software of the gnu system. 
this is the beginning of the independent software support industry—an industry that could become quite large if free software becomes prevalent. 
it provides users with an option generally unavailable for proprietary software, except to the very wealthy. 
new institutions such as the free software foundation can also fund programmers. 
most of the foundation's funds come from users buying tapes through the mail. 
the software on the tapes is free, which means that every user has the freedom to copy it and change it, but many nonetheless pay to get copies. 
(recall that "free software" refers to freedom, not to price.) some users who already have a copy order tapes as a way of making a contribution they feel we deserve. 
the foundation also receives sizable donations from computer manufacturers. 
the free software foundation is a charity, and its income is spent on hiring as many programmers as possible. 
if it had been set up as a business, distributing the same free software to the public for the same fee, it would now provide a very good living for its founder. 
because the foundation is a charity, programmers often work for the foundation for half of what they could make elsewhere. 
they do this because we are free of bureaucracy, and because they feel satisfaction in knowing that their work will not be obstructed from use. 
most of all, they do it because programming is fun. 
in addition, volunteers have written many useful programs for us. 
(even technical writers have begun to volunteer.) this confirms that programming is among the most fascinating of all fields, along with music and art. 
we don't have to fear that no one will want to program. 
what do users owe to developers?. 
there is a good reason for users of software to feel a moral obligation to contribute to its support. 
developers of free software are contributing to the users' activities, and it is both fair and in the long-term interest of the users to give them funds to continue. 
however, this does not apply to proprietary software developers, since obstructionism deserves a punishment rather than a reward. 
we thus have a paradox: the developer of useful software is entitled to the support of the users, but any attempt to turn this moral obligation into a requirement destroys the basis for the obligation. 
a developer can either deserve a reward or demand it, but not both. 
i believe that an ethical developer faced with this paradox must act so as to deserve the reward, but should also entreat the users for voluntary donations. 
eventually the users will learn to support developers without coercion, just as they have learned to support public radio and television stations. 
what is software productivity? 
. if software were free, there would still be programmers, but perhaps fewer of them. 
would this be bad for society? 
not necessarily. 
today the advanced nations have fewer farmers than in 1900, but we do not think this is bad for society, because the few deliver more food to the consumers than the many used to do. 
we call this improved productivity. 
free software would require far fewer programmers to satisfy the demand, because of increased software productivity at all levels: wider use of each program that is developed. 
the ability to adapt existing programs for customization instead of starting from scratch. 
better education of programmers. 
the elimination of duplicate development effort. 
those who object to cooperation claiming it would result in the employment of fewer programmers are actually objecting to increased productivity. 
yet these people usually accept the widely held belief that the software industry needs increased productivity. 
how is this? 
"software productivity" can mean two different things: the overall productivity of all software development, or the productivity of individual projects. 
overall productivity is what society would like to improve, and the most straightforward way to do this is to eliminate the artificial obstacles to cooperation which reduce it. 
but researchers who study the field of "software productivity" focus only on the second, limited, sense of the term, where improvement requires difficult technological advances. 
is competition inevitable?. 
is it inevitable that people will try to compete, to surpass their rivals in society? 
perhaps it is. 
but competition itself is not harmful; the harmful thing is combat. 
there are many ways to compete. 
competition can consist of trying to achieve ever more, to outdo what others have done. 
for example, in the old days, there was competition among programming wizards—competition for who could make the computer do the most amazing thing, or for who could make the shortest or fastest program for a given task. 
this kind of competition can benefit everyone, as long as the spirit of good sportsmanship is maintained. 
constructive competition is enough competition to motivate people to great efforts. 
a number of people are competing to be the first to have visited all the countries on earth; some even spend fortunes trying to do this. 
but they do not bribe ship captains to strand their rivals on desert islands. 
they are content to let the best person win. 
competition becomes combat when the competitors begin trying to impede each other instead of advancing themselves—when "let the best person win" gives way to "let me win, best or not."
 proprietary software is harmful, not because it is a form of competition, but because it is a form of combat among the citizens of our society. 
competition in business is not necessarily combat. 
for example, when two grocery stores compete, their entire effort is to improve their own operations, not to sabotage the rival. 
but this does not demonstrate a special commitment to business ethics; rather, there is little scope for combat in this line of business short of physical violence. 
not all areas of business share this characteristic. 
withholding information that could help everyone advance is a form of combat. 
business ideology does not prepare people to resist the temptation to combat the competition. 
some forms of combat have been banned with antitrust laws, truth in advertising laws, and so on, but rather than generalizing this to a principled rejection of combat in general, executives invent other forms of combat which are not specifically prohibited. 
society's resources are squandered on the economic equivalent of factional civil war. 
"why don't you move to russia?"
. in the united states, any advocate of other than the most extreme form of laissez-faire selfishness has often heard this accusation. 
for example, it is leveled against the supporters of a national health care system, such as is found in all the other industrialized nations of the free world. 
it is leveled against the advocates of public support for the arts, also universal in advanced nations. 
the idea that citizens have any obligation to the public good is identified in america with communism. 
but how similar are these ideas? 
communism as was practiced in the soviet union was a system of central control where all activity was regimented, supposedly for the common good, but actually for the sake of the members of the communist party. 
and where copying equipment was closely guarded to prevent illegal copying. 
the american system of software copyright exercises central control over distribution of a program, and guards copying equipment with automatic copying-protection schemes to prevent illegal copying. 
by contrast, i am working to build a system where people are free to decide their own actions; in particular, free to help their neighbors, and free to alter and improve the tools which they use in their daily lives. 
a system based on voluntary cooperation and on decentralization. 
thus, if we are to judge views by their resemblance to russian communism, it is the software owners who are the communists. 
the question of premises. 
i make the assumption in this paper that a user of software is no less important than an author, or even an author's employer. 
in other words, their interests and needs have equal weight, when we decide which course of action is best. 
this premise is not universally accepted. 
many maintain that an author's employer is fundamentally more important than anyone else. 
they say, for example, that the purpose of having owners of software is to give the author's employer the advantage he deserves—regardless of how this may affect the public. 
it is no use trying to prove or disprove these premises. 
proof requires shared premises. 
so most of what i have to say is addressed only to those who share the premises i use, or at least are interested in what their consequences are. 
for those who believe that the owners are more important than everyone else, this paper is simply irrelevant. 
but why would a large number of americans accept a premise that elevates certain people in importance above everyone else? 
partly because of the belief that this premise is part of the legal traditions of american society. 
some people feel that doubting the premise means challenging the basis of society. 
it is important for these people to know that this premise is not part of our legal tradition. 
it never has been. 
thus, the constitution says that the purpose of copyright is to "promote the progress of science and the useful arts."
 the supreme court has elaborated on this, stating in fox film v. doyal that "the sole interest of the united states and the primary object in conferring the [copyright] monopoly lie in the general benefits derived by the public from the labors of authors."
 we are not required to agree with the constitution or the supreme court. 
(at one time, they both condoned slavery.) so their positions do not disprove the owner supremacy premise. 
but i hope that the awareness that this is a radical right-wing assumption rather than a traditionally recognized one will weaken its appeal. 
conclusion. 
we like to think that our society encourages helping your neighbor; but each time we reward someone for obstructionism, or admire them for the wealth they have gained in this way, we are sending the opposite message. 
software hoarding is one form of our general willingness to disregard the welfare of society for personal gain. 
we can trace this disregard from ronald reagan to dick cheney, from exxon to enron, from failing banks to failing schools. 
we can measure it with the size of the homeless population and the prison population. 
the antisocial spirit feeds on itself, because the more we see that other people will not help us, the more it seems futile to help them. 
thus society decays into a jungle. 
if we don't want to live in a jungle, we must change our attitudes. 
we must start sending the message that a good citizen is one who cooperates when appropriate, not one who is successful at taking from others. 
i hope that the free software movement will contribute to this: at least in one area, we will replace the jungle with a more efficient system which encourages and runs on voluntary cooperation. 
footnotes. 
the word "free" in "free software" refers to freedom, not to price; the price paid for a copy of a free program may be zero, or small, or (rarely) quite large. 
the issues of pollution and traffic congestion do not alter this conclusion. 
if we wish to make driving more expensive to discourage driving in general, it is disadvantageous to do this using toll booths, which contribute to both pollution and congestion. 
a tax on gasoline is much better. 
likewise, a desire to enhance safety by limiting maximum speed is not relevant; a free-access road enhances the average speed by avoiding stops and delays, for any given speed limit. 
one might regard a particular computer program as a harmful thing that should not be available at all, like the lotus marketplace database of personal information, which was withdrawn from sale due to public disapproval. 
most of what i say does not apply to this case, but it makes little sense to argue for having an owner on the grounds that the owner will make the program less available. 
the owner will not make it completely unavailable, as one would wish in the case of a program whose use is considered destructive. 
this essay is published in free software, free society: the selected essays of richard m. stallman. 
overcoming social inertia. 
stallman almost two decades have passed since the combination of gnu and linux first made it possible to use a pc in freedom. 
we have come a long way since then. 
now you can even buy a laptop with gnu/linux preinstalled from more than one hardware vendor—although the systems they ship are not entirely free software. 
so what holds us back from total success? 
the main obstacle to the triumph of software freedom is social inertia. 
it exists in many forms, and you have surely seen some of them. 
examples include devices that only work on windows, commercial web sites accessible only with windows, and the bbc's iplayer handcuffware, which runs only on windows. 
if you value short-term convenience instead of freedom, you might consider these reason enough to use windows. 
most companies currently run windows, so students who think short-term want to learn how to use it and ask their schools to teach it. 
schools teach windows, produce graduates that are used to using windows, and this encourages businesses to use windows. 
microsoft actively nurtures this inertia: it encourages schools to inculcate dependency on windows, and contracts to set up web sites that then turn out to work only with internet explorer. 
a few years ago, microsoft ads argued that windows was cheaper to run than gnu/linux. 
their comparisons were debunked, but it is worth noting the deeper flaw in their argument, the implicit premise which cites a form of social inertia: "currently, more technical people know windows than gnu/linux."
 people who value their freedom would not give it up to save money, but many business executives believe ideologically that everything they possess, even their freedom, should be for sale. 
social inertia consists of people who have given in to social inertia. 
when you surrender to social inertia, you become part of the pressure it exerts on others; when you resist it, you reduce it. 
we conquer social inertia by identifying it, and resolving not to be part of it. 
here a weakness holds our community back: most gnu/linux users have never even heard the ideas of freedom that motivated the development of gnu, so they still judge matters based on short-term convenience rather than on their freedom. 
this makes them vulnerable to being led by the nose by social inertia, so that they become part of the inertia. 
to build our community's strength to resist, we need to talk about free software and freedom—not merely about the practical benefits that open source supporters cite. 
and we need to resist nonfree software by taking action each time we can, voicing our reasons out loud. 
as more people recognize what they need to do to overcome the inertia, we will make more progress. 
software libre and commercial viability. 
[*] nov 12th 1998, published in february 1999 fortunately, linus' project of world domination is going to come true fairly soon. 
the trend toward this goal can be verified by checking how the press is behaving towards gnu/linux solutions, looking at how several educational entities are going to introduce free software in the schools and verifying its usual technical excellence. 
today in 1998 (yes, it is still 1998 as i write), the most important job remaining, in my opinion, is propagating the social and commercial implications of free software. 
while i greatly appreciated russell nelson's article "open source software model" in the july issue of lj, i feel the need to expand on the points he briefly touched. 
please note that i'm not an expert in economics or politics. 
i'm just a build-it-yourself kind of technical guy whose discussion is based on his own experience in the battle for survival, in the hopes of helping someone else adapt to new environmental conditions. 
some of these ideas have already been discussed with friends or on the free software business mailing list, <fsb-subscribe@crynwr.com>, which i joined after reading russell's article. 
viability for individual consultants. 
the best feature of any computer system is flexibility—allowing users to tailor its behaviour to their own needs. 
this flexibility is often completely unknown to the general computer user, because proprietary software solutions tend to hide functionality behind a rigid external interface which denies any divergence from the expected behaviour—a user's behaviour. 
when adopting free software, users are able to discover the real power of computer systems. 
today i talked with a commercial consultant who never thought that programs could be adapted to one's needs. 
he confessed his company has always acted the other way around—they adapted their needs to the software they use. 
most users are victims of their software and don't even realize it. 
educating the user base about the extendibility of software will open new markets to independent consultants, creating new employment opportunities. 
every user has different needs and solving these needs often means calling for technical support from people who tailor or enhance the relevant software. 
while this is not even imaginable with proprietary programs, source availability allows any problem that might arise to be quickly solved and new features to be easily added. 
while you may think this would quickly lead to a perfect software package, individual needs are so diverse and specialized that a package can't satisfy everyone. 
for example, i and others wrote a program for a local physiology center to analyze data for a typical kind of experiment. 
during two years of use, the physicians found so many ways to enhance the program that it is now reported as better than the commercial solutions. 
the total of all fees they paid during these years reveals the program to be more expensive in the end than some of the commercial alternatives. 
this fact is not relevant to my clients, as they have exactly what they want and they know they can have more should the need arise. 
the program is obviously free software and other centers expressed interest in getting a copy. 
as more and more people are choosing free software to address their needs, i'm sure some software companies will try to demonize gnu/linux and both the free software and the open source movements because they are losing their own market share. 
such companies will probably try to demonstrate that it employment is decreasing and that humankind is being damaged by the general adoption of free software. 
this whole argument is bogus; computers exist to be programmed, and the more you allow programming them, the more you build employment opportunities. 
if you count the number of people who offer free software consulting, you will greatly exceed any shrinkage of proprietary companies. 
sticking to my previous example, the physiology lab hired my company to write the program, and other centers interested in the product are willing to hire a local consultant for installing, maintaining and enhancing our package. 
did i say "enhance"? 
isn't the program working? 
yes, the program is working well, but there is room for enhancement of the product. 
the local lab decided to stop development "because we must run our experiment rather than invent new software features."
 as anyone knows, every program has a bug and a missing feature, and this is where we build our credibility: bugs can be fixed and features can be implemented. 
as i suggested before, the more you make things programmable, the more they will be programmed. 
why should there be more employment opportunities in it than there are now? 
first of all, because free software users have more requests for new features than users of proprietary products do, as explained above. 
next, because anyone can build her own professionalism without paying tributes to access the sources of information. 
i built my own expertise by studying source code and trying things out on my own low-end pc. 
now i am confident i can solve any problem my clients might have, and my clients know i can (provided i am given enough time to deal with the problem). 
another critical point in addition to source availability is standardization on file formats, a field where proprietary products are revealing their worst features. 
let's imagine an environment where every file format in the system was known: you could, for example, create indexes from any document that is produced, thus easing later retrieval. 
this can be accomplished off-line without any load on non-technical personnel. 
asynchronous reuse of data is "rocket science" for many users, because they are accustomed to programs that use proprietary file formats (and operating systems with no real multi-tasking or "cron" capabilities). 
as soon as free standards are adopted, users begin asking for customizations and are willing to pay for anything that will increase their productivity. 
moreover, free standards guarantee that customers are not making the wrong bet, as they won't ever be stuck with unusable data if the software market changes. 
while the conventional model of software distribution concentrates all knowledge in a few companies (or one of them), open standards leverage technical knowledge to anyone willing to learn. 
whereas a proprietary product can be supported only by a limited number of qualified consultants (whose number and quality is centrally managed), the number of consultants supporting a free software solution is virtually unlimited and the offer can quickly adapt to the request. 
in a world where computers are just tools to accomplish some other goals, easy customization and quick maintenance are basic requirements of power users. 
in my opinion, free software will quickly gain the trust it needs to be a real market phenomenon. 
as soon as you start to trust some free software products, you learn that they deserve more. 
gnu/linux fans must be ready to offer support in order to fulfill the upcoming need for consultants. 
viability for support companies. 
obviously, independent consultants don't cover all the needs of computer users. 
several activities can't be handled by individuals. 
red hat and s.u.s.e. 
are demonstrating that creating and maintaining a distribution can be a good source of revenue even when the product is freely redistributable. 
debian-based efforts are on the way, although less advanced—mainly because both red hat and s.u.s.e. 
bundled proprietary products with libre packages in order to survive while the market share was low, while debian has always been completely detached from proprietary products, and still is. 
in addition to "creating and packaging" or "collecting and packaging" jobs, companies can specialize in technical support, covering the situations where computer systems are of critical importance. 
big business realities using computer systems in their productive environment won't be satisfied with either the external consultant or the in-house technician. 
they need to rely on an external structure that guarantees round-the-clock operation of their technological aids. 
even if gnu/linux or any other operating system is demonstrated to be completely reliable, power users will need to rely on a support company as a form of insurance. 
the more important computers are for a production environment, the more people are willing to pay to be reassured that everything will go on working and to have someone "responsible" to call in case of any failure. 
such a "power user" support contract could also include a provision for refunds in case of down time. 
big support companies will be able to efficiently deal with it, and clients will be happy to pay high rates even if they never need to call for assistance. 
in short, i see no need for software companies to keep exclusive rights on their products; the support environment is big enough to offer good business positions in information technologies. 
those who want to be at the top could use some of the revenue to pay for free software development, thus gaining access to the best software before anyone else and associating their name with software products. 
as a matter of fact, this practice is already pursued by the big distributions. 
viability for education centers. 
needless to say, schools and universities have the best interest in teaching information technologies using free software tools. 
due to its technical superiority, free software environments have more to offer to the students, but also need more technical knowledge to be proficiently administered. 
i see no money saved here in choosing free operating systems over proprietary ones, but educational entities could better spend their money on hiring system administrators than on subsidizing some already-too-wealthy commercial software company. 
while my country, italy, is stuck with a few rules that offer more support for buying things rather than for employing people, other countries are already moving in the right direction—mexico and france, for example, have announced plans to use gnu/linux in their public schools. 
one more point leads toward free software in education: when students get jobs, they prefer to use tools they learned at school in order to minimize extra learning efforts. 
this fact should lead colleges to teach only those tools not owned by anyone—those that are libre. 
schools should teach proprietary software only if two conditions apply: no viable alternative is available, and the company that distributes such software pays the school for teaching its product. 
paying someone for a product in order to advertising it for him is definitely nonsense. 
social issues. 
a few social issues relate to choosing one software model over another one. 
although i mark them as social, they have economic implications as well. 
while free software may not be cheaper than proprietary software if you bill for your own time, some environments use different rates in converting time to money. 
most emerging countries have good intellectual resources but little money, and they usually have many not-so-new computers as well. 
proprietary operating systems are unaffordable for them, but free solutions are viable and productive. 
actually, the "halloween" document supports my point by underlining that "linux" is growing very fast in the far east. 
charity organizations usually have this same environment—little money and a good amount of human resources. 
this leads straight to the free software model for any it requirement. 
these ideas will probably suggest that free availability of information looks fairly leftist in spirit, as "information to the masses" looks quite similar to the old adage "power to the masses."
 what is usually ignored is the strong rightist flavour of the free software movement. 
the free software arena is fiercely meritocratic and a perfect environment for free competition, where the laws of the market ensure that only the best ideas and the best players survive. 
proprietary standards, on the other hand, tend to diminish competition by decreasing innovation and consolidating previous results. 
limits of the free software model. 
naturally, i'm aware that not every software package can easily be turned into free software. 
i'm not talking about office products—i'm confident some good projects will supply this need, sooner or later. 
rather, i'm talking about all environments where a strong competition exists for a product only loosely based on its software component. 
for example, industrial equipment might include a computer and some commodity hardware (a robot, custom i/o peripherals, plcs, etc.); the software application hosted in the computer is a minor part of the whole, but its features greatly affect the overall value of the equipment. 
producing and debugging such applications usually require huge investments; free redistribution of source code is thus prevented as a form of protection against competitors. 
another meaningful example is cell telephones. 
they include a lot of software, even though this software is almost invisible to the end user, who perceives the device as a telephone and not a computer. 
such software is the component that defines the overall capabilities of the device; because of its major functional role in the device it is strictly proprietary. 
unfortunately, i see no easy way to liberalize this type of code. 
although i don't care too much about cell phones (i don't use them :), i would really like to see free industrial applications because their technological content is usually worth reusing and adapting to new problems. 
[*] alessandro writes free software for a living and advocates free software for a mission. 
he hopes his upcoming child will keep off computers, recalling the good old times when such beasts where confined to their technical zoos. 
he reads e-mail at <rubini@gnu.org>, trying to reply to everyone. 
reprinted with permission of linux journal. 
software patents and literary patents. 
stallman when politicians consider the question of software patents, they are usually voting blind; not being programmers, they don't understand what software patents really do. 
they often think patents are similar to copyright law ("except for some details")—which is not the case. 
for instance, when i publicly asked patrick devedjian, then minister for industry in france, how france would vote on the issue of software patents, devedjian responded with an impassioned defense of copyright law, praising victor hugo for his role in the adoption of copyright. 
(the misleading term "intellectual property" promotes this confusion—one of the reasons it should never be used.) those who imagine effects like those of copyright law cannot grasp the disastrous effects of software patents. 
we can use victor hugo as an example to illustrate the difference. 
a novel and a modern complex program have certain points in common: each one is large, and implements many ideas in combination. 
so let's follow the analogy, and suppose that patent law had been applied to novels in the 1800s; suppose that states such as france had permitted the patenting of literary ideas. 
how would this have affected victor hugo's writing? 
how would the effects of literary patents compare with the effects of literary copyright? 
consider victor hugo's novel les mis&eacute;rables. 
since he wrote it, the copyright belonged only to him. 
he did not have to fear that some stranger could sue him for copyright infringement and win. 
that was impossible, because copyright covers only the details of a work of authorship, not the ideas embodied in them, and it only restricts copying. 
hugo had not copied les mis&eacute;rables, so he was not in danger from copyright. 
patents work differently. 
patents cover ideas; each patent is a monopoly on practicing some idea, which is described in the patent itself. 
here's one example of a hypothetical literary patent: claim 1: a communication process that represents in the mind of a reader the concept of a character who has been in jail for a long time and becomes bitter towards society and humankind. 
claim 2: a communication process according to claim 1, wherein said character subsequently finds moral redemption through the kindness of another. 
claim 3: a communication process according to claims 1 and 2, wherein said character changes his name during the story. 
if such a patent had existed in 1862 when les mis&eacute;rables was published, the novel would have conflicted with all three claims, since all these things happened to jean valjean in the novel. 
victor hugo could have been sued, and if sued, he would have lost. 
the novel could have been prohibited—in effect, censored—by the patent holder. 
now consider this hypothetical literary patent: claim 1: a communication process that represents in the mind of a reader the concept of a character who has been in jail for a long time and subsequently changes his name. 
les mis&eacute;rables would have been prohibited by that patent too, because this description too fits the life story of jean valjean. 
and here's another hypothetical patent: claim 1: a communication process that represents in the mind of a reader the concept of a character who finds moral redemption and then changes his name. 
jean valjean would have been forbidden by this patent too. 
all three patents would cover, and prohibit, the life story of this one character. 
they overlap, but they do not precisely duplicate each other, so they could all be valid simultaneously; all three patent holders could have sued victor hugo. 
any one of them could have prohibited publication of les mis&eacute;rables. 
this patent also could have been violated: claim 1: a communication process that presents a character whose given name matches the last syllable of his family name. 
through the name "jean valjean," but at least this patent would have been easy to avoid. 
you might think that these ideas are so simple that no patent office would have issued them. 
we programmers are often amazed by the simplicity of the ideas that real software patents cover—for instance, the european patent office has issued a patent on the progress bar, and a patent on accepting payment via credit cards. 
these patents would be laughable if they were not so dangerous. 
other aspects of les mis&eacute;rables could also have run afoul of patents. 
for instance, there could have been a patent on a fictionalized portrayal of the battle of waterloo, or a patent on using parisian slang in fiction. 
two more lawsuits. 
in fact, there is no limit to the number of different patents that might have been applicable for suing the author of a work such as les mis&eacute;rables. 
all the patent holders would say they deserved a reward for the literary progress that their patented ideas represent, but these obstacles would not promote progress in literature, they would only obstruct it. 
however, a very broad patent could have made all these issues irrelevant. 
imagine a patent with broad claims like these: a communication process structured with narration that continues through many pages. 
a narration structure sometimes resembling a fugue or improvisation. 
intrigue articulated around the confrontation of specific characters, each in turn setting traps for the others. 
narration that presents many layers of society. 
narration that shows the wheels of hidden conspiracy. 
who would the patent holders have been? 
they could have been other novelists, perhaps dumas or balzac, who had written such novels—but not necessarily. 
it isn't required to write a program to patent a software idea, so if our hypothetical literary patents follow the real patent system, these patent holders would not have had to write novels, or stories, or anything—except patent applications. 
patent parasite companies, businesses that produce nothing except threats and lawsuits, are booming nowadays. 
given these broad patents, victor hugo would not have reached the point of asking what patents might get him sued for using the character of jean valjean, because he could not even have considered writing a novel of this kind. 
this analogy can help nonprogrammers see what software patents do. 
software patents cover features, such as defining abbreviations in a word processor, or natural order recalculation in a spreadsheet. 
patents cover algorithms that programs need to use. 
patents cover aspects of file formats, such as microsoft's ooxml format. 
mpeg 2 video format is covered by 39 different us patents. 
just as one novel could run afoul of many different literary patents at once, one program can be prohibited by many different patents at once. 
it is so much work to identify all the patents that appear to apply to a large program that only one such study has been done. 
a 2004 study of linux, the kernel of the gnu/linux operating system, found 283 different us software patents that seemed to cover it. 
that is to say, each of these 283 different patents forbids some computational process found somewhere in the thousands of pages of source code of linux. 
at the time, linux was around one percent of the whole gnu/linux system. 
how many patents might there be that a distributor of the whole system could be sued under? 
the way to prevent software patents from bollixing software development is simple: don't authorize them. 
this ought to be easy, since most patent laws have provisions against software patents. 
they typically say that "software per se" cannot be patented. 
but patent offices around the world are trying to twist the words and issuing patents on the ideas implemented in programs. 
unless this is blocked, the result will be to put all software developers in danger. 
the first version of this article was published in the guardian, of london, on june 23, 2005. 
it focused on the proposed european software patent directive. 
this essay is published in free software, free society: the selected essays of richard m. stallman. 
software patents — obstacles to software development. 
this is the transcription of a talk presented by richard m. stallman on march 25, 2002, at the university of cambridge computer laboratory, organized by the foundation for information policy research. 
transcript (original version) and audio recording by nicholas hill. 
html editing and links by markus kuhn and gnu webmasters. 
you might have been familiar with my work on free software. 
this speech is not about that. 
this speech is about a way of misusing laws to make software development a dangerous activity. 
this is about what happens when patent law gets applied to the field of software. 
it's not about patenting software. 
that's a very bad way, a misleading way to describe it, because it's not a matter of patenting individual programs. 
if it were, it would make no difference, it would be basically harmless. 
instead, it's about patenting ideas. 
every patent covers some idea. 
software patents are patents that cover software ideas, ideas that you would use in developing software. 
that's what makes them a dangerous obstacle to all software development. 
table of contents. 
differences between copyrights and patents the patent system how a developer can deal with patents avoiding the patent licensing the patent overturning the patent in court specificities of the software field addressing the problem of software patents in public policies footnotes differences between copyrights and patents. 
you may have heard people use a misleading term "intellectual property."
 this term, as you can see, is biased, because it makes an assumption: whatever it is you are talking about, the way to treat it is as a kind of property, which is one among many alternatives. 
this term "intellectual property" pre-judges the most basic question in whatever area you are dealing with. 
that's not conducive to clear and open minded thinking. 
but there is an additional problem which has nothing to do with promoting any one opinion. 
it gets in the way of understanding even the facts. 
the term "intellectual property" is a catch-all. 
it lumps together various completely disparate areas of law, such as copyrights and patents, which are completely different from copyrights (every detail is different), and trademarks, which are even more different, and various other things more or less commonly encountered. 
none of them has anything in common with any of the others. 
their origins, historically, are completely separate. 
the laws were designed independently. 
they cover different areas of life and activities, and the public policy issues they raise are completely unrelated. 
so, if you try to think about them by lumping them together, you are guaranteed to come to foolish conclusions. 
whatever they might be, there is literally no sensible or intelligent opinion you can have about "intellectual property."
 so, if you want to think clearly, don't lump them together. 
think about copyrights, and then think about patents. 
learn about copyright law, and separately, learn about patent law. 
to give you some of the biggest differences between copyrights and patents: copyrights cover the details of expression of a work; copyrights don't cover any ideas. 
it's a {legal fault} to consider copyrights as covering any idea. 
but patents only cover ideas and the use of ideas. 
copyrights happen automatically. 
patents are issued by a patent office in response to an application. 
it costs a lot of money. 
and it costs even more paying the lawyers to write the application than it costs to actually apply. 
it takes typically some years for the application to get considered, even though patent offices typically do an extremely sloppy job of considering them. 
copyrights last tremendously long. 
nowadays, in some cases they can last as long as 150 years, whereas patents last for 20 years, which is long enough that you can outlive them, but still quite long by a timescale of a field such as software. 
think back 20 years ago; the pc was a new thing. 
imagine being constrained to develop software using only the ideas that were known in 1982. 
copyrights cover copying. 
if you write a novel that turns out to be word-for-word the same as gone with the wind, but you can prove you never saw gone with the wind, and that you wrote it on your own, that would be a defense to any accusation of copyright infringement. 
but a patent is an absolute monopoly on using an idea. 
even if you could prove that you had the idea on your own, it would be entirely irrelevant if the idea is patented by somebody else. 
i hope you will basically just forget about copyrights for the rest of this talk, because this talk is about patents and you should never lump together copyrights and patents. 
your understanding of these legal issues would be about like what would happen in your understanding of practical chemistry if you confused water and ethanol. 
the patent system. 
when you hear people describe the patent system, they usually describe it from the point of view of somebody who is hoping to get a patent: what it would be like for you to get a patent; what it would be like for you to be walking down the street with a patent in your pocket, so that every so often you can pull it out and point it out at somebody and say "give me your money!"
 there is a reason for this bias, which is that most of the people who will tell you about this patent system have a stake in it, so they want you to like it. 
there is another reason: the patent system is a lot like a lottery because only a tiny fraction of patents actually bring any benefit to those who hold the patents. 
in fact, the economist once compared it to a time consuming lottery. 
if you have seen ads for lotteries, they always invite you to think about winning. 
they don't invite you to think about losing, even though losing is far more likely. 
it's the same with ads for the patent system. 
they always invite you to think about being the one who wins. 
to balance this bias, i am going to describe the patent system from the point of view of its victims. 
that is from the point of view of somebody who wants to develop software but is forced to contend with a system of software patents that might result in getting sued. 
so, what's the first thing you are going to do after you have had an idea of what kind of program you are going to write? 
the first thing you might want to try to do to deal with the patent system is find out what patents may cover the program you want to write. 
this is impossible. 
the reason is that some of the patent applications that are pending are secret. 
after a certain amount of time they may get published, like 18 months. 
but that's plenty of time for you to write a program and even release it, not knowing that there is going to be a patent and you are going to get sued. 
this is not just academic. 
in 1984, the compress program was written (it was a program for data compression.) at the time, there was no patent on the lzw compression algorithm which it used. 
then in 1985, the us issued a patent on this algorithm, and over the next few years, those who distributed the compress program started getting threats. 
there was no way that the author of compress could have realized he was likely to get sued. 
all he did was use an idea that he found in a journal, just like programmers have always done. 
he hadn't realized that you could no longer safely use ideas that you found in a journal. 
but let's forget about that problem… the issued patents are published by the patent office, so you can find the whole long list of them and see exactly what they say. 
of course, you couldn't actually read that whole list as there are too many of them. 
in the us, there are hundreds of thousands of software patents, and there is no way you could keep track of what they are all about. 
so you'd have to try to search for relevant ones. 
some people say that should be easy in these modern days of computers. 
you could search for keywords and so on. 
well, that will work to a certain extent. 
you will find some patents in the area. 
you won't necessarily find them all, however. 
for instance, there was a software patent which, i think, may have expired by now, on natural order recalculation in spreadsheets. 
this means basically that, when you make certain cells depend on other cells, it always recalculates everything after the things it depends on, so that after one recalculation everything is up to date. 
the first spreadsheets did their recalculation top-down, so if you made a cell depend on a cell that was lower down, and you had a few such steps, you had to recalculate several times to get the new values to propagate upwards. 
you were supposed to have things depend on cells above them, you see. 
then somebody realized, "why don't i just do the recalculation. 
everything gets recalculated after the things it depends on. 
do it in the right order, and they will all be up to date."
 this algorithm is known as topological sorting. 
the first reference to it i could find was in 1963. 
the patent covered several dozen different ways you could implement topological sorting, but you wouldn't have found this patent by searching for "spreadsheet," because it didn't mention that word. 
you couldn't have found it to "natural order" or "topological sort," because it didn't have any of those terms in it. 
in fact, it was described as a "method of compiling formulas into object code."
 i think when i first saw it, i thought it was the wrong patent. 
but let's suppose that you got a list of patents. 
so you want to see now what you are not allowed to do. 
you try studying these patents; well, you discover it's very hard to understand them, because they are written in tortuous legal language, whose meaning is very hard to understand. 
in fact, things that patent offices say often don't mean what they seem to mean. 
there was an australian government study of the patent system in the 1980's. 
it concluded that, aside from international pressure, there was no reason to have a patent system—it did no good for the public—and recommended abolishing it, if not for international pressure. 
one of the things they cited was that engineers don't try reading patents to learn anything, because it is too hard to understand them. 
they quoted one engineer saying "i can't recognize my own inventions in patenteese."
 [laughs] this is not just theoretical. 
around 1990, a programmer named paul heckel sued apple, claiming that hypercard infringed a couple of his patents. 
when he first saw hypercard, he didn't think it had anything to do with his "inventions."
 it didn't look similar. 
but his lawyer told him that you could read the patents as covering part of hypercard, so he decided to then attack apple. 
when i gave a speech about this at stanford, he was in the audience and he said "that's not true, i just didn't understand the extent of my protection!"
 [laughs]  and i said, "yes, that's what i said!"
 [laughs] so, in fact, you are going to spend a lot of time talking with lawyers to figure out what these patents prohibit you from doing. 
and ultimately, they are going to say something like this: "if you do something in here, you are sure to lose; if you do something in here, there is a substantial chance of losing, and if you really want to be safe, stay out of this area. 
and, by the way, there is a sizable element of chance in the outcome of any lawsuit."
 [chuckle in the audience] how a developer can deal with patents. 
now that you have a predictable terrain for doing business, [chuckle in the audience] what are you going to do? 
well, there are three approaches that you might try, any of which is applicable in some cases. 
they are: avoiding the patent, licensing the patent, or overturning it in court. 
let me describe these three approaches and what makes them workable or unworkable. 
1. avoiding the patent that means don't use the idea that the patent covers. 
this can be easy or hard, depending on what that idea is. 
in some cases, a feature is patented. 
then you avoid the patent by not implementing that feature. 
then it just matters how important is that feature. 
in some cases, you can live without it. 
a while ago, the users of the word processor xywrite got a downgrade in the mail. 
the downgrade removed a feature which allowed you to predefine abbreviations: when you typed an abbreviation followed by a punctuation character, it would immediately replace itself by some expansion. 
so that way you could define the abbreviation for some long phrase, type the abbreviation, and then the long phrase would be in your document. 
they wrote to me about this because they knew that the emacs editor has a similar feature. 
in fact, it had it since the 70's. 
this was interesting because it showed me that i've had at least one patentable idea in my life. 
[laughs]  i knew it was patentable because somebody else patented it afterward! 
actually, they had tried these various approaches. 
at first they tried negotiating with the patent holder, who turned out not to negotiate in good faith. 
then they looked at whether they could have a chance of overturning the patent. 
what they decided to do was take out the feature. 
you can live without this feature. 
if the word processor lacks only this feature, maybe people will still use it. 
but as various features start getting hit, eventually you end up with a program that people think is not very good, and they are likely to reject it. 
that's a rather narrow patent on a very specific feature. 
but what do you do with the british telecom patent on traversing hyperlinks together with dial-up access? 
traversing hyperlinks is absolutely essential to a major use of computers these days. 
and dial-up access is also essential. 
how do you do without this feature, which, by the way, isn't even one feature, it is really just a combination of two, just arbitrarily juxtaposed. 
it is rather like a patent on having a sofa and television in the same room. 
[laughs] sometimes the idea that's patented will be so broad and basic that it's very hard, that it basically rules out an entire field. 
for instance, the idea of public key encryption, which was patented in the us. 
the patent expired in 1997. 
until then, it largely blocked the use of public key encryption in the us. 
a number of programs that people started to develop got crushed, and were never really available because the patent holders threatened them. 
then, one program got away: the program pgp, which initially was released as free software. 
apparently, the patent holders, by the time they got around to attacking, realized they might get too much bad publicity. 
so they imposed restrictions, making it for noncommercial use only, which meant it couldn't catch on too much. 
so they greatly limited the use of public key encryption for a decade or more. 
there was no way around that patent. 
there was nothing else you could do like that. 
sometimes a specific algorithm gets patented. 
for instance, there is a patent on an optimized version of the fast fourier transform. 
it runs about twice as fast. 
you can avoid that by using the ordinary fft in your program. 
that part of your program will take twice as long. 
maybe that doesn't matter. 
maybe that's a small enough part of the program's running time that, if it is twice as slow, you won't really notice. 
or maybe that means your program won't run at all, because it will take twice the real time to do its job. 
the effects vary. 
in some cases, you can find a better algorithm. 
that may or may not do you any good. 
because we couldn't use compress, in the gnu project we started looking for some other algorithm for data compression. 
somebody wrote to us saying he had one. 
he had written a program and he decided to contribute it to us. 
we were going to release it, and just by chance i happened to see a copy of the new york times that happened to have the weekly patent column in it. 
i didn't see a copy of the times more than once every few months. 
so i looked at it, and it said that somebody had got a patent for "inventing a new method of compressing data."
 i figured i better take a look at this patent. 
i got a copy, and it turned out to cover the program that we were just a week away from releasing. 
so that program died before it was born. 
later on we did find another algorithm which was unpatented. 
that became the program gzip, which is now effectively the de-facto standard for data compression. 
as an algorithm to use in a program for data compression, it was fine. 
people who wanted to do data compression could use gzip instead of compress. 
but the same patented lzw compression algorithm was also used in image formats such as gif format. 
and there, because the job that people wanted to do was not simply "compress my data," but "make an image that people can display with their software," it turned out to be very hard to switch over to a different algorithm. 
in fact, we have not been able to do it in 10 years! 
yes, people used the new gzip algorithm to define another image format, once people started getting threatened with lawsuits for using gif files. 
but when we started saying to people "hey, stop using gif files, switch over to this!"
 people said, "we can't switch. 
the browsers don't support the new format yet."
 and the browser developers said "we're not in a hurry about this. 
after all, nobody is using this file format."
 [laughs] in effect, society had so much inertia in the use of that particular format [gif] that we have not been able to get people to switch. 
essentially, the community's use of the gif format is still pushing sites into using gif format, with the result that they are vulnerable to these threats. 
in fact, the situation is even more bizarre, because there are actually two patents covering the lzw compression algorithm. 
the patent office couldn't even tell that they were issuing two patents on the same thing. 
they couldn't keep track. 
there is a reason for this. 
it takes a while of study of these two patents to see that they really cover the same thing. 
if they were patents on some chemical process, it would be much easier. 
because you could see what substances were being used, what the inputs were, what the outputs were, which physical actions are being taken. 
no matter how they are described, you'd see what they were and then you would see that they are similar. 
but when something is purely mathematical, you could have various ways to describe it, which are a lot more different. 
they are not superficially similar. 
you have to really understand them to see they are talking about the same thing. 
in the patent office, they don't have time. 
the us patent office, as of a few years ago, was spending 17 hours on the average per patent. 
this is not long enough to think carefully about them. 
so, of course they make mistakes like that. 
in fact, i told you about the program that died before it was born. 
well, that algorithm also has had two patents issued for it in the us. 
apparently, it is not that unusual. 
so, avoiding the patents may be easy {or it} may be impossible; it may be easy but it makes your program useless. 
it varies depending on the situation. 
here is another point i should mention, that sometimes a company or consortium can make a format or protocol a de-facto standard. 
then, if that format or protocol is patented, that's a real disaster for you. 
there are even official standards that are restricted by patents. 
there was a big political uproar last september when the world wide web consortium was proposing to start adopting standards that were covered by patents. 
the community objected, and they reversed themselves. 
they went back to insisting that patents had to be freely implementable by anyone, and that standards had to be free for anyone to implement. 
that is an interesting victory. 
i think it's the first time any standards body has made that decision. 
it's normal for standards bodies to be willing to put something in a standard which in fact is restricted by patents, and people are not allowed to go ahead and implement it freely. 
we need to go to other standards bodies and call on them to change their rules. 
2. licensing the patent the second possibility is, instead of avoiding the patent, to get a license for the patent. 
this is not necessarily an option. 
the patent holder does not have to offer you a license. 
it's not required. 
ten years ago, the league for programming freedom got a letter asking for help from somebody whose family business was making gambling machinery for casinos, and they used computers back then. 
he received a threat from another company that said, "we have the patents. 
you are not allowed to make these things. 
shut down."
 i looked at that patent. 
it covered having a number of computers on a network for playing games, such that each computer supported more than one game and allowed you to be playing more than one game at a time. 
you will find the patent offices really think that there is something brilliant about doing more than one of anything. 
[laughs]  they don't realize that, in computer science, that's the most obvious way to generalize anything. 
you did it once. 
now you can do it any number of times, make a subroutine. 
they think that if you do anything twice instead of once, you made a new invention. 
that somehow means you are brilliant and nobody can possibly argue with your right to boss them around and restrict them. 
anyway, he wasn't offered a license, and he had to shut down. 
he couldn't even afford really to go to court. 
i would say that particular patent was an obvious idea. 
it's possible that a judge might have agreed. 
we will never know, though, because he could not afford to go to court. 
however, a lot of patent holders do offer licenses. 
they often charge a lot of money for that, though. 
the company licensing the natural order recalculation patent was demanding 5% of the gross sales of every spreadsheet in the us. 
i am told that was the cheap pre-lawsuit price. 
if you actually made them sue you and they won, they'd demand more. 
you might be able to afford that 5% for licensing this one patent, but what if you need to license 20 different patents to make the program? 
then all the money you take in has to go out to them. 
what if you need to license 21 patents? 
people in business told me that, practically speaking, two or three of them would make any business unfeasible. 
but there is a situation where licensing patents is a very good solution. 
that is if you are a multinational mega-corporation. 
because these companies own a lot of patents, and they cross-license with each other. 
that way, they escape most of the harm that the patent system does and they only get the good. 
ibm published an article in think magazine—i believe it was issue no. 
5 of 1990—on ibm's patent portfolio, which said that ibm got two kinds of benefits from its 9000 us patents. 
i believe the number is larger today. 
these were (1) collecting royalties, and (2) getting access to the patents of others. 
they said that the latter benefit was an order of magnitude greater. 
so, the benefit that ibm got from being allowed to use the ideas that were patented by others was 10 times the direct benefit ibm could get from licensing patents. 
what does this really mean? 
what is the benefit that ibm gets from this access to the patents of others? 
it's basically the benefit of being excused from the trouble that the patent system can cause you. 
the patent system is like a lottery. 
what happens with any given patent could be nothing, could be a windfall for some patent holder and a disaster for everyone else. 
but ibm being so big, for them it averages out. 
they get to measure the average harm and good of the patent system. 
for them, the trouble would have been 10 times the good. 
i say would have been because ibm, through cross-licensing, avoids experiencing that trouble. 
that trouble is only potential. 
it doesn't really happen to them. 
but when they measure the benefits of avoiding that trouble, they estimate it as 10 times the value of the money they collect from their patents. 
this phenomenon of cross-licensing refutes a common myth, the myth of the starving genius. 
the myth that patents "protect" the "small inventor."
 those terms are propaganda terms. 
you shouldn't use them. 
the scenario is like this: suppose there is a brilliant designer of whatever, who has spent years by himself, starving in an attic, designing a new wonderful kind of whatever, and now wants to manufacture it. 
isn't it a shame the big companies are going to go into competition with him, take away all the business and he'll "starve"? 
well, i have to point out that people in high tech fields are not generally working on their own, and that ideas don't come in a vacuum—they are based on the work of others—and that these people have pretty good chances of getting a job if they need to these days. 
so this scenario, the idea that this brilliant idea came from this one person working alone, is unrealistic, and the idea that he is in danger of starving is unrealistic. 
but it is conceivable that somebody could have an idea, and this idea, maybe together with 100 or 200 other ideas, could be the basis of making some kind of product, and that big companies might want to compete with him. 
so let's see what happens if he tries to use a patent to stop them. 
he says, "oh no, ibm. 
you can't compete with me. 
i've got this patent."
 and ibm says, "let's see. 
let's look at your product. 
hmmm. 
i've got this patent and this one and this one and this one and this one and this one, which parts of your product infringe. 
if you think you can fight against all of them in court, i'll just go back and look for some more. 
so, why don't you cross-license with me?"
 and then this brilliant small [laughs] inventor says, "well, ok, i'll cross-license."
 and now he can go back and make these wonderful whatever it is, and so can ibm. 
ibm now gets access to his patent, and gets the right to compete with him, which means that this patent didn't "protect" him at all. 
the patent system doesn't really do that. 
the mega-corporations avoid, for the most part, the harm of the patent system. 
they see mainly the good side. 
that's why they want to have software patents. 
they are the ones who will benefit from it. 
but if you are really a small inventor, or work for a small company, the small company is not going to be able to do this. 
they try. 
the problem is that they cannot get enough patents to do this. 
you see, any given patent is pointing in a certain direction. 
so, if a small company has patents pointing there, there, and there [showing left side], and somebody over there [showing right side] points a patent at them and says "give me your money," they are helpless, because they've got patents pointing there or near [showing left side], but not there [showing right side]. 
ibm can do it, because with these 9000 patents, they are pointing everywhere. 
no matter where you are, there is an ibm patent pointing at you, probably. 
so, ibm can always make you cross-license, almost always. 
but the small companies only occasionally can make someone cross-license. 
they will say they want patents for defensive purposes, but they won't get enough to be able to defend themselves. 
there are cases where even ibm cannot make someone cross-license. 
that is when there is a company whose sole business is taking a patent and squeezing money out of people. 
the company that had the natural order recalculation patent was exactly such a company. 
their sole business was to threaten to sue people and collect money from people who were really developing something. 
there are no patents on legal procedures. 
[laughs]  i guess the lawyers sort of understand what a pain it would be to have to deal with the patent system themselves. 
the result is that there is no way you can get a patent to make that company, refac, cross-license with you. 
so they go around squeezing everyone. 
but i guess the companies like ibm figure that's part of the price of doing business so they can live with it. 
so that's the possibility of licensing a patent, which may or may not be possible. 
and you may or may not be able to afford it. 
3. overturning the patent in court supposedly, in order to be patented, something has to be new, useful and unobvious. 
that's the language used in the us. 
i think other countries have different language which is pretty much equivalent to it. 
of course, when the patent office gets into the game and they start interpreting new and unobvious, "new" turns out to mean "we don't have it in our files," and "unobvious" tends to mean "unobvious to somebody with an iq of 50."
 somebody who studies most of the software patents issued in the us—or at least he used to; i don't know if he can still keep up with them—said that 90% of them wouldn't pass the crystal city test, which meant, if the people in the patent office went outside to the news stand and got some computer magazines, they would see that these ideas were already known. 
the patent office does things that are so obviously foolish, you wouldn't even have to know the state of the art to see they are foolish. 
this is not limited to software. 
i once saw the famous harvard mouse patent, which was obtained after harvard genetically engineered a strain of mouse with a cancer causing gene. 
the cancer causing gene was already known, and was inserted using known techniques into an already existing strain of mouse. 
the patent they got covered inserting any cancer causing gene into any kind of mammal, using any method whatsoever. 
you don't have to know anything about genetic engineering to realize that is ridiculous. 
but i am told that this overclaiming is normal practice, and that the us patent office sometimes invited patent applicants to make their claims broader. 
basically, make the claims broader until you think they are running into something else that's unambiguous prior art. 
see how much land grab in mental space you can get away with. 
when programmers look at a lot of software patents, they say, "this is ridiculously obvious!"
 patent bureaucrats have all sorts of excuses to justify ignoring what programmers think. 
they say "oh! 
but you have to consider it in terms of the way things were 10 or 20 years ago."
 then they discovered that if they talk something to death then you can eventually lose your bearings. 
anything can look unobvious if you tear it apart enough, analyze it enough. 
you simply lose all standard of obviousness, or at least lose the ability to justify any standard of obvious or unobvious. 
then, of course, they describe the patent holders as brilliant inventors, all of them. 
therefore we can't question their entitlement to power over what we can do. 
if you go to court, the judges are likely to be a little more stringent about the idea of what is obvious or not. 
but the problem is it costs millions of dollars to do that. 
i heard of one patent case, the defendant i remember was qualcomm, and i believe the ruling ultimately was 13 million dollars, of which most went to pay the lawyers on both sides. 
there were a few million dollars left over for the plaintiff, because they lost. 
to a large extent, the question of the validity of a patent will depend on historical accidents. 
lots of historical accidents, such as precisely what was published when, and which of those things somebody manages to find, which of them didn't get lost, the precise dates, and so on. 
so it's many historical accidents that determine whether the patent is valid. 
in fact, it is a weird thing the british telecom following hyperlinks together with phone access patent, was applied for, i think, in 1975. 
i think it was in 1974 that i developed the info package for the first time. 
the info package allows you to traverse hyperlinks, and people did use telephones to dial up and access the system. 
so in fact, i produced a piece of prior art for that patent. 
that's the second patentable idea i've had in my life, but i don't think i have any proof of that. 
i didn't think this was interesting enough to publish it. 
after all, the idea of following hyperlinks, i got that from a demo of engelbart's editor. 
he is the one who had an idea that was interesting to publish. 
i called it "poor man's hypertext," because i had to implement it in the context of teco. 
it wasn't as powerful as his hypertext, but it was at least useful for browsing documentation, which was all it was meant for, and as for there being dial-up access to the system, well, there was, but it didn't occur to me that the one had any particular thing to do with the other. 
i wasn't going to try to publish a paper saying "oh! 
i implemented this poor man's hypertext, and guess what! 
there are dial-up lines on the computer too!"
 [laughs]  i suspect there is no way to tell precisely on what dates i implemented this. 
and was it published in any sense? 
well, we invited guests to come in across the arpanet and log in on our machine, so they could have browsed documentation using info, and seen the thing. 
and if they had asked us, they would have found we have dial-up access. 
but as you can see, historical accident determines whether you've got prior art. 
now of course, there is a publication made by engelbart about hypertext, which they are going to show. 
i don't think it says anything about having dial-ups on the computer however. 
so, whether it will suffice is not clear. 
so, this is an option, the possibility of going to court to overturn the patent. 
but, because of the expense, it is often out of the question even if you can find solid prior art that ought to be sufficient to overturn the patent. 
as a result, an invalid patent, a patent that nominally shouldn't have existed (but in fact lots and lots of them do) is a dangerous weapon. 
if somebody attacks you with an invalid patent, that can really cause a lot of trouble for you. 
you might be able to bluff them away by showing them the prior art. 
it depends whether they can get scared off that way or they might think "well, you are just bluffing, we figure you can't really go to court. 
you can't afford it, so we'll sue you anyway."
 all of these three possibilities are things that sometimes you can manage to use, but often you can't. 
so you have to face patent after patent after patent. 
each time you may be able to find one of these three possibilities you can use, then there is another patent, then another, and another. 
it gets like crossing a minefield. 
each step you take, each design decision, probably won't step on a patent. 
so you can take a few steps and, probably, there won't be an explosion. 
but the chance that you will get all the way through the minefield and get to develop the program you wanted to develop without ever stepping on a patent gets less and less as the program gets bigger. 
specificities of the software field. 
now, people used to say to me, "well, there are patents in other fields, why should software be exempt?"
 note the bizarre assumption in there that somehow we are all supposed to suffer through the patent system. 
it is like saying "some people get cancer. 
why should you be exempt?"
 [laughs]  as i see it, each person who doesn't get cancer is good. 
but there is, behind that, a less biased question, which is a good question, which is: is software different from other fields? 
should patent policy be different in different fields? 
and if so, why? 
let me address that question: patents relate to different fields differently because in various fields patents relate to products differently. 
on the one extreme we have pharmaceuticals, where a given chemical formula would be patented, so that patent covers one and only one product. 
some other product wouldn't be covered by the existing patent. 
if there is to be a patent for this new product, the patent holder would be whoever developed the new product. 
that fits in with the naive idea of the patent system that we have, that, if you are designing a new product, you are going to get "the patent," the idea that there is one patent per product and that it covers the idea of that product. 
in some fields that's closer to being true. 
in other fields it's farther from being true. 
software is at the opposite extreme. 
this is because software packages are very big, usually, and they use many different ideas in a new combination. 
if the program is new, it's not just copied, then it's probably using a different combination of ideas combined, of course, with newly written code, because you can't just magically say the names of these ideas and have them work. 
you have to implement them all. 
you have to implement them all in that combination. 
the result is that, when you write a program, you are using lots of different ideas, any one of them might be patented by somebody. 
a pair of them might be patented as a combination by somebody. 
there might be several different ways of describing one idea, which might be patented by various different people. 
so there are possibly thousands of things, thousands of points of vulnerability in your program, which might be patented by somebody else already. 
this is why software patents tend to obstruct the progress of software—the work of software development. 
if it were one patent-one product, then these patents wouldn't obstruct the development of products, because if you developed a new product it wouldn't be patented by somebody else already. 
but when one product corresponds to many different ideas combined, it becomes very likely that your new product is going to be patented by somebody else already. 
in fact, there is economic research now showing just how imposing a patent system on a field where there is incremental innovation can retard progress. 
you see, the advocates of software patents say "well yes, there may be problems, but more important than any problems, the patents must promote innovation, and that is so important it doesn't matter what problems they cause."
 of course, they don't say that out loud because it is ridiculous, but implicitly they want you to believe that, as long as it promotes progress, that outweighs any possible cost. 
but actually, there is no reason to believe it does promote progress. 
we now have a model showing precisely how patents can retard progress. 
the case where that model can fit describes the software field pretty well: incremental innovation. 
why is software on that extreme of the spectrum? 
the reason is that in software we are developing idealized mathematical objects. 
you can build a complicated castle and have it rest on a thin line, and it will stay up because it doesn't weigh anything. 
in other fields, people have to cope with the perversity of matter—of physical objects. 
matter does what it is going to do. 
you can try to model it, and if the actual behavior doesn't fit the model, tough on you. 
because the challenge is to make physical objects that really work. 
if i wanted to put an if statement inside a while statement, i don't have to worry about whether the if statement will oscillate at a certain frequency and rub against the while statement and eventually they will fracture. 
[laughs]  i don't have to worry whether it will oscillate at a certain higher frequency and induce a signal in the value of some other variable. 
i don't have to worry about how much current that if statement will draw, whether it can dissipate the heat there inside that while statement. 
whether there will be a voltage drop across the while statement that will make the if statement not function. 
i don't have to worry that if i run this program in a salt-water environment, that the salt water might get in between the if statement and the while statement and cause corrosion. 
i don't have to worry, when i refer to the value of a variable, whether i am exceeding the fan-out limit by referring to it too many times. 
i don't have to worry, when i refer to the variable, how much capacitance it has and whether there has been sufficient time to charge up the value. 
i don't have to worry, when i write the program, about how i'm going to physically assemble each copy, and whether i can manage to get access to put that if statement inside the while statement. 
and i don't have to worry about how i'm going to gain access in case the if statement breaks, to remove it and replace it with a new one. 
[laughs] so many problems that we don't have to worry about in software. 
that makes it fundamentally easier. 
it's fundamentally easier to write a program than to design a physical object that's going to work. 
this might seem strange because you have probably heard people talking about how hard software is to design, and how this is a big problem and how we are going to solve it. 
they are not really talking about the same question i am. 
see, i'm comparing physical and software systems of the same complexity, the same number of parts. 
i'm saying the software system is much easier to design than the physical system. 
but the intelligence of people in these various fields is the same, so what do we do when we are confronted with an easy field? 
we just push it farther! 
we push our abilities to the limit. 
if systems of the same size are easy, let's make systems which are ten times as big, then it will be hard! 
[laughs]  that's what we do! 
we make software systems far bigger in terms of number of parts than physical systems. 
a physical system whose design has a million different pieces in it is a mega project. 
a computer program whose design has a million pieces in it, that's maybe 300,000 lines, a few people will write that in a couple of years. 
that's not particularly a giant program. 
gnu emacs now has several million pieces in its design i think, because it has a million lines of code. 
this was a project done with essentially no funding whatsoever. 
mostly done by people in their spare time. 
there is another big saving. 
if you designed a physical product, the next thing you have to do is design the factory to make it. 
to build this factory may cost millions or tens of millions, whereas to make copies of the program, you just have to type copy. 
the same copy command will copy any program. 
you want copies on cd, fine. 
you burn a master cd and send it off to a cd plant. 
they will use the same equipment that will copy any contents on a cd. 
you don't have to build a factory to make this product. 
there is tremendous simplification and tremendous reduction in costs of designing things. 
the result is, say for an automobile company, if they are going to spend 50 million dollars to build a factory, to build a new model of auto, they can hire some lawyers to cope with some patent license negotiations. 
they could even cope with a lawsuit if they wanted to. 
designing a program of the same complexity might cost 50 thousand dollars, or 100 thousand dollars. 
by comparison, the cost of dealing with the patent system is crushing. 
actually designing a program with the same complexity as the mechanical design of an auto, that's probably a month work. 
how many parts does an auto have… that is if it is an auto that doesn't have computers in it?[1] there are not that many parts, you see. 
which is not to say designing a good one is easy, but just that there are not that many different things in it. 
the result is, software really is different from other fields because we are working with mathematical stuff. 
designing something is far, far easier. 
and the result is we regularly make systems that are much, much larger, and do so with just a few people. 
the result is that the patent system then, instead of being close to "one product, one patent," we are in a system where one product involves many, many ideas that could be patented already. 
the best way to explain it by analogy is with symphonies. 
a symphony is also long and has many notes in it, and probably uses many musical ideas. 
imagine if the governments of europe in the 1700's had decided they wanted to promote the progress of symphonic music by establishing a european musical patent office that would give patents for any kind of musical idea that you could state in words. 
then imagine it is around 1800 and you are beethoven and you want to write a symphony. 
you are going to find that getting your symphony to be legal, so that it doesn't infringe any patents, is going to be harder than writing a good symphony. 
when you complain about this, the patent holders would say "ah beethoven, you are just bitching because you have no ideas of your own. 
all you want to do is rip off our inventions."
 beethoven, as it happens, had a lot of new musical ideas, but he had to use a lot of existing musical ideas in order to make recognizable music, in order to make music that listeners could possibly like, that they could recognize as music. 
nobody is so brilliant that he can re-invent music and make something that people want to listen to. 
pierre boulez said he would try to do that, and… who listens to pierre boulez? 
[laughs] nobody is so brilliant he can re-invent all computer science, completely new. 
if he did, he'd make something that the users would find so strange that they wouldn't want to use it. 
if you look at a word processor today, you'll find, i think, hundreds of different features. 
if you develop a nice new innovative word processor, that means there are some new ideas in it, but there must be hundreds of old ideas in it. 
if you are not allowed to use them, you cannot make an innovative word processor. 
because the work of software development is so big, the result is that we don't need any artificial scheme to incentivize new ideas. 
you just have people writing software and they will have some new ideas. 
if you want to write a program, you want to make it good. 
some ideas will come to you, and some of them you will see a way to use. 
what used to happen—because i was in the software field before there were software patents—was most of the developers would publish any new ideas that they thought were noteworthy, that they thought they might get any credit or respect for. 
the ideas that were too small or not impressive enough, they would not publish because that would be silly. 
now the patent system is supposed to encourage disclosure of ideas. 
in fact, in the old days, nobody kept the ideas secret. 
they kept the code secret, it's true. 
the code, after all, represented the bulk of the work. 
they would typically keep the code secret and publish the ideas. 
that way, the employees could get some credit and feel good; you know, they were allowed to publish papers. 
after software patents, they still kept the code secret and they patented the ideas. 
so, in fact, disclosure has not been encouraged in any meaningful sense. 
the same things are kept secret now as were kept secret before, but the ideas, which used to be published so we could use them, now are likely to be patented and off-limits for 20 years. 
addressing the problem of software patents in public policies. 
what can a country do to change this? 
how should we change the policy to solve this problem? 
there are two places you can attack it. 
one is the place where patents are being applied for and issued, in the patent office. 
and the other is when patents are being applied—that is, the question of what does a patent cover. 
changing the criteria for issuing patents, or simply keeping a good criteria for issuing patents, can work in a country which has not authorized software patents before; for instance, for the most part, in europe. 
simply to clearly re-enforce the european patent office's rules which say that software is not patentable. 
this is a good solution for europe. 
europe is now considering a directive on software patents. 
the directive i suppose may be broader than that but one of its important implications is for software patents. 
simply by modifying this to say software ideas cannot be patented will keep the problem out of europe for the most part, except for some countries that may have admitted the problem on their own—unfortunately, one of them being the uk, unfortunately for you. 
that approach won't work in the us. 
the reason is that the us already has large numbers of software patents, and any change in the criteria for issuing patents won't get rid of the existing ones. 
however in fact, these patents are not officially labeled as software patents. 
i say software patents, but what do i really mean? 
i mean patents that might potentially apply to software, that might potentially get you sued for writing software. 
the patent office doesn't divide patents into software patents and other patents. 
so, in fact, any patent might conceivably get you sued for writing software if it could apply to some software. 
so, in the us, a solution would have to be done through changing the applicability, the scope of patents, saying that a pure software implementation, running on general purpose computer hardware which does not in itself infringe the patent, is not covered by any patent and you can't be sued for it. 
that's the other kind of solution. 
but the first kind of solution, the solution that operates on what kinds of patents can be valid is a good solution for europe to use. 
when the us started having software patents, there was no political debate. 
in fact, nobody noticed. 
the software field, for the most part, didn't even notice. 
there was a supreme court decision in 1981 which considered a patent on a process for curing rubber. 
the ruling was that the fact that the apparatus included a computer and a program as part of the process to cure the rubber did not make it unpatentable. 
the appeals court the next year, which considers all patent cases, reversed the qualifiers. 
they said the fact that there is a computer and a program in this makes it patentable. 
the fact that there is a computer and program in anything makes it patentable. 
this is why the us started having business procedure patents. 
because the business procedures were carried out on a computer and that made them patentable. 
so this ruling was made, and i think the natural order recalculation patent was one of the first or might have been even the first. 
but throughout the 80's we mostly didn't know about this. 
it was around 1990 that programmers in the us started to become aware that they were faced with a danger from software patents. 
so, i saw how the field worked before then and how it worked after. 
i saw no particular speed up in progress after 1990. 
there was no political debate in the us, but in europe there has been a big political debate. 
several years ago there was a push to amend the munich treaty that established the european patent office. 
it has a clause saying that software is not patentable. 
the push was to amend that to start allowing software patents. 
but the community took notice of this. 
it was actually free software developers and free software users who took the lead. 
we are not the only ones threatened by software patents. 
all software developers are threatened by software patents and even software users are threatened. 
for instance, paul heckel, when apple wasn't very scared of his threats, he threatened to start suing apple customers. 
that, apple found very scary. 
they figured they couldn't afford to have their customers being sued like that, even if they would ultimately win. 
so users can get sued too, either as a way of attacking a developer, or just as a way to squeeze money out of them on their own or cause mayhem to them on their own. 
all software developers and users are vulnerable, but it was the free software community in europe that took the lead in organizing opposition. 
in fact, twice now the countries that govern the european patent office voted not to amend that treaty. 
then the eu took a hand, and the directorates of the eu were divided on the issue. 
the one whose job is to promote software is against software patents, it seems. 
but they were not in charge of this issue. 
it's the open market directorate that is in charge, and that's led by somebody who is in favor of software patents. 
they basically disregarded public opinion that had been expressed to them, and they proposed a directive to allow software patents.[2] the french government has already said they are against it. 
people are working in various other governments in europe to oppose software patents, and it is vital to start doing so here. 
according to hartmut pilch, who is one of the leaders in the european struggle against software patents, the main impetus comes from the uk patent office. 
the uk patent office is simply biased in favor of software patents. 
it had a public consultation, and most of the responses were opposed to software patents. 
they then wrote a report saying that people seem to be content with them, [laughs] completely disregarding the answers. 
you see, the free software community said, "please send the answers to them, and please send your answers to us too and we'll publish them."
 so they published these answers, which were opposed generally. 
you'd have never guessed that from the report that the uk patent office published. 
they [the uk patent and trademark office] use a term that they call "technical effect."
 this is a term which can stretch tremendously. 
you are supposed to think it means a program idea would only be patentable if it relates closely to specific physical activities. 
if that is the interpretation, it would mostly solve the problem. 
if the only software ideas that could be patented were those that really did relate to a particular technical, specific physical result that you might have patented if you didn't use a program, that would be ok. 
the problem is you can stretch that term. 
you can describe the result you get by running any program as a physical result. 
how does this physical result differ from every other? 
well it is as a result of this computation. 
the result is that the uk patent office is proposing something that looks like it leads to mostly solving the problem, and really gives carte blanche for patenting almost anything. 
the people in the same ministry are also involved in a copyright issue which really has nothing to do with software patents except that it's being handled by the same people. 
it's a question of interpreting the recent eu copyright directive, a horrible law like the digital millennium copyright act in the us. 
but there is some latitude for countries to decide how to implement it. 
the uk is proposing the most draconian possible way of implementing this directive. 
you could greatly reduce the harm that it does by implementing it properly. 
the uk wants to maximize the tyrannical effect of this directive. 
it seems there is a certain group, the department of trade and industry [archived], [laughs] who need to be reined in. 
[laughs]  it is necessary to put a check on their activities. 
stop their creating new forms of power. 
software patents tie up every software developer and every computer user in a new form of bureaucracy. 
if the businesses that use computers realized how much trouble this can cause for them, they would be up in arms, and i'm sure they could stop it. 
business doesn't like being tied up in bureaucracy. 
sometimes, of course, it serves an important purpose. 
there are some areas where we wish the uk government did a more careful job of tying certain businesses up in bureaucracy, like when it involves moving animals around.[3] but in some cases, when it doesn't serve any purpose except to create artificial monopolies, so that somebody can interfere with software development, squeeze money out of developers and users, then we should reject it. 
we need to make management aware of what software patents will do to them. 
get their support in fighting against software patents in europe. 
the battle is not over. 
it still can be won. 
[applause] footnotes. 
there are approximately 300-400 unique parts in an automatic transmission, and a transmission is generally the most complicated component of an auto. 
to design a transmission may take six months to a year, and even then it may take longer to actually get it built and functioning. 
however, a program with 500 to 600 functional parts would have 200 to 300 lines of actual code, and would probably take a good programmer a day to a week to write, test and debug. 
on 6 july 2005, the european parliament rejected the software patent directive by 648 out of 680 votes. 
however, we must not forget the issue of software patents, as those who were pressing for patenting are trying to revive the recently thrown-out directive. 
we also have to ensure that the european patent office (epo) and the national offices in different eu countries stop conceding patents for software included in other kinds of inventions. 
to make it harder for foot-and-mouth disease to spread. 
this speech is published in free software, free society: the selected essays of richard m. stallman. 
www.gnu.org/philosophy/speeches-and-interview.html
www.gnu.org/philosophy/speeches-and-interviews.html
rms lecture at kth (sweden), 1986. 
transcript of richard stallman's speech at the kungliga tekniska h&ouml;gskolan (royal institute of technology) in stockholm, sweden, arranged by the student society datorf&ouml;reningen stacken on 30 october 1986. 
note: this is a slightly edited transcript of the talk. 
as such it contains false starts, as well as locutions that are natural in spoken english but look strange in print. 
it is not clear how to correct them to written english style without doing violence to the original speech. 
rms: it seems that there are three things that people would like me to talk about. 
on the one hand i thought that the best thing to talk about here for a club of hackers, was what it was like at the mit in the old days. 
what made the artificial intelligence lab such a special place. 
but people tell me also that since these are totally different people from the ones who were at the conference monday and tuesday that i ought to talk about what's going on in the gnu project and that i should talk about why software and information can not be owned, which means three talks in all, and since two of those subjects each took an hour it means we're in for a rather long time. 
so i had the idea that perhaps i could split it in to three parts, and people could go outside for the parts they are not interested in, and that then when i come to the end of a part i can say it's the end and people can go out and i can send jan rynning out to bring in the other people. 
[someone else says: "janne, han trenger ingen mike."
 (translation: "janne, he doesn't need a mike."
)] jan, are you prepared to go running out to fetch the other people? 
jmr: i am looking for a microphone, and someone tells me it is inside this locked box. 
rms: now in the old days at the ai lab we would have taken a sledgehammer and cracked it open, and the broken door would be a lesson to whoever had dared to lock up something that people needed to use. 
luckily however i used to study bulgarian singing, so i have no trouble managing without a microphone. 
anyway, should i set up this system to notify you about the parts of the talk, or do you just like to sit through all of it? 
[answer: yeaaah] when i started programming, it was 1969, and i did it in an ibm laboratory in new york. 
after that i went to a school with a computer science department that was probably like most of them. 
there were some professors that were in charge of what was supposed to be done, and there were people who decided who could use what. 
there was a shortage of terminals for most people, but a lot of the professors had terminals of their own in their offices, which was wasteful, but typical of their attitude. 
when i visited the artificial intelligence lab at mit i found a spirit that was refreshingly different from that. 
for example: there, the terminals was thought of as belonging to everyone, and professors locked them up in their offices on pain of finding their doors broken down. 
i was actually shown a cart with a big block of iron on it, that had been used to break down the door of one professors office, when he had the gall to lock up a terminal. 
there were very few terminals in those days, there was probably something like five display terminals for the system, so if one of them was locked up, it was a considerable disaster. 
in the years that followed i was inspired by that ideas, and many times i would climb over ceilings or underneath floors to unlock rooms that had machines in them that people needed to use, and i would usually leave behind a note explaining to the people that they shouldn't be so selfish as to lock the door. 
the people who locked the door were basically considering only themselves. 
they had a reason of course, there was something they thought might get stolen and they wanted to lock it up, but they didn't care about the other people they were affecting by locking up other things in the same room. 
almost every time this happened, once i brought it to their attention, that it was not up to them alone whether that room should be locked, they were able to find a compromise solution: some other place to put the things they were worried about, a desk they could lock, another little room. 
but the point is that people usually don't bother to think about that. 
they have the idea: "this room is mine, i can lock it, to hell with everyone else," and that is exactly the spirit that we must teach them not to have. 
but this spirit of unlocking doors wasn't an isolated thing, it was part of an entire way of life. 
the hackers at the ai lab were really enthusiastic about writing good programs, and interesting programs. 
and it was because they were so eager to get more work done, that they wouldn't put up with having the terminals locked up, or lots of other things that people could do to obstruct useful work. 
the differences between people with high morale who really care about what they're trying to do, and people who think of it as just a job. 
if it's just a job, who cares if the people who hired you are so stupid they make you sit and wait, it's their time, their money but not much gets done in a place like that, and it's no fun to be in a place like that. 
another thing that we didn't have at the ai lab was file protection. 
there was no security at all on the computer. 
and we very consciously wanted it that way. 
the hackers who wrote the incompatible timesharing system decided that file protection was usually used by a self-styled system manager to get power over everyone else. 
they didn't want anyone to be able to get power over them that way, so they didn't implement that kind of a feature. 
the result was, that whenever something in the system was broken, you could always fix it. 
you never had to sit there in frustration because there was no way, because you knew exactly what's wrong, and somebody had decided they didn't trust you to do it. 
you don't have to give up and go home, waiting for someone to come in in the morning and fix the system when you know ten times as well as he does what needs to be done. 
and we didn't let any professors or bosses decide what work was going to be done either, because our job was to improve the system! 
we talked to the users of course; if you don't do that you can't tell what's needed. 
but after doing that, we were the ones best able to see what kind of improvements were feasible, and we were always talking to each other about how we'd like to see the system changed, and what sort of neat ideas we'd seen in other systems and might be able to use. 
so the result is that we had a smoothly functioning anarchy, and after my experience there, i'm convinced that that is the best way for people to live. 
unfortunately the ai lab in that form was destroyed. 
for many years we were afraid the ai lab would be destroyed by another lab at mit, the lab for computer science, whose director was a sort of empire builder type, doing everything he could to get himself promoted within mit, and make his organization bigger, and he kept trying to cause the ai lab to be made a part of his lab, and nobody wanted to do things his way because he believed that people should obey orders and things like that. 
but that danger we managed to defend against, only to be destroyed by something we had never anticipated, and that was commercialism. 
around the early 80's the hackers suddenly found that there was now commercial interest in what they were doing. 
it was possible to get rich by working at a private company. 
all that was necessary was to stop sharing their work with the rest of the world and destroy the mit-ai lab, and this is what they did despite all the efforts i could make to prevent them. 
essentially all the competent programmers except for me, at the ai lab were hired away, and this caused more than a momentary change, it caused a permanent transformation because it broke the continuity of the culture of hackers. 
new hackers were always attracted by the old hackers; there were the most fun computers and the people doing the most interesting things, and also a spirit which was a great deal of fun to be part of. 
once these things were gone, there is nothing to recommend the place to anyone new, so new people stopped arriving. 
there was no-one they could be inspired by, no-one that they could learn those traditions from. 
in addition no-one to learn how to do good programming from. 
with just a bunch of professors and graduate students, who really don't know how to make a program work, you can't learn to make good programs work. 
so the mit ai lab that i loved is gone and after a couple of years of fighting against the people who did it to try to punish them for it i decided that i should dedicate my self to try to create a new community with that spirit. 
but one of the problems i had to face was the problem of proprietary software. 
for example one thing that happened at the lab, after the hackers left, was that the machines and the software that we had developed could no longer be maintained. 
the software of course worked, and it continued to work if nobody changed it, but the machines did not. 
the machines would break and there would be no-one who could fix them and eventually they would be thrown out. 
in the old days, yes we had service contracts for the machines, but it was essentially a joke. 
that was a way of getting parts after the expert hackers from the ai lab fixed the problem. 
because if you let the field-service person fix it it would take them days, and you didn't want to do that, you wanted it to work. 
so, the people who knew how to do those things would just go and fix it quickly, and since they were ten times as competent as any field service person, they could do a much better job. 
and then they would have the ruined boards, they would just leave them there and tell the field service person "take these back and bring us some new ones."
 in the real old days our hackers used to modify the machines that came from digital also. 
for example, they built paging-boxes to put on the pdp-10's. 
nowadays i think there are some people here [in stockholm] who do such things too, but it was a pretty unusual thing in those days. 
and the really old days, the beginning of the 1960's people used to modify computers adding all sorts of new instructions and new fancy timesharing features, so that the pdp-1 at mit by the time it was retired in the mid-seventies had something like twice as many instructions as it had when it was delivered by digital in the early sixties, and it had special hardware scheduler assisting features and strange memory-mapping features making it possible to assign individual hardware devices to particular timesharing jobs and lots of things that i hardly really know about. 
i think they also built in some kind of extended addressing modes they added index registers and indirect addressing, and they turned it essentially from a weak machine into a semi-reasonable one. 
i guess it is one of the disadvantages of vlsi that it's no longer so feasible to add instructions to your machines. 
the pdp-1 also had a very interesting feature, which is that it was possible to write interesting programs in very few instructions. 
fewer than any other machine since then. 
i believe for example that the famous display hack "munching squares" which made squares that get bigger and break up into lots of smaller squares which gets bigger and break up into smaller squares. 
that was written in something like five instructions on the pdp-1. 
and many other beautiful display programs could be written in few instructions. 
so, that was the ai lab. 
but what was the culture of hackers like aside from their anarchism? 
in the days of the pdp-1 only one person could use the machine, at the beginning at least. 
several years later they wrote a timesharing system, and they added lots of hardware for it. 
but in the beginning you just had to sign up for some time. 
now of course the professors and the students working on official projects would always come in during the day. 
so, the people who wanted to get lots of time would sign up for time at night when there were less competition, and this created the custom of hackers working at night. 
even when there was timesharing it would still be easier to get time, you could get more cycles at night, because there were fewer users. 
so people who wanted to get lots of work done, would still come in at night. 
but by then it began to be something else because you weren't alone, there were a few other hackers there too, and so it became a social phenomenon. 
during the daytime if you came in, you could expect to find professors and students who didn't really love the machine, whereas if during the night you came in you would find hackers. 
therefore hackers came in at night to be with their culture. 
and they developed other traditions such as getting chinese food at three in the morning. 
and i remember many sunrises seen from a car coming back from chinatown. 
it was actually a very beautiful thing to see a sunrise, cause' that's such a calm time of day. 
it's a wonderful time of day to get ready to go to bed. 
it's so nice to walk home with the light just brightening and the birds starting to chirp, you can get a real feeling of gentle satisfaction, of tranquility about the work that you have done that night. 
another tradition that we began was that of having places to sleep at the lab. 
ever since i first was there, there was always at least one bed at the lab. 
and i may have done a little bit more living at the lab than most people because every year of two for some reason or other i'd have no apartment and i would spend a few months living at the lab. 
and i've always found it very comfortable, as well as nice and cool in the summer. 
but it was not at all uncommon to find people falling asleep at the lab, again because of their enthusiasm; you stay up as long as you possibly can hacking, because you just don't want to stop. 
and then when you're completely exhausted, you climb over to the nearest soft horizontal surface. 
a very informal atmosphere. 
but when the hackers all left the lab this caused a demographic change, because the professors and the students who didn't really love the machine were just as numerous as before, so they were now the dominant party, and they were very scared. 
without hackers to maintain the system, they said, "we're going to have a disaster, we must have commercial software," and they said "we can expect the company to maintain it."
 it proved that they were utterly wrong, but that's what they did. 
that was exactly when a new kl-10 system was supposed to arrive, and the question was, would it run the incompatible timesharing system or would it run digital's twenex system. 
once the hackers were gone who probably would have supported using its, the academic types chose to run the commercial software, and this had several immediate effects. 
some of them weren't actually so immediate but they followed inevitably as anyone who thought about it would see. 
one thing was that that software was much more poorly written, and harder to understand; therefore making it harder for people to make the changes that were in fact needed. 
another was, that that software came with security, which had the inevitable effect of causing people to cooperate with each other less. 
in the old days on its it was considered desirable that everyone could look at any file, change any file, because we had reasons to. 
i remember one interesting scandal where somebody sent a request for help in using macsyma. 
macsyma is a symbolic algebra program that was developed at mit. 
he sent to one of the people working on it a request for some help, and he got an answer a few hours later from somebody else. 
he was horrified, he sent a message "so-and-so must be reading your mail, can it be that mail files aren't properly protected on your system?"
 "of course, no file is protected on our system. 
what's the problem? 
you got your answer sooner; why are you unhappy? 
of course we read each other's mail so we can find people like you and help them."
 some people just don't know when they're well off. 
but of course twenex not only has security, and by default turns on security, but it's also designed with the assumption that security is in use. 
so there are lots of things that are very easy to do that can cause a lot of damage, and the only thing that would stop you from doing them by accident, is security. 
on its we evolved other means of discouraging people from doing those things by accident, but on twenex you didn't have them because they assumed that there was going to be be strict security in effect and only the bosses were going to have the power to do them. 
so they didn't put in any other mechanism to make it hard to do by accident. 
the result of this is that you can't just take twenex and turn off the security and have what you'd really like to have, and there were no longer the hackers to make the changes to put in those other mechanisms, so people were forced to use the security. 
and about six months after the machine was there they started having some coups d'etat. 
that is, at first we had the assumption that everyone who worked for the lab was going to have the wheel bit which gave full powers to override all security measures, but some days you'd come in some afternoon and find out that the wheel bits of just about everybody had been turned off. 
when i found out about those, i overthrew them. 
the first time, i happened to know the password of one of the people who was included among the elite, so i was able to use that to turn everyone back on. 
the second time he had changed his password, he had now changed his sympathies, he was now part of the aristocratic party. 
so, i had to bring the machine down and use non-timeshared ddt to poke around. 
i poked around in the monitor for a while, and eventually figured out how to get it to load itself in and let me patch it, so that i could turn off password checking and then i turned back on a whole bunch of people's wheel bits and posted a system message. 
i have to explain that the name of this machine was oz, so i posted a system message saying: "there was another attempt to seize power. 
so far the aristocratic forces have been defeated—radio free oz."
 later i discovered that "radio free oz" is one of the things used by firesign theater. 
i didn't know that at the time. 
but gradually things got worse and worse, it's just the nature of the way the system had been constructed forced people to demand more and more security. 
until eventually i was forced to stop using the machine, because i refused to have a password that was secret. 
ever since passwords first appeared at the mit-ai lab i had come to the conclusion that to stand up for my belief, to follow my belief that there should be no passwords, i should always make sure to have a password that is as obvious as possible and i should tell everyone what it is. 
because i don't believe that it's really desirable to have security on a computer, i shouldn't be willing to help uphold the security regime. 
on the systems that permit it i use the "empty password," and on systems where that isn't allowed, or where that means you can't log in at all from other places, things like that, i use my login name as my password. 
it's about as obvious as you can get. 
and when people point out that this way people might be able to log in as me, i say "yes that's the idea, somebody might have a need to get some data from this machine. 
i want to make sure that they aren't screwed by security."
 and an other thing that i always do is i always turn of all protection on my directory and files, because from time to time i have useful programs stored there and if there's a bug i want people to be able to fix it. 
but that machine wasn't designed also to support the phenomenon called "tourism."
 now "tourism" is a very old tradition at the ai lab, that went along with our other forms of anarchy, and that was that we'd let outsiders come and use the machine. 
now in the days where anybody could walk up to the machine and log in as anything he pleased this was automatic: if you came and visited, you could log in and you could work. 
later on we formalized this a little bit, as an accepted tradition specially when the arpanet began and people started connecting to our machines from all over the country. 
now what we'd hope for was that these people would actually learn to program and they would start changing the operating system. 
if you say this to the system manager anywhere else he'd be horrified. 
if you'd suggest that any outsider might use the machine, he'll say "but what if he starts changing our system programs?"
 but for us, when an outsider started to change the system programs, that meant he was showing a real interest in becoming a contributing member of the community. 
we would always encourage them to do this. 
starting, of course, by writing new system utilities, small ones, and we would look over what they had done and correct it, but then they would move on to adding features to existing, large utilities. 
and these are programs that have existed for ten years or perhaps fifteen years, growing piece by piece as one craftsman after an other added new features. 
sort of like cities in france you might say, where you can see the extremely old buildings with additions made a few hundred years later all the way up to the present. 
where in the field of computing, a program that was started in 1965 is essentially that. 
so we would always hope for tourists to become system maintainers, and perhaps then they would get hired, after they had already begun working on system programs and shown us that they were capable of doing good work. 
but the its machines had certain other features that helped prevent this from getting out of hand, one of these was the "spy" feature, where anybody could watch what anyone else was doing. 
and of course tourists loved to spy, they think it's such a neat thing, it's a little bit naughty you see, but the result is that if any tourist starts doing anything that causes trouble there's always somebody else watching him. 
so pretty soon his friends would get very mad because they would know that the continued existence of tourism depended on tourists being responsible. 
so usually there would be somebody who would know who the guy was, and we'd be able to let him leave us alone. 
and if we couldn't, then what we would do was we would turn off access from certain places completely, for a while, and when we turned it back on, he would have gone away and forgotten about us. 
and so it went on for years and years and years. 
but the twenex system wasn't designed for this sort of thing, and eventually they wouldn't tolerate me with my password that everybody knew, tourists always logging in as me two or three at a time, so they started flushing my account. 
and by that time i was mostly working on other machines anyway, so eventually i gave up and stopped ever turning it on again. 
and that was that. 
i haven't logged in on that machine as myself … [at this point rms is interrupted by tremendous applause.] … for. 
but when they first got this twenex system they had several changes in mind that they wanted to make. 
changes in the way security worked. 
they also wanted to have the machine on both the arpa network and the mit-chaos network, and it turns out that they were unable to do this, that they couldn't get anyone who was sufficiently competent to make such changes. 
there was no longer talent available to do it, and it was to hard to change. 
that system was much harder to understand, because it was to poorly written, and of course, digital wouldn't do these things, so their ideas that a commercial system would essentially maintain itself, proved to be mistaken. 
they had just as much need for system hackers, but they had no longer the means to entice system hackers. 
and nowadays at mit there are more people interested in hacking on its than there are interested in hacking on twenex. 
and the final reason why this is so, is that twenex can't be shared. 
twenex is a proprietary program and you're only allowed to have the sources if you keep them secret in certain nasty ways, and this gives them a bad flavor. 
unless a person is oblivious (which some people in computers are, there's some people who'll do anything if it's fun for them, and won't think for a minute whether they're cooperating with anyone else, but you'd have to be pretty oblivious to not to notice what a sad thing it is to work on a program like that, and that is a further discouragement). 
and if that isn't enough there is the fact that every year or so they're going to give you a new release full of 50 000 additional lines of code all written by monkeys. 
because they generally follow the "million monkeys typing, and eventually they'll come up with something useful" school of system development. 
it was clear to me from what i saw happening to these proprietary systems that the only way we could have the spirit of the old ai lab was to have a free operating system. 
to have a system made up of free software which could be shared with anyone. 
so that we could invite everyone to join in improving it. 
and that's what led up to the gnu project. 
so i guess we've arrived at the second part of the talk. 
about three and a half year ago it was clear to me that i should start developing a free software system. 
i could see two possible kinds of systems to develop: one: a lisp-machine-like system, essentially a system just like the mit lisp machine system that had just been developed, except free, and running on general purpose hardware, not on special lisp machines. 
and the other possibility was a more conventional operating system, and it was clear to me that if i made a conventional operating system, i should make it compatible with unix, because that would make it easy for people all around to switch to it. 
after a little while, i concluded i should do the latter and the reason was, that i saw that you can't have something really like the lisp machine system on general purpose hardware. 
the lisp machine system uses special hardware plus special writable microcode to gain both good execution speed and robust detection of errors at runtime, specially data-type errors. 
in order to make a lisp system run fast enough on ordinary hardware, you have to start making assumptions. 
assuming that a certain argument is the right type, and then if it isn't the system just crashes. 
of course you can put in explicit checks, you can write a robust program if you want, but the fact is that you are going to get things like memory addressing errors when you feed a function an argument of the wrong type if you did not put in things to check for it. 
so the result is then that you need something running underneath the lisp system to you catch these errors, and give the user the ability to keep on running, and debug what happened to him. 
finally i concluded that if i was going to have to have a operating system at a lower level, i might as well make a good operating-system—that it was a choice between an operating system and the lisp, or just an operating system; therefore i should do the operating system first, and i should make it compatible with unix. 
finally when i realized that i could use the most amusing word in the english language as a name for this system, it was clear which choice i had to make. 
and that word is of course gnu, which stands for "gnu's not unix."
 the recursive acronym is a very old tradition among the hacker community around mit. 
it started, i believe, with an editor called tint, which means: "tint is not teco," and later on it went through names such as "sine" for "sine is not emacs," and fine for "fine is not emacs," and eine for "eine is not emacs," and zwei for "zwei was eine initially," and ultimately now arrives at gnu. 
i would say that since the time about two and a half years ago when i actually started working on gnu, i've done more than half of the work. 
when i was getting ready to start working on the project, i first started looking around for what i could find already available free. 
i found out about an interesting portable compiler system which was called "the free university compiler kit," and i thought, with a name like that, perhaps i could have it. 
so, i sent a message to the person who had developed it asking if he would give it to the gnu project, and he said "no, the university might be free, but the software they develop isn't," but he then said that he wanted to have a unix compatible system too, and he wanted to write a sort of kernel for it, so why didn't i then write the utilities, and they could both be distributed with his proprietary compiler, to encourage people to buy that compiler. 
and i thought that this was despicable and so i told him that my first project would be a compiler. 
i didn't really know much about optimizing compilers at the time, because i'd never worked on one. 
but i got my hands on a compiler, that i was told at the time was free. 
it was a compiler called pastel, which the authors say means "off-color pascal."
 pastel was a very complicated language including features such as parametrized types and explicit type parameters and many complicated things. 
the compiler was of course written in this language, and had many complicated features to optimize the use of these things. 
for example: the type "string" in that language was a parameterized type; you could say string(n) if you wanted a string of a particular length; you could also just say string, and the parameter would be determined from the context. 
now, strings are very important, and it is necessary for a lot of constructs that use them to run fast, and this means that they had to have a lot of features to detect such things as: when the declared length of a string is an argument that is known to be constant throughout the function, to save to save the value and optimize the code they're going to produce, many complicated things. 
but i did get to see in this compiler how to do automatic register allocation, and some ideas about how to handle different sorts of machines. 
well, since this compiler already compiled pastel, what i needed to do was add a front-end for c, which i did, and add a back-end for the 68000 which i expected to be my first target machine. 
but i ran into a serious problem. 
because the pastel language was defined not to require you to declare something before you used it, the declarations and uses could be in any order, in other words: pascal's forward declaration was obsolete, because of this it was necessary to read in an entire program, and keep it in core, and then process it all at once. 
the result was that the intermediate storage used in the compiler, the size of the memory needed, was proportional to the size of your file. 
and this also included stack-space, you needed gigantic amounts of stack space, and what i found as a result was: that the 68000 system available to me could not run the compiler. 
because it was a horrible version of unix that gave you a limit of something like 16k words of stack, this despite the existence of six megabytes in the machine, you could only have 16kw of stack or something like that. 
and of course to generate its conflict matrix to see which temporary values conflicted, or was alive at the same time as which others, it needed a quadratic matrix of bits, and that for large functions that would get it to hundreds of thousands of bytes. 
so i managed to debug the first pass of the ten or so passes of the compiler, cross compiled on to that machine, and then found that the second one could never run. 
while i was thinking about what to do about these problems and wondering whether i should try to fix them or write entirely new compiler, in a roundabout fashion i began working on gnu emacs. 
gnu emacs is the main distributed portion of the gnu system. 
it's an extensible text editor a lot like the original emacs which i developed ten years ago, except that this one uses actual lisp as its extension language. 
the editor itself is implemented in c, as is the lisp interpreter, so the lisp interpreter is completely portable, and you don't need a lisp system external to the editor. 
the editor contains its own lisp system, and all of the editing commands are written in lisp so that they can provide you with examples to look at for how to write your own editing commands, and things to start with, so you can change them into the editing commands that you really want. 
in the summer of that year, about two years ago now, a friend of mine told me that because of his work in early development of gosling emacs, he had permission from gosling in a message he had been sent to distribute his version of that. 
gosling originally had set up his emacs and distributed it free and gotten many people to help develop it, under the expectation based on gosling's own words in his own manual that he was going to follow the same spirit that i started with the original emacs. 
then he stabbed everyone in the back by putting copyrights on it, making people promise not to redistribute it and then selling it to a software-house. 
my later dealings with him personally showed that he was every bit as cowardly and despicable as you would expect from that history. 
but in any case, my friend gave me this program, and my intention was to change the editing commands at the top level to make them compatible with the original emacs that i was used to. 
and to make them handle all the combinations of numerical arguments and so on that one might expect that they would handle and have all the features that i wanted. 
but after a little bit of this, i discovered that the extension language of that editor, which is called mocklisp, was not sufficient for the task. 
i found that that i had to replace it immediately in order to do what i was planning to do. 
before i had had the idea of someday perhaps replacing mocklisp with real lisp, but what i found out was that it had do be done first. 
now, the reason that mocklisp is called mock, is that it has no kind of structure datatype: it does not have lisp lists; it does not have any kind of array. 
it also does not have lisp symbols, which are objects with names: for any particular name, there is only one object, so that you can type in the name and you always get the same object back. 
and this tremendously hampers the writing of many kinds of programs, you have to do things by complicated string-manipulation that don't really go that way. 
so i wrote a lisp interpreter and put it in in place of mocklisp and in the process i found that i had to rewrite many of the editor's internal data structures because i wanted them to be lisp objects. 
i wanted the interface between the lisp and the editor to be clean, which means that objects such as editor buffers, sub-processes, windows and buffer-positions, all have to be lisp objects, so that the editor primitives that work on them are actually callable as lisp functions with lisp data. 
this meant that i had to redesign the data formats of all those objects and rewrite all the functions that worked on them, and the result was that after about six months i had rewritten just about everything in the editor. 
in addition, because it is so hard to write things in mocklisp, all the things that had been written in mocklisp were very unclean and by rewriting them to take advantage of the power of real lisp, i could make them much more powerful and much simpler and much faster. 
so i did that, and the result was that when i started distributing this program only a small fraction remained from what i had received. 
at this point, the company that gosling thinks he sold the program to challenged my friend's right to distribute it, and the message was on backup tapes, so he couldn't find it. 
and gosling denied having given him permission. 
and then a strange thing happened. 
he was negotiating with this company, and it seemed that the company mainly was concerned with not having anything distributed that resembled what they were distributing. 
see, he was still distributing, and the company where he worked, which is megatest, was still distributing the same thing he had given me, which really was an old version of gosling emacs with his changes, and so he was going to make an agreement with them where he would stop distributing that, and would switch to using gnu emacs, and they would then acknowledge that he really had the permission after all, and then supposedly everyone would be happy. 
and this company was talking to me about wanting to distribute gnu emacs, free of course, but also sell various sorts of supporting assistance, and they wanted to hire me to help do the work. 
so it's sort of strange that they then changed their mind and refused to sign that agreement, and put up a message on the network saying that i wasn't allowed to distribute the program. 
they didn't actually say that they would do anything, they just said that it wasn't clear whether they might ever someday do something. 
and this was enough to scare people so that no one would use it any more, which is a sad thing. 
(sometimes i think that perhaps one of the best things i could do with my life is: find a gigantic pile of proprietary software that was a trade secret, and start handing out copies on a street corner so it wouldn't be a trade secret any more, and perhaps that would be a much more efficient way for me to give people new free software than actually writing it myself; but everyone is too cowardly to even take it.) so i was forced to rewrite all the rest that remained, and i did that, it took me about a week and a half. 
so they won a tremendous victory. 
and i certainly wouldn't ever cooperate with them in any fashion after that. 
then after gnu emacs was reasonably stable, which took all in all about a year and a half, i started getting back to other parts of the system. 
i developed a debugger which i called gdb which is a symbolic debugger for c code, which recently entered distribution. 
now this debugger is to a large extent in the spirit of dbx, which is a debugger that comes with berkeley unix. 
commands consist of a word that says what you want to do, followed by arguments. 
in this debugger, commands can all be abbreviated, and the common commands have single character abbreviations, but any unique abbreviation is always allowed. 
there are extensible help facilities, you can type help followed by any command or even subcommands, and get a lengthy description of how to use that command. 
of course you can type any expression in c, and it will print the value. 
you can also do some things that are not usual in symbolic c debuggers, for example: you can refer to any c datatype at any memory address, either to examine the value, or to assign the value. 
so for example if you want to store a floating point value in a word at a certain address, you just say: "give me the object of type float or double at this address" and then assign that. 
another thing you can do is to examine all the values that have been examined in the past. 
every value examined gets put on the "value history."
 you can refer to any element in the history by its numerical position, or you can easily refer to the last element with just dollar-sign. 
and this makes it much easier to trace list structure. 
if you have any kind of c structure that contains a pointer to another one, you can do something like print *$.next, which says: "get the next field out of the last thing you showed me, and then display the structure that points at."
 and you can repeat that command, and each time you'll see then next structure in the list. 
whereas in every other c debugger that i've seen the only way to do that is to type a longer command each time. 
and when this is combined with the feature that just typing carriage-return repeats the last command you issued, it becomes very convenient. 
just type carriage-return for each element in the list you want to see. 
there are also explicitly settable variables in the debugger, any number of them. 
you say dollar-sign followed by a name, and that is a variable. 
you can assign these variables values of any c datatype and then you can examine them later. 
among the things that these are useful for are: if there's a particular value that you're going to examine, and you know you are going to refer to it a lot, then rather than remember its number in the history you might give it a name. 
you might also find use for them when you set conditional breakpoints. 
conditional breakpoints are a feature in many symbolic debuggers, you say "stop when you get to this point in the program, but only if a certain expression is true."
 the variables in the debugger allow you to compare a variable in the program with a previous value of that variable that you saved in a debugger variable. 
another thing that they can be used for is for counting, because after all, assignments are expressions in c, therefore you can do $foo+=5 to increment the value of $foo by five, or just $foo++ you can do. 
you can even do this in a conditional breakpoint, so that's a cheap way of having it break the tenth time the breakpoint is hit, you can do $foo--==0. 
does everyone follow that? 
decrement foo and if it's zero now, break. 
and then you set $foo to the number of times you want it to skip, and you let it go. 
you can also use that to examine elements of an array. 
suppose you have an array of pointers, you can then do: print x[$foo++] but first you do set $foo=0 okay, when you do that [points at the print expression], you get the zeroth element of x, and then you do it again and it gets the first element, and suppose these are pointers to structures, then you probably put an asterisk there [before the x in the print expression] and each time it prints the next structure pointed to by the element of the array. 
and of course you can repeat this command by typing carriage-return. 
if a single thing to repeat is not enough, you can create a user-defined-command. 
you can say define mumble, and then you give some lines of commands and then you say end. 
and now there is defined a mumble command which will execute those lines. 
and it's very useful to put these definitions in a command file. 
you can have a command file in each directory, that will be loaded automatically when you start the debugger with that as your working directory. 
so for each program you can define a set of user defined commands to access the data structures of that program in a useful way. 
you can even provide documentation for your user-defined commands, so that they get handled by the help features just like the built-in commands. 
one other unusual thing in this debugger, is the ability to discard frames from the stack. 
because i believe it's important not just to be able to examine what's happening in the program you're debugging, but also to change it in any way conceivable. 
so that after you've found one problem and you know what's wrong, you can fix things up as if that code were correct and find the next bug without having to recompile your program first. 
this means not only being able to change the data areas in you program flexibly, but also being able to change the flow of control. 
in this debugger you can change the flow of control very directly by saying: set $pc=<some number> so you can set the program counter. 
you can also set the stack pointer, or you can say set $sp+=<something> if you want to increment the stack pointer a certain amount. 
but in addition you can also tell it to start at a particular line in the program, you can set the program counter to a particular source line. 
but what if you find that you called a function by mistake and you didn't really want to call that function at all? 
say, that function is so screwed up that what you really want to do is get back out of it and do by hand what that function should have done. 
for that you can use the return command. 
you select a stack frame and you say return, and it causes that stack-frame, and all the ones within it, to be discarded as if that function were returning right now, and you can also specify the value it should return. 
this does not continue execution; it pretends that return happened and then stops the program again, so you can continue changing other things. 
and with all these things put together you thus have pretty good control over what's going on in a program. 
in addition one slightly amusing thing: c has string constants, what happens if you use a string constant in an expression that you're computing in the debugger? 
it has to create a string in the program you were debugging. 
well it does. 
it sets up a call to malloc in that debugged program, lets malloc run, and then gets control back. 
thus it invisibly finds a place to put the string constant. 
eventually when this debugger is running on the real gnu system, i intend to put in facilities in the debugger to examine all of the internal status of the process that is running underneath it. 
for example to examine the status of the memory map, which pages exist, which are readable, which are writable, and to examine the inferior program's terminal status. 
there already is a bit of a command; this debugger, unlike the debuggers on unix, keeps the terminal status completely separate for the debugger and the program you're debugging, so that it works with programs that run in raw mode, it works with programs that do interrupt driven input, and there's also a command that enables you to find out something about the terminal settings at the program you're debugging is actually using. 
i believe that in general a debugger should allow you to find out everything that's going on in the inferior process. 
there are two other main parts of the gnu system that already exist. 
one is the new c compiler, and one is the trix kernel. 
the new c compiler is something that i've written this year since last spring. 
i finally decided that i'd have to throw out pastel. 
this c compiler uses some ideas taken from pastel, and some ideas taken from the university of arizona portable optimizer. 
their interesting idea was to handle many different kinds of machines by generating simple instructions, and then combining several simple instructions into a complicated instruction when the target machine permits it. 
in order to do this uniformly, they represent the instructions in algebraic notation. 
for example, an add instruction might be represented like this: r[3]=r[2]+4 this would be a representation inside their compiler for instruction to take the contents of register two, add four and store it in register three. 
in this fashion you can represent any possible instruction for any machine. 
so they actually did represent all the instructions this way and then when it came time to try to combine them, they would do this by substituting one expression into another, making a more complicated algebraic expression for the combined instruction. 
sometimes depending on whether the result of the first instruction had any further use, it might be necessary to make a combined instruction with two assignment operators. 
one for this value [pointing at ???] and another one with this value [pointing at ???] substituted in it with what came from the second instruction. 
but if this value was only used that once, you could eliminate it after substituting for it; there'd be no need to compute it any more. 
so it's actually somewhat complicated doing the substitution correctly checking that the intervening instructions don't change any of these values and other such things. 
when you support such things as auto-increment and auto-decrement addressing, which i do now, you also have to do various checks for those to check for situations where what you're doing is not value preserving. 
but after checking all those things, then you take the substituted combined expression and put it through a pattern matcher, which recognizes all the valid instructions of your chosen target machine. 
and if it's recognized, then you replace those two instructions with the combined one, otherwise you leave them alone. 
and their technique is to combine two or three instructions related by data flow in this way. 
in the arizona compiler, they actually represent things as text strings like this, and their compiler is horribly slow. 
first i had some idea of just using their compiler and making changes in it, but it was clear to me i had to rewrite it entirely to get the speed i wanted, so i have rewritten it to use list structure representations for all these expressions. 
things like this: (set (reg 2) (+ (reg 2) (int 4))) this looks like lisp, but the semantics of these are not quite lisp, because each symbol here is one recognized specially. 
there's a particular fixed set of these symbols that is defined, all the ones you need. 
and each one has a particular pattern of types of arguments, for example: reg always has an integer, because registers are numbered, but + takes two subexpressions, and so on. 
and with each of these expressions is also a data type which says essentially whether it's fixed or floating and how many bytes long it is. 
it could be extended to handle other things too if you needed to. 
and the way i do automatic register allocation is that when i initially generate this code, and when i do the combination and all those things, for every variable that conceivably go into a register, i allocate what i call a pseudo register number, which is a number starting at sixteen or whatever is too high to be a real register for your target machine. 
so the real registers are numbered zero to fifteen or whatever and above that comes pseudo registers. 
and then one of the last parts of the compiler consists of going through and changing all the pseudo registers to real registers. 
again it makes a conflict graph, it sees which pseudo registers are alive at the same point and they of course can't go in the same real register, and then it tries packing pseudo registers into real registers as much as it can, ordering them by priority of how important they are. 
and finally it then has to correct the code for various problems, such as happen when there were pseudo registers that don't fit in the real registers, that had to be put into stack slots instead. 
when that happens on certain machines, some of the instructions may become invalid. 
for example on the 68000 you can add a register into memory and you can add memory into register, but you can't add one memory location into another. 
so if you have an add instruction, and you're headed for a 68000 and both of the things end up in memory, it's not valid. 
so this final pass goes through and copies things into registers and out of registers as needed to correct those problems. 
problems can also arise with index registers. 
if you're trying to index by something, then most of the time that code will become invalid if the index quantity is in memory, except in a few cases on some machines where you can it with indirect addressing. 
in the cases when you're doing auto-increment on an index register you may have to copy the value into a register, do the instruction, and then copy the incremented value back to the memory slot where it really lives. 
there's got room for a lot of hair, and i've not finished implementing all the hair needed to make really fully efficient. 
this compiler currently works by having a parser which turns c code into effectively a syntax tree annotated with c datatype information. 
then another pass which looks at that tree and generates code like this [lisp like code]. 
then several optimization passes. 
one to handle things like jumps across jumps, jumps to jumps, jumps to .+1, all of which can be immediately simplified. 
then a common subexpression recognizer, then finding basic blocks, and performing dataflow-analysis, so that it can tell for each instruction which values are used in that instruction and never used afterward. 
and also linking each instruction to the places where the values it uses were generated, so if i have one instruction which generates pseudo register r[28], and then another instruction later which uses r[28] and it's the first place to use r[28], i make the second one point back to the first one, and this pointer is used to control the attempts to combine the instructions. 
you don't combine adjacent instructions, you combine an instruction that uses a value with the instruction that produced that value. 
even if there are other instructions in between, they don't matter for this, you just have to check them to make sure they don't do anything to interfere. 
then after the combiner comes the dynamic register allocator, and finally something to convert it into assembly code. 
in the arizona compiler the instruction recognizer was generated with lex. 
your machine description was simply a lex program that lex would turn into a c function to recognize valid instructions as strings. 
what i have is instead a special purpose decision tree that's generated from a machine description written in this syntax as if it were lisp. 
and this recognizer is used as a subroutine for many different parts of the compiler. 
currently this compiler runs about as fast as pcc. 
it runs noticeably faster if you tell it not to do the hairy register allocation, in which case it allocates registers the same way as pcc does. 
in its super hairy mode it does a much better job of allocating registers than pcc, and i observe that for the vax it generates the best code i've seen from any c compiler on the vax. 
for the 68000 the code is still not ideal. 
i can see places where early stages do things that are not the best, because it can't fully look ahead. 
it has a choice in an early stage, and it does the thing that it thinks is going to be best, but really if it did the other one, a later stage is actually smart enough to do something even better. 
but the early stage doesn't know what the later stage is going to do, so i have more work to do on some of these things. 
sometimes this causes it to free up registers unnecessarily. 
because when things wind up in memory and it needs to copy them into registers, it needs to get registers to copy them into. 
this means taking registers that it has already allocated to, and kicking those temporary quantities out to stack slots. 
of course this may invalidate more instructions now that those things are in memory, not registers, so it has to check again and again. 
sometimes it thinks it has to copy things to registers and really it isn't going to have to, so it may free up too many things and thus not use all the registers that it could. 
[question: do you have a code generator for 32000?] not yet, but again, it's not a code generator it's just a machine description that you need. 
a list of all the machine instructions described in this [lisp like] form. 
so in fact aside from the work of implementing the idea of constraints on which arguments can be in registers and which kind of registers, which is something which was needed for the 68000 and was not needed for the vax, the work of porting this compiler from the vax to the 68000 just took a few days. 
so it's very easy to port. 
the compiler currently generates assembler code and it can generate debugging information either in the format that dbx wants, or in the special internal format of gdb. 
i'd say the only work needed on this compiler is in three areas. 
one: i have to add a "profiling" feature, like the one that the unix compilers have. 
two: i have to make these register allocation things smarter, so that i can stop seeing stupid things appearing in the output. 
and three: there are various bugs, things that doesn't handle correctly yet, although it has compiled itself correctly. 
i expect this will just take a few months, and then i will release the compiler. 
the other sizable part of the system that exist, is the kernel. 
[question: a pause?] ah, yeah i guess we've forgotten about breaks. 
why don't i finish talking about the kernel, which should only take about five minutes, and then we can take a break. 
now, for the kernel i am planning to use a system called trix (it doesn't stand for anything that i know of) which was developed as a research project at mit. 
this system is based on remote procedure call. 
thus programs are called domains. 
each domain is a address space and various capabilities, and a capability is none other than the ability to call a domain. 
any domain can create "capability ports" to call it, and then it can pass these ports to other domains, and there is no difference between calling the system and calling another user domain. 
in fact you can't tell which you have. 
thus it is very easy to have devices implemented by other user programs. 
a file system could be implemented by a user program, transparently. 
it's also transparent to communicate across networks. 
you think that you're directly calling another domain, but really you're calling the network server domain. 
it takes the information that you gave in the call, and passes this over the network to another server program which then calls the domain that you're trying to talk to. 
but you and that other domain see this as happening invisibly. 
the trix kernel runs, and it has a certain limited amount of unix compatibility, but it needs a lot more. 
currently it has a file system that uses the same structure on disk as the ancient unix file system does. 
this made it easier to debug the thing, because they could set up the files with unix, and then they could run trix, but that file system doesn't have any of the features that i believe are necessary. 
features that i believe must be added include: version numbers, undeletion, information on when and how and where the file was backed up on tape, atomic superseding of files. 
i believe that it is good that in unix when a file is being written, you can already look at what's going there, so for example, you can use tail to see how far the thing got, that's very nice. 
and if the program dies, having partly written the file, you can see what it produced. 
these things are all good, but, that partly written output should not ever be taken for the complete output that you expected to have eventually. 
the previous version of that should continue to be visible and used by everyone who tries to use it, until the new version is completely and correctly made. 
this means that the new version should be visible in the file system but not under the name it is supposed to have. 
it should get renamed when it's finished. 
which is by the way what happens in its, although there each user program has to do this explicitly. 
for unix compatibility with the user programs, it has to happen invisibly. 
i have a weird hairy scheme to try to make version numbers fit with the existing unix user programs. 
and this is the idea that you specify a file name leaving the version number implicit, if you just specify the name in the ordinary way. 
but if you wish to specify a name exactly, either because you want to state explicitly what version to use, or because you don't want versions at all, you put a point at the end of it. 
thus if you give the filename foo it means "search the versions that exists for foo and take the latest one."
 but if you say foo. 
it means "use exactly the name foo and none other."
 if you say foo.3. 
it says "use exactly the name foo.3" which of course is version three of foo and none other. 
on output, if you just say foo, it will eventually create a new version of foo, but if you say foo. 
it will write a file named exactly foo. 
now there's some challenges involved in working out all the details in this, and seeing whether there are any lingering problems, whether some unix software actually breaks despite feeding them names with points in them and so on, to try to make it get the same behavior. 
i would expect that when you open a file for output whose name ends in a point, you should actually open that name right away, so you get the so you get the same unix behavior, the partially written output is immediately visible, whereas when you output a name that doesn't end in a point, the new version should appear when you close it, and only if you close it explicitly. 
if it gets closed because the job dies, or because the system crashes or anything like that, it should be under a different name. 
and this idea can be connected up to "star matching," by saying that a name that doesn't end in a point is matched against all the names without their version numbers, so if a certain directory has files like this: foo.1 foo.2 bar.8 if i say *, that's equivalent to foo bar because it takes all the names and gets rid of their versions, and takes all the distinct ones. 
but if i say *. then it takes all the exact names, puts a point after each one, and matches against them. 
so this gives me all the names for all the individual versions that exist. 
and similar, you can see the difference between *.c and *.c. 
this [the first] would give you essentially versionless references to all the .c files, whereas this [the second] will give you all the versions … well this actually wouldn't, you'd have to say *.c.*.; i haven't worked out the details here. 
another thing, that isn't a user visible feature and is certainly compatible to put in, is failsafeness in the file system. 
namely, by writing all the information on disk in the proper order, arranging that you can press "halt" at any time without ever corrupting thereby the file system on disk. 
it is so well known how to do this, i can't imagine why anyone would neglect it. 
another idea is further redundant information. 
i'm not sure whether i'll do this or not, but i have ideas for how to store in each file all of its names, and thus make it possible if any directory on disk is lost, to reconstruct it from the rest of the contents of the disk. 
also i think i know how to make it possible to atomically update any portion of a file. 
thus if you want to replace a certain subrange of a file with new data in such a fashion that any attempt to read the file will either see only the old data, or only the new data. 
i believe i can do that, without any locking even. 
for network support, i intend eventually to implement tcp/ip for this system. 
i also think it's possible to use kermit to get something effectively equivalent to uucp. 
a shell i believe has already been written. 
it has two modes, one imitating the bourne shell, and one imitating the c-shell in the same program. 
i have not received a copy of it yet, and i don't know how much work i'll have to do on it. 
also many other utilities exists. 
a make exists, ls, there's a yacc replacement called bison which is being distributed. 
something pretty close to a lex exists, but it's not totally compatible, it needs some work. 
and, in general what remains to be done is much less that what's been done, but we still need lots of people to help out. 
people always ask me "when is it going to be finished?"
 of course i can't know when it's going to be finished, but that's the wrong question to ask me. 
if you were planning to pay for it, it would make sense for you to want to know exactly what are you going to get and when. 
but since you're not going to pay for it, the right question for you to ask is "how can you help make it get finished sooner?"
 i have a list of projects, it is on a file at mit, and people who are interested in helping could send me mail at this internet address, and i will send back a list of projects. 
(i wonder if this is will work (looking at the chalk)). 
is this readable? 
this is "rms@gnu.org" (just follow the bouncing ball.) and now let's take a break, and after the break, i will say some really controversial things. 
so don't leave now. 
if you leave now, you're going to miss the real experience. 
[here we had a 15 min. 
break] i've been asked to announce how you can get copies of gnu software. 
well, one way of course is if you know a friend who has a copy, you can copy it, but if you don't know a friend who has a copy, and you're not on the internet, you can't ftp it, then you can always order a distribution tape, and send some money to the free software foundation. 
of course free programs is not the same thing as free distribution. 
i'll explain this in detail later. 
here i have an emacs manual, of the nicely printed variety. 
it has been phototypeset and then offset printed. 
although you can also print it yourself from the sources that come in the emacs distribution, you can get these copies from the free software foundation. 
you can come afterwards and look at this and also this contains an order for you might copy some information from, and this [front] picture has also sometimes been enjoyed. 
this [pointing at a figure being chased by rms riding a gnu] is a scared software hoarder, i'll be talking about him in a moment. 
software is a relatively new phenomenon. 
people started distributing software perhaps thirty years ago. 
it was only about twenty years ago that someone had the idea of making a business about it. 
it was an area with no tradition about how people did things, or what rights anybody had. 
and there were several ideas for what other areas of life you might bring traditions from by analogy. 
one analogy that is liked by a lot of professors in europe, is that between programs and mathematics. 
a program is sort of a large formula. 
now, traditionally nobody can own a mathematical formula. 
anybody can copy them and use them. 
the analogy that's most meaningful to ordinary people is with recipes. 
if you think about it, the thing that you have in ordinary life that's most like program is a recipe, it's instructions for doing something. 
the differences come because a recipe is followed by a person, not by a machine automatically. 
it's true there's no difference between source code and object code for a recipe, but it's still the closest thing. 
and no-one is allowed to own a recipe. 
but the analogy that was chosen was the analogy with books, which have copyright. 
and why was this choice made? 
because the people that had the most to gain from making that particular choice were allowed to make the decision. 
the people who wrote the programs, not the people who used the programs, were allowed to decide, and they decided in a completely selfish fashion, and as a result they've turned the field of programming into an ugly one. 
when i entered the field, when i started working at mit in 1971, the idea that programs we developed might not be shared was not even discussed. 
and the same was stanford and cmu, and everyone, and even digital. 
the operating system from digital at that time was free. 
and every so often i got pieces of program from digital system such as a pdp-11 cross assembler, and i ported it to run on its, and added lots of features. 
it was no copyright on that program. 
it was only in the late seventies that this began to change. 
i was extremely impressed by the sharing spirit that we had. 
we were doing something that we hoped was useful and were happy if people could use it. 
so when i developed the first emacs, and people wanted to start use it outside of mit, i said that it belongs to the emacs "commune," that in order to use emacs you had to be a member of the commune, and that meant that you had the responsibility to contribute all the improvements that you made. 
all the improvements to the original emacs had to be sent back to me so that i could incorporate them into newer versions of emacs, so that everyone in the community could benefit from them. 
but this started to be destroyed when scribe was developed at cmu, and then was sold to a company. 
this was very disturbing to a lot of us at many universities, because we saw that this was a temptation placed in front of everyone, that it was so profitable to be uncooperative and those of us who still believed in cooperation had no weapon to try to compel people to cooperate with us. 
clearly, one after another, people would defect and stop cooperating with the rest of society, until only those of us with very strong consciences would still cooperate. 
and that's what happened. 
the field of programming has now become an ugly one, where everyone cynically thinks about how much money he is going to get by not being nice to the other people in the field, and to the users. 
i want to establish that the practice of owning software is both materially wasteful, spiritually harmful to society and evil. 
all these three things being interrelated. 
it's spiritually harmful because it involves every member of society who comes in contact with computers in a practice that is obviously materially wasteful to other people. 
and every time you do something for your own good, which you know is hurting other people more that it helps you, you have to become cynical in order to support such a thing in your mind. 
and it's evil because it is deliberately wasting the work done in society and causing social decay. 
first i want to explain the kinds of harm that are done by attempts to own software and other information that's generally useful, then i'll go on to rebut the arguments made to support that practice, and then i want to talk about how to fight that phenomenon, and how i'm fighting it. 
the idea of owning information is harmful in three different levels. 
materially harmful on three different levels, and each kind of material harm has a corresponding spiritual harm. 
the first level is just that it discourages the use of the program, it causes fewer people to use the program, but in fact it takes no less work to make a program for fewer people to use. 
when you have a price on the use of a program this is an incentive, that's the word these software hoarders love to use, the price is an incentive for people not to use the program, and this is a waste. 
if for example only half as many people use the program because it has a price on it, the program has been half wasted. 
the same amount of work has produced only half as much wealth. 
now in fact, you don't have to do anything special to cause a program to get around to all the people who want to use it, because they can copy it themselves perfectly well, and it will get to everyone. 
all you have to do after you've written the program is to sit back and let people do what they want to do. 
but that's not what happens; instead somebody deliberately tries to obstruct the sharing of the program, and in fact, he doesn't just try to obstruct it, he tries to pressure other people into helping. 
whenever a user signs a nondisclosure agreement he has essentially sold out his fellow users. 
instead of following the golden rule and saying, "i like this program, my neighbor would like the program, i want us both to have it," instead he said, "yeah, give it to me. 
to hell with my neighbor! 
i'll help you keep it away from my neighbor, just give it to me!"
 and that spirit is what does the spiritual harm. 
that attitude of saying, "to hell with my neighbors, give me a copy."
 after i ran into people saying they wouldn't let me have copies of something, because they had signed some secrecy agreement, then when somebody asked me to sign a thing like that i knew it was wrong. 
i couldn't do to somebody else the thing that had made me so angry when it was done to me. 
but this is just one of the levels of harm. 
the second level of harm comes when people want to change the program, because no program is really right for all the people who would like to use it. 
just as people like to vary recipes, putting in less salt say, or maybe they like to add some green peppers, so people also need to change programs in order to get the effects that they need. 
now, the software owners don't really care whether people can change the program or not, but it's useful for their ends to prevent people. 
generally when software is proprietary you can't get the sources, you can't change it, and this causes a lot of wasted work by programmers, as well as a lot of frustration by users. 
for example: i had a friend who told me how she worked for many months at a bank where she was a programmer, writing a new program. 
now, there was a commercially available program that was almost right, but it was just not quite the thing they needed, and in fact as it was it was useless for them. 
the amount of change it would have taken to make it do what they needed was probably small, but because the sources of that program were not available, that was impossible. 
she had to start over from scratch and waste a lot of work. 
and we can only speculate about what fraction of all the programmers in the world are wasting their time in this fashion. 
and then there is also the situation where a program is adequate make do, but it's uncomfortable. 
for example: the first time we had a graphics printer at mit, we wrote the software ourselves, and we put in lots of nice features, for example it would send you a message when your job had finished printing, and it would send you a message if the printer ran out of paper and you had a job in the queue, and lots of other things that were what we wanted. 
we then got a much nicer graphic printer, one of the first laser printers, but then the software was supplied by xerox, and we couldn't change it. 
they wouldn't put in these features, and we couldn't, so we had to make do with things that "half worked."
 and it was very frustrating to know that we were ready, willing and able to fix it, but weren't permitted. 
we were sabotaged. 
and then there are all the people who use computers and say that the computers are a mystery to them, they don't know [how] they work. 
well how can they possibly know? 
they can't read the programs they're using. 
the only way people learn how programs should be written, or how programs do what they do, is by reading the source code. 
so i could only wonder whether the idea of the user who just thinks of the computer as a tool is not actually a self-fulfilling prophecy, a result of the practice of keeping source code secret. 
now the spiritual harm that goes with this kind of material harm, is in the spirit of self-sufficiency. 
when a person spends a lot of time using a computer system, the configuration of that computer system becomes the city that he lives in. 
just as the way our houses and furniture are laid out, determines what it's like for us to live among them, so that the computer system that we use, and if we can't change the computer system that we use to suit us, then our lives are really under the control of others. 
and a person who sees this becomes in a certain way demoralized: "it's no use trying to change those things, they're always going to be bad. 
no point even hassling it. 
i'll just put in my time and … when it's over i'll go away and try not to think about it any more."
 that kind of spirit, that unenthusiasm is what results from not being permitted to make things better when you have feelings of public spirit. 
the third level of harm is in the interaction between software developers themselves. 
because any field of knowledge advance most when people can build on the work of others, but ownership of information is explicitly designed to prevent anyone else to doing that. 
if people could build on other people's work, then the ownership would become unclear, so they make sure each new entry to the field has to start from the beginning, and thus they greatly slow down the advance of the field. 
so we can see: how many spreadsheet systems were made all by different companies, all without any benefit of understanding how it was done before? 
yes it's true, the first spreadsheet written wasn't perfect. 
it probably only ran on certain kinds of computers, and it didn't do some things in the best possible way. 
so there were various reasons why certain people would want to rewrite parts of it. 
but if they had only to rewrite the parts that they really wanted to improve, that would have made for a lot less work. 
you may see how to make one aspect of a system better, you may not see how to make another aspect of the same system any better, in fact you might have a great deal of trouble doing it as well. 
now if you could take the part that you like and redo only the part that you have an inspiration for, you could have a system that's better in all ways, with much less work than it now takes to write a completely new system. 
and we all know that a system can often benefit from being completely rewritten, but that's only if you can read the old one first. 
thus, the people in the programming field have evolved a way of wasting a lot of their time and thus making apparently a need for more programmers than we really need. 
why is there a programmer shortage? 
because with intellectual property programmers have arranged to waste half the work they do, so we seem to need twice as many programmers. 
and so, when people point to the system of intellectual property and say "look at the large employment statistics, look at how big this industry is" what that really proves is that people are wasting a lot of money and time. 
if they talk about looking for ways to improve programmer productivity, they're happy to do this if it involves superior tools, but to improve programmer productivity by getting rid of the explicit things that is done to reduce programmer productivity, that they're against. 
because that would reduce the number of programmers employed. 
there's something a little bit schizophrenic there. 
and the spiritual harm that corresponds to this level of material harm is to the spirit of scientific cooperation, which used to be so strong that scientists even in countries that were at war would continue cooperating, because they knew that what they were doing had nothing to do with the war, it was just for the long term benefit of humanity. 
nowadays, people don't care about the long term benefit of humanity any more. 
to get an idea of what it's like to obstruct the use of a program, let's imagine that we had a sandwich, that you could eat, and it wouldn't be consumed. 
you could eat it, and another person could eat it, the same sandwich, any number of times, and it would always remain just as nourishing as originally. 
the best thing to do, the thing that we ought to do with this sandwich is carry it around to the places where there are hungry people; bringing it to as many mouths as possible, so that it feeds as many people as possible. 
by all means, we should not have a price to eat from this sandwich, because then people would not afford to eat it, and it would be wasted. 
the program is like this sandwich, but even more so because it can be in many different places at once being eaten, used by different people one after the other. 
it is as if this sandwich was enough to feed everyone, everywhere, forever, and that were not allowed to happen, because someone believed he should own it. 
now, the people who believe that they can own programs, generally put forward two lines of argument for this. 
the first one is "i wrote it, it is a child of my spirit, my heart, my soul is in this. 
how can anyone take it away from me? 
wherever it goes it's mine, mine, mine!!"
 well, it's sort of strange that most of them signs agreements saying it belongs to the company they work for. 
so i believe this is one of the things you can easily talk yourself into believing is important, but you can just as easily convince yourself it doesn't matter at all. 
usually, these people use this argument to demand the right to control even how people can change a program. 
they say: "nobody should be able to mess up my work of art."
 well, imagine that the person who invented a dish that you plan to cook had the right to control how you can cook it, because it's his work of art. 
you want to leave out the salt, but he says "oh, no. 
i designed this dish, and it has to have this much salt!"
 "but my doctor says it's not safe for me to eat salt. 
what can i do?"
 clearly, the person who is using the program is much closer to the event. 
the use of the program affects him very directly, whereas it only has a sort of abstract relation to the person who wrote the program. 
and therefore, for the sake of giving people as much control as possible over their own lives, it has to be the user who decides those things. 
the second line of argument they make is the economic one. 
"how will people get payed to program?"
 they say, and there's a little bit of real issue in this. 
but a lot of what they say is confusion. 
and the confusion is, it's not at all the same to say "if we want to have a lot of people programming we must arrange for them not to need to make a living in any other fashion" on the one hand, and to say "we need to have the current system, you need to get rich by programming" on the other hand. 
there's a big difference between just making a living wage and making the kind of money programmers, at least in the us make nowadays. 
they always say: "how will i eat?"
 but the problem is not really how "will he eat?"
 but "how will he eat sushi?"
 "how will i have a roof over my head?"
 but the real problem is "how can he afford a condo?"
 the current system were chosen by the people who invest in software development, because it gives them the possibility of making the most possible money, not because it's the only way anyone can ever come up with money to support a system development effort. 
in fact, even as recently as ten and fifteen years ago it was common to support software development in other ways. 
for example, those digital operating systems that were free, even in the early seventies, were developed by people who were paid for their work. 
many useful programs has been developed at universities. 
nowadays those programs are often sold, but fifteen years ago they were usually free, yet the people were paid for their work. 
when you have something like a program, like an infinite sandwich, like a road, which has to be built once, but once it is built it pretty much doesn't matter how much you use it, there's no cost in using it, generally it's better if we don't put any price on using it. 
and there are plenty of those things that we develop now, and pay people to build. 
for example, all the streets out there. 
it's very easy to find people who will program without being paid; it really is impossible to find people who will build streets without being paid. 
building streets is not creative and fun like programming. 
but we have plenty of streets out there, we do come up with the money to pay them, and it's much better the way we do it than if if we said: "let's have companies go and build streets and put toll booths up, and then every time you turn another street corner, you pay another toll. 
and then the companies that picked the good places to put their streets, they will be profitable, and the others will go bankrupt."
 there's a funny thing that happens whenever someone comes up with a way of making lots of money by hoarding something. 
until that time you've probably had lots and lots of people who were really enthusiastic and eager to work in that field, the only sort of question is how can they get any sort of livelihood at all. 
if we think of mathematicians for example, there are a lot more people who want to be pure mathematicians than there is funding for anybody to be pure mathematicians. 
and even when you do get funding, you don't get very much, they don't live well. 
and for musicians it's even worse. 
i saw a statistics for how much the average musician, the average person devoting most of his time trying to be a musician, in massachusetts made; it was something like half the median income or less. 
it is barely enough to live on, it's difficult. 
but there are lots of them trying to do that. 
and then, somehow when it gets generally possible to get very well paid to do something, all those people disappear, and people start saying "nobody will do it unless they get paid that well."
 and i saw this happen in the field of programming. 
the very same people who used to work at the ai lab and get payed very little and love it, now wouldn't dream of working for less than fifty thousand dollars a year. 
what happened? 
when you dangle before people the possibility of making lots of money, when they see that other people doing similar work are getting paid that much money, they feel that they should get the same, and thus no-one is willing to continue the old way. 
and it's easy after this has happened to think that paying people a lot of money is the only way it could be, but that's not so. 
if the possibility of making a lots of money did not exist, you would have people who would accept doing it for a little money, specially when it's something that is creative and fun. 
now i saw the unique world of the ai lab destroyed, and i saw that selling software was an intrinsic part of what had destroyed it, and i saw also, as i explained before, how you need to have free software in order to have a community like that. 
but then thinking about it more, i realized all these ways in which hoarding software hurts all of society, most specially by pressuring people to sell out their neighbors and causing social decay. 
the same spirit that leads people to watch while somebody in the street is getting stabbed and not tell anyone. 
the spirit that we can see so many companies all around us displaying all the time. 
and it was clear to me i had a choice, i could become part of that world and feel unhappy about what i was doing with my life, or i could decide to fight it. 
so i decided to fight it. 
i've dedicated my career to try to rebuild the software sharing community, to trying to put an end to the phenomenon of hoarding generally useful information. 
and the gnu system is a means to this end. 
it is a technical means to a social end. 
with the gnu system, i hope to vaccinate the users against the threat of the software hoarders. 
right now the hoarders essentially claims the power to render a person's computer useless. 
there used to be people in the us, most commonly about fifty years ago, they were in the mafia, they would go up to stores and bars, especially bars when bars were illegal of course. 
they would go up and say: "a lot of places around here have been burning down lately. 
you wouldn't want your place to burn down, would you? 
well we can protect you from fires, you just have to pay us a thousand dollars a month, and we'll make sure you don't have a fire here."
 and this was called "the protection racket."
 now we have something where a person says "you got a nice computer there, and you've got some programs there that you're using. 
well, if you don't want those programs to disappear, if you don't want the police to come after you, you better pay me a thousand dollars, and i'll give you a copy of this program with a license," and this is called "the software protection racket."
 really all they're doing is interfering with everybody else doing what needs to be done, but they're pretending as much to them selves as to the rest of us, that they are providing a useful function. 
well, what i hope is that when that software mafia guy comes up and says, "you want those programs to disappear on your computer?"
 the user can say "i'm not afraid of you any more. 
i have this free gnu software, and there's nothing you can do to me now."
 now, one of the justifications people sometimes offer for owning software, is the idea of giving people an incentive to produce things. 
i support the idea of private enterprise in general, and the idea of hope to make money by producing things that other people like to use, but it's going haywire in the field of software now. 
producing a proprietary program is not the same contribution to society as producing the same program and letting it be free. 
because writing the program is just a potential contribution to society. 
the real contribution to the wealth of society happens only when the program is used. 
and if you prevent the program from being used, the contribution doesn't actually happen. 
so, the contribution that society needs is not these proprietary programs that everyone has such an incentive to make, the contribution we really want is free software, so our society is going haywire because it gives people an incentive to do what is not very useful, and no incentive to do what is useful. 
thus the basic idea of private enterprise is not being followed, and you could even say that the society is neurotic. 
after all when an individual encourages in others behavior that is not good for that individual we call this a neurosis. 
here society is behaving in that fashion, encouraging programmers to do things that is not good for society. 
i'm unusual. 
i'd rather believe that i'm a good member of society and that i'm contributing something, than feel that i'm ripping society off successfully, and that's why i've decided to do what i have done. 
but every one is at least a little bit bothered by the feeling that they are getting paid to do what's not really useful. 
so let's stop defending this idea of incentives to do the wrong thing and let's at least try to come up with arrangements to encourage people to do the right thing, which is to make free software. 
thank you. 
[after this rms answered questions for about an hour. 
i have only included a very few of the questions and answers in this version. 
the tape was bad, and i didn't have the time to do a proper job on all of it.] q: has anyone tried to make problems for you? 
a: the only time anyone has tried to make a problem for me was those owners, so called, self-styled owners of gosling emacs. 
aside from that they have no grounds to do so, so there is not much they can do. 
by the way, i'd like to call everyone's attention to the way in which people use language to try to encourage people to think certain thoughts and not think of others. 
much of the terminology current in the field was chosen by the self-styled software owners to try to encourage you to try to make you see software as similar to material objects that are property, and overlook the differences. 
the most flagrant example of this is the term "pirate."
 please refuse to use the term "pirate" to describe somebody who wishes to share software with his neighbor like a good citizen. 
i forgot to tell you this: the idea of copyright was invented after the printing press. 
in ancient times authors copied from each other freely, and this was not considered wrong, and it was even very useful: the only way certain authors works have survived, even in fragments, is because some of them were quoted at length in other works which have survived. 
this was because books were copied one copy at the time. 
it was ten times as hard to make ten copies as it was to make one copy. 
then the printing press was invented, and this didn't prevent people from copying books by hand, but by comparison with printing them, copying by hand was so unpleasant that it might as well have been impossible. 
when books could only be made by mass production, copyright then started to make sense and it also did not take away the freedom of the reading public. 
as a member of the public who didn't own a printing press, you couldn't copy a book anyway. 
so you weren't losing any freedom just because there were copyrights. 
thus copyright was invented, and made sense morally because of a technological change. 
now the reverse change is happening. 
individual copying of information is becoming better and better, and we can see that the ultimate progress of technology is to make it possible to copy any kind of information. 
[break due to turning of tape] thus we are back in the same situation as in the ancient world where copyright did not make sense. 
if we consider our idea of property, they come from material objects. 
material objects satisfy a conservation law, pretty much. 
yes it's true i can break a chalk in half, that's not it, and it gets worn down, it gets consumed. 
but basically this is one chair [pointing at a chair]. 
i can't just sort of snap my finger and have two chairs. 
the only way to get another one is to build it just the way the first one was build. 
it takes more raw materials, it takes more work of production, and our ideas of property were evolved to make moral sense to fit these facts. 
for a piece of information that anyone can copy, the facts are different. 
and therefore the moral attitudes that fit are different. 
our moral attitudes comes from thinking how much it will help people and how much it will hurt people to do certain things. 
with a material object, you can come and take away this chair, but you couldn't come and copy it. 
and if you took away the chair, it wouldn't be producing anything, so there's no excuse. 
i somebody says: "i did the work to make this one chair, and only one person can have this chair, it might as well be me," we might as well say: "yeah, that makes sense."
 when a person says: "i carved the bits on this disk, only one person can have this disk, so don't you dare take it away from me," well that also make sense. 
if only one person is going to have the disk, it might as well be the guy who owns that disk. 
but when somebody else comes up and says: "i'm not going to hurt your disk, i'm just gonna magically make another one just like it and then i'll take it away and then you can go on using this disk just the same as before," well, it's the same as if somebody said: "i've got a magic chair copier. 
you can keep on enjoying your chair, sitting in it, having it always there when you want it, but i'll have a chair too."
 that's good. 
if people don't have to build, they can just snap their fingers and duplicate them, that's wonderful. 
but this change in technology doesn't suit the people who want to be able to own individual copies and can get money for individual copies. 
that's an idea that only fits conserved objects. 
so they do their best to render programs like material objects. 
have you wondered why, when you go to the software store and buy a copy of a program it comes in something that looks like a book? 
they want people to think as if they were getting a material object, not to realize what they have really got in the form of digital copyable data. 
what is a computer after all but a universal machine? 
you've probably studied universal turing machines, the machines that can imitate any other machine. 
the reason a universal machine is so good is because you can make it imitate any other machine and the directions can be copied and changed, exactly the things you can't do with a material object. 
and those are exactly what the software hoarders want to stop the public from doing. 
they want to have the benefit of the change in technology, to universal machines, but they don't want the public to get that benefit. 
essentially they are trying to preserve the "material object age," but it's gone, and we should get our ideas of right and wrong in sync with the actual facts of the world we live in. 
q: so it boils down to ownership of information. 
do you think there are any instances where, [in] your opinion, it's right to own information? 
a: with information that's not generally useful, or is of a personal nature, i would say it's ok. 
in other words not information about how to do things, but information about what you intend to do. 
information whose only value to others is speculative, that is they can take some money away from you, but they can't actually create anything with it. 
it's perfectly reasonable i'd say to keep that sort of thing secret and controlled. 
but in terms of creative information, information that people can use or enjoy, and that will be used and enjoyed more the more people who have it, always we should encourage the copying. 
the danger of software patents (2001). 
speech given at model engineering college, government of kerala, india, 2001 (audio recording) summary. 
introduction of the speaker stallman's speech there are two things wrong with the phrase "intellectual property."
 copyrights and patents have nothing to do with each other. 
how the patent system works. 
you have to work with a lawyer. 
avoid the patent. 
license the patent. 
challenge the validity of the patent. 
nobody can reinvent the entire field of software. 
the relationship between patents and products varies between the fields. 
program development is hampered by software patents. 
what can a country do to avoid this problem? 
preventing india from having software patents will be up to the citizens of india. 
businesses should demand opposition to software patents. 
it's important for countries to work together against this. 
questions from the audience questions about software patents questions about free software introduction of the speaker. 
prof. 
jyothi john, head of computer engineering department introduces stallman: it's my privilege and duty to welcome the most distinguished guest ever we had in this college. 
mr. 
richard mathew stallman launched the development of the gnu operating system in 1984, the goal being to create a completely free unix-like operating system. 
the organization that was founded in 1985 to further this purpose is the free software foundation. 
stallman is a visionary of computing in our times, and is the genius behind programs such as emacs, gcc, the gnu debugger and more. 
most importantly, he's the author of the gnu general public license, the license under which more than half of all free software is distributed and developed. 
the combination of gnu with linux, the kernel, called the gnu/linux operating system, now has an estimated twenty million users worldwide. 
stallman's concept of free software talks about freedom, rather than about price. 
his ideas go a long way into ensuring development of software for the welfare of society, collectively developed by programmers who do not "lock up" their work, but rather release it for others to study, modify and redistribute. 
stallman received the grace hopper award from the association for computing machinery for 1991, in 1990 he was awarded macarthur foundation fellowship—other recipients of this prestigious award include noam chomsky and tim berners-lee. 
in 1996, an honorary doctorate of technology from the royal institute, sweden was awarded to him. 
in 1998, he received the electronic frontier foundation's pioneer award, along with linus torvalds. 
in 1999 he received the yuri rubinski memorial award. 
today, stallman will be talking about the danger of software patents. 
in fact this is one of the most important aspect of the freedom of programming because the aspect of software patents may make all programmers potential lawbreakers because unknowingly they may be violating some of the patents registered by some other company. 
stallman's speech. 
after that introduction, i am sure many of you want to know about free software. 
but unfortunately that's not what i am supposed to speak about. 
in fact, this topic, software patents, is not very closely related to the issue of free software. 
software patents are a danger that affect all programmers and all computer users. 
i found out about them, of course, in working on free software because they are a danger to my project as well as to every other software project in the world. 
there are two things wrong with the phrase "intellectual property."
. there is a very unfortunate phrase that you may have heard. 
it is the phrase "intellectual property."
 now, there are two things wrong with this phrase. 
one—it prejudges the most important policy question about how to treat some kind of ideas or practices or works, or whatever. 
it assumes that they are going to be treated as some kind of property. 
now, this is a public policy decision and you should be able to consider various alternatives to choose the best one. 
which means you shouldn't name the whole field, name the question with a term that prejudges what kind of answer you use. 
but second and even more fundamental, that term is actually a catchall for totally different areas of law, including copyrights, patents, trademarks, trade secrets and various other things as well. 
now these areas of the law in fact have almost nothing in common. 
what the laws say is totally different from one to the next. 
their origins are completely independent and the public policy issues they raise are completely different. 
so, the only intelligent way to think about them is to pick one of them and think about it; think about them separately. 
so the intelligent way to talk about them is never to generalize about them but to talk about a specific one, you know, talk about copyrights, or talk about patents, or talk about trademarks, but never lump them all together as intellectual property because that's a recipe for simplistic conclusions. 
it's almost impossible to think intelligently about "intellectual property" and so i refuse to do that. 
i just tell people why the term is a mistake, and then if you ask me for my opinion on copyrights or my opinion on patents, it will take me an hour to tell you it. 
but they are two different opinions, and my opinion about trademarks is something completely different as well. 
copyrights and patents have nothing to do with each other.. 
so the most important thing for you to start with is never mix copyrights and patents as topics. 
they have nothing to do with each other. 
let me tell you some of the basic differences between copyrights and patents: a copyright deals with a particular work, usually a written work, and it has to do with the details of that work. 
ideas are completely excluded. 
patents, by contrast—well, a patent covers an idea. 
it's that simple, and any idea that you can describe, that's what a patent might restrict you from doing. 
copyrights have to do with copying. 
if you wrote something that was word for word the same as some famous novel, and you could prove that you did this while you were locked up in a room and you have never seen that novel, this would not be copyright violation because it's not copying. 
but a patent is an absolute monopoly on using a particular idea. 
and even if you could show that you thought of it on your own, that would be considered totally irrelevant. 
it doesn't help you. 
copyrights exist automatically. 
whenever anything is written, it's copyrighted. 
patents are issued through an expensive application process. 
there is an expensive fee and even more expense in paying lawyers, which of course tends to be good for big companies. 
and the patent office says that it only issues patents for things that are unobvious. 
however, practically speaking, in many patent offices the criterion is unobvious to somebody with an iq of fifty. 
and they have all sorts of excuses to ignore the fact that whenever any programmer looks at it, his first statement is "this is absurd, it's obvious."
 they say "well, this is hindsight."
 so they just have an excuse to completely ignore the judgment of everybody who really is a programmer. 
copyrights last an extremely long time. 
in the us today it's possible for copyrights to last for 150 years, which is absurd. 
patents don't last that long; they merely last for a long time—20 years, which in the field of software, as you can imagine, is a long time. 
there are many other differences as well. 
in fact every detail is different. 
so the worst thing you should ever do is learn something about copyrights and suppose that the same is true of patents. 
no, more likely it's not true of patents. 
if it's true of copyrights, it's not true for patents. 
that would be a better guideline if you have to guess. 
how the patent system works.. 
now most of the time when people describe how the patent system works, they are people with a vested interest in the system. 
and so they describe the patent system from the point of view of somebody who wants to get a patent and then point it at programmers and say "hand me your money."
 this is natural, you know; when they sell lottery tickets, they talk about people who win, not people who lose. 
of course most of the people lose, but they don't want you to think about that, so they talk about the ones who win. 
it's the same with patents. 
the patent system is a very expensive lottery for its participants. 
but of course, the people who run the system want you to think about the small chance you might win. 
so to redress this imbalance, i am going to explain what the patent system looks like from the point of view of somebody who might be the victim of a patent; that is, somebody who wants to develop software. 
suppose that you want to develop a program and you are in a country that has software patents. 
how do you have to deal with the patent system? 
well, the first thing is you have to find out about the patents that might potentially affect your area. 
this is impossible, because patents that are in the pipeline, being considered by the patent office, are secret. 
well, in some countries they are published after 18 months but that still gives plenty of time for them to be secret. 
so you might develop a program this year, which is perfectly legal and safe this year. 
and then next year, a patent could be issued and all of a sudden you could be sued. 
it happens. 
or your users could get sued. 
for instance, in 1984 the compress program was developed and, since it was free software, it was distributed by many companies along with unix systems. 
well, in 1985, a us patent was issued on the lzw compression algorithm used by compress, and after a few years unisys began squeezing money out of various companies. 
well, since we in the gnu project needed a data compression program and since we could not use compress, we began looking for some other compression program. 
we found out about… somebody came forward and said: "i have been working on this algorithm for a year and now i have decided i am going to contribute it to you, and here is the code."
 we were a week away from releasing this program when i just happened to see a copy of the new york times, which doesn't happen very often, and it just happened to have the weekly patents column and i noted it and so i read it. 
it said that somebody had got a patent for inventing a new method, a better method of data compression. 
well, that was not in fact true. 
when i saw this, i thought we'd better get a copy of this patent and see if it's a problem, and it turned out to cover exactly the algorithm that we were about to release. 
so this program was killed one week before it was released. 
and in fact that person, that patent holder, had not invented a better method, because in fact it wasn't new. 
but that doesn't matter, he had a monopoly. 
eventually we found another compression algorithm which is used in the program that's known as gzip. 
but this illustrates the danger that you face: even if you had unlimited resources, you couldn't find out about all the patents that might endanger your project. 
but you can find out about the issued patents because they are published by the patent office. 
so in principle, you could read them all, and see what they restrict, what they prohibit you from doing. 
practically speaking though, once there are software patents there are so many of them that you can't keep up with them. 
in the us there are over a hundred thousand of them; maybe two hundred thousand by now. 
this is just an estimate. 
i know that 10 years ago they were issuing 10,000 a year and i believe that it has accelerated since then. 
so it's too much for you to keep track of them unless that's your full-time job. 
now you can try to search for the ones that are relevant to what you are doing, and this works some of the time. 
if you search for certain keywords or follow links, you'll find some patents that are relevant to what you're doing. 
you won't find them all. 
a few years ago somebody had a us patent—maybe it's expired by now—on natural order recalculation in spreadsheets. 
now, what does this mean? 
it means the original spreadsheets did the recalculation always from top to bottom. 
which meant that if a cell ever depended on a lower cell, then it wouldn't get recalculated the first time; you'd have to do another recalculation to get that one. 
clearly it's better to do the recalculation in the order, you know. 
if a depends on b, then do b first and then do a. this way a single recalculation will make everything consistent. 
well, that's what the patent covered. 
now, if you searched for the term spreadsheet, you would not have found that patent because that term did not appear in it. 
the phrase "natural order recalculation" didn't appear either. 
this algorithm—and it was indeed the algorithm that they covered, basically every imaginable way of coding this algorithm—the algorithm is called topological sorting, and that term did not appear in the patent either. 
it presented itself as a patent on a technique for compilation. 
so, reasonable searching would not have found this patent but it would still have been a basis to sue you. 
in fact you can't tell what a software patent covers even roughly, except by studying it carefully. 
this is different from patents in other areas, because in other areas there is some physical thing happening, and the details of that physical thing usually give you a sort of anchor so that you can tell whether it relates or not. 
but in software there is no such thing, and so it's easy for two totally different ways of saying something to cover, in fact, the same computation, and it takes careful study to see that they cover the same one. 
because of this, even the patent office can't keep track. 
so, there is not one, but two patents covering lzw data compression. 
the first one was issued in 1985 and i think the second one in 1989. 
but that one i think had been applied for even earlier. 
one of these patents belongs to unisys and the other belongs to ibm. 
now, this kind of mistake is not in fact that rare. 
it's not the only one. 
you see, patent examiners don't have a lot of time to spend on one patent. 
in the us they have an average of 17 hours per patent. 
now that's not enough to carefully study all the other patents in the area to see if they are really the same thing. 
so they are going to make this kind of mistake over and over. 
you have to work with a lawyer.. 
so you won't find all the patents that might threaten you but you'll find some of them. 
then what do you do? 
you have to try to figure out precisely what these patents prohibit. 
that is very hard, because patents are written in tortuous legal language which is very hard for an engineer to understand. 
you are going to have to work with a lawyer to do it. 
in the 1980's the australian government commissioned a study of the patent system—the patent system in general, not software patents. 
this study concluded that australia would be better off abolishing the patent system because it did very little good for society and caused a lot of trouble. 
the only reason they didn't recommend that was international pressure. 
so one of the things they cited was that patents, which were supposed to disclose information so that it would no longer be secret, were in fact useless for that purpose. 
engineers never looked at patents to try to learn anything, because it's too hard to read them. 
in fact they quoted an engineer saying "i can't recognize my own inventions in patent deeds."
 now this is not just theoretical. 
a few years ago, an engineer in the us named paul heckel was suing apple. 
he got a couple of software patents in the late 80's for a software package, and then when he saw hypercard he looked at it and said " this is nothing like my program," and didn't think anymore of it. 
but then later on, his lawyer explained to him that if you read his patents carefully, hypercard fell into the prohibited area. 
so he sued apple, figuring this was an opportunity to get some money. 
well, once when i gave a speech like this, he was in the audience, and he said "oh no that's not true, i just wasn't aware of the scope of my protection."
 and i said "yeah, that's what i said."
 so you are going to have to spend a lot of time working with a lawyer and explaining to the lawyer what project you are working on, so the lawyer can explain to you what the patents imply. 
this is going to be expensive, and when you're done the lawyer will tell you something like this: "if you do something in this area, you are almost sure to lose a lawsuit. 
if you do something in this area, you are in a substantial danger, and if you really want to be safe you'd better stay out of this area, and, of course there is a substantial element of chance in the outcome of any lawsuit."
 so now that you have a predictable terrain for doing business, what are you going to do? 
well, you have three options to consider: you can try to avoid the patent, you can try to license the patent, or you can try to challenge its validity in court any one of these three is sometimes a viable alternative, and sometimes not. 
avoid the patent.. 
first, let's consider avoiding the patent. 
well, in some cases that's easy. 
you know, unisys was threatening people using the patent on lzw compression; we just had to find another data compression algorithm and we could avoid that patent. 
well, that was somewhat difficult because there were many other patents covering lots of other data compression algorithms. 
but eventually we found one that was not in the area that those others' patents cover; eventually we did. 
so that program was implemented. 
it actually gave better compression results and so we now have gzip, and a lot of people use gzip. 
so, in that one case it was considerable work but we were able to do it, to avoid that patent. 
but in the 80's, compuserve defined an image format called gif and used lzw compression in defining it. 
well, of course once the uproar about these patents became known, people defined another image format using a different compression algorithm. 
they used the gzip algorithm, and that format is called png format, which i suppose means "png is not gif."
 but there was a problem: lots of people had already started using gif format, and there were many programs that could display gif format and produce gif format and they couldn't display png format. 
so the result was people felt it was too hard to switch. 
you see, when you are dealing with a data compression program used by somebody who says "i want to compress some data," well, you can give him a different data compression program; if he can get sued for using this one and you give him another one, he'll switch; but if what he wants to do is make images that can be displayed by netscape, then he can't switch, unless netscape handles the other format… and it didn't. 
it took years, i think, before netscape started to handle png format. 
so people essentially said "i can't switch, i just have… " and so the result was, society had invested so much in this one format, that the inertia was too great for a switch, even though there was another superior format available. 
even when a patent is rather narrow, avoiding it can be very hard. 
the postscript specification includes lzw compression, which we in our implementation of postscript cannot implement. 
we support another kind of compression in some sense that is not correct, even though it does the useful job. 
so, even a narrow patent is not always feasible to avoid. 
now, sometimes a feature gets patented. 
in that case, you can avoid the patent by taking out that feature. 
in the late 80's the users of the word processor xywrite got a downgrade in the mail. 
that word processor had a feature where you could define a short word or sequence as an abbreviation. 
whenever you typed in that short sequence and then a space, it would turn into a longer expansion. 
you could define these any way you liked. 
then somebody patented this, and xywrite decided to deal with the patent by removing the feature. 
they contacted me because in fact i had put a feature like that into the original emacs editor back in the 70's, many years before this patent. 
so there was a chance that i could provide evidence that would enable them to fight the patent. 
well, this showed me that i had at least one patentable idea in my life. 
i know because someone else patented it. 
now, of course, you can respond to these patented features by taking the features out. 
but once your program starts being missing several features that users want, it might be useless as a program. 
now you may have heard of adobe photoshop. 
we have a program called the gimp which is more powerful and general than photoshop. 
but there is one important feature that it doesn't have which is pantone color matching, which is very important for people who want to actually print the images on paper and get reliable results. 
this feature is omitted because it's patented. 
and as a result, the program for one substantial class of users is crippled. 
if you look at programs today, you'll see that they often provide many features, and the users demand these features. 
if any important feature is missing, well, it's easy to leave it out, but the results may be very bad. 
of course, sometimes a patent is so broad that it's impossible to avoid it. 
public key encryption is essential for computer users to have privacy. 
the whole field was patented. 
that patent expired just four years ago; there could be no free software in the us for public key encryption, until then: many programs, both free and nonfree, were wiped out by the patent holders. 
and in fact that whole area of computing was held back for more than a decade despite strong interest. 
license the patent.. 
so, that is the possibility of avoiding the patent. 
another possibility that is sometimes available is to license the patent. 
now, the patent holder is not required to offer you a license that's his whim. 
the patent holder can say "i'm not licensing this, you're just out of business, period!"
 in the league for programming freedom, we heard in the early 90's from somebody whose family business was making casino games— computerized of course—and he had been threatened by somebody who had a patent on a very broad category of computerized casino games. 
the patent covered a network where there is more than one machine, and each machine supports more than one kind of game and can display more than one game in progress at a time. 
now, one thing you should realize is the patent office thinks that it's really brilliant. 
if you see that other people implemented doing one thing and you decide to support doing two or more—you know, if they made a system that plays one game and if you make it able to play more than one game—that's an invention. 
if it can display one game and you decide to set it up so that it can display two games at once, that's an invention. 
if he did it with one computer and you do it with a network having multiple computers, that's an invention for them. 
they think that these steps are really brilliant. 
of course, we in computer science know that this is just a rule, you can generalize anything from one to more than one. 
it's the most obvious principle there is. 
every time you write a subroutine, that's what you're doing. 
so this is one of the systematic reasons why the patent system produces, and then upholds patents that we would all say are ridiculously obvious. 
you can't assume, just because it's ridiculously obvious, that they wouldn't be upheld by a court. 
they may be legally valid despite the fact that are utterly stupid. 
so he was faced with this patent and the patent holder was not even offering him the chance to get a license. 
"shutdown!"
 is what the patent holder said, and that's what he eventually did. 
he couldn't afford to fight it. 
however, many patent holders will offer you a chance of a license. 
but it will cost you dearly. 
the owners of the natural order recalculation patent were demanding five percent of the gross sales of every spreadsheet. 
and that, i was told, was the cheap pre-lawsuit price. 
if you insisted on fighting over the matter, they were going to charge more. 
now you could, i suppose, sign a license like that for one patent, you could do it for two, you could do it for three. 
but what if there are twenty different patents in your program, and each patent holder wants five percent of the gross sales? 
what if there are twenty one of them? 
then you are pretty badly screwed. 
but actually business people tell me that two or three such patents would be such a big burden that they would make the company fail in practice, even if in theory it might have a chance. 
so, a license for a patent is not necessarily a feasible thing to do, and for us, free software developers, we're in an even worse position because we can't even count the copies, and most licenses demand a fee per copy, so it's absolutely impossible for us to use one of those licenses. 
you know, if a license charged one millionth part of a rupee for each copy, we would be unable to comply because we can't count the copies. 
the total amount of money, i might have in my pocket, but i can't count it so i can't pay it. 
so we suffer some special burdens occasionally. 
but there is one kind of organization for which licensing patents works very well, and that is the large multinational corporations; the reason is that they own many patents themselves and they use them to force cross-licensing. 
what does this mean? 
well, essentially the only defense against patents is deterrence: you have to have patents of your own, then you hope that if somebody points a patent at you, you will be able point a patent back and say "don't sue me, because i'll sue you."
 however, deterrence doesn't work as well for patents as it does with nuclear weapons, and the reason is that each patent is pointed in a fixed direction. 
it prohibits certain specified activities. 
so the result is that most of the companies that are trying to get some patents to defend themselves with, they have no chance of making this a success. 
they might get a few patents, you know. 
so they might get a patent that points there, and they might get a patent that points there. 
ok, and then, if somebody over here threatens this company, what are they going to do? 
they don't have a patent pointing over there, so they have no defense. 
meanwhile, sooner or later, somebody else will wander over there and the executive of the company will think "gee, we're not as profitable as i would like, why don't i go just squeeze some money out of them."
 so they say first "we're getting this patent for defensive purposes," but they often change their minds later when a tempting victim walks by. 
and this, by the way, is the fallacy in the myth that the patent system "protects" the "small inventor."
 let me tell you this myth, it's the myth of the starving genius. 
it's somebody who has been working in isolation for years, and starving, and has a brilliant new idea for how to do something or other. 
and so, now, he's starting a company and he is afraid some big company like ibm will compete with him, and so he gets a patent and this patent is going to "protect him."
 well, of course, this is not the way things work in our field. 
people don't make this kind of progress in isolation this way. 
they are working with other people and talking with the other people and they are developing software usually. 
and so the whole scenario doesn't make sense, and besides, if he was such a good computer scientist, there was no need for him to starve. 
he could have got a job at any time if he wanted. 
but let's suppose that this happened, and suppose that he has his patent, and he says "ibm, you can't compete with me 'cause i've got this patent."
 but here is what ibm says: "well, gee, let's look at your product, hmm, i have this patent, and this patent and this patent and this patent and this patent that your product is violating. 
so how about if we cross-license?"
 and the starving genius says "hmm, i haven't got enough food in my belly to fight these things, so i'd better give in."
 and so they sign a cross-license, and now guess what—ibm can compete with him. 
he wasn't protected at all! 
now, ibm can do this because they have a lot of patents. 
they have patents pointing here, here, here, everywhere. 
so, anybody from almost anywhere that attacks ibm is facing a stand-off. 
a small company can't do it but a big company can. 
so ibm wrote an article. 
it was in think magazine, i believe, issue number five, 1990—that's ibm's own magazine—an article about ibm's patent portfolio. 
ibm said that it got two kinds of benefit from its 9000 active us patents. 
one benefit was collecting royalties from licenses. 
but the other benefit, the bigger benefit, was access to things patented by others. 
permission to not be attacked by others with their patents, through cross-licensing. 
and the article said that the second benefit was an order of magnitude greater than the first. 
in other words, the benefit to ibm of being able to make things freely, not being sued, was ten times the benefit of collecting money for all their patents. 
now the patent system is a lot like a lottery, in that what happens with any given patent is largely random and most of them don't bring any benefits to their owners. 
but ibm is so big that these things average out over the scale of ibm. 
so you could take ibm as measuring what the average is like. 
what we see is—and this is a little bit subtle—the benefit to ibm of being able to make use of ideas that were patented by others is equal to the harm that the patent system would have done to ibm if there were no cross-licensing—if ibm really were prohibited from using all those ideas that were patented by others. 
so what it says is: the harm that the patent system would do is ten times the benefit, on the average. 
now, for ibm though, this harm doesn't happen, because ibm does have 9000 patents and does force most of them to cross-license, and avoids the problem. 
but if you are small, then you can't avoid the problem that way, and you will really be facing ten times as much trouble as benefit. 
anyway, this is why the big multinational corporations are in favor of software patents, and they are lobbying governments around the world to adopt software patents and saying naive things like "this is a new kind of monopoly for software developers, it has to be good for them, right?"
 well, today, after you have heard my speech i hope you understand why that isn't true. 
you have to look carefully at how patents affect software developers to see whether they are good or bad, and explaining that is my overall purpose. 
challenge the validity of the patent.. 
so, that is the possibility of licensing a patent. 
the third possible option is to go to court and challenge the validity of the patent. 
now the outcome of this case will depend largely on technicalities, which means essentially on randomness, you know. 
the dice were rolled a few years ago, and you can investigate and find out what the dice came up saying, and then you'll find out whether you've got a chance. 
so it's mainly historical accident that determines whether the patent is valid—the historical accident of whether, or precisely which things, people happen to publish, and when. 
so, sometimes, there is a possibility of invalidating. 
so even if a patent is ridiculously trivial, sometimes there is a good chance of invalidating it and sometimes there is none. 
you can't expect the courts to recognize that it is trivial, because their standards are generally much lower than we would think are sensible. 
in fact, in the united states, this has been a persistent tendency. 
i saw a supreme court decision from something like 1954, which had a long list of patents that were invalidated by the supreme court starting in the 1800's. 
and they were utterly ridiculous, like making a certain shape of doorknob out of rubber, when previously they'd been made out of wood. 
and this decision rebuked the patent system for going far, far away from the proper standards. 
and they just keep on doing it. 
so you can't expect sensible results from that, but there are situations where, when you look at the past record, you see that there is a chance to invalidate a certain patent. 
it's worth the try, at least to investigate. 
but the actual court cases happen to be extremely expensive. 
a few years ago, one defendant lost and had to pay 13 million dollars, of which most went to the lawyers on the two sides. 
i think only 5 million dollars was actually taken away by the patent holder, and so there were 8 million to the lawyers. 
nobody can reinvent the entire field of software.. 
now, these are your possible options. 
at this point, of course, you have to write the program. 
and there, the problem is that you face this situation not just once but over and over and over, because programs today are complicated. 
look at a word processor; you'll see a lot of features, many different things, each of which could be patented by somebody, or a combination of two of them could be patented by somebody. 
british telecom has a patent in the us on the combination of following hypertext links and letting the user dial up through a phone line. 
now these are two basically separate things, but the combination of the two is patented. 
so, that means if there are 100 things in your program, there are potentially some five thousand pairs of two that might be patented by somebody already, and there is no law against patenting a combination of three of them either. 
that's just the features, you know. 
there's going to be many techniques that you use in writing a program, many algorithms, they could be patented too. 
so there are lots and lots of things that could be patented. 
the result is that developing a program becomes like crossing a field of land mines. 
sure, each step probably will not step on a patent, each design decision. 
chances are it will be safe. 
but crossing the whole field becomes dangerous. 
the best way for a nonprogrammer to understand what this is like is to compare the writing of these large programs with another area in which people write something very large: symphonies. 
imagine if the governments of europe in the 1700's had wanted to promote progress in symphonic music by adopting a system of music patents, so that any idea that could be described in words could be patented if it seemed to be new and original. 
so you'd be able to patent, say, a three-note melodic motif which is be too short to be copyrightable, but it would have been patentable. 
and maybe they could have patented a certain chord progression, and maybe patented using a certain combination of instruments playing at the same time, or any other idea that somebody could describe. 
well, by 1800 there would have been thousands of these music idea patents. 
and then imagine that you are beethoven and you want to write a symphony. 
to write a whole symphony, you are going to have to do lots of different things, and at any point you could be using an idea that somebody else has patented. 
of course, if you do that he'll say: "oh! 
you are just a thief, why can't you write something original?"
 well, beethoven had more than his share of new musical ideas, but he used a lot of existing musical ideas. 
he had to, because that's the only way to make it recognizable. 
if you don't do that, people won't listen at all. 
pierre boulez thought he was going to totally reinvent the language of music, and he tried, and nobody listens to it, because it doesn't use all the ideas that they're familiar with. 
so you have to use the old ideas that other people have thought of. 
nobody is such a genius that he can reinvent the entire field of software and do useful things without learning anything from anybody else. 
so in effect, those people, the patent holders and their lawyers, they are accusing us of being cheaters because we don't totally reinvent the field from scratch. 
we have to build on previous work to make progress, and that is exactly what the patent system prohibits us from doing. 
and we have to provide features that the users are accustomed to and can recognize, or they'll find our software just too difficult to use no matter how good it is. 
the relationship between patents and products varies between the fields.. 
now, people sometimes ask me: why is software different from other fields? 
sometimes, of course they ask this in a rather nasty fashion, they say: "the other fields can deal with patents, why should software be an exception?"
 now that's a nasty way of putting it because it's making the assumption that it's wrong to want to escape from a problem. 
i could imagine i am saying: "well, other people could get cancer, why shouldn't you?"
 clearly, if it's a problem, enabling any field to escape is good. 
but it is a good and serious question: are these fields the same issue? 
do patents affect all these fields the same way? 
is the right policy for software the same as the right policy for automobile engines or pharmaceuticals or chemical processes, you know, this is a serious question which is worth looking at. 
when you look at it, what you see is that the relationship between patents and products varies between the fields. 
at one extreme you have pharmaceuticals where typically a whole chemical formula is patented. 
so if you come up with a new drug, then it's not patented by somebody else. 
at the other extreme is software where, when you write a new program, you are combining dozens or hundreds of ideas, and we can't expect them all to be new. 
even an innovative program, which has a few new ideas, has to use lots and lots of old ideas too. 
and in between you find the other fields. 
even in other fields, you can get patent deadlock. 
when the united states entered world war i, nobody in the us could make a modern airplane. 
and the reason was that modern airplanes use several different techniques that were patented by different companies, and the owners hated each other. 
so nobody could get a license to use all these patents. 
well, the us government decided that this was an unacceptable state of affairs, and essentially paid those patent holders a lump sum and said "we have nationalized these patents; now, everybody, go make airplanes for us!"
 but the amount to which this happens, the frequency and the seriousness of it varies according to how many different ideas go in one product. 
it varies according to how many points of patent vulnerability there are in one product. 
and in that question, software is at the extreme. 
it's not unusual for a few people working for a couple of years to write a program that could have a million parts in it, different parts, which is maybe, say, 300,000 lines of code. 
to design a physical system that has a million different parts, that's a mega-project, that's very rare. 
now you'll find many times people make a physical object with a million parts, but typically it's many copies of the same subunit and that's much easier to design—that's not a million different parts in the design. 
so, why is this? 
the reason is that, in other fields, people have to deal with the perversity of matter. 
you are designing circuits or cars or chemicals, you have to face the fact that these physical substances will do what they do, not what they are supposed to do. 
we in software don't have that problem, and that makes it tremendously easier. 
we are designing a collection of idealized mathematical parts which have definitions. 
they do exactly what they are defined to do. 
and so there are many problems we don't have. 
for instance, if we put an if statement inside of a while statement, we don't have to worry about whether the if statement can get enough power to run at the speed it's going to run. 
we don't have to worry about whether it will run at a speed that generates radio frequency interference and induces wrong values in some other parts of the data. 
we don't have to worry about whether it will loop at a speed that causes a resonance and eventually the if statement will vibrate against the while statement and one of them will crack. 
we don't have to worry that chemicals in the environment will get into the boundary between the if statement and the while statement and corrode them, and cause a bad connection. 
we don't have to worry that other chemicals will get on them and cause a short-circuit. 
we don't have to worry about whether the heat can be dissipated from this if statement through the surrounding while statement. 
we don't have to worry about whether the while statement would cause so much voltage drop that the if statement won't function correctly. 
when you look at the value of a variable you don't have to worry about whether you've referenced that variable so many times that you exceed the fan-out limit. 
you don't have to worry about how much capacitance there is in a certain variable and how much time it will take to store the value in it. 
all these things are defined a way, the system is defined to function in a certain way, and it always does. 
the physical computer might malfunction, but that's not the program's fault. 
so, because of all these problems we don't have to deal with, our field is tremendously easier. 
if we assume that the intelligence of programmers is the same as the intelligence of mechanical engineers, and electrical engineers and chemical engineers and so on, what's going to happen? 
those of us with the easiest field, fundamentally, are going to push it further. 
we make bigger and bigger things and eventually it becomes hard again. 
that's why we can develop much bigger systems than the people in the other fields. 
they just have these hard problems to deal with all the time. 
in the other fields, it may be necessary to develop an idea. 
you may have the idea, but then you may have to try out lots of different ways to get it to work at all. 
in software it's not like that, you have the idea and what you go and do is you write a program which uses this idea, and then the users may like it or not. 
and if they don't like it, probably you can just fix some details and get it to work. 
there is another problem that we don't have to worry about: manufacturing of copies. 
when we put this if statement inside the while statement, we don't have to worry about how the if statement is going to be inserted into the while statement as a copy is being built. 
we don't have to worry either about making sure we have access to remove and replace this if statement if it should burn out. 
so all we have to do is type copy and it's an all-purpose copy-anything facility. 
people making physical equipment and physical products, they can't do that, these things have to be built piece by piece each time. 
the result is that for them, the cost of designing a system of a certain complexity may be [gesturing] this much and the factory may take this much to set up. 
so they have to deal with this much from the patent system. 
it's a level of overhead they can live with. 
for us, designing it may cost [gesturing] this much and manufacturing it may cost this much, so this much overhead from the patent system is crushing. 
another way to look at it is that because we can—a few of us can—make a much bigger system, there are many more points of vulnerability where somebody might have patented something already. 
we have to walk a long distance through the mine field, whereas they they only have to walk a few feet through the minefield. 
so it's much more of a dangerous system for us. 
program development is hampered by software patents.. 
now, you have to realize that the ostensible purpose of the patent system is to promote progress. 
this is something that is often forgotten because the companies that benefit from patents like to distract you from it. 
they like to give you the idea that patents exist because they deserve special treatment. 
but this is not what the patent system says. 
the patent system says: the goal is to promote progress for society, by encouraging certain behavior like publishing new ideas; and after a certain—originally that was fairly short—time, everyone could use them. 
of course there is a certain price that society pays as well, and so we have to ask the question: which is bigger, the benefit or the price? 
well, in other fields, i am not sure. 
i am not an expert on other fields of engineering, i've never done them and i don't know whether having patents is good for progress in those fields. 
i have been in software since before software patents existed, and i know that software patents do a lot of harm and essentially no good. 
in the old days, ideas came along. 
either people in a university had an idea, or somebody had an idea while he was working on developing software. 
and either way, these ideas got published, and then everyone could use them. 
now why did the software publishers publish these ideas? 
because they knew that the big job was writing the program. 
they knew that publishing the ideas would get them credit from the community, and meanwhile anybody else who wanted to compete with them would still have to write a program, which is the big job. 
so they typically kept the details of the program secret—of course some of us think that's wrong, but that's a different issue. 
they kept the details of the program secret and they published the ideas, and meanwhile the software development—because software development was going on—that provided the field with a steady stream of ideas, so ideas were not the limiting factor. 
the limiting factor was the job of writing programs that would work and that people would like using. 
so, in effect, applying the patent system to software focuses on facilitating a thing which is not the limiting factor, while causing trouble for the thing which is the limiting factor. 
you see the software patents encourage somebody to have an idea, but at the same time they encourage people to restrict its use, so in fact we are actually worse off now in terms of having ideas we could use, because in the past people had the ideas and published them and we could use them, and now they have the ideas and patent them and we can't use them for twenty years. 
in the mean time, the real limiting factor—which is developing the programs—this is hampered by software patents because of other dangers that i explained to you in the first half of this talk. 
so the result is that, while the system is supposed to be promoting progress in software, actually it is so screwed up it's just obstructing progress. 
today we have some economic research showing mathematically how this can happen. 
you can find it in www.researchoninnovation.org. 
i am not completely sure of the name of the paper, but it's one that shows that in a field where incremental innovation is typical, having a patent system can result in slower progress. 
in other words the system produces counter-intuitive results that are the opposite of what it was intended to do. 
this backs up the intuitive conclusion of every programmer who sees that software patents are absurd. 
what can a country do to avoid this problem?. 
so, what can a country do to avoid this problem? 
well, there are two approaches: one is to address the problem at the issue of granting patents, and the other is to approach it at the point where patents are being enforced. 
doing this at the stage of granting patents is not quite as easy as you might think. 
now, i have been talking about software patents but strictly speaking you can't classify patents into hardware patents and software patents, because one patent might cover both hardware and software. 
so in fact my definition of a software patent is: a patent that can restrict software development. 
and if you look at many software patents you often find that the system they describe has a large part of the computer itself as part of the description of what's going on. 
that's a great way of making the whole thing seem complicated when it is really trivial. 
so it's a way they can get the patent office to decide it's unobvious. 
but there is a different criterion that can be used, a slightly different place to draw the line that still does a reasonable job, and that is between processes that transform matter in a specific way, and processes where the result is just calculation and display of information, or a combination of data processing and display steps—or others have put it as: mental steps being carried out by equipment. 
there are various ways of formulating this, which are more or less equivalent. 
now this is not exactly the same as prohibiting software patents, because in some cases computers are used as part of specific physical equipment to make it do a specific thing. 
and software patents might be allowed if they are part of a specific physical activity. 
but that's not really a disaster. 
after all, once people are involved in a specific physical activity or a specific physical product, they are bringing into their whole business all those complexities of dealing with matter. 
so it's more like those other fields of engineering. 
maybe it's okay to have patents on that narrow kind of software. 
as long as we can keep the core areas of software, the purely software activities safe from patents, we have solved the bulk of the problem. 
so that is a feasible approach and that's what people are working towards in europe. 
however, that is not going to be any use in the united states because the united states already has tens of thousands, probably hundreds of thousands of software patents. 
any change in the criteria for issuing patents does not help at all with the patents that already exist. 
so what i propose to the united states is to change the criteria for applying patents, to say that purely software systems running on general purpose computing hardware are immune from patents. 
they by definition cannot infringe a patent. 
and this way the patents can still be granted exactly the way they are now, and they can still, in a formal sense, cover both hardware implementations and software implementations as they do now. 
but software will be safe. 
preventing india from having software patents will be up to the citizens of india.. 
that's the solution i propose to the us, but it could be used in other countries as well. 
now, one of the tremendous dangers facing most countries today is the world trade organization, which sets up a system of corporate regulated trade—not free trade as its proponents like to call it, but corporate regulated trade. 
it replaces the regulation of trade by governments, that are somewhat democratic and might listen to the interest of their citizens, with regulation of trade by businesses, which don't pretend to listen to the citizens. 
so it's fundamentally antidemocratic and ought to be abolished. 
but it's crucial to note that the part of the gatt agreement which deals with patents does not require software patents. 
many experts who have studied this, for instance in europe, make this claim. 
and the reason is that they interpret technical effect as: there is a specific physical consequence or physical system going on. 
and so the software that doesn't do that doesn't have to be in the domain that patents can cover. 
so, at least you don't have to worry about the word trade organization causing problems here, despite the tremendous problems they cause in other areas of life. 
preventing india from having software patents will be up to you—to the citizens of india. 
i am a foreigner, i have no influence except when i can convince other people through the logic of what i say. 
there is a chance that you can do this. 
when the us started to have software patents, the public policy question was not considered at all. 
nobody even asked whether it was a good idea to have software patents. 
the supreme court made a decision which was then twisted around by an appeals court, and ever since then, there were software patents. 
but when europe started to consider officially authorizing software patents a few years ago, public opposition started to rise and became so strong that the politicians and the parties began paying attention to it, and started saying they were against it. 
in fact two attempts to authorize software patents have been blocked already in europe. 
the french minister of industry says that software patents would be a disaster and under no circumstances should they be allowed in france. 
all of the german political parties have taken a stand against software patents. 
the battle is not yet over, you know. 
we have not conclusively blocked software patents in europe, because the multinational companies and their servant, the united states government, is lobbying very hard, and they have ignorance on their side. 
it's so easy for somebody with a naive neo-liberal view to be persuaded that a new kind of monopoly has to be good! 
you have to look at the details of how software patents affect software development to see that they cause a problem. 
you have to study that economic research in its mathematics in order to see why you shouldn't assume that patents always promote progress. 
so, it's easy for ibm to send a lobbyist to someone and say: "you should really adopt software patents, they are great for programming. 
and look, the us is ahead and the us has software patents. 
if you have software patents too, you might catch up."
 well, you can't get more dominant than that, and the us was ahead in computers before it had software patents, it can't be because of software patents. 
it's important to understand that each country has its own patent system and its own patent laws and what you do in a certain country is under the jurisdiction of that country's patent law. 
so the result is, that if the us has software patents, the us becomes a sort of battleground where anybody using computers might get sued. 
if india avoids software patents, then india is not a battleground, and computer users in india do not face this danger of getting sued. 
it turns out that each country will issue patents to foreigners, just as to its own citizens. 
so in fact, in a place which has this scourge of software patents, foreigners can own those patents. 
there are lots of non-us companies that own us software patents, so they are all welcome to get involved in the fighting in the us. 
of course it's we americans who become the victims of this. 
meanwhile, in india, if there are no software patents, that means both indian companies and foreign companies are prevented from coming into india and attacking people with software patents. 
so, yes it is important that each country has its own patent law. 
that makes a big difference, but you've got to understand what difference it makes. 
having software patents in a certain country is not an advantage for the developers in that country. 
it's a problem for anybody distributing and using software in that country. 
now, if you in india are developing a program for use in the us, you may face the problem—or at least your client will face the problem—of us software patents. 
at least probably you can't get sued here. 
the client who commissioned the program and tries to use it might get sued in the us, and indeed you will have to deal with the problem—the us's problems—when you try doing business in the us. 
but at least you'll be safe here. 
you know, at least it is a big difference between your client got sued because your client told you to make a product and that product is patented, versus you get sued for making that product. 
if there are software patents in india, then you will get sued. 
whereas in the current situation, at least you can say to the client: "you told us to make this and we made it. 
so, i'm sorry this happened to you but it's not our fault."
 whereas if there are software patents in india, you'll get sued yourself and there is nothing you can say about that. 
businesses should demand opposition to software patents.. 
so the ultimate conclusion is that software patents tie all software developers, all computer users and essentially all businesses in a new kind of bureaucracy, which serves no beneficial social purpose. 
so it's a bad policy and it should be avoided. 
businesses don't like bureaucracy. 
if businesses knew that they were threatened with a new kind of bureaucracy, they would oppose software patents very strongly. 
but most of them aren't aware of this. 
in the us, software patents have led directly to business method patents. 
what does this mean? 
a business method is basically how you make decisions about what to do in the business. 
and in the past, these decisions were made by humans but now sometimes they are made by computers, and that means they are carried out by software, and that means the decision policies can be patented. 
software patents imply business method patents and business procedure patents. 
the result is that any business could find itself, you know, once they decide "we're going to automate the way we carry out our procedures," now they get sued with a software patent. 
so if businesses only knew, they would be organizing through things like the chamber of commerce to demand opposition to software patents. 
but mostly they don't know, and therefore it's going to be your job to inform them. 
make sure they understand the danger that they are facing. 
it's important for countries to work together against this.. 
and then india may be able, with the help of other countries like france and germany, to reject software patents. 
it is important for people in the indian government to make contact with officials in european countries, so that this battle against software patents doesn't have to be fought one country at a time, so that countries can work together to adopt an intelligent policy. 
maybe there should be a no software patents treaty that various countries can sign and promise each other aid, when they are threatened by economic pressure from the united states, as part of its economic imperialism. 
because the united states likes to do that, you know. 
one of the provisions in the gatt agreement is that countries have the right to make compulsory licenses for making medicine, to address a public health crisis. 
and the south-african government proposed to do this for medicine against aids. 
now, south-africa has a very bad problem with aids; the figures i've heard was that a quarter of the adult population is infected. 
and of course, most of them can't afford to buy these medicines at the prices charged by the us companies. 
so the south-african government was going to issue compulsory licenses which, even under gatt, it's allowed to do. 
but the us government threatened economic sanctions. 
vice-president gore was directly involved with this. 
and then, about a year before the presidential election, he realized that this was going to look bad, so he dropped out of the effort. 
but this kind of thing is what the us government does all the time in regard to patents and copyrights. 
they don't even mind if people get patented to death. 
so it's important for countries to work together against this. 
for more information about the problem of software patents, see www.progfree.org [archived] and www.ffii.org. 
and there is also a petition to sign, www.noepatents.org [1] please talk with all executives of businesses—any kind of businesses—about this issue. 
make sure they understand the extent of the problems they face, and that they think of going to business organizations to have them lobby against software patents. 
questions from the audience. 
now i'll answer questions. 
oh, by the way to any journalists who are here, i recommend writing articles about software patents separately from articles about free software. 
if you cover them in one article together, people may get the idea that software patents are only bad for free software developers and they are okay for other software developers. 
this is not true. 
if you think back of what i have said, hardly any of it relates to the question of whether the programs are free or not; the dangers are the same for all software developers. 
so please don't take the risk, the people will get confused. 
write separate articles. 
questions about software patents. 
q: sir, you said that companies like ibm are harmed about 10 times as much as they benefit? 
a: no. 
what i said is the harm that would have happened to them is 10 times the benefit, but this harm is purely theoretical, it doesn't occur. 
you see, they avoid it through cross-licensing. 
so in fact, the harm does not happen. 
q: but it is only neutralized, they don't really benefit? 
a: well, they do you see, because the bad aspect, they avoid through cross-licensing, and meanwhile they do collect money from some other licenses. 
so they are benefiting in total. 
there is the small benefit which happens and the big potential harm which does not happen. 
so you have zero plus something for the benefit. 
q: but for that something will oppose this movement against patents? 
a: right, ibm favors software patents. 
i had with trouble one, i couldn't hear all the words in your sentence. 
i don't know whether there was a "not" in it. 
i couldn't tell, there are two diametrically opposite meanings for what you just said, so what you can do is make sure that the situation is clear. 
ibm favors software patents, ibm thinks it stands to gain a lot from software patents. 
so what it stands to gain is that the ibm and the other very big companies would basically control software development, because it will be very hard to do independent software development. 
to develop nontrivial programs you're going to have to infringe patents of ibm's. 
now if you are big and often lucky enough, you might have some patents of your own and make ibm cross-license with you. 
otherwise you are completely at their mercy and you have to hope that they just let you pay the money. 
is someone else asking? 
q: sir, what was the reason for the development of the software patent? 
a: well, in the us, there was no reason. 
somebody tried to get a patent that was a software patent, and, i think, the patent office said no, so he took it to court and eventually went to the supreme court and they, they didn't judge it as a public policy question, they judged it in terms of what does the law say. 
q: so was it not the realization that… a: sorry, i can't … could you try to pronounce your consonants more clearly, i'm having trouble understanding the words. 
q: so was it not the realization that copyright is notoriously weak for protecting software? 
a: copyright is not only what? 
q: notoriously weak… a: well, i think the whole sentence is nonsensical. 
i don't understand this term "protecting software," and i don't agree with you. 
most programmers don't agree with you. 
q: so when you are saying that you are not favoring protection of software and you yourself is giving general public license, where do you get that power to issue general public license? 
a: ok, you are asking questions about copyright and free software which is not the topic now, i will accept questions about that later on, but i gave a speech about software patents and i want to answer questions about software patents. 
q: sir i have a question about software patents, the thing is that how can one protect where there is a functional element… a: protect what? 
q: functional element… a: what's going to happen to them? 
q: sir, how can we get a protection when there is a… a: protection from what? 
somebody's gonna come with a gun? 
q: no sir… a: basically the protection you need is the protection against being sued for the program you wrote. 
programmers need protection from software patents. 
q: no, it's not the programmers themselves sir, there are companies who have invested in something. 
a: and do you want the company to get sued because in your large program there are five different things that somebody, that five different people already patented? 
now it's clear to see the myth that you are operating on, it's the naive idea that, when you develop a program, you will have the patent. 
well, the idea, that very statement contains a mistake because there is no such thing as the patent. 
when you develop a program with many different things in it, there are many things, each of which might be patented by somebody else already, and you find out about them one by one when they come to you, saying: "either pay us a lot of money, or else shut down."
 and when you dealt with five of them, you never know when number six is going to come along. 
it's much safer to be in the software field if you know you are not going to get sued as long as you wrote the program yourself. 
that's the way it was before software patents. 
if you wrote the program yourself there was nothing to sue you about. 
today you can write the program yourself, it may even be a useful and innovative program, but because you didn't reinvent the whole field, you use some ideas that were already known, other people sue you. 
now, of course, those people who wanna go around suing you, they are going to pretend that this extortion is protection for them. 
protection from what? 
protection from having competitors, i guess. 
they don't believe in competition, they want monopolies. 
well, to hell with them. 
it's not good for the public that they should get what they want. 
this is a question of public policy. 
we have to decide what is good for the citizens generally. 
audience: [applause] not have somebody saying "i wanna have a monopoly because i think i am so important i should have one, so protect me from anybody else being allowed to develop software."
 q: you are suggesting that we should avoid making a battleground for patents, don't we still have to deal with the problem that there are a lot of american products being sold here and… a: well… q: … and we are still going to be mistaken…? 
a: no! 
no, you misunderstood. 
us developers may be in trouble because of the patent system, and what effect will that have? 
it means that there are certain products that won't be coming from the us, and therefore they won't be sold in the us, or here. 
you see, if a developer is in the us and there is a us software patent, that software developer is going to get sued there, whether or not he tries to deal with anybody in india, he is going to get sued. 
but the fact that he is distributing the program in india is not going to cause him an additional problem, because that's under the jurisdiction of india. 
that's the one thing he will not get sued for. 
so, basically, what it means is, whatever exists can be distributed in india, safely, and the developers who are lucky enough to be in india will be safe from this kind of gang warfare, and those who are unlucky enough to be in the us will not be safe. 
q: sir, are you basically against the very concept of intellectual property rights? 
a: as i said at the beginning, it is foolish to even think about that topic. 
that topic is an overgeneralization. 
it lumps together totally different things like copyrights and patents, and so any opinion about "intellectual property" is a foolish one. 
i don't have an opinion about intellectual property, i have opinions about copyrights, and i have completely different opinions about patents, and even in the area of patents, you know, i have different opinions in different fields. 
even that area is a big area. 
and then there are trademarks which are also "intellectual property"; i think trademarks are basically a good idea. 
the us has taken trademarks all little too far but, basically it is reasonable to have labels that you can rely on. 
so you shouldn't try to have an opinion about intellectual property. 
if you are thinking about intellectual property, you are thinking at a simplistic level. 
and any conclusions you reach will be simplistic. 
so, do as i do, you know, pick one topic at a time and focus on it, and find out the details about that one area, then you can think intelligently about that area, and later on you can think intelligently about the other areas too. 
q: so there is an argument that if particular intellectual property right is not protected… a: i'm sorry, what you are saying makes no sense at all and is at this foolish general level… q: let me complete sir, if that particular intellectual property right is not protected, it may impede the investment, and this impediment… a: this generalistic thinking is so simplistic, it's totally stupid. 
it makes no sense at all. 
there is no principle of intellectual property. 
copyrights and patents and trademarks originated completely separately, they have nothing in common, except later somebody else made up this term "intellectual property" to call them all by it. 
q: sir, will you extend this concept to the physical property? 
a: no, i'm sorry, none of these things has anything to do with physical property rights, they are totally different. 
what do you say extend "this concept"? 
which is "this concept"? 
the idea that the term "intellectual property" is a generalization that leads you into simplistic thinking, should we apply that to physical property? 
no, they are totally different. 
they have nothing in common. 
q: so the basis under which this intellectual property is protected is "protect the labor," "intellectual labor"? 
a: no! 
no, you are totally wrong, you are totally wrong. 
the purpose of… you have been brainwashed, you have been listening to the propaganda of the companies that want to have these monopolies. 
if you ask what legal scholars say is the basis of these systems, they say that they are attempts—for copyrights and for patents—they are attempts to manipulate the behavior of people to get benefit for the public. 
trademarks are a different issue, i think the issues for trademark are completely different. 
so you are making an overgeneralization also. 
q: so why can't we extend the very same principle… a: but in any case, your principle is wrong, and if you take a look at that economic research on www.researchoninnovation.org, you will see that you are making naive statements, naive blanket statements that are simply not true. 
you got the silly idea that creating a monopoly over some aspect of life always, invariably makes that aspect of life thrive. 
well, this is dumb. 
occasionally it might work, and occasionally it causes a lot of trouble. 
q: don't you think that the same kind of monopoly is created in favor of a party when he owns a physical property? 
a: i'm sorry, i can't hear you. 
q: sir, don't you think that the same kind of monopoly rights are created if a particular physical property is allowed to be owned by a person, just like an intellectual property? 
a: physical property can only be in one place at a time. 
you know, only one person can sit in a chair at a time in the normal way. 
[applause] you know these are totally different issues. 
you know, trying to generalize to the utmost is a foolish thing to do. 
we're dealing with complicated laws that have many, many, many complicated details and you are asking us to ignore all these details. 
we're dealing with laws that have complicated effects in various fields and you are asking us to ignore the details of their effects. 
don't bother judging… i think that if we are talking about a public policy issue, we've got to look at the actual results of the policy, not some myth as to what results a certain ideology would predict. 
i'm telling you the real results, i'm telling you what i have seen and what other programmers have seen. 
q: sir, what about the lzw patent? 
is it… a: what about the what? 
q: lzw patent? 
a: the lzw patent? 
q: yeah. 
is it still in effect? 
a: yes, it is. 
well, there are actually two lzw patents as i explained to you, and they are both still in effect. 
q: sir, so it's for 20 years? 
a: yeah, it's not 20 years yet. 
q: sir, can you reduce the scope of the problem by reducing the period of the patent? 
a: definitely, you could. 
if there were software patents, but they only lasted for, say, 5 years or three years, that would mostly solve the problem. 
yes it's a pain to have to wait 3 or 5 years, but it's much, much less of a pain. 
but, but there is a difficulty there. 
the gatt agreement says that patents must last 20 years. 
so, the only way you could have something like software patents which lasted for 3 or 5 years is as follows. 
first, make it clear that ordinary patents do not apply, and second, if you wish, you could create a different system of five-year software idea monopolies. 
well, it's not clear that there is any particular benefit in these five-year software monopolies but it would be much better than the current situation. 
so if you found the government prepared to make this deal, well, i would say, we should take it. 
but, but we have to realize, though, that the first step is to abolish software patents strictly speaking, and that has to be part of this deal. 
q: so and patent has also now become victim of… a: i'm sorry, i couldn't hear you at all, could you speak louder? 
q: sir, patent has now become a way of making money by businesses rather than promoting inventions? 
a: yes, a lot of them use it that way. 
q: so, sir, can we reduce this problem further by assigning the patent to the actual inventor rather than a business? 
a: not really. 
what you'll find is that, that aspect of the relationship between the employee and the business is something that gets negotiated; and the business has more clout, so they are always going to end up arranging to have the employee hand the patent to the company. 
the other thing is that it doesn't make a big difference who owns the patent. 
the point is that you are prohibited from developing a program using that idea, and it may make some difference precisely who has the power to sue you. 
but what you really want is not to be sued at all. 
so why look for a half-measure like this? 
it's much better just to say that software shouldn't have patents. 
okay, if you gonna pass a note, you'd better read it out loud. 
any other questions? 
q: people who are being to malaysia say that, if we buy a pc there, the amount of money we would pay for all the standard software is about a tenth of what we should pay in this country. 
in malaysia they are little more relaxed about patents and copyrights? 
a: well, are you not sure what you are talking about? 
because you seem to mixing together copyrights and patents. 
i'm not sure if what you are talking about has anything to do with the issue of software patents. 
q: precisely what i want to know is about: this has something to do with patents? 
a: probably not. 
q: different countries depending on how much, whether they are part of wto or not part of wto… a: no, no. 
q: …i think matter… a: you see, i don't know for certain because i don't know what's going on there. 
i've never been there. 
but i suspect that it's a matter of copyright and has nothing to do with patents, because if you are talking about the same programs… remember, software patents are primarily a restriction on software developers. 
so if it's the same program and it was developed, say, in the us, the patent problems they have are independent of, you know… the patent problems they have are biggest in the us, not in either india or malaysia. 
so, that probably has to do with copyright, not patents, and that's a totally different issue. 
we mustn't lump these issues together. 
q: sir earlier you've told that… a: i'm sorry i can't hear you. 
q: earlier in your speech you've told that software that should be brought under the purvey of patents is what you defined that as what can be run on a general purpose machine. 
a: i'm afraid i can't… can anyone understand what he's saying? 
i cannot understand your words. 
if you make an effort to enunciate more clearly, i may be able to understand. 
q: you had spoken earlier that software that should be patented is, you defined that as, software that can be run on a general purpose machine… a: i'm sorry i didn't say that software should be patented, so i just can't make out these words. 
maybe if you tell that to someone else, the other person could say it and i could understand. 
q: software patents, like whatever you call software patents, like those are what can be run on a general purpose machine. 
so if some algorithm or some piece of software is capable of being executed on a general purpose machine, it should not be patented. 
a: yes. 
now i can hear you, yes. 
one of the things i proposed was that patent should not apply to software for general purpose machines or the use of it on those general purpose machines. 
so that if you develop that program or if you are using that program, you couldn't be sued. 
q: we've an increasing number of software not being run on general purpose machines. 
a: well, then that would be covered still by software patents, so it wouldn't be a total a solution, but at least it would be a partial solution. 
q: so if the defining line is general purpose machines, don't you see there's a possibility that people could find loopholes in it, like, to find workarounds for… a: i'm sorry. 
do i see a possibility that people would do what? 
q: … of finding loopholes or workarounds of converting what you would call software patents and to get it actually patented. 
a: i'm sorry, i do not understand. 
loopholes to do… i'm sorry. 
what people would do, what software developers would do in that situation is use general purpose machines more. 
q: some algorithm can be run on a general purpose machine—what i'd say that, that algorithm, i'm using it for some embedded device and go ahead and patent it. 
a: why you could try it, you misunderstood. 
the point is that, you misunderstood what the solution is. 
the solution is that if i am developing and using the software on general purpose machines, then nobody can sue me for patent infringement. 
so yes, somebody could get a patent, and maybe he could sue others who are doing specialized things which involve particular hardware. 
but they couldn't sue me. 
q: excuse me sir, may i ask you a question. 
a: yes. 
q: sir, you spoke of general purpose machines. 
in the sense, how would you define these machines, because these days you have a lot of custom made handheld devices etc. 
now some way… a: no, handheld computers are general purpose when they are not designed to carry out a specific computation or a specific physical process. 
they're general purpose computers. 
they have general purpose computer chips in them. 
q: then the idea would be contestable in a court of law as to whether it's a general purpose or not… a: i guess, it will have to be, yeah. 
the precise details of drawing those lines, one ends up having to leave to judges. 
q: thank you sir. 
q: germany and france, the only countries who has said no to patents in europe… a: well, i don't know the full situation. 
those are the just the ones i know of. 
the last time there was a vote, there were going to be a majority of no votes, and so they dropped the issue. 
and i don't remember the other countries. 
q: there's no european community decision on this… a: not yet. 
in fact, the european commission itself is divided. 
one of the agencies—the one which unfortunately is the lead agency on this issue—has been won over by the multinationals and is in favor of software patents, and then the agency that tries to encourage software development is against them, and so they're trying to work against it. 
so if there is somebody who wants to get in touch with the official in charge of the agency that is opposed to software patents, i can put them in touch. 
q: is there any country that said no to software patents? 
a: well, there are countries which don't have them, but it's not clear that there's any country which has affirmed this recently. 
q: sir, could you please elaborate on the benefits the software development community got in european countries from this policy? 
a: well, the benefit is that you don't have to be afraid someone will sue you, because of one of the ideas or a combination of ideas that you used in a program that you wrote. 
basically software patents mean that if you write a program, somebody else might sue you and say "you're not allowed to write that program."
 the benefit of not having software patents is you're safe from that. 
now in india you have probably taken for granted that you are safe from that. 
but that will only last as long as there are no software patents in india. 
q: are there any threats to india not acceding to the software regime? 
a: well there's no software regime. 
the gatt agreement doesn't require software patents. 
there is no treaty requiring software patents. 
q: most people, if they had a chance to get a patent and make a lot of money out of it, they wouldn't pass it up… a: well, many people if they had a chance to get a gun and make a lot of money from, they wouldn't pass it up. 
the point is, therefore, let we try not to hand them that opportunity. 
for instance, we don't have a government agency handing out guns to people on the street, and we should not have a government agency handing out software patents to people on the street either. 
q: being an advocate of this non-patency, have you ever faced any… a: i'm having trouble hearing you. 
please try to make an effort to pronounce every sound clearly that i might understand. 
q: you being an advocate of this non-patency, have you faced any problems with these multinationals or something? 
a: have i faced any problems… q: … so far in your life? 
a: i'm sorry. 
what did he say? 
q: have you faced any problems with multinationals in your life? 
a: well, there are many. 
in the community where i develop software, there are many examples of programs that had their features taken out, programs that didn't have the feature put in the first place, programs that were not even written for many years, because of this. 
there are many examples of jobs we can't do, because we're not allowed to do them. 
now we collected examples of this, and we are looking for people to write them up—you know, to look at each example and investigate it fully and write down a clear description of what happened and what the harm was and so on. 
we have had trouble finding people to do this. 
we're looking for more. 
so someone who is really good at writing clear english might want to volunteer for this. 
q: i think he asked whether you had any threat to you by any multinational companies… a: well they never threatened my life! 
q: yeah that's the question! 
a: no, but they do threaten our work. 
you know, they do threaten to sue us. 
questions about free software. 
volunteer: there's a question from a gentleman at the back: "if the multinational companies that produce hardware, like intel, coming to a contract with big software companies to restrict free software by changing the microprocessor patents, how will you overcome such a hazard?"
 a: i see very little danger of that. 
intel recently developed a new computer architecture, and far from trying to stop us from supporting it, they hired people to implement it. 
so it looks like we have now moved to free software questions. 
i'd like to remind people that, until this last answer, i was not speaking for the free software movement. 
i was speaking about something of vital interest to every programmer which is: to be free to write programs and not get sued for having written them, as long as you wrote it yourself. 
and that is a freedom that you've taken for granted until now, and it's a freedom you will lose if you have software patents. 
now however we're moving to the topic of free software, which is what i spent most of my time working on, and the individual, the actual software development project that i've lead, which is developing the gnu operating system, which is a free software, unix-like operating system used by some twenty million people estimated today. 
so i am now going to start answering questions about free software and gnu. 
q: in the absence of a concrete revenue model for free software, will this also go bust like the dotcom? 
a: i can't predict the future but i want to remind you that the dotcoms were businesses. 
and free software is not primarily a business. 
there are some free software businesses. 
whether they will succeed or ultimately fail, i don't know. 
but those businesses, while they contribute to our community, they are not what our community is all about. 
what our community is all about is having the freedom to redistribute and study and change software. 
a lot of free software is developed by volunteers, and the amount is increasing. 
no matter what happens with the companies, that's not going away. 
q: i understand that companies like ibm are also investing considerably in making their systems and software compatible with free source code like linux… a: you mean gnu? 
q: all right… a: yes, they call it linux. 
actually the system is mainly gnu and linux is one of the pieces. 
[from audience] the kernel is hardly eighteen percent. 
a: well, really, that much? 
what i saw is three percent. 
[from audience] you can see through a needle. 
very insignificant. 
q: but, i also understand that they've invested around a billion dollars in doing so. 
now my question is… a: well that's not true. 
q: my question is: for a service that has no revenue model, will this be sustainable in the future, and if i change my business into… a: i'm sorry, i can't predict the future. 
no one can. 
q: how can i… a: there are some god men who claim they can predict the future. 
i'm not. 
i'm a rationalist. 
i can't tell you what's going to happen. 
what i can tell you is that when ibm claims to have put a billion dollars into the gnu plus linux operating system, that is not entirely true. 
you have to look carefully at what they're spending this money on, and you'll find they are spending this money on various different things, some contribute and some don't. 
for instance, they are funding some work on developing the gnu/linux system. 
that's good, that contributes. 
they do develop some other free software packages that they've contributed to the community. 
that's a real contribution. 
they are also developing many nonfree programs to make them run with the gnu/linux system and that is not a contribution. 
and they are publicizing the system, well, it's not a primary contribution but it does help, you know. 
having more users is not our primary goal. 
but it's nice, if more people would try our software, so that does help, but then they're mistakenly calling this linux which is not quite right, and they're lobbying for software patents in europe, which is bad. 
so, you know, ibm is doing many different things. 
some are good and some are bad, and if you want to have a thoughtful view, it's important to look at the individual actions. 
do not try to add it up because that just means you're missing the important aspects of the situation. 
are there any more questions? 
q: […] a: i can't hear you at all, i'm sorry […] whispering. 
i'm a little bit hard of hearing, and when you combine that with the noise of the fans, and with the unusual accent, all three of those things together make very hard for me to make out the words. 
q: this question is not about patent or copyright or anything like that. 
but this is one example what you said about—if statement and while statement—that you said something about the differences in the field of computer science and differences with other sciences, that is other engineering sciences. 
you said that if i change something in the if loop that's if statement, there won't be any effect, that you said… a: no i didn't say that. 
q: you said that! 
you said that there isn't any heating effect. 
i remember that… a: i'm sorry, i know what i said. 
i said something that's partly similar to that… q: i'll tell the exact statement: you said there won't any heating effect. 
a: any whating effect? 
q: heating effect. 
heating… a: oh yes we don't have to worry about how much heat the if statement… q: yeah, yeah, exactly. 
then what is it that cascading effect is? 
if i change the structure of the loop, there will be an effect. 
a: oh sure. 
the program will behave differently when you change it, but i'm not saying that writing every program is easy, or that we never make mistakes. 
i listed a lot of specific kinds of problems, that would plague a mechanical or electrical engineer at every little detail. 
even each one detail gets to be very hard for them. 
whereas for us, the problems are because we do so much, we're doing it so fast, we don't think carefully about each one thing. 
so we make mistakes. 
q: so you admit that there's an effect. 
a: of course. 
i never said otherwise, i'm sorry if you thought so. 
sure if you change your program it's going to do different things. 
q: sir, can you comment on the commercial distributions? 
a: well, you asked me to comment on the commercial distribution of gnu/linux systems? 
well, i think that's fine. 
that's one of the freedoms that free software gives you—the freedom to use it in business, the freedom to distribute it as part of a business, the freedom to sell copies in exchange for money. 
these are all legitimate. 
now, one thing i am unhappy about is when the companies that do this add some nonfree software to it. 
q: that's the installation program? 
a: yeah, any nonfree software. 
because the goal was: you should be able to get a completely free operating system. 
well, if they have a thing in a store which says i'm the gnu/linux system— of course it says linux—but inside of it there are some nonfree programs, now you're not getting something that is entirely free anymore. 
it doesn't entirely respect your freedom. 
so the real goal for which we wrote the system is being lost. 
so that's a major problem that our community faces now, the tendency to put free software together with nonfree software and make these nonfree overall systems. 
and then, you know, it might seem that our software is a success because there are many people using it. 
but if you look at our real goal, our real goal is not popularity. 
our real goal is to spread a community of freedom, and we're not succeeding in doing that if the people are using nonfree software still. 
unfortunately, i couldn't give both speeches. 
i can give a speech about software patents, or i can give a speech about free software. 
they're very different and each one of them is a long speech. 
so unfortunately what that means is that i can't fully explain about free software and the gnu project here. 
am i giving another speech in kochi? 
am i giving the free software speech in kochi? 
q: no. 
a: oh well. 
i gave that speech in trivandrum. 
so i'll answer five more questions and then i'll have to call it quits because it gets to be quite draining to answer so many. 
q: excuse me sir, question from me again. 
sir, this is a personal question. 
me, as such, i love programming. 
i spend a lot of time in front of my system. 
and i was listening to some of your earlier speeches where you said that back in the 70's, the community of programmers had a sense of goodwill among them. 
they used to share code, they used to develop on it. 
a: well, a specific community of programmers which i belonged to. 
this was not all programmers. 
it was one specific community. 
continue. 
q: yes sir. 
in that context, i feel particularly, me as such, i feel very hurt when i see the so-called interaction among programmers today. 
because many of us are very good programmers, but we look at each other in different colors depending upon the tools we use— "hey, he's a windows guy," "hey, he's a gnu/linux guy," "hey, he's into solaris systems," "he's a network programmer."
 and unfortunately most of this prejudice comes from a lot of misinterpretation out of things like this. 
none of these people promote free software as such, and it hurts me as a programmer and many of my colleagues, and i work in an environment… a: could you speak a bit more slowly, i am hearing most of it, but there was one point that i miss, so if you speak slowly i will… q: yeah, here we work with in an environment where you are judged according to the tools you use rather than the quality of work. 
a: to me that, well, in one sense there is a situation where in a limited way that is rational. 
if there is a tool which is normally used for doing fairly easy jobs and there are lot of people who now had to do it, then i would imagine now, i wouldn't want, i might not pay as much to them as somebody who does very hard jobs with a different tool that's used for hard jobs. 
but it's true if you're talking about hard jobs, it makes no sense that you'd be prejudiced about what tools people are using. 
the good programmers can use any tools. 
q: that was not the focus here. 
the focus was that here it is a question of goodwill. 
goodwill amongst programmers these days seems to be, you know, melted out into these little boxes of this system and that system, and that hurts. 
a: i agree we should encourage people to learn about more different things and we should never be prejudiced against people because of some detail, you know the fact that this person likes perl and this person likes c, why should they hate each other… q: it's not even that distinct. 
it's like this person works on gnu/linux and this person works on windows, which are the two major operating systems today in india at least. 
a: well, in that case, though, it's not just a prejudice, you see. 
windows is a system, a social system, that keeps people helpless and divided [applause], whereas gnu/linux is an alternative that was created specifically to liberate people and to encourage them to cooperate. 
so to some extent, this is not like: "where you born in this country or that country?"
 no, this is like your choice of politics. 
and it does make sense to criticize people for their choices about important issues. 
so, i would say, a person who's using windows, well, either he is actively supporting this power structure, or at least maybe he's trapped in it and doesn't have the courage to get out. 
in that case you can forgive him, i guess, and encourage him. 
you know, there are different situations of people; in any place there are people… different. 
some people are making more or less effort to try to improve things. 
i believe in judging people as individuals, not as lumping them together by their groups. 
but this is, in this one case it is, somewhat of a political choice with political consequences for society, and that's exactly where it makes sense to criticize people. 
q: sorry to continue again on this, but i'm a little persistent about this. 
it's… a: this is your last chance. 
q: yes sir, thank you. 
generally when statements like these are made, people who are not so much, you know, in connection with these things tend to assume that cooperative communities and sharing of source code and sharing of ideas and things like that don't exist in other environments, but they do, and that's very unfortunate that they think so. 
a: i'm sorry… what don't exist in other environments? 
i don't know which other environments you're talking about. 
i don't understand. 
q: other programming environments, other operating systems. 
a: well maybe there are some users developing some free software that runs on windows, in fact i'm sure there are… note: at this point, there was a short blackout, and both the recording and the transcript is incomplete here. 
a: well, maybe there, are there anymore questions? 
could you speak louder? 
i can't hear you at all. 
q: sir may i ask you a question? 
a: okay you can, sure. 
q: in free software system we will be distributing the source code also together with the software. 
so a person is entitled to change whatever he can in the source code. 
so don't you think there will be too many software versions of a particular software and this will in turn cause problems for a layman to find out which will suit him the most. 
a: practical experience is that this is not a problem. 
and occasionally it happens, but not very often. 
now, you see, the reason is that the users want interoperability and with free software the users are ultimately in control, and what they want they tend to get. 
the free software developers realize that they had better—if they are going to make incompatible changes they are likely to make users unhappy and their versions are not going to be used. 
so they generally draw the obvious conclusion and pay a lot of attention to interoperability. 
q: what i feel is that like i'll be just loading a software into my computer and the next morning i'll find a better version then again i'll have to change it. 
the next morning again something has been done to the source code and that's a better version, so don't you… a: in general you are not going be finding a better version every day and the reason is that typically for any given program, there is usually only one version that is widely used. 
maybe there will be two, once in a while there will be three—when there is no good maintainer that might happen. 
so you are just not going to keep finding out about more versions that are good every day; there aren't so many. 
there won't be that many popular versions. 
there is one situation where you can get a new version every day. 
that is when there is one team doing a lot of work on development then every day you can get their latest version. 
that you can do. 
but that's only one version at any given time. 
q: sir, don't you think we will have to implement an organization which will take into consideration all these updations and it will just provide a single software which will have all the updations right? 
a: i'm sorry, i didn't hear that. 
shouldn't we have an organization that would do something with all these versions, but i don't know what. 
q: like, say i have developed a version of… a: did anyone else hear what she said? 
could anyone else tell me what she said? 
q: the thing is that… a: it's a very valuable skill to learn to speak slowly and clearly. 
if you ever want to give a speech, which as part of your career you will, it's very helpful to learn to enunciate clearly and slowly. 
q: thank you, sir. 
sir, the thing is that, don't you feel that we require an organization which will just perform a number of updations together and make available a software which will club all the updations up to that date? 
a: you are saying, take various different applications and put them together? 
q: yes sir. 
a: i will tell you. 
a lot of organizations are doing that; in fact every one of the gnu/linux distributions is exactly that. 
debian does that, red hat does that… we to some extent do that also for the gnu packages. 
we work on making sure they work together. 
q: excuse me sir. 
we have talked lot against patents. 
in us conditions have you ever been forced to put forward any applications for patents? 
a: no. 
but no one can force me to make a patent application. 
q: also do you own any patents? 
a: i do not own any patents. 
now, i have considered the possibility of applying for patents to use them as part of a mutual strategic defense alliance. 
q: do you mean to say that if i have twenty patents with me, i donate it to the fsf and you maintain it for me? 
a: well, not the fsf. 
it would be a separate specialized organization that would exist specifically, so that we would all contribute our patents and the organization would use all of these patents to shelter anyone who wishes shelter. 
so anyone can join the organization, even somebody who has no patents. 
and that person gets the shelter of this organization. 
but then we all do try to get patents so as to make the organization stronger so it can protect us all better. 
that's the idea, but so far no one has been able to get this started. 
it's not an easy thing to do, and part of the reason is that applying for a patent is very expensive—and a lot of work as well. 
so this will be the last question. 
q: why can't the free software foundation start its own distribution? 
a: oh well, the reason is that debian is almost what we want, and it seems better to be friends with debian and try to convince them to change it a little, rather than say "well, we are not going to use it; we are going to make our own thing."
 and also it seems likely to be more successful too because, after all, there are a lot of people working on debian already. 
why try to make an alternative to that large community. 
much better to work with them and convince them to support our goals better—if it works, of course, and we have our ways to go on that. 
so that was the last question, i can't stay all day answering questions, i'm sorry. 
so at this point i am going to have to call a halt and get going, and go have lunch. 
so thank you for listening. 
[applause] footnote. 
[1] in 2014, this petition against software patents is archived . for more information about the problem of software patents, see also our end software patents campaign. 
stallman's law. 
now that corporations dominate society and write the laws, each advance or change in technology is an opening for them to further restrict or mistreat its users. 
stop h.r. 
3028 - protect the net - stop the trademark monopolists. 
href="mailto:rotenberg@epic.org">rotenberg@epic.org> this bill fits a pattern: every time congress wants to create a new monopoly covering some activity formerly open to all, or extend and increase an old monopoly, they apply the term "piracy" to the free activity that the monopoly will stamp out. 
so whenever you see anything described as "piracy" aside from the capturing of ships, watch out for your liberties! 
—richard stallman more information is available by following the links at the end of this page. 
urgent. 
the house of representatives is about to vote on legislation that would grant sweeping new powers for trademark holders and undermine the rights of domain name holders, internet users, and small businesses. 
h.r. 
3028 "the trademark cyberpiracy prevention act of 1999" will also establish unprecedented ability for trademark holders to sue internet users all around the world. 
and h.r. 
32028 will undermine a fair and carefully crafted international consensus on the resolution of internet name disputes. 
it's a bad bill and it should be stopped. 
the house of representatives may vote on h.r. 
3028 as early as tuesday, october 26, 1999. 
you need to act. 
there is a chance to stop hr 3028. 
it has very few sponsors and has moved quietly through congress, mostly under the radar of organizations and businesses that have worked to promote the growth of the internet. 
also, congress will soon break for thanksgiving. 
but you have to act! 
what you can do. 
it is vitally important for you to contact your representative in congress and explain politely but firmly that you hope that your representative will vote against h.r. 
3028. 
here is a quick guide to calling your congressman. 
call the capitol hill switchboard (202-224-3121) and ask to speak to your congressman. 
(don't know who your congressman is? 
ok, go here [archived]). 
when you reach the office say to the person who answers the phone: "hello, i'm a registered voter in the district of congressman <name>. 
i'm calling because i hope he/she will vote against h.r. 
3028, "the cyberpiracy act."
 i don't like cyberpirates, but i believe this bill will hurt all domain name holders on the internet, including small businesses, noncommercial organizations and individuals. 
will you please tell the congressman that i asked him/her to vote against h.r. 
3028? 
thanks."
 here are all the things you just did in 30 seconds: you made clear that you're a voter in the congressman's district (they'll listen to you!) you said clearly that you are against a bill and you gave the bill number and the title of the bill (it's important to give both!) you gave the congressman a good reason to vote against h.r. 
3028 (members of congress like good reasons for votes) you asked for a commitment to convey your position to the congressman (you want to be taken seriously) you were polite (always a plus) if you leave your name and address, that will make your call even more effective (you might even get a letter) if you like, you can also send an email to your representative with a new service offered at the house web site—check here [archived]. 
if you're still energized to do something, ask a friend or neighbor who also lives in your district to make the same call. 
you can also call the office of the chairman of the rules committee congressman david dreier and tell his staffperson that you oppose h.r. 
3028 and hope that mr. 
dreier will put off a vote on the bill until the problems are fixed. 
if you want to learn more about the problems with h.r. 
3028, look at the excellent letter from computer users and legal experts. 
also, visit thomas and check out the bill and the history. 
relevant information. 
information about h.r. 
3028, including the text of the bill information about the icann uniform dispute resolution policy letter from acm, legal experts on problems with h.r. 
3028 
the curious incident of sun in the night-time. 
stallman we leave this web page in place for the sake of history, but as of december 2006, sun is in the middle of rereleasing its java platform under the gnu gpl. 
when this license change is completed, we expect sun's java will be free software. 
may 24, 2006 our community has been abuzz with the rumor that sun has made its implementation java free software (or "open source"). 
community leaders even publicly thanked sun for its contribution. 
what is sun's new contribution to the floss community? 
nothing. 
absolutely nothing—and that's what makes the response to this non-incident so curious. 
sun's java implementation remains proprietary software, just as before. 
it doesn't come close to meeting the criteria for free software, or the similar but slightly looser criteria for open source. 
its source code is available only under an nda. 
so what did sun actually do? 
it allowed more convenient redistribution of the binaries of its java platform. 
with this change, gnu/linux distros can include the nonfree sun java platform, just as some now include the nonfree nvidia driver. 
but they do so only at the cost of being nonfree. 
the sun license has one restriction that may ironically reduce the tendency for users to accept nonfree software without thinking twice: it insists that the operating system distributor get the user's explicit agreement to the license before letting the user install the code. 
this means the system cannot silently install sun's java platform without warning users they have nonfree software, as some gnu/linux systems silently install the nvidia driver. 
if you look closely at sun's announcement, you will see that it accurately represents these facts. 
it does not say that sun's java platform is free software, or even open source. 
it only predicts that the platform will be "widely available" on "leading open source platforms."
 available, that is, as proprietary software, on terms that deny your freedom. 
why did this non-incident generate a large and confused reaction? 
perhaps because people do not read these announcements carefully. 
ever since the term "open source" was coined, we have seen companies find ways to use it and their product name in the same sentence. 
(they don't seem to do this with "free software," though they could if they wanted to.) the careless reader may note the two terms in proximity and falsely assume that one talks about the other. 
some believe that this non-incident represents sun's exploratory steps towards eventually releasing its java platform as free software. 
let's hope sun does that some day. 
we would welcome that, but we should save our appreciation for the day that actually occurs. 
in the mean time, the java trap still lies in wait for the work of programmers who don't take precautions to avoid it. 
we in the gnu project continue developing the gnu compiler for java and gnu classpath; we made great progress in the past year, so our free platform for java is included in many major gnu/linux distros. 
if you want to run java and have freedom, please join in and help. 
surveillance testimony. 
richard stallman's statement to the cambridge city council, jan 22, 2018, about the proposed cambridge surveillance ordinance. 
mayor mcgovern: thank you. 
richard stallman followed by elaine derosa. 
rms: i'm here to speak about the proposed surveillance ordinance. 
i've got a copy of what i printed out, and i have some suggestions. 
first of all there's a definition of "surveillance" which i think is too narrow. 
in addition to "movements, behavior and actions," it should include communications. 
furthermore, instead of just saying "in a matter that is reasonably likely to raise concerns," any recording of what is observed should be assumed to raise civil liberties concerns. 
there's also a definition of "surveillance technology," which i think is far too limited. 
i suggest that any physical device or system including computers running software that has surveillance capability is surveillance technology. 
any technology that can do surveillance is surveillance technology. 
the definition of "surveillance capability" i think is pretty good. 
in addition, when it comes to what to do about surveillance technology, the emergency permission seems far too loose. 
it would be easy to interpret this such that one could decide there's nowadays some sort of threat, and there always will be [that threat], so surveillance is permitted on an emergency basis forever. 
well, that's the kind of false emergency that we shouldn't accept. 
this requirement should be specific and clear enough that that can't pass under it. 
i suggest treating it like a wiretap or searching people's houses. 
now there are times when it's possible to search someone's house urgently. 
that's permitted. 
but in general you have to get a court order [to do a search]. 
and i think that same requirement should apply to any kind of surveillance that hasn't gone through the regular process. 
[item] number 9 talks about "persons injured in violation of the ordinance," but i don't think there's a definition of what it means to be injured. 
i'd like to suggest that to be surveilled is to be injured. 
thank you. 
how much surveillance can democracy withstand?. 
by richard stallman "how did they find out i'm a dog?"
 thanks to edward snowden's disclosures, we know that the current level of general surveillance in society is incompatible with human rights. 
expecting every action to be noted down makes people censor and limit themselves. 
the repeated harassment and prosecution of dissidents, sources, and journalists in the us and elsewhere provides confirmation. 
we need to reduce the level of general surveillance, but how far? 
where exactly is the maximum tolerable level of surveillance, which we must ensure is not exceeded? 
it is the level beyond which surveillance starts to interfere with the functioning of democracy, in that whistleblowers (such as snowden) are likely to be caught. 
faced with government secrecy, we the people depend on whistleblowers to tell us what the state is doing. 
(we were reminded of this in 2019 as various whistleblowers gave the public increments of information about trump's attempt to shake down the president of ukraine.) however, today's surveillance intimidates potential whistleblowers, which means it is too much. 
to recover our democratic control over the state, we must reduce surveillance to the point where whistleblowers know they are safe. 
using free/libre software, as i've advocated since 1983, is the first step in taking control of our digital lives, and that includes preventing surveillance. 
we can't trust nonfree software; the nsa uses and even creates security weaknesses in nonfree software to invade our own computers and routers. 
free software gives us control of our own computers, but that won't protect our privacy once we set foot on the internet. 
bipartisan legislation to "curtail the domestic surveillance powers" in the u.s. 
is being drawn up, but it relies on limiting the government's use of our virtual dossiers. 
that won't suffice to protect whistleblowers if "catching the whistleblower" is grounds for access sufficient to identify him or her. 
we need to go further. 
table of contents. 
the upper limit on surveillance in a democracy information, once collected, will be misused robust protection for privacy must be technical first, don't be foolish we must design every system for privacy remedy for collecting data: leaving it dispersed remedy for internet commerce surveillance remedy for travel surveillance remedy for communications dossiers but some surveillance is necessary conclusion the upper limit on surveillance in a democracy. 
if whistleblowers don't dare reveal crimes and lies, we lose the last shred of effective control over our government and institutions. 
that's why surveillance that enables the state to find out who has talked with a reporter is too much surveillance—too much for democracy to endure. 
an unnamed u.s. 
government official ominously told journalists in 2011 that the u.s. 
would not subpoena reporters because "we know who you're talking to."
 sometimes journalists' phone call records are subpoenaed to find this out, but snowden has shown us that in effect they subpoena all the phone call records of everyone in the u.s., all the time, from verizon and from other companies too. 
opposition and dissident activities need to keep secrets from states that are willing to play dirty tricks on them. 
the aclu has demonstrated the u.s. 
government's systematic practice of infiltrating peaceful dissident groups on the pretext that there might be terrorists among them. 
the point at which surveillance is too much is the point at which the state can find who spoke to a known journalist or a known dissident. 
information, once collected, will be misused. 
when people recognize that the level of general surveillance is too high, the first response is to propose limits on access to the accumulated data. 
that sounds nice, but it won't fix the problem, not even slightly, even supposing that the government obeys the rules. 
(the nsa has misled the fisa court, which said it was unable to effectively hold the nsa accountable.) suspicion of a crime will be grounds for access, so once a whistleblower is accused of "espionage," finding the "spy" will provide an excuse to access the accumulated material. 
in practice, we can't expect state agencies even to make up excuses to satisfy the rules for using surveillance data—because us agencies already lie to cover up breaking the rules. 
these rules are not seriously meant to be obeyed; rather, they are a fairy-tale we can believe if we like. 
in addition, the state's surveillance staff will misuse the data for personal reasons. 
some nsa agents used u.s. 
surveillance systems to track their lovers—past, present, or wished-for—in a practice called "loveint."
 the nsa says it has caught and punished this a few times; we don't know how many other times it wasn't caught. 
but these events shouldn't surprise us, because police have long used their access to driver's license records to track down someone attractive, a practice known as "running a plate for a date."
 this practice has expanded with new digital systems. 
in 2016, a prosecutor was accused of forging judges' signatures to get authorization to wiretap someone who was the object of a romantic obsession. 
the ap knows of many other instances in the us. 
surveillance data will always be used for other purposes, even if this is prohibited. 
once the data has been accumulated and the state has the possibility of access to it, it can misuse that data in dreadful ways, as shown by examples from europe, the us, and most recently turkey. 
(turkey's confusion about who had really used the bylock program only exacerbated the basic deliberate injustice of arbitrarily punishing people for having used it.) you may feel your government won't use your personal data for repression, but you can't rely on that feeling, because governments do change. 
as of 2021, many ostensibly democratic states are ruled by people with authoritarian leanings, and the taliban have taken over afghanistan's systems of biometric identification that were set up at the instigation of the us. 
the uk is working on a law to repress nonviolent protests that might be described as causing "serious disruption."
 the us could become permanently repressive in 2025, for all we know. 
personal data collected by the state is also likely to be obtained by outside crackers that break the security of the servers, even by crackers working for hostile states. 
governments can easily use massive surveillance capability to subvert democracy directly. 
total surveillance accessible to the state enables the state to launch a massive fishing expedition against any person. 
to make journalism and democracy safe, we must limit the accumulation of data that is easily accessible to the state. 
robust protection for privacy must limit technology for collecting data. 
the electronic frontier foundation and other organizations propose a set of legal principles designed to prevent the abuses of massive surveillance. 
these principles include, crucially, explicit legal protection for whistleblowers; as a consequence, they would be adequate for protecting democratic freedoms—if adopted completely and enforced without exception forever. 
however, such legal protections are precarious: as recent history shows, they can be repealed (as in the fisa amendments act), suspended, or ignored. 
meanwhile, demagogues will cite the usual excuses as grounds for total surveillance; any terrorist attack, even one that kills just a handful of people, can be hyped to provide an opportunity. 
if limits on access to the data are set aside, it will be as if they had never existed: years worth of dossiers would suddenly become available for misuse by the state and its agents and, if collected by companies, for their private misuse as well. 
if, however, we stop the collection of dossiers on everyone, those dossiers won't exist, and there will be no way to compile them retroactively. 
a new illiberal regime would have to implement surveillance afresh, and it would only collect data starting at that date. 
as for suspending or momentarily ignoring this law, the idea would hardly make sense. 
first, don't be foolish. 
to have privacy, you must not throw it away: the first one who has to protect your privacy is you. 
avoid identifying yourself to web sites, contact them with tor, and use browsers that block the schemes they use to track visitors. 
use the gnu privacy guard to encrypt the contents of your email. 
pay for things with cash. 
keep your own data; don't store your data in a company's "convenient" "cloud" server. 
it's safe, however, to entrust a data backup to a commercial service, provided you put the files in an archive and encrypt the whole archive, including the names of the files, with free software on your own computer before uploading it. 
for privacy's sake, you must avoid nonfree software; if you give control of your computer's operations to companies, they are likely to make it spy on you. 
avoid service as a software substitute; in addition to giving others control of how your computing is done, it requires you to hand over all the pertinent data to the company's server. 
protect your friends' and acquaintances' privacy, too. 
don't give out their personal information except how to contact them, and never give any web site your list of email or phone contacts. 
don't tell a company such as facebook anything about your friends that they might not wish to publish in a newspaper. 
better yet, don't be used by facebook at all. 
reject communication systems that require users to give their real names, even if you are happy to divulge yours, since they pressure other people to surrender their privacy. 
self-protection is essential, but even the most rigorous self-protection is insufficient to protect your privacy on or from systems that don't belong to you. 
when we communicate with others or move around the city, our privacy depends on the practices of society. 
we can avoid some of the systems that surveil our communications and movements, but not all of them. 
clearly, the better solution is to make all these systems stop surveilling people other than legitimate suspects. 
we must design every system for privacy. 
if we don't want a total surveillance society, we must consider surveillance a kind of social pollution, and limit the surveillance impact of each new digital system just as we limit the environmental impact of physical construction. 
for example: "smart" meters for electricity are touted for sending the power company moment-by-moment data about each customer's electric usage, including how usage compares with users in general. 
this is implemented based on general surveillance, but does not require any surveillance. 
it would be easy for the power company to calculate the average usage in a residential neighborhood by dividing the total usage by the number of subscribers, and send that to the meters. 
each customer's meter could compare her usage, over any desired period of time, with the average usage pattern for that period. 
the same benefit, with no surveillance! 
we need to design such privacy into all our digital systems [1]. 
remedy for collecting data: leaving it dispersed. 
one way to make monitoring safe for privacy is to keep the data dispersed and inconvenient to access. 
old-fashioned security cameras were no threat to privacy(*). 
the recording was stored on the premises, and kept for a few weeks at most. 
because of the inconvenience of accessing these recordings, it was never done massively; they were accessed only in the places where someone reported a crime. 
it would not be feasible to physically collect millions of tapes every day and watch them or copy them. 
nowadays, security cameras have become surveillance cameras: they are connected to the internet so recordings can be collected in a data center and saved forever. 
in detroit, the cops pressure businesses to give them unlimited access to their surveillance cameras so that they can look through them at any and all times. 
this is already dangerous, but it is going to get worse. 
advances in facial recognition may bring the day when suspected journalists can be tracked on the street all the time to see who they talk with. 
internet-connected cameras often have lousy digital security themselves, which means anyone can watch what those cameras see. 
this makes internet-connected cameras a major threat to security as well as privacy. 
for privacy's sake, we should ban the use of internet-connected cameras aimed where and when the public is admitted, except when carried by people. 
everyone must be free to post photos and video recordings occasionally, but the systematic accumulation of such data on the internet must be limited. 
(*) i assume here that the security camera points at the inside of a store, or at the street. 
any camera pointed at someone's private space by someone else violates privacy, but that is another issue. 
also consider reading "a radical proposal to keep your personal data safe," published in the guardian in april 2018. 
remedy for internet commerce surveillance. 
most data collection comes from people's own digital activities. 
usually the data is collected first by companies. 
but when it comes to the threat to privacy and democracy, it makes no difference whether surveillance is done directly by the state or farmed out to a business, because the data that the companies collect is systematically available to the state. 
the nsa, through prism, has gotten into the databases of many large internet corporations. 
at&t has saved all its phone call records since 1987 and makes them available to the dea to search on request. 
strictly speaking, the u.s. 
government does not possess that data, but in practical terms it may as well possess it. 
some companies are praised for resisting government data requests to the limited extent they can, but that can only partly compensate for the harm they do to by collecting that data in the first place. 
in addition, many of those companies misuse the data directly or provide it to data brokers. 
the goal of making journalism and democracy safe therefore requires that we reduce the data collected about people by any organization, not just by the state. 
we must redesign digital systems so that they do not accumulate data about their users. 
if they need digital data about our transactions, they should not be allowed to keep them more than a short time beyond what is inherently necessary for their dealings with us. 
one of the motives for the current level of surveillance of the internet is that sites are financed through advertising based on tracking users' activities and propensities. 
this converts a mere annoyance—advertising that we can learn to ignore—into a surveillance system that harms us whether we know it or not. 
purchases over the internet also track their users. 
and we are all aware that "privacy policies" are more excuses to violate privacy than commitments to uphold it. 
we could correct both problems by adopting a system of anonymous payments—anonymous for the payer, that is. 
(we don't want to help the payee dodge taxes.) bitcoin is not anonymous, though there are efforts to develop ways to pay anonymously with bitcoin. 
however, technology for digital cash was first developed in the 1980s; the gnu software for doing this is called gnu taler. 
now we need only suitable business arrangements, and for the state not to obstruct them. 
another possible method for anonymous payments would use prepaid phone cards. 
it is less convenient, but very easy to implement. 
a further threat from sites' collection of personal data is that security breakers might get in, take it, and misuse it. 
this includes customers' credit card details. 
an anonymous payment system would end this danger: a security hole in the site can't hurt you if the site knows nothing about you. 
remedy for travel surveillance. 
we must convert digital toll collection to anonymous payment (using digital cash, for instance). 
license-plate recognition systems recognize all cars' license plates, and the data can be kept indefinitely; they should be required by law to notice and record only those license numbers that are on a list of cars sought by court orders. 
a less secure alternative would record all cars locally but only for a few days, and not make the full data available over the internet; access to the data should be limited to searching for a list of court-ordered license-numbers. 
the u.s. 
"no-fly" list must be abolished because it is punishment without trial. 
it is acceptable to have a list of people whose person and luggage will be searched with extra care, and anonymous passengers on domestic flights could be treated as if they were on this list. 
it is also acceptable to bar non-citizens, if they are not permitted to enter the country at all, from boarding flights to the country. 
this ought to be enough for all legitimate purposes. 
many mass transit systems use some kind of smart cards or rfids for payment. 
these systems accumulate personal data: if you once make the mistake of paying with anything but cash, they associate the card permanently with your name. 
furthermore, they record all travel associated with each card. 
together they amount to massive surveillance. 
this data collection must be reduced. 
navigation services do surveillance: the user's computer tells the map service the user's location and where the user wants to go; then the server determines the route and sends it back to the user's computer, which displays it. 
nowadays, the server probably records the user's locations, since there is nothing to prevent it. 
this surveillance is not inherently necessary, and redesign could avoid it: free/libre software in the user's computer could download map data for the pertinent regions (if not downloaded previously), compute the route, and display it, without ever telling anyone where the user is or wants to go. 
systems for borrowing bicycles, etc., can be designed so that the borrower's identity is known only inside the station where the item was borrowed. 
borrowing would inform all stations that the item is "out," so when the user returns it at any station (in general, a different one), that station will know where and when that item was borrowed. 
it will inform the other station that the item is no longer "out."
 it will also calculate the user's bill, and send it (after waiting some random number of minutes) to headquarters along a ring of stations, so that headquarters would not find out which station the bill came from. 
once this is done, the return station would forget all about the transaction. 
if an item remains "out" for too long, the station where it was borrowed can inform headquarters; in that case, it could send the borrower's identity immediately. 
remedy for communications dossiers. 
internet service providers and telephone companies keep extensive data on their users' contacts (browsing, phone calls, etc). 
with mobile phones, they also record the user's physical location. 
they keep these dossiers for a long time: over 30 years, in the case of at&t. 
soon they will even record the user's body activities. 
it appears that the nsa collects cell phone location data in bulk. 
unmonitored communication is impossible where systems create such dossiers. 
so it should be illegal to create or keep them. 
isps and phone companies must not be allowed to keep this information for very long, in the absence of a court order to surveil a certain party. 
this solution is not entirely satisfactory, because it won't physically stop the government from collecting all the information immediately as it is generated—which is what the u.s. 
does with some or all phone companies. 
we would have to rely on prohibiting that by law. 
however, that would be better than the current situation, where the relevant law (the pat riot act) does not clearly prohibit the practice. 
in addition, if the government did resume this sort of surveillance, it would not get data about everyone's phone calls made prior to that time. 
for privacy about who you exchange email with, a simple partial solution is for you and others to use email services in a country that would never cooperate with your own government, and which communicate with each other using encryption. 
however, ladar levison (owner of the mail service lavabit that us surveillance sought to corrupt completely) has a more sophisticated idea for an encryption system through which your email service would know only that you sent mail to some user of my email service, and my email service would know only that i received mail from some user of your email service, but it would be hard to determine that you had sent mail to me. 
but some surveillance is necessary. 
for the state to find criminals, it needs to be able to investigate specific crimes, or specific suspected planned crimes, under a court order. 
with the internet, the power to tap phone conversations would naturally extend to the power to tap internet connections. 
this power is easy to abuse for political reasons, but it is also necessary. 
fortunately, this won't make it possible to find whistleblowers after the fact, if (as i recommend) we prevent digital systems from accumulating massive dossiers before the fact. 
individuals with special state-granted power, such as police, forfeit their right to privacy and must be monitored. 
(in fact, police have their own jargon term for perjury, "testilying," since they do it so frequently, particularly about protesters and photographers.) one city in california that required police to wear video cameras all the time found their use of force fell by 60%. 
the aclu is in favor of this. 
corporations are not people, and not entitled to human rights. 
it is legitimate to require businesses to publish the details of processes that might cause chemical, biological, nuclear, fiscal, computational (e.g., drm) or political (e.g., lobbying) hazards to society, to whatever level is needed for public well-being. 
the danger of these operations (consider the bp oil spill, the fukushima meltdowns, and the 2008 fiscal crisis) dwarfs that of terrorism. 
however, journalism must be protected from surveillance even when it is carried out as part of a business. 
conclusion. 
digital technology has brought about a tremendous increase in the level of surveillance of our movements, actions, and communications. 
it is far more than we experienced in the 1990s, and far more than people behind the iron curtain experienced in the 1980s, and proposed legal limits on state use of the accumulated data would not alter that. 
companies are designing even more intrusive surveillance. 
some project that pervasive surveillance, hooked to companies such as facebook, could have deep effects on how people think. 
such possibilities are imponderable; but the threat to democracy is not speculation. 
it exists and is visible today. 
unless we believe that our free countries previously suffered from a grave surveillance deficit, and ought to be surveilled more than the soviet union and east germany were, we must reverse this increase. 
that requires stopping the accumulation of big data about people. 
end note. 
the condition of not being monitored has been referred to as ambient privacy. 
in the 2020s, facial recognition deepens the danger of surveillance cameras. 
china already identifies people by their faces so as to punish them, and iran is planning to use it to punish women who violate religion-imposed dress codes. 
a version of this article was first published in wired in october 2013. 
technological neutrality and free software. 
stallman proprietary developers arguing against laws to move towards free software often claim this violates the principle of "technological neutrality."
 the conclusion is wrong, but where is the error? 
technological neutrality is the principle that the state should not impose preferences for or against specific kinds of technology. 
for example, there should not be a rule that specifies whether state agencies should use solid state memory or magnetic disks, or whether they should use gnu/linux or bsd. 
rather, the agency should let bidders propose any acceptable technology as part of their solutions, and choose the best/cheapest offer by the usual rules. 
the principle of technological neutrality is valid, but it has limits. 
some kinds of technology are harmful; they may pollute air or water, encourage antibiotic resistance, abuse their users, abuse the workers that make them, or cause massive unemployment. 
these should be taxed, regulated, discouraged, or even banned. 
the principle of technological neutrality applies only to purely technical decisions. 
it is not "ethical neutrality" or "social neutrality"; it does not apply to decisions about ethical and social issues—such as the choice between free software and proprietary software. 
for instance, when the state adopts a policy of migrating to free software in order to restore the computing sovereignty of the country and lead the people towards freedom and cooperation, this isn't a technical preference. 
this is an ethical, social and political policy, not a technological policy. 
the state is not supposed to be neutral about maintaining the people's freedom or encouraging cooperation. 
it is not supposed to be neutral about maintaining or recovering its sovereignty. 
it is the state's duty to insist that the software in its public agencies respect the computing sovereignty of the country, and that the software taught in its schools educate its students in freedom and cooperation. 
the state must insist on free software, exclusively, in public agencies and in education. 
the state has the responsibility to maintain control of its computing, so it must not surrender that control to service as a software substitute. 
in addition, the state must not reveal to companies the personal data that it maintains about citizens. 
when no ethical imperatives apply to a certain technical decision, it can be left to the domain of technological neutrality. 
the danger of e-books. 
in an age where business dominates our governments and writes our laws, every technological advance offers business an opportunity to impose new restrictions on the public. 
technologies that could have empowered us are used to chain us instead. 
with printed books, you can buy one with cash, anonymously. 
then you own it. 
you are not required to sign a license that restricts your use of it. 
the format is known, and no proprietary technology is needed to read the book. 
you can give, lend or sell the book to another. 
you can, physically, scan and copy the book, and it's sometimes lawful under copyright. 
nobody has the power to destroy your book. 
contrast that with amazon e-books (fairly typical): amazon requires users to identify themselves to get an e-book. 
in some countries, including the us, amazon says the user cannot own the e-book. 
amazon requires the user to accept a restrictive license on use of the e-book. 
the format is secret, and only proprietary user-restricting software can read it at all. 
an ersatz "lending" is allowed for some books, for a limited time, but only by specifying by name another user of the same system. 
no giving or selling. 
to copy the e-book is impossible due to digital restrictions management in the player and prohibited by the license, which is more restrictive than copyright law. 
amazon can remotely delete the e-book using a back door. 
it used this back door in 2009 to delete thousands of copies of george orwell's 1984. 
even one of these infringements makes e-books a step backward from printed books. 
we must reject e-books until they respect our freedom.[1] the e-book companies say denying our traditional freedoms is necessary to continue to pay authors. 
the current copyright system supports those companies handsomely and most authors badly. 
we can support authors better in other ways that don't require curtailing our freedom, and even legalize sharing. 
two methods i've suggested are: to distribute tax funds to authors based on the cube root of each author's popularity.[2] to design players so users can send authors anonymous voluntary payments. 
e-books need not attack our freedom (project gutenberg's e-books don't), but they will if companies get to decide. 
it's up to us to stop them. 
join the fight: sign up for our mailing list about the dangers of ebooks. 
footnotes. 
[2019] to show our rejection of amazon's e-book reader, we call it the swindle. 
see both my speech "copyright versus community in the age of computer networks" and my 2012 open letter to the president of the brazilian senate, senator josé sarney, for more on this. 
the law of success 2.0: an interview with richard stallman. 
this interview was conducted by haegwan kim in november 2010. 
haegwan kim:  first, you mentioned that discussing success is not useful for you and that's really interesting to me. 
in this interview mainly i want to talk about freedom and related issue. 
but before that, could you tell me the reason that talking about success is not useful to you? 
richard stallman:  because some activities are good for society and some are harmful for society. 
of course, many are neutral. 
if person a knows how to aim for success, that may be good or bad for the rest of us. 
and i didn't set out to be a success. 
i didn't set out to make a lot of money or become famous. 
i set out to give software users freedom, which is a goal that deserves to be done. 
it's a goal that's important in its own right and i just happened to be the person trying to achieve it. 
and to a certain extent i have succeeded. 
it didn't make me rich but it's success, to an extent, because at least there is now a large community of people who use and contribute to free software, so in that sense it's a success. 
but when i look at it i don't ask, am i a success? 
i ask, do users have freedom? 
hk:  great to hear that. 
can you tell me why you are so in favour of the freedom? 
rms:  partly it's because i resent being pushed around. 
i resent anyone giving me orders. 
partly because i grew up in the us, where people were taught to think about freedom—or at least were. 
i don't know if any of the children are taught any of these things any more. 
partly because not long before i was born, there was a world war against some horrible dictators and partly because i had the experience of having freedom in my use of computers when i worked at the mit artificial intelligence lab in the 70s. 
and so i was sensitised to notice the difference between free software, freedom-respecting software and user-subjugating software. 
so for ten years or so, my work was done on improving a free operating system, most of the parts of which had been developed at mit by the group i was part of. 
so working, improving that system meant taking advantage of freedom all the time, so i came to appreciate freedom. 
hk:  okay, i see. 
rms:  but that's not quite the end. 
hk:  okay. 
rms:  because the community fell apart in the early 80s and it was no longer possible to have the freedom. 
so i saw the contrast between living in freedom and losing freedom, and i found nonfreedom disgusting. 
so i decided to do something to bring freedom back. 
hk:  can you tell me how…? 
you are now trying to bring freedom back, which conversely means there's no freedom at the moment. 
rms:  yes. 
with regard to software. 
first of all, this is a big question. 
in regard to software, proprietary software does not respect users' freedom because the program controls the users. 
if the users aren't free to change a program and do so either individually or in groups cooperating, then the program controls the users. 
now, with typical proprietary software there is even a licence that says what users are allowed to do with the program and what they're not allowed to do and it can be as restrictive as the developer chooses to make it. 
for instance, there is a microsoft program for managing webpages, websites, and its licence says it can't be used to publish anything that criticises microsoft. 
so here, nonfree software takes away your freedom of speech. 
this is obviously intolerable. 
if you can't use your copy freely you can't control your computing. 
you can only do what you're told. 
but then the second level of control, through the source, through writing the code of the program; if you use a program whose code was written by somebody else and you can't see it or change it then that somebody controls what you do. 
he could make the program do nasty things to you, and even if you happen to find out, you still can't change it. 
finding out is difficult because you don't have the source code. 
sometimes you will notice some sign that it's doing a nasty thing. 
other times you won't notice. 
for instance, windows has spy features which send information about the use of the machine to microsoft and users can't see that this is happening. 
it was not easy to find out that these spy features are there, but people found out. 
they had to be somewhat clever, in some cases, to discover these spy features. 
and then there is a back door in windows which allows microsoft to forcibly install software changes. 
it doesn't have to ask permission, it can just sneak them in. 
so this is what i mean when i say a program controls the users. 
but even if there's no back door to allow the developer to install changes, it's still the case that the program does what the developer chose to make it do, and if you don't like that, you can't change it. 
so you're stuck with it. 
so the back door is sort of icing on the cake for his power, because it means that even if he forgot to do something nasty, he can put it in retroactively. 
without that kind of back door, he's limited to the nasty things that he thought of in advance. 
there are many proprietary programs that are widely used, that do surveillance; there are many that are specifically designed to restrict what users could do. 
those restrictions which limit what users could do on the data in their machines are known as digital restrictions management or drm, also sometimes referred to as digital handcuffs. 
so the point is, using those programs is like being handcuffed because you can't just move your hands around anywhere you like, the program is stopping you. 
and these are intentional features. 
of course, programs also have bugs, and if you don't have the source code you can't fix the bugs. 
so the users, in order to be free, must have the source code, and they must be able to run their own modified versions of the source code in place of the original. 
and they have to be free also to distribute their modified versions. 
because if you don't have that freedom then you could fix a problem for yourself but you couldn't fix it for anyone else, which means that each individual user would have to fix the problem. 
it would have to be fixed over and over and over. 
also with the freedom to distribute your modified version, the people who don't know how to program can benefit. 
hk:  i understand a bit about freedom for software now. 
rms:  so if i'm using the free program and i make a change in it, which i know how to do, then i could publish my modified version and then you. 
perhaps you're not a programmer; you would still be able to get the benefit of the change i make. 
not only that, you could pay somebody to change the program for you, or you could join an organisation whose goal is to change a certain program in a certain way, and all the members would put in their money, and that's how they would hire a programmer to change it. 
so the definition of free software is the four freedoms that are needed for the users to have control of their computing. 
freedom zero is the freedom to run the program. 
freedom one is the freedom to study the source code and change it so it does your computing as you wish. 
freedom two is the freedom to help others, which is the freedom to redistribute exact copies. 
and freedom three is the freedom to contribute to your community, which is the freedom to distribute copies of your modified versions. 
so these four freedoms ensure that the users, both individually and collectively, control the program. 
if the users don't control the program then the program controls the users. 
that's proprietary software and that is what makes it evil. 
hk:  sounds similar to creative commons—verifying the types of copyrights. 
rms:  yes. 
creative commons publishes various licences. 
hk:  yes. 
do you agree with all those kind of activities on freedom? 
rms:  they don't have a position on that. 
hk:  position? 
rms:  creative commons licences grant the users varying amounts of freedom. 
two of their licences qualify as free by our criteria. 
those are the creative commons attribution licence and the attribution share-alike licence, those. 
and i think maybe there's also the cc zero licence, which i usually don't think about. 
but i think those three are all free licences. 
the other creative commons licences do not go far enough to make the work free. 
however, i wouldn't say that all published works must be free. 
i think the published works that must be free are the ones that you use to do practical jobs. 
so that means software, recipes for cooking—and recipes for cooking are a good examples because, as i'm sure you know, cooks frequently share and modify recipes. 
hk:  sure, yes. 
rms:  and it would be a tremendous outrage to stop them. 
so in effect, cooks treat recipes as free. 
but let's look at some more works that are used for practical jobs. 
educational works are used for practical jobs; to teach yourself or teach others. 
reference works are used for practical jobs; to look up some information. 
and then there are text fonts, which we use to display or print text so it can be read. 
these are examples of works of practical use. 
these are not the only examples. 
i m sure you can find some more. 
anyway, works of practical use are the ones that i believe must be free. 
however there are other kinds of works. 
for instance, there are essays of opinion and scientific papers and there are artistic works, and their contributions to society are of a different kind. 
they don't contribute through helping you do practical jobs. 
they are useful in other ways. 
so i draw different conclusions about them. 
i think the crucial conclusion for those other works is the freedom to non-commercially redistribute exact copies, in other words the freedom to share. 
hk:  i'm interested in what you're doing. 
you're travelling around the world, like me, and you're contributing to others, not for yourself. 
and i love that way you live and i respect it so much. 
so i was just wondering, how you describe yourself? 
rms:  i describe myself as a free software activist. 
hk:  activist? 
rms:  yes. 
hk:  activists means the ones who change the world? 
rms:  first of all, we haven't changed the whole world, not even in this regard, we've only changed a part of it. 
hk:  ok. 
rms:  as you can see, most computer users are still running proprietary systems such as windows and macintosh. 
and then if they have smartphones, those smartphones are running proprietary software and it typically has malicious features too. 
we have a long way to go to achieve victory. 
and the other thing is that what we have achieved, i did not achieve by myself. 
but i did start this movement. 
hk:  your activities have lasted for a long time, what would be your advice for being an activist? 
rms:  i was rather lucky, in a sense. 
i was in a position to do something that would forward my cause just working by myself. 
as other people showed up who were interested they could join. 
so it's generally good to look for a way to do things that way, in other words don't set out at first to make a large organisation and then begin to achieve something. 
start doing things such that you alone, or a small group of people who support you, can achieve something, and by achieving something you can attract the attention of others who might want to join. 
hk:  great idea. 
rms:  in fact, i've read that advice in a book. 
i don't remember where, because that was a long time ago, but it fit what i had alreasy done. 
i can't say i thought of this as a general principle, but it did work well in my case. 
and the other thing is, don't design your activism with the idea that first you will raise a lot of money and then with the money you'll be able to do such-and-such, because on that path you almost never get anywhere. 
it's so unlikely you will succeed in raising that money that chances are you'll spend all your time trying and failing, and never start doing anything about your cause. 
so design your plans so that you can start doing things for the cause soon and that way you'll spend your time getting a certain amount done for your cause, which is better than nothing. 
hk:  fair enough. 
rms:  and of the ones who follow the raise-money-first path, those few that succeed in raising the money will find that their years of focusing on making that money have changed their goals. 
by the time they have that money they will be used to trying to do everything to get money. 
few people have the ability to turn around and start directing their efforts toward something other than getting and keeping a lot of money. 
hk:  indeed. 
can you tell me how did you gather great people when you launched the free software foundation? 
rms:  i don't know if i always gathered great people. 
some who came to us were good and some were not but i couldn't tell very well in advance, i didn't know how to judge that. 
but enough of them were good that they've managed to achieve a lot. 
hk:  so did you gather people or did people automatically come to your place? 
rms:  mostly people had seen what we had already done and found it interesting, and they would either help or, in some cases, come back when the fsf was hiring and we would say we were looking for someone to hire. 
maybe we knew them already—who was a good programmer—by their contributing as a volunteer, so we knew if we hired them, they would be good. 
hk:  i see. 
thank you so much for your time. 
as a final question, i want to ask you about what we should do to spread the freedom. 
rms:  the big enemy of freedom is governments taking too much power over society. 
they do that with two excuses: the excuse is terrorists or child pornographers. 
but we have to realise that anti-freedom is a bigger danger than either of those. 
for instance, censoring the internet. 
we must not accept laws allowing punishment without a fair trial. 
the us set a horrible example when it started grabbing people from all around the world without a trial. 
even now, obama is continuing pushing military commissions, which are simply trials that don't live up to the standards for trials. 
they're not fair trials. 
we know a lot of the prisoners were in guantanamo because somebody told a malicious rumour about them, and we can't rely on military tribunals to distinguish between real evidence and malicious rumour or the fact that somebody was tortured and eventually said whatever his torturer wanted. 
right now, i'm told the iraqi government is still committing torture and i was told 30,000 prisoners who are without trial. 
this is a monster that the us created. 
governments around the world keep looking for more power. 
the problem is, they have too much already. 
hk:  that's true. 
how can we get the power back from the governments? 
rms:  i wish i knew. 
hk:  [laughter] rms:  i do know something about how we can teach people the need for this. 
governments get their power by focusing people's attention on some secondary problem. 
for instance, in the us, how did the government get its power to torture and imprison people and even just bomb them? 
the us practises targeted killing. 
there's a list of people who are marked for death and the us government will drop bombs on them rather than try to arrest them. 
now, how did all this get started? 
it's because the us focused people's attention on the secondary danger of terrorists carrying out the september 11th attacks in the us. 
now, bush didn't want an investigation of those attacks. 
eventually he was forced to allow an investigation, but he weakened it and corrupted the investigators, so we can't trust the results. 
there has never been a proper investigation of how those attacks were carried out and who was responsible. 
so maybe it was planned by a bunch of terrorists as the government says, or maybe cheney was involved, as some other people say. 
without a real investigation, we'll never know. 
but given that excuse, george bush went on to demonstrate that tyranny is worse than terrorism, because those terrorist attacks killed under 3,000 people, and they were used as the excuse for the conquest of iraq, in which 4500 or so americans were killed. 
so even if we only consider who's more dangerous to americans, the answer is bush. 
hk:  [laughter] people can't judge what's right or wrong when the condition is getting complex and excited too much… rms:  and that ignored the million or so iraqis that bush killed and that bush prevented us from counting. 
but by preventing them from being accurately counted, bush made it possible for low estimates such as that of iraq body count to seem plausible. 
i read recently some journalists went to look for oil buried just below the beach in florida, and some sort of federal agents ordered them not to, because they don't want news that the oil is there. 
they're hoping to cover up the effects so as to get it out of people's minds. 
and whether they're doing that for bp or for obama or both, it's offensive to try to stop the public from knowing. 
hk:  do you believe that the internet has the possibility to change this phenomenon? 
rms:  that's a different question. 
the internet is useful for various things like sharing valuable information. 
but it's also useful for surveillance. 
so the internet can be used for good things and bad things. 
so how do we make sure that we are free to share? 
how do we limit the surveillance? 
it's a matter of stopping the government from doing things that are unjust. 
the problem is software controlled by its developer. 
i fully agree with jonathan zittrain's conclusion that we should not abandon general-purpose computers. 
alas, i disagree completely with the path that led him to it. 
he presents serious security problems as an intolerable crisis, but i'm not convinced. 
then he forecasts that users will panic in response and stampede toward restricted computers (which he calls "appliances"), but there is no sign of this happening. 
zombie machines are a problem, but not a catastrophe. 
moreover, far from panicking, most users ignore the issue. 
today, people are indeed concerned about the danger of phishing (mail and web pages that solicit personal information for fraud), but using a browsing-only device instead of a general computer won't protect you from that. 
meanwhile, apple has reported that 25 percent of iphones have been unlocked. 
surely at least as many users would have preferred an unlocked iphone but were afraid to try a forbidden recipe to obtain it. 
this refutes the idea that users generally prefer that their devices be locked. 
it is true that a general computer lets you run programs designed to spy on you, restrict you, or even let the developer attack you. 
such programs include kazaa, realplayer, adobe flash player, windows media player, microsoft windows, and macos. 
windows vista does all three of those things; it also lets microsoft change the software without asking, or command it to permanently cease normal functioning [1]. 
but restricted computers are no help, because they present the same problem for the same reason. 
the iphone is designed for remote attack by apple. 
when apple remotely destroys iphones that users have unlocked to enable other uses, that is no better than when microsoft remotely sabotages vista. 
the tivo is designed to enforce restrictions on access to the recordings you make, and reports what you watch. 
e-book readers such as the amazon "swindle" are designed to stop you from sharing and lending your books. 
features that artificially obstruct use of your data are known as digital restrictions management (drm); our protest campaign against drm is hosted at defectivebydesign.org. 
(our adversaries call drm "digital rights management" based on their idea that restricting you is their right. 
when you choose a term, you choose your side.) the nastiest of the common restricted devices are cell phones. 
they transmit signals for tracking your whereabouts even when switched "off"; the only way to stop this is to take out all the batteries. 
many can also be turned on remotely, for listening, unbeknownst to you. 
(the fbi is already taking advantage of this feature, and the us commerce department lists this danger in its security guide.) cellular phone network companies regularly install software in users phones, without asking, to impose new usage restrictions. 
with a general computer you can escape by rejecting such programs. 
you don't have to have kazaa, realplayer, adobe flash, windows media player, microsoft windows or macos on your computer (i don't). 
by contrast, a restricted computer gives you no escape from the software built into it. 
the root of this problem, both in general pcs and restricted computers, is software controlled by its developer. 
the developer (typically a corporation) controls what the program does, and prevents everyone else from changing it. 
if the developer decides to put in malicious features, even a master programmer cannot easily remove them. 
the remedy is to give the users more control, not less. 
we must insist on free/libre software, software that the users are free to change and redistribute. 
free/libre software develops under the control of its users: if they don't like its features, for whatever reason, they can change them. 
if you're not a programmer, you still get the benefit of control by the users. 
a programmer can make the improvements you would like, and publish the changed version. 
then you can use it too. 
with free/libre software, no one has the power to make a malicious feature stick. 
since the source code is available to the users, millions of programmers are in a position to spot and remove the malicious feature and release an improved version; surely someone will do it. 
others can then compare the two versions to verify independently which version treats users right. 
as a practical fact, free software is generally free of designed-in malware. 
many people do acquire restricted devices, but not for motives of security. 
why do people choose them? 
sometimes it is because the restricted devices are physically smaller. 
i edit text all day (literally) and i find the keyboard and screen of a laptop well worth the size and weight. 
however, people who use computers differently may prefer something that fits in a pocket. 
in the past, these devices have typically been restricted, but they weren't chosen for that reason. 
now they are becoming less restricted. 
in fact, the openmoko cell phone features a main computer running entirely free/libre software, including the gnu/linux operating system normally used on pcs and servers. 
a major cause for the purchase of some restricted computers is financial sleight of hand. 
game consoles, and the iphone, are sold for an unsustainably low price, and the manufacturers subsequently charge when you use them. 
thus, game developers must pay the game console manufacturer to distribute a game, and they pass this cost on to the user. 
likewise, at&t pays apple when an iphone is used as a telephone. 
the low up-front price misleads customers into thinking they will save money. 
if we are concerned about the spread of restricted computers, we should tackle the issue of the price deception that sells them. 
if we are concerned about malware, we should insist on free software that gives the users control. 
postnote. 
zittrain's suggestion to reduce the statute of limitations on software patent lawsuits is a tiny step in the right direction, but it is much easier to solve the whole problem. 
software patents are an unnecessary, artificial danger imposed on all software developers and users in the us. 
every program is a combination of many methods and techniques—thousands of them in a large program. 
if patenting these methods is allowed, then hundreds of those used in a given program are probably patented. 
(avoiding them is not feasible; there may be no alternatives, or the alternatives may be patented too.) so the developers of the program face hundreds of potential lawsuits from parties unknown, and the users can be sued as well. 
the complete, simple solution is to eliminate patents from the field of software. 
since the patent system is created by statute, eliminating patents from software will be easy given sufficient political will. 
(see end software patents.) footnote. 
windows vista initially had a "kill switch" with which microsoft could remotely command the computer to stop functioning. 
microsoft subsequently removed this, ceding to public pressure, but reserved the "right" to put it back in. 
www.gnu.org/philosophy/third-party-ideas.html
tivoization. 
there is a paradoxical class of firmware, for which the source code is free software, because it carries a free software license, but specific hardware, for which these programs are designed, renders any binaries produced from that source code nonfree in practice. 
that is because that hardware requires the binary to be signed by the hardware manufacturer, either in order to run at all, or in order to make use of crucial hardware facilities, effectively forbidding users to run modified versions. 
we call these programs tivoized blobs. 
while it is still physically possible to replace the released binary on the hardware that enforces signatures, it is useless to do so, since the hardware would refuse to run the modified version, or to do some special job such as decoding the drm. 
therefore, the freedom #1 (one of the four essential freedoms) is missing, and that binary is not free, even though the source code may carry a free software license. 
indirectly, tivoization affects the other freedoms (to use and to distribute modified versions), because any modification of the firmware by yourself will result in broken hardware. 
the binary may qualify as open source, because the term "open source" is defined in terms of how the source is treated. 
the publisher or the manufacturer may advertize this forced signature check as a "feature."
 here is their argument: your computer won't boot (or will lack important features) if the hardware detects corrupted firmware, so tivoization protects you and your data. 
but we should wonder: whom does it protect, and from whom? 
who is the owner of this lock? 
who decides what is good or bad software for our own computing? 
if it is not us, then this computer is not loyal. 
the tivoization is a not a security feature, it is a trap for our freedoms. 
it prevents users from upgrading their own hardware or firmware, and it suggests a false sense of security by giving the control of their computer only to some "trusted" firmware provider, compelling users to take the provider's word for their safety. 
the firmware that drives the hardware at the lowest level also has the most control over it. 
it often contains back doors and vulnerabilities which only the "trusted" provider (trusted by the hardware) is allowed to fix. 
preventing unsigned or self-signed versions of the firmware to be run is a way for the manufacturer and publisher to keep the control over your computing, even more than if the source code itself were proprietary! 
it only serves the purpose of the publisher or manufacturer, and has no benefit to the software user or the hardware owner. 
on the other hand, supposing some models of hardware will run modified versions, there is no advantage for you in using the manufacturer's signed version instead of a self-signed variant. 
among the most important additions in the gnu general public license version 3, in 2007, was to prohibit taking a gplv3-covered program and distributing it under tivoization, because it denies users the freedom, in practice, to modify the program and then use the modified version. 
as stated by the gnu free system distribution guidelines, operating systems which provide such firmware are not free, whether the upstream source code is free or not. 
the anatomy of a trivial patent. 
stallman programmers are well aware that many of the existing software patents cover laughably obvious ideas. 
yet the patent system's defenders often argue that these ideas are nontrivial, obvious only in hindsight. 
and it is surprisingly difficult to defeat them in debate. 
why is that? 
one reason is that any idea can be made to look complex when analyzed to death. 
another reason is that these trivial ideas often look quite complex as described in the patents themselves. 
the patent system's defenders can point to the complex description and say, "how can anything this complex be obvious?"
 i will use an example to show you how. 
here's claim number one from us patent number 5,963,916, applied for in october 1996: 1. a method for enabling a remote user to preview a portion of a pre-recorded music product from a network web site containing pre-selected portions of different pre-recorded music products, using a computer, a computer display and a telecommunications link between the remote user's computer and the network web site, the method comprising the steps of: a) using the remote user's computer to establish a telecommunications link to the network web site wherein the network web site comprises (i) a central host server coupled to a communications network for retrieving and transmitting the pre-selected portion of the pre-recorded music product upon request by a remote user and (ii) a central storage device for storing pre-selected portions of a plurality of different pre-recorded music products; b) transmitting user identification data from the remote user's computer to the central host server thereby allowing the central host server to identify and track the user's progress through the network web site; c) choosing at least one pre-selected portion of the pre-recorded music products from the central host server; d) receiving the chosen pre-selected portion of the pre-recorded products; and e) interactively previewing the received chosen pre-selected portion of the pre-recorded music product. 
that sure looks like a complex system, right? 
surely it took a real clever guy to think of this? 
no, but it took cleverness to make it seem so complex. 
let's analyze where the complexity comes from: 1. a method for enabling a remote user to preview a portion of a pre-recorded music product from a network web site containing pre-selected portions that states the principal part of their idea. 
they put selections from certain pieces of music on a server so a user can listen to them. 
of different pre-recorded music products, this emphasizes their server stores selections from more than one piece of music. 
it is a basic principle of computer science that if a computer can do a thing once, it can do that thing many times, on different data each time. 
many patents pretend that applying this principle to a specific case makes an "invention."
 using a computer, a computer display and a telecommunications link between the remote user's computer and the network web site, this says they are using a server on a network. 
the method comprising the steps of: a) using the remote user's computer to establish a telecommunications link to the network web site this says that the user connects to the server over the network. 
(that's the way one uses a server.) wherein the network web site comprises (i) a central host server coupled to a communications network this informs us that the server is on the net. 
(that is typical of servers.) for retrieving and transmitting the pre-selected portion of the pre-recorded music product upon request by a remote user this repeats the general idea stated in the first two lines. 
and (ii) a central storage device for storing pre-selected portions of a plurality of different pre-recorded music products; they have decided to put a hard disk (or equivalent) in their computer and store the music samples on that. 
ever since around 1980, this has been the normal way to store anything on a computer for rapid access. 
note how they emphasize once again the fact that they can store more than one selection on this disk. 
of course, every file system will let you store more than one file. 
b) transmitting user identification data from the remote user's computer to the central host server thereby allowing the central host server to identify and track the user's progress through the network web site; this says that they keep track of who you are and what you access—a common (though nasty) thing for web servers to do. 
i believe it was common already in 1996. 
c) choosing at least one pre-selected portion of the pre-recorded music products from the central host server; in other words, the user clicks to say which link to follow. 
that is typical for web servers; if they had found another way to do it, that might have been an invention. 
d) receiving the chosen pre-selected portion of the pre-recorded products; and when you follow a link, your browser reads the contents. 
this is typical behavior for a web browser. 
e) interactively previewing the received chosen pre-selected portion of the pre-recorded music product. 
this says that your browser plays the music for you. 
(that is what many browsers do, when you follow a link to an audio file.) now you see how they padded this claim to make it into a complex idea: they combined their own idea (stated in two lines of text) with important aspects of what computers, networks, web servers, and web browsers do. 
this adds up to the so-called invention for which they received the patent. 
this example is typical of software patents. 
even the occasional patent whose idea is nontrivial has the same sort of added complication. 
now look at a subsequent claim: 3. the method of claim 1 wherein the central memory device comprises a plurality of compact disc-read only memory (cd-roms). 
what they are saying here is, "even if you don't think that claim 1 is really an invention, using cd-roms to store the data makes it an invention for sure. 
an average system designer would never have thought of storing data on a cd."
 now look at the next claim: 4. the method of claim 1 wherein the central memory device comprises a raid array drive. 
a raid array is a group of disks set up to work like one big disk, with the special feature that, even if one of the disks in the array has a failure and stops working, all the data are still available on the other disks in the group. 
such arrays have been commercially available since long before 1996, and are a standard way of storing data for high availability. 
but these brilliant inventors have patented the use of a raid array for this particular purpose. 
trivial as it is, this patent would not necessarily be found legally invalid if there is a lawsuit about it. 
not only the us patent office but the courts as well tend to apply a very low standard when judging whether a patent is "unobvious."
 this patent might pass muster, according to them. 
what's more, the courts are reluctant to overrule the patent office, so there is a better chance of getting a patent overturned if you can show a court prior art that the patent office did not consider. 
if the courts are willing to entertain a higher standard in judging unobviousness, it helps to save the prior art for them. 
thus, the proposals to "make the system work better" by providing the patent office with a better database of prior art could instead make things worse. 
it is very hard to make a patent system behave reasonably; it is a complex bureaucracy and tends to follow its structural imperatives regardless of what it is "supposed" to do. 
the only practical way to get rid of the many obvious patents on software features and business practices is to get rid of all patents in those fields. 
fortunately, that would be no loss: the unobvious patents in the software field do no good either. 
what software patents do is put software developers and users under threat. 
the patent system is supposed, intended, to promote progress, and those who benefit from software patents ask us to believe without question that they do have that effect. 
but programmers' experience shows otherwise. 
new theoretical analysis shows that this is no paradox. 
(see researchoninnovation.org/patent.pdf on web.archive.org.) there is no reason why society should expose software developers and users to the danger of software patents. 
ubuntu spyware: what to do?. 
richard stallman since ubuntu version 16.04, the spyware search facility is now disabled by default. 
it appears that the campaign of pressure launched by this article has been partly successful. 
nonetheless, offering the spyware search facility as an option is still a problem, as explained below. 
ubuntu should make the network search a command users can execute from time to time, not a semipermanent option for users to enable (and probably forget). 
even though the factual situation described in the rest of this page has partly changed, the page is still important. 
this example should teach our community not to do such things again, but in order for that to happen, we must continue to talk about it. 
one of the major advantages of free software is that the community protects users from malicious software. 
now ubuntu gnu/linux has become a counterexample. 
what should we do? 
proprietary software is associated with malicious treatment of the user: surveillance code, digital handcuffs (drm or digital restrictions management) to restrict users, and back doors that can do nasty things under remote control. 
programs that do any of these things are malware and should be treated as such. 
widely used examples include windows, the ithings, and the amazon "kindle" product for virtual book burning, which do all three; macintosh and the playstation iii which impose drm; most portable phones, which do spying and have back doors; adobe flash player, which does spying and enforces drm; and plenty of apps for ithings and android, which are guilty of one or more of these nasty practices. 
free software gives users a chance to protect themselves from malicious software behaviors. 
even better, usually the community protects everyone, and most users don't have to move a muscle. 
here's how. 
once in a while, users who know programming find that a free program has malicious code. 
generally the next thing they do is release a corrected version of the program; with the four freedoms that define free software, they are free to do this. 
this is called a "fork" of the program. 
soon the community switches to the corrected fork, and the malicious version is rejected. 
the prospect of ignominious rejection is not very tempting; thus, most of the time, even those who are not stopped by their consciences and social pressure refrain from putting malfeatures in free software. 
but not always. 
ubuntu, a widely used and influential gnu/linux distribution, has installed surveillance code. 
when the user searches her own local files for a string using the ubuntu desktop, ubuntu sends that string to one of canonical's servers. 
(canonical is the company that develops ubuntu.) this is just like the first surveillance practice i learned about in windows. 
my late friend fravia told me that when he searched for a string in the files of his windows system, it sent a packet to some server, which was detected by his firewall. 
given that first example i paid attention and learned about the propensity of "reputable" proprietary software to be malware. 
perhaps it is no coincidence that ubuntu sends the same information. 
ubuntu uses the information about searches to show the user ads to buy various things from amazon. 
amazon commits many wrongs; by promoting amazon, canonical contributes to them. 
however, the ads are not the core of the problem. 
the main issue is the spying. 
canonical says it does not tell amazon who searched for what. 
however, it is just as bad for canonical to collect your personal information as it would have been for amazon to collect it. 
ubuntu surveillance is not anonymous. 
people will certainly make a modified version of ubuntu without this surveillance. 
in fact, several gnu/linux distros are modified versions of ubuntu. 
when those update to the latest ubuntu as a base, i expect they will remove this. 
canonical surely expects that too. 
most free software developers would abandon such a plan given the prospect of a mass switch to someone else's corrected version. 
but canonical has not abandoned the ubuntu spyware. 
perhaps canonical figures that the name "ubuntu" has so much momentum and influence that it can avoid the usual consequences and get away with surveillance. 
canonical says this feature searches the internet in other ways. 
depending on the details, that might or might not make the problem bigger, but not smaller. 
ubuntu allows users to switch the surveillance off. 
clearly canonical thinks that many ubuntu users will leave this setting in the default state (on). 
and many may do so, because it doesn't occur to them to try to do anything about it. 
thus, the existence of that switch does not make the surveillance feature ok. 
even if it were disabled by default, the feature would still be dangerous: "opt in, once and for all" for a risky practice, where the risk varies depending on details, invites carelessness. 
to protect users' privacy, systems should make prudence easy: when a local search program has a network search feature, it should be up to the user to choose network search explicitly each time. 
this is easy: all it takes is to have separate buttons for network searches and local searches, as earlier versions of ubuntu did. 
a network search feature should also inform the user clearly and concretely about who will get what personal information of hers, if and when she uses the feature. 
if a sufficient part of our community's opinion leaders view this issue in personal terms only, if they switch the surveillance off for themselves and continue to promote ubuntu, canonical might get away with it. 
that would be a great loss to the free software community. 
we who present free software as a defense against malware do not say it is a perfect defense. 
no perfect defense is known. 
we don't say the community will deter malware without fail. 
thus, strictly speaking, the ubuntu spyware example doesn't mean we have to eat our words. 
but there's more at stake here than whether some of us have to eat some words. 
what's at stake is whether our community can effectively use the argument based on proprietary spyware. 
if we can only say, "free software won't spy on you, unless it's ubuntu," that's much less powerful than saying, "free software won't spy on you."
 it behooves us to give canonical whatever rebuff is needed to make it stop this. 
any excuse canonical offers is inadequate; even if it used all the money it gets from amazon to develop free software, that can hardly overcome what free software will lose if it ceases to offer an effective way to avoid abuse of the users. 
if you ever recommend or redistribute gnu/linux, please remove ubuntu from the distros you recommend or redistribute. 
if its practice of installing and recommending nonfree software didn't convince you to stop, let this convince you. 
in your install fests, in your software freedom day events, in your flisol events, don't install or recommend ubuntu. 
instead, tell people that ubuntu is shunned for spying. 
while you're at it, you can also tell them that ubuntu contains nonfree programs and suggests other nonfree programs. 
(see "explaining why we don't endorse other systems" for details.) that will counteract the other form of negative influence that ubuntu exerts in the free software community: legitimizing nonfree software. 
the presence of nonfree software in ubuntu is a separate ethical issue. 
for ubuntu to be ethical, that too must be fixed. 
why we must fight ucita. 
ucita is a proposed law, designed by the proprietary software developers, who are now asking all 50 states of the us to adopt it. 
if ucita is adopted, it will threaten the free software community (1) with disaster. 
to understand why, please read on. 
we generally believe that big companies ought to be held to a strict standard of liability to their customers, because they can afford it and because it will keep them honest. 
on the other hand, individuals, amateurs, and good samaritans should be treated more favorably. 
ucita does exactly the opposite. 
it makes individuals, amateurs, and good samaritans liable, but not big companies. 
you see, ucita says that by default a software developer or distributor is completely liable for flaws in a program; but it also allows a shrink-wrap license to override the default. 
sophisticated software companies that make proprietary software will use shrink-wrap licenses to avoid liability entirely. 
but amateurs, and self-employed contractors who develop software for others, will often be shafted because they didn't know about this problem. 
and we free software developers won't have any reliable way to avoid the problem. 
what could we do about this? 
we could try to change our licenses to avoid it. 
but since we don't use shrink-wrap licenses, we cannot override the ucita default. 
perhaps we can prohibit distribution in the states that adopt ucita. 
that might solve the problem—for the software we release in the future. 
but we can't do this retroactively for software we have already released. 
those versions are already available, people are already licensed to distribute them in these states—and when they do so, under ucita, they would make us liable. 
we are powerless to change this situation by changing our licenses now; we will have to make complex legal arguments that may or may not work. 
ucita has another indirect consequence that would hamstring free software development in the long term—it gives proprietary software developers the power to prohibit reverse engineering. 
this would make it easy for them to establish secret file formats and protocols, which there would be no lawful way for us to figure out. 
that could be a disastrous obstacle for development of free software that can serve users' practical needs, because communicating with users of nonfree software is one of those needs. 
many users today feel that they must run windows, simply so they can read and write files in word format. 
microsoft's "halloween documents" announced a plan to use secret formats and protocols as a weapon to obstruct the development of the gnu/linux system (2). 
precisely this kind of restriction is now being used in norway to prosecute 16-year-old jon johansen, who figured out the format of dvds to make it possible to write free software to play them on free operating systems. 
(the electronic frontier foundation is helping with his defense; see eff.org for further information.) some friends of free software have argued that ucita would benefit our community, by making nonfree software intolerably restrictive, and thus driving users to us. 
realistically speaking, this is unlikely, because it assumes that proprietary software developers will act against their own interests. 
they may be greedy and ruthless, but they are not stupid. 
proprietary software developers intend to use the additional power ucita would give them to increase their profits. 
rather than using this power at full throttle all the time, they will make an effort to find the most profitable way to use it. 
those applications of ucita power that make users stop buying will be abandoned; those that most users tolerate will become the norm. 
ucita will not help us. 
ucita does not apply only to software. 
it applies to any sort of computer-readable information. 
even if you use only free software, you are likely to read articles on your computer, and access data bases. 
ucita will allow the publishers to impose the most outrageous restrictions on you. 
they could change the license retroactively at any time, and force you to delete the material if you don't accept the change. 
they could even prohibit you from describing what you see as flaws in the material. 
this is too outrageous an injustice to wish on anyone, even if it would indirectly benefit a good cause. 
as ethical beings, we must not favor the infliction of hardship and injustice on others on the grounds that it will drive them to join our cause. 
we must not be machiavellian. 
the point of free software is concern for each other. 
our only smart plan, our only ethical plan, is…to defeat ucita! 
if you want to help the fight against ucita, by meeting with state legislators in your state, send mail to skip lockwood <dfc@dfc.org>. 
he can tell you how to contribute effectively. 
volunteers are needed most urgently in virginia and maryland (3), but california and oklahoma are coming soon. 
there will probably be a battle in every state sooner or later. 
for more information about ucita, see badsoftware.com [archived page] or read the ucita page on wikipedia. 
notes. 
other people have been using the term "open source" to describe a similar category of software. 
i use the term "free software" to show that the free software movement still exists—that the open source movement has not replaced or absorbed us. 
if you value your freedom as well as your convenience, i suggest you use the term "free software," not "open source," to describe your own work, so as to stand up clearly for your values. 
if you value accuracy, please use the term "free software," not "open source," to describe the work of the free software movement. 
the gnu operating system, its gnu/linux variant, the many gnu software packages, and the gnu gpl, are all primarily the work of the free software movement. 
the supporters of the open source movement have the right to promote their views, but they should not do so on the basis of our achievements. 
see gnu.org/philosophy/open-source-misses-the-point.html for more explanation. 
the system is often called "linux," but properly speaking linux is actually the kernel, one major component of the system (see gnu.org/gnu/linux-and-gnu.html). 
the maryland lower house has approved ucita; there is a push to get the state senate to approve it before the end of the legislative session, on april 10. 
to rush the consideration of this bill is even more obviously foolish than the bill itself. 
so if you live in maryland, please phone or write to your state senator, saying the senate should at least defer ucita for summer study, if it is not rejected outright. 
if you know anyone in maryland who works with computers, please forward this message to that person and ask for per support. 
if you support the anti ucita campaign, please make prominent links to this page, http://www.4cite.org [closed]. 
links to other articles. 
ieee supports the movement to oppose ucita [archived page] cios join fight to kill ucita anti ucita, and other interesting links maintained by citizens on the web [archived page] 
the free software movement and udi. 
a project called udi (uniform driver interface) aims to define a single interface between operating system kernels and device drivers. 
what should the free software movement make of this idea? 
if we imagine a number of operating systems and hardware developers, all cooperating on an equal footing, udi (if technically feasible) would be a very good idea. 
it would permit us to develop just one driver for any given hardware device, and then all share it. 
it would enable a higher level of cooperation. 
when we apply the idea to the actual world, which contains both free software developers seeking cooperation, and proprietary software developers seeking domination, the consequences are very different. 
no way of using udi can benefit the free software movement. 
if it does anything, it will divide and weaken us. 
if linux supported udi, and if we started designing new drivers to communicate with linux through udi, what would the consequences be? 
people could run free gpl-covered linux drivers with windows systems. 
this would help only windows users; it would do nothing for us users of free operating systems. 
it would not directly hurt us, either; but the developers of gpl-covered free drivers could be discouraged to see them used in this way, and that would be very bad. 
it can also be a violation of the gnu gpl to link the drivers into a proprietary kernel. 
to increase the temptation to do so is asking for trouble. 
people could run nonfree windows drivers on gnu/linux systems. 
this would not directly affect the range of hardware supported by free software. 
but indirectly it would tend to decrease the range, by offering a temptation to the millions of gnu/linux users who have not learned to insist on freedom for its own sake. 
to the extent that the community began to accept the temptation, we would be moving to using nonfree drivers instead of writing free ones. 
udi would not in itself obstruct development of free drivers. 
so if enough of us rejected the temptation, we could still develop free drivers despite udi, just as we do without udi. 
but why encourage the community to be weaker than it needs to be? 
why make unnecessary difficulties for the future of free software? 
since udi does no good for us, it is better to reject udi. 
given these consequences, it is no surprise that intel, a supporter of udi, has started to "look to the linux community for help with udi."
 how does a rich and self-seeking company approach a cooperating community? 
by asking for a handout, of course. 
they have nothing to lose by asking, and we might be caught off guard and say yes. 
cooperation with udi is not out of the question. 
we should not label udi, intel, or anyone, as a great satan. 
but before we participate in any proposed deal, we must judge it carefully, to make sure it is advantageous for the free software community, not just for proprietary system developers. 
on this particular issue, that means requiring that cooperation take us a step further along a path that leads to the ultimate goal for free kernels and drivers: supporting all important hardware with free drivers. 
one way to make a deal a good one could be by modifying the udi project itself. 
eric raymond has proposed that udi compliance could require that the driver be free software. 
that would be ideal, but other alternatives could also work. 
just requiring source for the driver to be published, and not a trade secret, could do the job—because even if that driver is not free, it would at least tell us what we need to know to write a free driver. 
intel could also do something outside of udi to help the free software community solve this problem. 
for example, there may be some sort of certification that hardware developers seek, that intel plays a role in granting. 
if so, intel could agree to make certification more difficult if the hardware specs are secret. 
that might not be a complete solution to the problem, but it could help quite a bit. 
one difficulty with any deal with intel about udi is that we would do our part for intel at the beginning, but intel's payback would extend over a long time. 
in effect, we would be extending credit to intel. 
but would intel continue to repay its loan? 
probably yes, if we get it in writing and there are no loopholes; otherwise, we can't count on it. 
corporations are notoriously untrustworthy; the people we are dealing with may have integrity, but they could be overruled from above, or even replaced at any time with different people. 
even a ceo who owns most of the stock can be replaced through a buy-out. 
when making a deal with a corporation, always get a binding commitment in writing. 
it does not seem likely that intel would offer a deal that gives us what we need. 
in fact, udi seems designed to make it easier to keep specifications secret. 
still, there is no harm in keeping the door unlocked, as long as we are careful about who we let in. 
releasing free software if you work at a university. 
in the free software movement, we believe computer users should have the freedom to change and redistribute the software that they use. 
the "free" in "free software" refers to freedom: it means users have the freedom to run, modify and redistribute the software. 
free software contributes to human knowledge, while nonfree software does not. 
universities should therefore encourage free software for the sake of advancing human knowledge, just as they should encourage scientists and other scholars to publish their work. 
alas, many university administrators have a grasping attitude towards software (and towards science); they see programs as opportunities for income, not as opportunities to contribute to human knowledge. 
free software developers have been coping with this tendency for almost 20 years. 
when i started developing the gnu operating system, in 1984, my first step was to quit my job at mit. 
i did this specifically so that the mit licensing office would be unable to interfere with releasing gnu as free software. 
i had planned an approach for licensing the programs in gnu that would ensure that all modified versions must be free software as well—an approach that developed into the gnu general public license (gnu gpl)—and i did not want to have to beg the mit administration to let me use it. 
over the years, university affiliates have often come to the free software foundation for advice on how to cope with administrators who see software only as something to sell. 
one good method, applicable even for specifically funded projects, is to base your work on an existing program that was released under the gnu gpl. 
then you can tell the administrators, "we're not allowed to release the modified version except under the gnu gpl—any other way would be copyright infringement."
 after the dollar signs fade from their eyes, they will usually consent to releasing it as free software. 
you can also ask your funding sponsor for help. 
when a group at nyu developed the gnu ada compiler, with funding from the us air force, the contract explicitly called for donating the resulting code to the free software foundation. 
work out the arrangement with the sponsor first, then politely show the university administration that it is not open to renegotiation. 
they would rather have a contract to develop free software than no contract at all, so they will most likely go along. 
whatever you do, raise the issue early—well before the program is half finished. 
at this point, the university still needs you, so you can play hardball: tell the administration you will finish the program, make it usable, if they agree in writing to make it free software (and agree to your choice of free software license). 
otherwise you will work on it only enough to write a paper about it, and never make a version good enough to release. 
when the administrators know their choice is to have a free software package that brings credit to the university or nothing at all, they will usually choose the former. 
the fsf can sometimes persuade your university to accept the gnu general public license, or to accept gpl version 3. if you can't do it alone, please give us the chance to help. 
send mail to licensing@fsf.org, and put "urgent" in the subject field. 
not all universities have grasping policies. 
the university of texas has a policy that makes it easy to release software developed there as free software under the gnu general public license. 
univates in brazil, and the international institute of information technology in hyderabad, india, both have policies in favor of releasing software under the gpl. 
by developing faculty support first, you may be able to institute such a policy at your university. 
present the issue as one of principle: does the university have a mission to advance human knowledge, or is its sole purpose to perpetuate itself? 
in persuading the university, it helps to approach the issue with determination and based on an ethical perspective, as we do in the free software movement. 
to treat the public ethically, the software should be free—as in freedom—for the whole public. 
many developers of free software profess narrowly practical reasons for doing so: they advocate allowing others to share and change software as an expedient for making software powerful and reliable. 
if those values motivate you to develop free software, well and good, and thank you for your contribution. 
but those values do not give you a good footing to stand firm when university administrators pressure or tempt you to make the program nonfree. 
for instance, they may argue that "we could make it even more powerful and reliable with all the money we can get."
 this claim may or may not come true in the end, but it is hard to disprove in advance. 
they may suggest a license to offer copies "free of charge, for academic use only," which would tell the general public they don't deserve freedom, and argue that this will obtain the cooperation of academia, which is all (they say) you need. 
if you start from values of convenience alone, it is hard to make a good case for rejecting these dead-end proposals, but you can do it easily if you base your stand on ethical and political values. 
what good is it to make a program powerful and reliable at the expense of users' freedom? 
shouldn't freedom apply outside academia as well as within it? 
the answers are obvious if freedom and community are among your goals. 
free software respects the users' freedom, while nonfree software negates it. 
nothing strengthens your resolve like knowing that the community's freedom depends, in one instance, on you. 
this essay is published in free software, free society: the selected essays of richard m. stallman. 
what is the right way to upgrade an installation of windows?. 
it is commonplace in the computing field to urge users to "upgrade" to newer versions of windows (and other nonfree programs) so as to get fixes for "security."
 this conclusion follows from the assumption that these programs are honest software, designed to treat the user right. 
we do not expect that to be the case, and we know it is not the case for windows. 
therefore, we make a different recommendation. 
in fact, newer versions of windows have exploits before they are released. 
they are designed with various kinds of malicious functionalities; see "microsoft's software is malware."
 newer windows versions contain added malicious functionalities; they give microsoft more power over the users. 
that is a reason not to switch to a newer version. 
for some users, switching to a newer version may require rewarding microsoft with money and even buying a new computer. 
we hardly want to encourage that! 
therefore we decline to support microsoft by urging users to move to newer versions; we do not treat the unintentional flaws of windows as more important than the intentional ones. 
our advice to those using any version of windows is to upgrade to gnu/linux. 
supporting gnu packages on any version of windows (or any non-gnu-like systems) is not part of the gnu project's core mission. 
our slogan is, "it runs best on gnu/linux."
 we cooperate with the users who wish to maintain that support, because we may as well cooperate when it is not difficult. 
we have no responsibility to continue doing so, but as long as it is feasible and not holding us back, we have no reason to stop. 
lesson from uruguay. 
22 july 2013 a bill now under consideration in uruguay showed the free software foundation an important point that was missing in our list of recommended government policies to promote free software. 
the bill says that when the state develops or contracts for development of software, this software must be developable in a 100%-free-software environment. 
this requirement avoids problems that can really happen. 
even if the source code of the solution is delivered as free software, and can run on a 100%-free-software gnu/linux system, it could be trapped in other ways. 
for example, compiling its source code could require a nonfree program. 
even editing its source code could require a nonfree program. 
both of these problems can occur when a nonfree ide is used, and this would create additional obstacles to migrating the state to free software. 
it is wise and proper for the law to reject these methods of developing computing solutions for the state. 
taking this into consideration, the fsf has updated its recommendations for government policies to suggest that contracts require that solutions be developable in 100%-free-software environments. 
(see "measures governments can use to promote free software."
) 
 the free software community after 20 years: . with great but incomplete success, what now?. 
stallman it was 5 jan 1984, twenty years ago today, that i quit my job at mit to begin developing a free software operating system, gnu. 
while we have never released a complete gnu system suitable for production use, a variant of the gnu system is now used by tens of millions of people who mostly are not aware it is such. 
free software does not mean "gratis"; it means that users are free to run the program, study the source code, change it, and redistribute it either with or without changes, either gratis or for a fee. 
my hope was that a free operating system would open a path to escape forever from the system of subjugation which is proprietary software. 
i had experienced the ugliness of the way of life that nonfree software imposes on its users, and i was determined to escape and give others a way to escape. 
nonfree software carries with it an antisocial system that prohibits cooperation and community. 
you are typically unable to see the source code; you cannot tell what nasty tricks, or what foolish bugs, it might contain. 
if you don't like it, you are helpless to change it. 
worst of all, you are forbidden to share it with anyone else. 
to prohibit sharing software is to cut the bonds of society. 
today we have a large community of users who run gnu, linux and other free software. 
thousands of people would like to extend this, and have adopted the goal of convincing more computer users to "use free software."
 but what does it mean to "use free software"? 
does that mean escaping from proprietary software, or merely installing free programs alongside it? 
are we aiming to lead people to freedom, or just introduce them to our code? 
in other words, are we working for freedom, or have we replaced that goal with the shallow goal of popularity? 
it's easy to get in the habit of overlooking this distinction, because in many common situations it makes no difference. 
when you're trying to convince a person to try a free program, or to install the gnu/linux operating system, either goal would lead to the same practical conduct. 
however, in other situations the two goals inspire very different actions. 
for instance, what should we say when the nonfree invidious video driver, the nonfree prophecy database, or the nonfree indonesia language interpreter and libraries, is released in a version that runs on gnu/linux? 
should we thank the developers for this "support" for our system, or should we regard this nonfree program like any other—as an attractive nuisance, a temptation to accept bondage, a problem to be solved? 
if you take as your goal the increased popularity of certain free software, if you seek to convince more people to use some free programs some of the time, you might think those nonfree programs are helpful contributions to that goal. 
it is hard to dispute the claim that their availability helps make gnu/linux more popular. 
if the widespread use of gnu or linux is the ultimate goal of our community, we should logically applaud all applications that run on it, whether free or not. 
but if our goal is freedom, that changes everything. 
users cannot be free while using a nonfree program. 
to free the citizens of cyberspace, we have to replace those nonfree programs, not accept them. 
they are not contributions to our community, they are temptations to settle for continuing nonfreedom. 
there are two common motivations to develop a free program. 
one is that there is no program to do the job. 
unfortunately, accepting the use of a nonfree program eliminates that motivation. 
the other is the will to be free, which motivates people to write free replacements for nonfree programs. 
in cases like these, that motive is the only one that can do the job. 
simply by using a new and unfinished free replacement, before it technically compares with the nonfree model, you can help encourage the free developers to persevere until it becomes superior. 
those nonfree programs are not trivial. 
developing free replacements for them will be a big job; it may take years. 
the work may need the help of future hackers, young people today, people yet to be inspired to join the work on free software. 
what can we do today to help convince other people, in the future, to maintain the necessary determination and persistence to finish this work? 
the most effective way to strengthen our community for the future is to spread understanding of the value of freedom—to teach more people to recognize the moral unacceptability of nonfree software. 
people who value freedom are, in the long term, its best and essential defense. 
originally published on newsforge. 
using gnu fdl. 
stallman if you know someone who is writing a manual about free software, and looking towards commercial publication, you have a chance to help the free software movement a great deal with a small amount of work: by suggesting the idea of publishing the manual under the gnu free documentation license. 
until recently, commercial book publication almost always implied a nonfree book. 
but just as free commercial software has been increasing for a while, now free commercial documentation is starting to take off as well. 
some of the major commercial publishers of documentation about the gnu/linux system, and about free software in general, are now willing to publish books under the gnu fdl, and pay the authors in the usual way—if the authors are firm about this. 
but publishers are likely to first propose an ordinary proprietary book. 
and if the authors agree, that's what it will be. 
so it is essential for authors to take the lead; to say, "we want to use the gnu fdl for this book."
 so when your friend mentions writing a manual, you can influence the course of events simply by pointing out this possibility. 
if a publisher rejects the request at first, the gnu project may be able to help the authors prevail. 
they can contact us at <gnu@gnu.org>. 
there are other legitimate free documentation licenses, but sometimes using them requires care. 
for example, one license is equipped with two optional clauses that can be enabled; the license is free if neither optional clause is used, but enabling either of them makes the book nonfree. 
(see gnu.org/licenses/license-list.html.) authors that want to publish free documentation, but using a license other than the gnu fdl, can contact us so we can check that the license really qualifies for free documentation. 
when a commercial manual is free and relates to the gnu system, the gnu project can recommend it to the public. 
so if the authors or publisher set up a web page to describe it and/or sell copies, we can make a link to that page from www.gnu.org/doc/other-free-books.html, provided the page meets our usual criteria (for instance, it should not link to other pages about nonfree software or documentation, and should not be obnoxious about trying to persuade people to buy). 
please inform <webmasters@gnu.org> about such pages. 
see also free software and free manuals. 
viral code and vaccination. 
when others hurt me, i try to defend myself. 
but some tell me that this makes them sick. 
they tell me that i should permit people to rob me of my work. 
they tell me that i should never try to defend myself. 
they tell me that i should stop using the gnu general public license, a license that vaccinates me against hurt. 
instead, i should adopt a license that permits other people to rob me with impunity. 
they want me to adopt a license that forbids me from fighting back. 
they want me to give up my right to benefit from a derivative of my own work, a right i possess under current copyright law. 
of course, the language is a little less feverish than this. 
usually, i myself am not called "infectious."
 rather, the legal defense that i use is called "infectious."
 the license i choose is called "viral."
 in every day language, words such as "infect" and "virus" describe disease. 
the rhetoric is metaphorical. 
a legal tool is not a disease organism; but it is popular to think of the law as an illness, so the metaphor has impact. 
the people who want to rob me use language that says i make them sick when i stop them from robbing me. 
they do not want to draw attention to the so-called "disease" that makes them ill: my health and my rights, and the health and rights of other people. 
instead, they choose metaphor to twist people's thinking. 
they do not want anyone to think that i am a good citizen for stopping crime. 
they want the metaphor to fool others into thinking that i am a disease agent. 
the gnu general public license protects me. 
the connotation of "virus" and "infect" is that my choice of defense gives an illness to those who want to rob me. 
i want freedom from their robbery; but they want the power to hurt me. 
they get sick when they cannot hurt me. 
to use another health and illness-related metaphor, the gnu general public license vaccinates me; it protects me from theft. 
note that the theft about which i am talking is entirely legal in some situations: if you license your work under a modified bsd license, or a similar license, then others may legally take your work, make fixes or improvements to it, and forbid you from using that code. 
i personally dislike this arrangement, but it exists. 
fsf's position on w3 consortium "royalty-free" patent policy. 
rewritten 1 june 2003 our position. 
the free software foundation, represented by professor moglen of columbia university law school, has participated in the w3 consortium patent policy working group from november 2001 through the present. 
the current w3c patent policy, which in most cases requires "royalty-free" or "rf" patent licenses, is a significant step in the direction of protecting the world wide web from patent-encumbered standards. 
but it falls short because a loophole allows conditions on these patent licenses that would prohibit free software implementations of the standards. 
the problem comes from the "field of use" restrictions that patent holders are allowed to put in their royalty-free patent licenses. 
such restrictions say that you are allowed to practice the patented idea, but only for implementing the standard precisely as specified—not in any other way. 
thus, if you change the code to depart from the spec even slightly, the patent license no longer protects you from against being sued for infringing the patent. 
the w3c has policies to reject some kinds of "field of use" restrictions. 
for instance, it won't allow a patent license to be limited to a certain kind of software or a certain kind of platform. 
(we were informed of this in 2012.) however, that still allows other kinds of restrictions that can cause a problem. 
one requirement for free software is that users have the freedom to modify and redistribute it. 
but we can hardly consider that users have freedom to publish modified versions of the program if, for a part of the program's behavior, modification is prohibited. 
thus, these "field of use" restrictions would prevent implementation of w3c standards as free software. 
"field of use" restrictions are also legally incompatible with section 7 of the gnu general public license (version 2), since it does not allow the user's freedom to modify to be shrunk to zero in this way. 
many other free software licenses have no provisions equivalent to the gpl's section 7, but you can't solve the problem merely by using one of those licenses. 
section 7 is intended to prevent the imposition of side restrictions (for instance, by patent licenses) which would deny the freedoms that the gpl itself gives you. 
if the software license does nothing to prevent this, you can find yourself in a situation where the program's license appears to give you freedom, but this freedom has been taken away by restrictions not stated there. 
freedom to modify software can always be limited by third-party patents in ways that the software copyright license doesn't disclose. 
this is why software patents are so dangerous to software freedom. 
the fsf plans to continue to participate in the implementation process. 
we will try to convince patent-holders not to impose "field of use" restrictions, and we encourage all those who care about the right of free software developers to implement all future web standards to do the same. 
the wassenaar arrangement. 
our first information about the new wassenaar arrangement came in the form of a newspaper article, which said that export of encryption software would be prohibited—and this seemed to include free software. 
so we posted an announcement seeking people in non-wassenaar countries to participate in distribution and development of free software for encryption. 
subsequently the actual text of the new version of wassenaar arrangement was published. 
then we saw that it continues to have an exception that seems to cover free software. 
(they use the term "public domain," but they seem to mean something like free software by that.) so the problem seems to have been a false alarm. 
however, the us continues to seek such restrictions, and therefore it makes sense to continue our preparations, as a precaution in case a future version of the wassenaar arrangement places further restrictions on exportation of free software. 
here is our interpretation of the text of the latest wassenaar arrangement, as we have seen it. 
this has not been checked by a lawyer. 
according to the general software notes, entry 2, the agreement does not cover software which is in "the public domain."
 this is defined in the definitions as technology or software which has been made available without restrictions upon its further dissemination. 
there is also a statement that copyright by itself does not deny a program this "public domain" status. 
there are currently discussions about the agreement and it would seem logical that the definition of "public domain" is something that will be clarified at future meetings. 
finnish officials have stated that "nothing will change as far as the "public domain" software and the dec 3 wassenaar arrangement are concerned."
 in denmark, we are told, there has been an incident where the ministry of commerce informed an administrator to stop offering the program pgp for download. 
recent news indicate that the australian government has prohibited the export of free software for encryption by modifying the wassenaar list that related to the definition of software "in the public domain."
what's wrong with youtube. 
youtube is a peculiar case. 
as of september 2020, it is possible to watch youtube videos without running any nonfree software, even coming in via tor, via some of the "invidious" intermediary sites. 
we recommend using librejs with them. 
the invidious sites are not all alike: some won't let you in without nonfree javascript code. 
also, while most of the javascript code on those sites carries a free license, there is one file, handlers.js, which does not. 
librejs will prevent its execution, and watching videos still works. 
there is also a free add-on for firefox, called viewtube, that permits direct access to watch videos on youtube. 
it is preinstalled in the gnu browser, icecat, and you can load it into firefox. 
the free program youtube-dl is also available; it gets data out of the site's javascript code but doesn't run that code. 
but youtube.com is likely to block these means of access if you come via tor. 
as a result of these access methods, posting videos on youtube does not currently put them off limits to the free world. 
that is good, and we hope it lasts, but we cannot count on them to keep working. 
the add-on broke once in 2019 because of some change in youtube. 
that time, a corrected add-on was released after a few weeks. 
next time, who knows? 
thus, posting on youtube is a fragile solution unless/until google commits to supporting libre access. 
please don't use the host name youtube.com (or its aliases) to refer to a video on youtube. 
instead, refer to one of the invidious intermediary sites that accepts visits via tor (test it!). 
that is fail-safe: if anything breaks, your link will fail, rather than lead people to run nonfree software. 
what else was wrong with youtube. 
this is what we formerly said, until 2019, about youtube as a place to post videos or refer to videos. 
normal use of youtube involves use of nonfree software. 
in the html5 mode, it involves running a nonfree javascript program. 
for some videos, it also requires the nonfree adobe drm software that has been incorporated into proprietary browsers and firefox, but not into the gnu browsers including icecat. 
in the (deprecated) non-html5 mode, it involves use of flash player, which is nonfree. 
it even tells users to install flash player. 
without the nonfree software, you can't even see the youtube pages. 
nowadays, without running the nonfree javascript code, the browser window appears blank. 
youtube tries to stop people from downloading copies. 
the nonfree javascript code for some videos does not allow the browser to save a copy. 
this is a form of drm. 
there is a free program, ytdl, which can download the video for some youtube pages, but there is no complete free software solution for access in a browser. 
"contentid is exactly the thing youtube claims it doesn't do: privately mediating ownership of [publications] without involving the law."
 one thing about youtube that is not a moral strike against it is nonfree software on youtube servers—if there is any. 
we as possible users of youtube can't tell whether the servers run any nonfree software, because that has no effect on us—therefore it doesn't do any wrong to us. 
if there are any nonfree programs running on youtube servers, they mistreat google by denying google control of that aspect of its computing. 
we hope that google will reclaim its freedom by ceasing to use those nonfree programs, if any. 
but those programs do not mistreat the users of youtube, so they are not a reason to refuse to use that service. 
it is also possible that all the software running on youtube servers is free—either published free software or private unreleased free software. 
to post a video without requiring nonfree software to view it, you can place the video as an ogg theora or webm file on an ordinary web site. 
if you are concerned there will be a lot of download traffic, you can seed a torrent and suggest people download through that. 
another way to publish videos on the web using free software is gnu mediagoblin. 
ideally you will set up your own server, or run one for your family and friends, but you can also post on public servers. 
please contribute to gnu mediagoblin if you can. 
when free software depends on nonfree. 
when a program is free software (free as in freedom), that means it gives users the four freedoms, so that they control what the program does. 
in most cases, that is sufficient for the program's distribution to be ethical; but not always. 
there are additional problems that can arise in specific circumstances. 
this article describes a subtle problem, where upgrading the free program requires using a nonfree program. 
if the free program's use depends unavoidably on another program which is nonfree, we say that the free program is "trapped."
 its code is free software, and you may be able to copy pieces of its code into other free programs with good, ethical results. 
but you shouldn't run the trapped program, because that entails surrendering your freedom to the other nonfree program. 
someone who upholds the principles of free software would not knowingly make a program that is trapped. 
however, many free programs are developed by people or companies that don't particularly support these principles, or don't understand the problem. 
dependence on a nonfree program can take various forms. 
the most basic form is when the programming language used has no free implementation. 
the first programs i wrote for the gnu system in the 1980s, including gnu emacs, gdb and gnu make, had to be compiled with at&t's nonfree c compiler, because there was no free c compiler until i wrote gcc. 
fortunately, this kind of problem is mostly a thing of the past; we now have free compilers and platforms for just about all the languages anyone uses for writing free software. 
we can release the program from this kind of trap by translating it to another language, or by releasing a free implementation of the language it's written in. 
thus, when a full free java implementation became available, that released all the free java programs from the java trap. 
this kind of dependence is conceptually simple because it stems from the situation at one given instant in time. 
at time t, free program p won't run without nonfree programming platform q. to borrow a term from linguistics, this relationship is "synchronic."
 more recently, we have seen another kind of dependence in database programs, where you can build and run any given version of the program in the free world, but upgrading from version n to version n+1 requires a nonfree program. 
this happens because the internal format of the database changes from version n to version n+1. 
if you have been seriously using version n, you probably have a large existing database in the version n format. 
to upgrade to version n+1 of the database software, you need to reformat that database. 
if the way you are supposed to do this is by running a proprietary database reformat program, or using the developer's service which is saass (service as a software substitute), the database software is trapped—but in a more subtle way. 
any single version of the database program can be used without nonfree software or saass. 
the problem arises when you try to keep using the program for the long term, which entails upgrading it from time to time; you can't use it this way without some nonfree software or equivalent. 
this database program is trapped across time—we could call it "diachronically trapped," borrowing another term from linguistics. 
for example, the program openerp (since renamed "odoo"), though free, is diachronically trapped. 
gnu health, our free package for running a medical clinic, initially used openerp. 
in 2011, gnu health developer luis falcón discovered that upgrading to the next version of openerp required sending the database (full of patients' medical data) to openerp's server for reformatting. 
this is saass: it requires the user of gnu health (a clinic) to entrust its own computing and its data to the company developer of openerp. 
rather than bow down, falcón rewrote gnu health to use tryton instead. 
using saass is inherently equivalent to running a proprietary program with snooping functionality and a universal back door. 
the service could keep a copy of the databases that users reformat. 
even if we can trust the company that runs the service never to intentionally show any form of the data to anyone, we can't be sure that it won't be accessed by the intelligence agencies of various countries or security-breaking crackers (please don't call them "hackers"). 
when a program is diachronically trapped, releasing it from the trap requires more than a one-time job of programming. 
rather, the job has to be done continually, each time there is a change in the data format. 
launching a project with a long-term commitment to continue doing this is not easy. 
it may be easier to pressure the company to stop trying to trap users—by rejecting the trapped program until it does so. 
given how difficult it is to free the program, you had better stay away from it. 
it is possible to try out a diachronically trapped free program without nonfree software, but if you're going to do more than dabble, you must steer clear of really using it. 
both businesses and individuals will find fine free alternatives that don't have such a problem; all it takes to avoid the trap is to recognize it. 
 when free software isn't (practically) superior. 
by benjamin mako hill the open source initiative's mission statement reads, "open source is a development method for software that harnesses the power of distributed peer review and transparency of process. 
the promise of open source is better quality, higher reliability, more flexibility, lower cost, and an end to predatory vendor lock-in."
 for more than a decade now, the free software foundation has argued against this "open source" characterization of the free software movement. 
free software advocates have primarily argued against this framing because "open source" is an explicit effort to deemphasize our core message of freedom and obscure our movement's role in the success of the software we have built. 
we have argued that "open source" is bad, fundamentally, because it attempts to keep people from talking about software freedom. 
but there is another reason we should be wary of the open source framing. 
the fundamental open source argument, as quoted in the mission statement above, is often incorrect. 
although the open source initiative suggests "the promise of open source is better quality, higher reliability, more flexibility," this promise is not always realized. 
although we do not often advertise the fact, any user of an early-stage free software project can explain that free software is not always as convenient, in purely practical terms, as its proprietary competitors. 
free software is sometimes low quality. 
it is sometimes unreliable. 
it is sometimes inflexible. 
if people take the arguments in favor of open source seriously, they must explain why open source has not lived up to its "promise" and conclude that proprietary tools would be a better choice. 
there is no reason we should have to do either. 
richard stallman speaks to this in his article on why open source misses the point when he explains, "the idea of open source is that allowing users to change and redistribute the software will make it more powerful and reliable. 
but this is not guaranteed. 
developers of proprietary software are not necessarily incompetent. 
sometimes they produce a program that is powerful and reliable, even though it does not respect the users' freedom."
 for open source, poor-quality software is a problem to be explained away or a reason to eschew the software altogether. 
for free software, it is a problem to be worked through. 
for free software advocates, glitches and missing features are never a source of shame. 
any piece of free software that respects users' freedom has a strong inherent advantage over a proprietary competitor that does not. 
even if it has other issues, free software always has freedom. 
of course, every piece of free software must start somewhere. 
a brand-new piece of software, for example, is unlikely to be more featureful than an established proprietary tool. 
projects begin with many bugs and improve over time. 
while open source advocates might argue that a project will grow into usefulness over time and with luck, free software projects represent important contributions on day one to a free software advocate. 
every piece of software that gives users control over their technology is a step forward. 
improved quality as a project matures is the icing on the cake. 
a second, perhaps even more damning, fact is that the collaborative, distributed, peer-review development process at the heart of the definition of open source bears little resemblance to the practice of software development in the vast majority of projects under free (or "open source") licenses. 
several academic studies of free software hosting sites sourceforge and savannah have shown what many free software developers who have put a codebase online already know first-hand. 
the vast majority of free software projects are not particularly collaborative. 
the median number of contributors to a free software project on sourceforge? 
one. 
a lone developer. 
sourceforge projects at the ninety-fifth percentile by participant size have only five contributors. 
more than half of these free software projects—and even most projects that have made several successful releases and been downloaded frequently, are the work of a single developer with little outside help. 
by emphasizing the power of collaborative development and "distributed peer review," open source approaches seem to have very little to say about why one should use, or contribute to, the vast majority of free software projects. 
because the purported benefits of collaboration cannot be realized when there is no collaboration, the vast majority of free development projects are at no technical advantage with respect to a proprietary competitor. 
for free software advocates, these same projects are each seen as important successes. 
because every piece of free software respects its users' freedom, advocates of software freedom argue that each piece of free software begins with an inherent ethical advantage over proprietary competitors—even a more featureful one. 
by emphasizing freedom over practical advantages, free software's advocacy is rooted in a technical reality in a way that open source is often not. 
when free software is better, we can celebrate this fact. 
when it is not, we need not treat it as a damning critique of free software advocacy or even as a compelling argument against the use of the software in question. 
open source advocates must defend their thesis that freely developed software should, or will with time, be better than proprietary software. 
free software supporters can instead ask, "how can we make free software better?"
 in a free software framing, high quality software exists as a means to an end rather than an end itself. 
free software developers should strive to create functional, flexible software that serves its users well. 
but doing so is not the only way to make steps toward solving what is both an easier and a much more profoundly important goal: respecting and protecting their freedom. 
of course, we do not need to reject arguments that collaboration can play an important role in creating high-quality software. 
in many of the most successful free software projects, it clearly has done exactly that. 
the benefits of collaboration become something to understand, support, and work towards, rather than something to take for granted in the face of evidence that refuses to conform to ideology. 
 when free software isn't (practically) superior. 
by benjamin mako hill the open source initiative's mission statement reads, "open source is a development method for software that harnesses the power of distributed peer review and transparency of process. 
the promise of open source is better quality, higher reliability, more flexibility, lower cost, and an end to predatory vendor lock-in."
 for more than a decade now, the free software foundation has argued against this "open source" characterization of the free software movement. 
free software advocates have primarily argued against this framing because "open source" is an explicit effort to deemphasize our core message of freedom and obscure our movement's role in the success of the software we have built. 
we have argued that "open source" is bad, fundamentally, because it attempts to keep people from talking about software freedom. 
but there is another reason we should be wary of the open source framing. 
the fundamental open source argument, as quoted in the mission statement above, is often incorrect. 
although the open source initiative suggests "the promise of open source is better quality, higher reliability, more flexibility," this promise is not always realized. 
although we do not often advertise the fact, any user of an early-stage free software project can explain that free software is not always as convenient, in purely practical terms, as its proprietary competitors. 
free software is sometimes low quality. 
it is sometimes unreliable. 
it is sometimes inflexible. 
if people take the arguments in favor of open source seriously, they must explain why open source has not lived up to its "promise" and conclude that proprietary tools would be a better choice. 
there is no reason we should have to do either. 
richard stallman speaks to this in his article on why open source misses the point when he explains, "the idea of open source is that allowing users to change and redistribute the software will make it more powerful and reliable. 
but this is not guaranteed. 
developers of proprietary software are not necessarily incompetent. 
sometimes they produce a program that is powerful and reliable, even though it does not respect the users' freedom."
 for open source, poor-quality software is a problem to be explained away or a reason to eschew the software altogether. 
for free software, it is a problem to be worked through. 
for free software advocates, glitches and missing features are never a source of shame. 
any piece of free software that respects users' freedom has a strong inherent advantage over a proprietary competitor that does not. 
even if it has other issues, free software always has freedom. 
of course, every piece of free software must start somewhere. 
a brand-new piece of software, for example, is unlikely to be more featureful than an established proprietary tool. 
projects begin with many bugs and improve over time. 
while open source advocates might argue that a project will grow into usefulness over time and with luck, free software projects represent important contributions on day one to a free software advocate. 
every piece of software that gives users control over their technology is a step forward. 
improved quality as a project matures is the icing on the cake. 
a second, perhaps even more damning, fact is that the collaborative, distributed, peer-review development process at the heart of the definition of open source bears little resemblance to the practice of software development in the vast majority of projects under free (or "open source") licenses. 
several academic studies of free software hosting sites sourceforge and savannah have shown what many free software developers who have put a codebase online already know first-hand. 
the vast majority of free software projects are not particularly collaborative. 
the median number of contributors to a free software project on sourceforge? 
one. 
a lone developer. 
sourceforge projects at the ninety-fifth percentile by participant size have only five contributors. 
more than half of these free software projects—and even most projects that have made several successful releases and been downloaded frequently, are the work of a single developer with little outside help. 
by emphasizing the power of collaborative development and "distributed peer review," open source approaches seem to have very little to say about why one should use, or contribute to, the vast majority of free software projects. 
because the purported benefits of collaboration cannot be realized when there is no collaboration, the vast majority of free development projects are at no technical advantage with respect to a proprietary competitor. 
for free software advocates, these same projects are each seen as important successes. 
because every piece of free software respects its users' freedom, advocates of software freedom argue that each piece of free software begins with an inherent ethical advantage over proprietary competitors—even a more featureful one. 
by emphasizing freedom over practical advantages, free software's advocacy is rooted in a technical reality in a way that open source is often not. 
when free software is better, we can celebrate this fact. 
when it is not, we need not treat it as a damning critique of free software advocacy or even as a compelling argument against the use of the software in question. 
open source advocates must defend their thesis that freely developed software should, or will with time, be better than proprietary software. 
free software supporters can instead ask, "how can we make free software better?"
 in a free software framing, high quality software exists as a means to an end rather than an end itself. 
free software developers should strive to create functional, flexible software that serves its users well. 
but doing so is not the only way to make steps toward solving what is both an easier and a much more profoundly important goal: respecting and protecting their freedom. 
of course, we do not need to reject arguments that collaboration can play an important role in creating high-quality software. 
in many of the most successful free software projects, it clearly has done exactly that. 
the benefits of collaboration become something to understand, support, and work towards, rather than something to take for granted in the face of evidence that refuses to conform to ideology. 
who does that server really serve?. 
on the internet, proprietary software isn't the only way to lose your computing freedom. 
service as a software substitute, or saass, is another way to give someone else power over your computing. 
the basic point is, you can have control over a program someone else wrote (if it's free), but you can never have control over a service someone else runs, so never use a service where in principle running a program would do. 
saass means using a service implemented by someone else as a substitute for running your copy of a program. 
the term is ours; articles and ads won't use it, and they won't tell you whether a service is saass. 
instead they will probably use the vague and distracting term "cloud," which lumps saass together with various other practices, some abusive and some ok. 
with the explanation and examples in this page, you can tell whether a service is saass. 
background: how proprietary software takes away your freedom. 
digital technology can give you freedom; it can also take your freedom away. 
the first threat to our control over our computing came from proprietary software: software that the users cannot control because the owner (a company such as apple or microsoft) controls it. 
the owner often takes advantage of this unjust power by inserting malicious features such as spyware, back doors, and digital restrictions management (drm) (referred to as "digital rights management" in their propaganda). 
our solution to this problem is developing free software and rejecting proprietary software. 
free software means that you, as a user, have four essential freedoms: (0) to run the program as you wish, (1) to study and change the source code so it does what you wish, (2) to redistribute exact copies, and (3) to redistribute copies of your modified versions. 
(see the free software definition.) with free software, we, the users, take back control of our computing. 
proprietary software still exists, but we can exclude it from our lives and many of us have done so. 
however, we are now offered another tempting way to cede control over our computing: service as a software substitute (saass). 
for our freedom's sake, we have to reject that too. 
how service as a software substitute takes away your freedom. 
service as a software substitute (saass) means using a service as a substitute for running your copy of a program. 
concretely, it means that someone sets up a network server that does certain computing activities—for instance, modifying a photo, translating text into another language, etc.—then invites users to let that server do their own computing for them. 
as a user of the server, you would send your data to the server, which does that computing activity on the data thus provided, then sends the results back to you or else acts directly on your behalf. 
what does it mean to say that a given computing activity is your own? 
it means that no one else is inherently involved in it. 
to clarify the meaning of "inherently involved," we present a thought experiment. 
suppose that any software tasks you might need for the job are implemented in free software and you have copies, and you have whatever data you might need, as well as computers of whatever speed, functionality and capacity might be required. 
could you do this particular computing activity entirely within those computers, not communicating with anyone else's computers? 
if you could, then the activity is entirely your own. 
for your freedom's sake, you deserve to control it. 
if you do it by running free software, you do control it. 
however, doing it via someone else's service would give that someone else control over your computing activity. 
we call that scenario saass, and we say it is unjust. 
by contrast, if for fundamental reasons you couldn't possibly do that activity in your own computers, then the activity isn't entirely your own, so the issue of saass is not applicable to that activity. 
in general, these activities involve communication with others. 
saass servers wrest control from the users even more inexorably than proprietary software. 
with proprietary software, users typically get an executable file but not the source code. 
that makes it hard to study the code that is running, so it's hard to determine what the program really does, and hard to change it. 
with saass, the users do not have even the executable file that does their computing: it is on someone else's server, where the users can't see or touch it. 
thus it is impossible for them to ascertain what it really does, and impossible to change it. 
furthermore, saass automatically leads to consequences equivalent to the malicious features of certain proprietary software. 
for instance, some proprietary programs are "spyware": the program sends out data about users' computing activities. 
microsoft windows sends information about users' activities to microsoft. 
windows media player reports what each user watches or listens to. 
the amazon kindle reports which pages of which books the user looks at, and when. 
angry birds reports the user's geolocation history. 
unlike proprietary software, saass does not require covert code to obtain the user's data. 
instead, users must send their data to the server in order to use it. 
this has the same effect as spyware: the server operator gets the data—with no special effort, by the nature of saass. 
amy webb, who intended never to post any photos of her daughter, made the mistake of using saass (instagram) to edit photos of her. 
eventually they leaked from there. 
theoretically, homomorphic encryption might some day advance to the point where future saass services might be constructed to be unable to understand some of the data that users send them. 
such services could be set up not to snoop on users; this does not mean they will do no snooping. 
also, snooping is only one among the secondary injustices of saass. 
some proprietary operating systems have a universal back door, permitting someone to remotely install software changes. 
for instance, windows has a universal back door with which microsoft can forcibly change any software on the machine. 
nearly all portable phones have them, too. 
some proprietary applications also have universal back doors; for instance, the steam client for gnu/linux allows the developer to remotely install modified versions. 
with saass, the server operator can change the software in use on the server. 
he ought to be able to do this, since it's his computer; but the result is the same as using a proprietary application program with a universal back door: someone has the power to silently impose changes in how the user's computing gets done. 
thus, saass is equivalent to running proprietary software with spyware and a universal back door. 
it gives the server operator unjust power over the user, and that power is something we must resist. 
saass and saas. 
originally we referred to this problematical practice as "saas," which stands for "software as a service."
 it's a commonly used term for setting up software on a server rather than offering copies of it to users, and we thought it described precisely the cases where this problem occurs. 
subsequently we became aware that the term saas is sometimes used for communication services—activities for which this issue is not applicable. 
in addition, the term "software as a service" doesn't explain why the practice is bad. 
so we coined the term "service as a software substitute," which defines the bad practice more clearly and says what is bad about it. 
untangling the saass issue from the proprietary software issue. 
saass and proprietary software lead to similar harmful results, but the mechanisms are different. 
with proprietary software, the mechanism is that you have and use a copy which is difficult and/or illegal to change. 
with saass, the mechanism is that you don't have the copy that's doing your computing. 
these two issues are often confused, and not only by accident. 
web developers use the vague term "web application" to lump the server software together with programs run on your machine in your browser. 
some web pages install nontrivial, even large javascript programs into your browser without informing you. 
when these javascript programs are nonfree, they cause the same sort of injustice as any other nonfree software. 
here, however, we are concerned with the issue of using the service itself. 
many free software supporters assume that the problem of saass will be solved by developing free software for servers. 
for the server operator's sake, the programs on the server had better be free; if they are proprietary, their developers/owners have power over the server. 
that's unfair to the server operator, and doesn't help the server's users at all. 
but if the programs on the server are free, that doesn't protect the server's users from the effects of saass. 
these programs liberate the server operator, but not the server's users. 
releasing the server software source code does benefit the community: it enables suitably skilled users to set up similar servers, perhaps changing the software. 
we recommend using the gnu affero gpl as the license for programs often used on servers. 
but none of these servers would give you control over computing you do on it, unless it's your server (one whose software load you control, regardless of whether the machine is your property). 
it may be ok to trust your friend's server for some jobs, just as you might let your friend maintain the software on your own computer. 
outside of that, all these servers would be saass for you. 
saass always subjects you to the power of the server operator, and the only remedy is, don't use saass! 
don't use someone else's server to do your own computing on data provided by you. 
this issue demonstrates the depth of the difference between "open" and "free."
 source code that is open source is, nearly always, free. 
however, the idea of an "open software" service, meaning one whose server software is open source and/or free, fails to address the issue of saass. 
services are fundamentally different from programs, and the ethical issues that services raise are fundamentally different from the issues that programs raise. 
to avoid confusion, we avoid describing a service as "free" or "proprietary."
 distinguishing saass from other network services. 
which online services are saass? 
the clearest example is a translation service, which translates (say) english text into spanish text. 
translating a text for you is computing that is purely yours. 
you could do it by running a program on your own computer, if only you had the right program. 
(to be ethical, that program should be free.) the translation service substitutes for that program, so it is service as a software substitute, or saass. 
since it denies you control over your computing, it does you wrong. 
another clear example is using a service such as flickr or instagram to modify a photo. 
modifying photos is an activity that people have done in their own computers for decades; doing it in a server you don't control, rather than your own computer, is saass. 
rejecting saass does not mean refusing to use any network servers run by anyone other than you. 
most servers are not saass because the jobs they do are some sort of communication with visitors, rather than each visitor's own computing. 
the original idea of web servers wasn't to do computing for you, a visitor; it was to publish information for you to access. 
even today this is what most web sites do, and it doesn't pose the saass problem, because accessing someone's published information on a web site isn't doing your own computing. 
neither is use of a blog site to publish your own works, or using a microblogging service such as twitter or statusnet. 
(these services may or may not have other problems, depending on details.) the same goes for other communication not meant to be private, such as chat groups. 
in its essence, social networking is a form of communication and publication, not saass. 
however, a service whose main facility is social networking can have features or extensions which are saass. 
if a service is not saass, that does not mean it is ok. 
there are other ethical issues about services. 
for instance, facebook requires running nonfree javascript code, and it gives users a misleading impression of privacy while luring them into baring their lives to facebook. 
those are important issues, different from the saass issue. 
services such as search engines collect data from around the web and let you examine it. 
looking through their collection of data isn't your own computing in the usual sense—you didn't provide that collection—so using such a service to search the web is not saass. 
however, using someone else's server to implement a search facility for your own site is saass. 
purchasing online is not saass, because the computing isn't your own activity; rather, it is done jointly by and for you and the store. 
the real issue in online shopping is whether you trust the other party with your money and other personal information (starting with your name). 
repository sites such as savannah and sourceforge are not inherently saass, because a repository's job is publication of data supplied to it. 
using a joint project's servers isn't saass because the computing you do in this way isn't your own. 
for instance, if you edit pages on wikipedia, you are not doing your own computing; rather, you are collaborating in wikipedia's computing. 
wikipedia controls its own servers, but organizations as well as individuals encounter the problem of saass if they do their computing in someone else's server. 
some sites offer multiple services, and if one is not saass, another may be saass. 
for instance, the main service of facebook is social networking, and that is not saass; however, it supports third-party applications, some of which are saass. 
flickr's main service is distributing photos, which is not saass, but it also has features for editing photos, which is saass. 
likewise, using instagram to post a photo is not saass, but using it to transform the photo is saass. 
google docs shows how complex the evaluation of a single service can become. 
it invites people to edit a document by running a large nonfree javascript program, clearly wrong. 
however, it offers an api for uploading and downloading documents in standard formats. 
a free software editor can do so through this api. 
this usage scenario is not saass, because it uses google docs as a mere repository. 
showing all your data to a company is bad, but that is a matter of privacy, not saass; depending on a service for access to your data is bad, but that is a matter of risk, not saass. 
on the other hand, using the service for converting document formats is saass, because it's something you could have done by running a suitable program (free, one hopes) in your own computer. 
using google docs through a free editor is rare, of course. 
most often, people use it through the nonfree javascript program, which is bad like any nonfree program. 
this scenario might involve saass, too; that depends on what part of the editing is done in the javascript program and what part in the server. 
we don't know, but since saass and proprietary software do similar wrong to the user, it is not crucial to know. 
publishing via someone else's repository does not raise privacy issues, but publishing through google docs has a special problem: it is impossible even to view the text of a google docs document in a browser without running the nonfree javascript code. 
thus, you should not use google docs to publish anything—but the reason is not a matter of saass. 
the it industry discourages users from making these distinctions. 
that's what the buzzword "cloud computing" is for. 
this term is so nebulous that it could refer to almost any use of the internet. 
it includes saass as well as many other network usage practices. 
in any given context, an author who writes "cloud" (if a technical person) probably has a specific meaning in mind, but usually does not explain that in other articles the term has other specific meanings. 
the term leads people to generalize about practices they ought to consider individually. 
if "cloud computing" has a meaning, it is not a way of doing computing, but rather a way of thinking about computing: a devil-may-care approach which says, "don't ask questions. 
don't worry about who controls your computing or who holds your data. 
don't check for a hook hidden inside our service before you swallow it. 
trust companies without hesitation."
 in other words, "be a sucker."
 a cloud in the mind is an obstacle to clear thinking. 
for the sake of clear thinking about computing, let's avoid the term "cloud."
 renting a server distinguished from saass. 
if you rent a server (real or virtual), whose software load you have control over, that's not saass. 
in saass, someone else decides what software runs on the server and therefore controls the computing it does for you. 
in the case where you install the software on the server, you control what computing it does for you. 
thus, the rented server is virtually your computer. 
for this issue, it counts as yours. 
the data on the rented remote server is less secure than if you had the server at home, but that is a separate issue from saass. 
this kind of server rental is sometimes called "iaas," but that term fits into a conceptual structure that downplays the issues that we consider important. 
dealing with the saass problem. 
only a small fraction of all web sites do saass; most don't raise the issue. 
but what should we do about the ones that raise it? 
for the simple case, where you are doing your own computing on data in your own hands, the solution is simple: use your own copy of a free software application. 
do your text editing with your copy of a free text editor such as gnu emacs or a free word processor. 
do your photo editing with your copy of free software such as gimp. 
what if there is no free program available? 
a proprietary program or saass would take away your freedom, so you shouldn't use those. 
you can contribute your time or your money to development of a free replacement. 
what about collaborating with other individuals as a group? 
it may be hard to do this at present without using a server, and your group may not know how to run its own server. 
if you use someone else's server, at least don't trust a server run by a company. 
a mere contract as a customer is no protection unless you could detect a breach and could really sue, and the company probably writes its contracts to permit a broad range of abuses. 
the state can subpoena your data from the company along with everyone else's, as obama has done to phone companies, supposing the company doesn't volunteer them like the us phone companies that illegally wiretapped their customers for bush. 
if you must use a server, use a server whose operators give you a basis for trust beyond a mere commercial relationship. 
however, on a longer time scale, we can create alternatives to using servers. 
for instance, we can create a peer-to-peer program through which collaborators can share data encrypted. 
the free software community should develop distributed peer-to-peer replacements for important "web applications."
 it may be wise to release them under the gnu affero gpl, since they are likely candidates for being converted into server-based programs by someone else. 
the gnu project is looking for volunteers to work on such replacements. 
we also invite other free software projects to consider this issue in their design. 
in the meantime, if a company invites you to use its server to do your own computing tasks, don't yield; don't use saass. 
don't buy or install "thin clients," which are simply computers so weak they make you do the real work on a server, unless you're going to use them with your server. 
use a real computer and keep your data there. 
do your own computing with your own copy of a free program, for your freedom's sake. 
see also: the bug nobody is allowed to understand. 
the first version of this article was published in the boston review. 
why audio format matters. 
an invitation to audio producers to use ogg vorbis alongside mp3. 
the patents covering mp3 will reportedly all have expired by 2018, but similar problems will continue to arise as long as patents are permitted to restrict software development. 
if you produce audio for general distribution, you probably spend 99.9% of your time thinking about form, content, and production quality, and 0.1% thinking about what audio format to distribute your recordings in. 
and in an ideal world, this would be fine. 
audio formats would be like the conventions of laying out a book, or like pitches and other building-blocks of music: containers of meaning, available for anyone to use, free of restrictions. 
you wouldn't have to worry about the consequences of distributing your material in mp3 format, any more than you would worry about putting a page number at the top of a page, or starting a book with a table of contents. 
unfortunately, that is not the world we live in. 
mp3 is a patented format. 
what this means is that various companies have government-granted monopolies over certain aspects of the mp3 standard, such that whenever someone creates or listens to an mp3 file, even with software not written by one of those companies, the companies have the right to decide whether or not to permit that use of mp3. 
typically what they do is demand money, of course. 
but the terms are entirely up to them: they can forbid you from using mp3 at all, if they want. 
if you've been using mp3 files and didn't know about this situation, then either a) someone else, usually a software maker, has been paying the royalties for you, or b) you've been unknowingly infringing on patents, and in theory could be sued for it. 
the harm here goes deeper than just the danger to you. 
a software patent grants one party the exclusive right to use a certain mathematical fact. 
this right can then be bought and sold, even litigated over like a piece of property, and you can never predict what a new owner might do with it. 
this is not just an abstract possibility: mp3 patents have been the subject of multiple lawsuits, with damages totalling more than a billion dollars. 
the most important issue here is not about the fees, it's about the freedom to communicate and to develop communications tools. 
distribution formats such as mp3 are the containers of information exchange on the internet. 
imagine for a moment that someone had a patent on the modulated vibration of air molecules: you would need a license just to hold a conversation or play guitar for an audience. 
fortunately, our government has long held that old, familiar methods of communication, like vibrating air molecules or writing symbols on pieces of paper, are not patentable: no one can own them, they are free for everyone to use. 
but until those same liberties are extended to newer, less familiar methods (like particular standards for representing sounds via digital encoding), we who generate audio works must take care what format we use—and require our listeners to use. 
a way out: ogg vorbis format. 
ogg vorbis is an alternative to mp3. 
it gets high sound quality, can compress down to a smaller size than mp3 while still sounding good (thus saving you time and bandwidth costs), and best of all, is designed to be completely free of patents. 
you won't sacrifice any technical quality by encoding your audio in ogg vorbis. 
the files sound fine, and most players know how to play them. 
but you will increase the total number of people who can listen to your tracks, and at the same time help the push for patent-free standards in distribution formats. 
more information about xiph.org (the organization that created ogg vorbis) and the importance of free distribution formats. 
the free software foundation has produced a user-friendly guide to installing ogg vorbis support in microsoft windows and apple mac os x. the ogg vorbis home page has all the information you need to both listen to and produce vorbis-encoded files. 
the safest thing, for you and your listeners, would be to offer ogg vorbis files exclusively. 
but since there are still some players that can only handle mp3, and you don't want to lose audience, a first step is to offer both ogg vorbis and mp3, while explaining to your downloaders (perhaps by linking to this article) exactly why you support ogg vorbis. 
and with ogg vorbis, you'll even gain some audience. 
here's how: up till now, the mp3 patent owners have been clever enough not to harass individual users with demands for payment. 
they know that would stimulate popular awareness of (and eventually opposition to) the patents. 
instead, they go after the makers of products that implement the mp3 format. 
the victims of these shakedowns shrug wearily and pay up, viewing it as just another cost of doing business, which is then passed on invisibly to users. 
however, not everyone is in a position to pay: some of your listeners use free software programs to play audio files. 
because this software is freely copied and downloaded, there is no practical way for either the authors or the users to pay a patent fee—that is, to pay for the right to use the mathematical facts that underly the mp3 format. 
as a result, these programs cannot legally implement mp3, even though the tracks the users want to listen to may themselves be perfectly free! 
because of this situation, some distributors of the gnu/linux computer operating system—which has millions of users worldwide—have been unable to include mp3 players in their software distributions. 
luckily, you don't have to require such users to engage in civil disobedience every time they want to listen to your works. 
by offering ogg vorbis, you ensure that no listeners have to get involved with a patented distribution format unless they choose to, and that your audio works will never be hampered by unforseen licensing requirements. 
eventually, the growing acceptance of ogg vorbis as a standard, coupled with increasingly unpredictable behavior by some of the mp3 patent holders, may make it impractical to offer mp3 files at all. 
but even before that day comes, ogg vorbis remains the only portable, royalty-free audio format on the internet, and it's worth a little extra effort to support. 
why call it the swindle?. 
stallman i go out of my way to call nasty things by names that criticize them. 
i call apple's user-subjugating computers the "ithings," and amazon's abusive e-reader the "swindle."
 sometimes i refer to microsoft's operating system as "losedows"; i referred to microsoft's first operating system as "ms-dog."
[1] of course, i do this to vent my feelings and have fun. 
but this fun is more than personal; it serves an important purpose. 
mocking our enemies recruits the power of humor into our cause. 
twisting a name is disrespectful. 
if we respected the makers of these products, we would use the names that they chose … and that's exactly the point. 
these noxious products deserve our contempt, not our respect. 
every proprietary program subjects its users to some entity's power, but nowadays most widely used ones go beyond that to spy on users, restrict them and even push them around: the trend is for products to get nastier. 
these products deserve to be wiped out. 
those with drm ought to be illegal. 
when we mention them, we should show that we condemn them, and what easier way than by twisting their names? 
if we don't do that, it is all too easy to mention them and fail to present the condemnation. 
when the product comes up in the middle of some other topic, for instance, explaining at greater length that the product is bad might seem like a long digression. 
to mention these products by name and fail to condemn them has the effect of legitimizing them, which is the opposite of what they call for. 
companies choose names for products as part of a marketing plan. 
they choose names they think people will be likely to repeat, then invest millions of dollars in marketing campaigns to make people repeat and think about those names. 
usually these marketing campaigns are intended to convince people to admire the products based on their superficial attractions and overlook the harm they do. 
every time we call these products by the names the companies use, we contribute to their marketing campaigns. 
repeating those names is active support for the products; twisting them denies the products our support. 
other terminology besides product names can raise a similar issue. 
for instance, drm refers to building technology products to restrict their users for the benefit of someone else. 
this inexcusable practice deserves our burning hatred until we wipe it out. 
naturally, those responsible gave it a name that frames the issue from their point of view: "digital rights management."
 this name is the basis of a public relations campaign that aims to win support from entities ranging from governments to the w3c.[2] to use their term is to take their side. 
if that's not the side you're on, why give it your implicit support? 
we take the users' side, and from the users' point of view, what these malfeatures manage are not rights but restrictions. 
so we call them "digital restrictions management."
 neither of those terms is neutral: choose a term, and you choose a side. 
please choose the users' side and please let it show. 
once, a man in the audience at my speech claimed that the name "digital rights management" was the official name of "drm," the only possible correct name, because it was the first name. 
he argued that as a consequence it was wrong for us to say "digital restrictions management."
 those who make a product or carry out a business practice typically choose a name for it before we even know it exists. 
if their temporal precedence obligated us to use their name, they would have an additional automatic advantage, on top of their money, their media influence and their technological position. 
we would have to fight them with our mouths tied behind our backs. 
some people feel a distaste for twisting names and say it sounds "juvenile" or "unprofessional."
 what they mean is, it doesn't sound humorless and stodgy—and that's a good thing, because we would not have laughter on our side if we tried to sound "professional."
 fighting oppression is far more serious than professional work, so we've got to add comic relief. 
it calls for real maturity, which includes some childishness, not "acting like an adult."
 if you don't like our choice of name parodies, you can invent your own. 
the more, the merrier. 
of course, there are other ways to express condemnation. 
if you want to sound "professional," you can show it in other ways. 
they can get the point across, but they require more time and effort, especially if you don't make use of mockery. 
take care this does not lead you to skimp; don't let the pressure against such "digression" push you into insufficiently criticizing the nasty things you mention, because that would have the effect of legitimizing them. 
footnotes. 
take action against these products: u.fsf.org/ithings, u.fsf.org/swindle, u.fsf.org/ebookslist, upgradefromwindows.org u.fsf.org/drm 
why copyleft?. 
when it comes to defending everyone's freedom, to lie down and do nothing is an act of weakness, not humility. 
in the gnu project we usually recommend people use copyleft licenses like gnu gpl, rather than permissive non-copyleft free software licenses. 
we don't argue harshly against the non-copyleft licenses—in fact, we occasionally recommend them in special circumstances—but the advocates of those licenses show a pattern of arguing harshly against the gpl. 
in one such argument, a person stated that his use of one of the bsd licenses was an "act of humility": "i ask nothing of those who use my code, except to credit me."
 it is rather a stretch to describe a legal demand for credit as "humility," but there is a deeper point to be considered here. 
humility is disregarding your own self-interest, but the interest you abandon when you don't copyleft your code is much bigger than your own. 
someone who uses your code in a nonfree program is denying freedom to others, so if you allow that, you're failing to defend those people's freedom. 
when it comes to defending everyone's freedom, to lie down and do nothing is an act of weakness, not humility. 
releasing your code under one of the bsd licenses, or some other lax, permissive license, is not doing wrong; the program is still free software, and still a contribution to our community. 
but it is weak, and in most cases it is not the best way to promote users' freedom to share and change software. 
here are specific examples of nonfree versions of free programs that have done major harm to the free world. 
those who released llvm under a non-copyleft license enabled nvidia to release a high-quality nonfree compiler for its gpus, while keeping its instruction set secret. 
thus, we can't write a free compiler for that platform without a big reverse engineering job. 
the nonfree adaptation of llvm is the only compiler for those machines, and is likely to remain so. 
intel uses a proprietary version of the minix system, which is free but not copylefted, in the management engine back door in its modern processors. 
why software should not have owners. 
stallman digital information technology contributes to the world by making it easier to copy and modify information. 
computers promise to make this easier for all of us. 
not everyone wants it to be easier. 
the system of copyright gives software programs "owners," most of whom aim to withhold software's potential benefit from the rest of the public. 
they would like to be the only ones who can copy and modify the software that we use. 
the copyright system grew up with printing—a technology for mass-production copying. 
copyright fit in well with this technology because it restricted only the mass producers of copies. 
it did not take freedom away from readers of books. 
an ordinary reader, who did not own a printing press, could copy books only with pen and ink, and few readers were sued for that. 
digital technology is more flexible than the printing press: when information has digital form, you can easily copy it to share it with others. 
this very flexibility makes a bad fit with a system like copyright. 
that's the reason for the increasingly nasty and draconian measures now used to enforce software copyright. 
consider these four practices of the software publishers association (spa): massive propaganda saying it is wrong to disobey the owners to help your friend. 
solicitation for stool pigeons to inform on their coworkers and colleagues. 
raids (with police help) on offices and schools, in which people are told they must prove they are innocent of illegal copying. 
prosecution (by the us government, at the spa's request) of people such as mit's david lamacchia, not for copying software (he is not accused of copying any), but merely for leaving copying facilities unguarded and failing to censor their use.[1] all four practices resemble those used in the former soviet union, where every copying machine had a guard to prevent forbidden copying, and where individuals had to copy information secretly and pass it from hand to hand as samizdat. 
there is of course a difference: the motive for information control in the soviet union was political; in the us the motive is profit. 
but it is the actions that affect us, not the motive. 
any attempt to block the sharing of information, no matter why, leads to the same methods and the same harshness. 
owners make several kinds of arguments for giving them the power to control how we use information: name calling. 
owners use smear words such as "piracy" and "theft," as well as expert terminology such as "intellectual property" and "damage," to suggest a certain line of thinking to the public—a simplistic analogy between programs and physical objects. 
our ideas and intuitions about property for material objects are about whether it is right to take an object away from someone else. 
they don't directly apply to making a copy of something. 
but the owners ask us to apply them anyway. 
exaggeration. 
owners say that they suffer "harm" or "economic loss" when users copy programs themselves. 
but the copying has no direct effect on the owner, and it harms no one. 
the owner can lose only if the person who made the copy would otherwise have paid for one from the owner. 
a little thought shows that most such people would not have bought copies. 
yet the owners compute their "losses" as if each and every one would have bought a copy. 
that is exaggeration—to put it kindly. 
the law. 
owners often describe the current state of the law, and the harsh penalties they can threaten us with. 
implicit in this approach is the suggestion that today's law reflects an unquestionable view of morality—yet at the same time, we are urged to regard these penalties as facts of nature that can't be blamed on anyone. 
this line of persuasion isn't designed to stand up to critical thinking; it's intended to reinforce a habitual mental pathway. 
it's elementary that laws don't decide right and wrong. 
every american should know that, in the 1950s, it was against the law in many states for a black person to sit in the front of a bus; but only racists would say sitting there was wrong. 
natural rights. 
authors often claim a special connection with programs they have written, and go on to assert that, as a result, their desires and interests concerning the program simply outweigh those of anyone else—or even those of the whole rest of the world. 
(typically companies, not authors, hold the copyrights on software, but we are expected to ignore this discrepancy.) to those who propose this as an ethical axiom—the author is more important than you—i can only say that i, a notable software author myself, call it bunk. 
but people in general are only likely to feel any sympathy with the natural rights claims for two reasons. 
one reason is an overstretched analogy with material objects. 
when i cook spaghetti, i do object if someone else eats it, because then i cannot eat it. 
his action hurts me exactly as much as it benefits him; only one of us can eat the spaghetti, so the question is, which one? 
the smallest distinction between us is enough to tip the ethical balance. 
but whether you run or change a program i wrote affects you directly and me only indirectly. 
whether you give a copy to your friend affects you and your friend much more than it affects me. 
i shouldn't have the power to tell you not to do these things. 
no one should. 
the second reason is that people have been told that natural rights for authors is the accepted and unquestioned tradition of our society. 
as a matter of history, the opposite is true. 
the idea of natural rights of authors was proposed and decisively rejected when the us constitution was drawn up. 
that's why the constitution only permits a system of copyright and does not require one; that's why it says that copyright must be temporary. 
it also states that the purpose of copyright is to promote progress—not to reward authors. 
copyright does reward authors somewhat, and publishers more, but that is intended as a means of modifying their behavior. 
the real established tradition of our society is that copyright cuts into the natural rights of the public—and that this can only be justified for the public's sake. 
economics. 
the final argument made for having owners of software is that this leads to production of more software. 
unlike the others, this argument at least takes a legitimate approach to the subject. 
it is based on a valid goal—satisfying the users of software. 
and it is empirically clear that people will produce more of something if they are well paid for doing so. 
but the economic argument has a flaw: it is based on the assumption that the difference is only a matter of how much money we have to pay. 
it assumes that production of software is what we want, whether the software has owners or not. 
people readily accept this assumption because it accords with our experiences with material objects. 
consider a sandwich, for instance. 
you might well be able to get an equivalent sandwich either gratis or for a price. 
if so, the amount you pay is the only difference. 
whether or not you have to buy it, the sandwich has the same taste, the same nutritional value, and in either case you can only eat it once. 
whether you get the sandwich from an owner or not cannot directly affect anything but the amount of money you have afterwards. 
this is true for any kind of material object—whether or not it has an owner does not directly affect what it is, or what you can do with it if you acquire it. 
but if a program has an owner, this very much affects what it is, and what you can do with a copy if you buy one. 
the difference is not just a matter of money. 
the system of owners of software encourages software owners to produce something—but not what society really needs. 
and it causes intangible ethical pollution that affects us all. 
what does society need? 
it needs information that is truly available to its citizens—for example, programs that people can read, fix, adapt, and improve, not just operate. 
but what software owners typically deliver is a black box that we can't study or change. 
society also needs freedom. 
when a program has an owner, the users lose freedom to control part of their own lives. 
and, above all, society needs to encourage the spirit of voluntary cooperation in its citizens. 
when software owners tell us that helping our neighbors in a natural way is "piracy," they pollute our society's civic spirit. 
this is why we say that free software is a matter of freedom, not price. 
the economic argument for owners is erroneous, but the economic issue is real. 
some people write useful software for the pleasure of writing it or for admiration and love; but if we want more software than those people write, we need to raise funds. 
since the 1980s, free software developers have tried various methods of finding funds, with some success. 
there's no need to make anyone rich; a typical income is plenty of incentive to do many jobs that are less satisfying than programming. 
for years, until a fellowship made it unnecessary, i made a living from custom enhancements of the free software i had written. 
each enhancement was added to the standard released version and thus eventually became available to the general public. 
clients paid me so that i would work on the enhancements they wanted, rather than on the features i would otherwise have considered highest priority. 
some free software developers make money by selling support services. 
in 1994, cygnus support, with around 50 employees, estimated that about 15 percent of its staff activity was free software development—a respectable percentage for a software company. 
in the early 1990s, companies including intel, motorola, texas instruments and analog devices combined to fund the continued development of the gnu c compiler. 
most gcc development is still done by paid developers. 
the gnu compiler for the ada language was funded in the 90s by the us air force, and continued since then by a company formed specifically for the purpose. 
the free software movement is still small, but the example of listener-supported radio in the us shows it's possible to support a large activity without forcing each user to pay. 
as a computer user today, you may find yourself using a proprietary program. 
if your friend asks to make a copy, it would be wrong to refuse. 
cooperation is more important than copyright. 
but underground, closet cooperation does not make for a good society. 
a person should aspire to live an upright life openly with pride, and this means saying no to proprietary software. 
you deserve to be able to cooperate openly and freely with other people who use software. 
you deserve to be able to learn how the software works, and to teach your students with it. 
you deserve to be able to hire your favorite programmer to fix it when it breaks. 
you deserve free software. 
footnote. 
the charges were subsequently dismissed. 
this essay is published in free software, free society: the selected essays of richard m. stallman. 
public awareness of copyright, wipo, june 2002. 
stallman geofrey yu, assistant director general in charge of copyright at wipo, said this in a paper "public awareness of copyright", in june 2002. 
it is interesting that wipo is starting to find that the hypocrisy of describing a system of restricting the public as a matter of "rights" is starting to backfire on them. 
first the message. 
for it to go over well, i recommend downplaying the reference to "rights". 
the term itself is perfectly acceptable, but in daily usage, it has a negative connotation of rights without corresponding obligations and has a [sic] "us" against "them" implication. 
this won't do, therefore, as we want to win the public and consumer to our side. 
unfortunately, we cannot turn the clock back and find a new term in place of "copyright" but we can at least down-play the term "rights". 
the wipo performance and the phonograms treaty (wppt) is about the protection of performers and phonogram producers. 
the word "right" is happily missing in their titles. 
and we should take out cure from them. 
within the copyright community such as we are today in this room, it is fine to refer to artists, composers, performers and enterprises as "rights holders". 
but it is poor public relations to employ the same terms when speaking to politicians, consumers users and the public. 
with them, we must use the terms devoid of legal jargon, terms, which are at least as neutral or better still, inclusive,conveying meanings with which the public can identify. 
so "rights holders" should become painters, writers, sculptors, musicians. 
what goes down well today with general audiences are terms like "culture", "creativity", "information" , "entertainment", "cultural diversity", "cultural heritage", "reward for creativity", "cultural enrichment". 
and when we talk to youngsters, terms like "fun", "hip", and "cool" will find an echo. 
we must find the right slogans too. 
at wipo we coined a slogan for a geneva cultural festival that we sponsored which went "soutenons les artistes et respectons leurs creations."
 in the same way, in our public outreach messages, it is better to avoid terms like "copyright industries". 
to call music making and movie-making "copyright industries" is to cast a business which is about people, imagination, fun, and creative energy in a money-centred, legalistic light. 
it is like calling car-making a patent industry. 
if we must use the term "copyright" for brevity's sake, let us call the industries "copyright-based industries". 
to sum up, what i would suggest is we down-play business and economics when speaking to the public and stress more the human, creative, inspirational angle. 
what can we see here? 
first, look how openly wipo admits (among friends) that it takes the side of the copyright holders. 
there isn't even a fig leaf for the interests of anyone else, or even for the idea that copyright must be required to benefit the public (by promoting progress at a reasonable social cost). 
another is that the irony that the term "intellectual property rights" was adopted by the monopoly holders, precisely so that they could present their privileges as rights that could not be denied. 
the idea that they might have obligations as well as rights, or that their power might be limited, is supposed to be unthinkable. 
and who would ever believe that the music and movie factories were "money-centred and legalistic"? 
if the hypocrisy of "intellectual property rights" is starting to backfire on wipo, this does not mean we should use that term ourselves. 
if we did, we would be spreading wipo-style hypocrisy, whether we intended to or not. 
words to avoid (or use with care) because they are loaded or confusing. 
there are a number of words and phrases that we recommend avoiding, or avoiding in certain contexts and usages. 
some are ambiguous or misleading; others presuppose a viewpoint that we disagree with, and we hope you disagree with it too. 
"ad-blocker" | "access" | "alternative" | "artificial intelligence" | "assets" | "bsd-style" | "closed" | "cloud computing" | "commercial" | "compensation" | "consume" | "consumer" | "content" | "copyright owner" | "creative commons licensed" | "creator" | "digital goods" | "digital locks" | "digital rights management" | "ecosystem" | "floss" | "for free" | "foss" | "freely available" | "freemium" | "free-to-play" | "freeware" | "give away software" | "google" | "hacker" | "intellectual property" | "internet of things" | "lamp system" | "linux system" | "market" | "modern" | "monetize" | "mp3 player" | "open" | "opt out" | "pc" | "photoshop" | "piracy" | "players (said of businesses)" | "powerpoint" | "product" | "protection" | "rand" | "saas" | "sell software" | "sharing (personal data)" | "sharing economy" | "skype" | "software industry" | "source model" | "theft" | "trusted computing" | "vendor" also note categories of free software, why call it the swindle? 
"ad-blocker". 
when the purpose of some program is to block advertisements, "ad-blocker" is a good term for it. 
however, the gnu browser icecat blocks advertisements that track the user as consequence of broader measures to prevent surveillance by web sites. 
this is not an "ad-blocker," this is surveillance protection. 
"access". 
it is a common misunderstanding to think free software means that the public has "access" to a program. 
that is not what free software means. 
the criterion for free software is not about who has "access" to the program; the four essential freedoms concern what a user that has a copy of the program is allowed to do with it. 
for instance, freedom 2 says that that user is free to make another copy and give or sell it to you. 
but no user is obligated to do that for you; you do not have a right to demand a copy of that program from any user. 
in particular, if you write a program yourself and never offer a copy to anyone else, that program is free software albeit in a trivial way, because every user that has a copy has the four essential freedoms (since the only such user is you). 
in practice, when many users have copies of a program, someone is sure to post it on the internet, giving everyone access to it. 
we think people ought to do that, if the program is useful. 
but that isn't a requirement of free software. 
there is one specific point in which a question of having access is directly pertinent to free software: the gnu gpl permits giving a particular user access to download a program's source code as a substitute for physically giving that user a copy of the source. 
this applies to the special case in which the user already has a copy of the program in non-source form. 
instead of with free software, the public has access to the program, we say, with free software, the users have the essential freedoms and with free software, the users have control of what the program does for them. 
"alternative". 
we don't describe free software in general as an "alternative" to proprietary, because that word presumes all the "alternatives" are legitimate and each additional one makes users better off. 
in effect, it assumes that free software ought to coexist with software that does not respect users' freedom. 
we believe that distribution as free software is the only ethical way to make software available for others to use. 
the other methods, nonfree software and service as a software substitute subjugate their users. 
we do not think it is good to offer users those "alternatives" to free software. 
special circumstances can drive users toward running one particular program for a certain job. 
for instance, when a web page sends javascript client code to the user's browser, that drives users toward running that specific client program rather than any possible other. 
in such a case, there is a reason to describe any other code for that job as an alternative. 
"artificial intelligence". 
the moral panic over chatgpt has led to confusion because people often speak of it as "artificial intelligence."
 is chatgpt an instance of artificial intelligence? 
should we call it that? 
professor sussman of the mit artificial intelligence lab argues convincingly that we should not. 
normally, "intelligence" means having knowledge and understanding, at least about some kinds of things. 
a true artificial intelligence should have some knowledge and understanding. 
general artificial intelligence would be able to know and understand about all sorts of things; that does not exist, but we do have systems of limited artificial intelligence which can know and understand in certain limited fields. 
by contrast, chatgpt knows nothing and understands nothing. 
its output is nothing more than smooth babbling. 
anything it states or implies about reality is fabrication (unless "fabrication" implies more knowledge than that system really has). 
seeking correct answers to any real question in chatgpt output is utter folly, as many have discovered. 
we can refer to chatgpt and such like as generative neural network systems, because that's how they work. 
they train neural networks to recognize patterns, and then generate output by following them. 
there are systems which use neural networks to learn to recognize specific important patterns in data. 
their output can reflect real knowledge—for instance, whether an image of tissue shows a certain medical condition. 
scientists validate the output by comparing the system's judgment against experimental tests. 
that justifies referring to these systems as "artificial intelligence."
 likewise the systems that antisocial media use to decide what to show or recommend to a user, since the companies validate that they actually "work" in the sense of increasing "user engagement," even though that manipulation of users may be harmful to them and society as a whole. 
businesses and governments use similar systems to evaluate how to deal with potential clients or people accused of various things. 
these evaluation results are often validated carelessly and the result can be systematic injustice. 
but since it purports to understand, it qualifies at least as attempted artificial intelligence. 
artificial intelligence can be broken, or systematically biased, or work badly, just as natural intelligence can be. 
here we are concerned with whether the term fits specific instances, not with whether it does good. 
"assets". 
to refer to published works as "assets," or "digital assets," is even worse than calling them "content"—it dismisses their value to society aside from commercial value. 
"bsd-style". 
the expression "bsd-style license" leads to confusion because it lumps together licenses that have important differences. 
for instance, the original bsd license with the advertising clause is incompatible with the gnu general public license, but the revised bsd license is compatible with the gpl. 
to avoid confusion, it is best to name the specific license in question and avoid the vague term "bsd-style."
 "closed". 
describing nonfree software as "closed" clearly refers to the term "open source."
 in the free software movement, we do not want to be confused with the open source camp, so we are careful to avoid saying things that would encourage people to lump us in with them. 
for instance, we avoid describing nonfree software as "closed."
 we call it "nonfree" or "proprietary". 
"cloud computing". 
the term "cloud computing" (or just "cloud," in the context of computing) is a marketing buzzword with no coherent meaning. 
it is used for a range of different activities whose only common characteristic is that they use the internet for something beyond transmitting files. 
thus, the term spreads confusion. 
if you base your thinking on it, your thinking will be confused (or, could we say, "cloudy"?). 
when thinking about or responding to a statement someone else has made using this term, the first step is to clarify the topic. 
what scenario is the statement about? 
what is a good, clear term for that scenario? 
once the topic is clearly formulated, coherent thought about it becomes possible. 
one of the many meanings of "cloud computing" is storing your data in online services. 
in most scenarios, that is foolish because it exposes you to surveillance. 
another meaning (which overlaps that but is not the same thing) is service as a software substitute, which denies you control over your computing. 
you should never use saass. 
another meaning is renting a remote physical server, or virtual server. 
these practices are ok under certain circumstances. 
another meaning is accessing your own server from your own mobile device. 
that raises no particular ethical issues. 
the nist definition of "cloud computing" mentions three scenarios that raise different ethical issues: software as a service, platform as a service, and infrastructure as a service. 
however, that definition does not match the common use of "cloud computing," since it does not include storing data in online services. 
software as a service as defined by nist overlaps considerably with service as a software substitute, which mistreats the user, but the two concepts are not equivalent. 
these different computing practices don't even belong in the same discussion. 
the best way to avoid the confusion the term "cloud computing" spreads is not to use the term "cloud" in connection with computing. 
talk about the scenario you mean, and call it by a specific term. 
curiously, larry ellison, a proprietary software developer, also noted the vacuity of the term "cloud computing."
 he decided to use the term anyway because, as a proprietary software developer, he isn't motivated by the same ideals as we are. 
"commercial". 
please don't use "commercial" as a synonym for "nonfree."
 that confuses two entirely different issues. 
a program is commercial if it is developed as a business activity. 
a commercial program can be free or nonfree, depending on its manner of distribution. 
likewise, a program developed by a school or an individual can be free or nonfree, depending on its manner of distribution. 
the two questions—what sort of entity developed the program and what freedom its users have—are independent. 
in the first decade of the free software movement, free software packages were almost always noncommercial; the components of the gnu/linux operating system were developed by individuals or by nonprofit organizations such as the fsf and universities. 
later, in the 1990s, free commercial software started to appear. 
free commercial software is a contribution to our community, so we should encourage it. 
but people who think that "commercial" means "nonfree" will tend to think that the "free commercial" combination is self-contradictory, and dismiss the possibility. 
let's be careful not to use the word "commercial" in that way. 
"compensation". 
to speak of "compensation for authors" in connection with copyright carries the assumptions that (1) copyright exists for the sake of authors and (2) whenever we read something, we take on a debt to the author which we must then repay. 
the first assumption is simply false, and the second is outrageous. 
"compensating the rights-holders" adds a further swindle: you're supposed to imagine that means paying the authors, and occasionally it does, but most of the time it means a subsidy for the same publishing companies that are pushing unjust laws on us. 
"consume". 
"consume" refers to what we do with food: we ingest it, after which the food as such no longer exists. 
by analogy, we employ the same word for other products whose use uses them up. 
applying it to durable goods, such as clothing or appliances, is a stretch. 
applying it to published works (programs, recordings on a disk or in a file, books on paper or in a file), whose nature is to last indefinitely and which can be run, played or read any number of times, is stretching the word so far that it snaps. 
playing a recording, or running a program, does not consume it. 
those who use "consume" in this context will say they don't mean it literally. 
what, then, does it mean? 
it means to regard copies of software and other works from a narrow economistic point of view. 
"consume" is associated with the economics of material commodities, such as the fuel or electricity that a car uses up. 
gasoline is a commodity, and so is electricity. 
commodities are fungible: there is nothing special about a drop of gasoline that your car burns today versus another drop that it burned last week. 
what does it mean to think of works of authorship as a commodity, with the assumption that there is nothing special about any one story, article, program, or song? 
that is the twisted viewpoint of the owner or the accountant of a publishing company, someone who doesn't appreciate the published works as such. 
it is no surprise that proprietary software developers would like you to think of the use of software as a commodity. 
their twisted viewpoint comes through clearly in this article, which also refers to publications as "content."
 the narrow thinking associated with the idea that we "consume content" paves the way for laws such as the dmca that forbid users to break the digital restrictions management (drm) facilities in digital devices. 
if users think what they do with these devices is "consume," they may see such restrictions as natural. 
it also encourages the acceptance of "streaming" services, which use drm to perversely limit listening to music, or watching video, to squeeze those activities into the assumptions of the word "consume."
 why is this perverse usage spreading? 
some may feel that the term sounds sophisticated, but rejecting it with cogent reasons can appear even more sophisticated. 
some want to generalize about all kinds of media, but the usual english verbs ("read," "listen to," "watch") don't do this. 
others may be acting from business interests (their own, or their employers'). 
their use of the term in prestigious forums gives the impression that it's the "correct" term. 
to speak of "consuming" music, fiction, or any other artistic works is to treat them as commodities rather than as art. 
do we want to think of published works that way? 
do we want to encourage the public to do so? 
those who answer no, please join me in shunning the term "consume" for this. 
what to use instead? 
you can use specific verbs such as "read," "listen to," "watch" or "look at," since they help to restrain the tendency to overgeneralize. 
if you insist on generalizing, you can use the expression "attend to," which requires less of a stretch than "consume."
 for a work meant for practical use, "use" is best. 
see also the following entry. 
"consumer". 
the term "consumer," when used to refer to the users of computing, is loaded with assumptions we should reject. 
some come from the idea that using the program "consumes" the program (see the previous entry), which leads people to impose on copiable digital works the economic conclusions that were drawn about uncopiable material products. 
in addition, describing the users of software as "consumers" refers to a framing in which people are limited to selecting between whatever "products" are available in the "market."
 there is no room in this framing for the idea that users can directly exercise control over what a program does. 
to describe people who are not limited to passive use of works, we suggest terms such as "individuals" and "citizens," rather than "consumers."
 this problem with the word "consumer" has been noted before. 
"content". 
if you want to describe a feeling of comfort and satisfaction, by all means say you are "content," but using the word as a noun to describe works and communications through which people have expressed themselves adopts an attitude you might rather avoid: it treats them as a commodity whose purpose is to fill a box and make money. 
in effect, it disparages all the works by focusing on the box that is full. 
to avoid taking that attitude, you can call them "works," "publications," "messages," "communications," as well as various other words that are more specific. 
those who use the term "content" are often the publishers that push for increased copyright power in the name of the authors ("creators," as they say) of the works. 
the term "content" reveals their real attitude towards these works and their authors. 
when thinking about the term "content," please note that "contents" is a different matter. 
it is a form of the same word, but used with a different meaning. 
talking about the "contents" of a file or the "table of contents" of a book does not imply a judgment about files in general or books in general, so it does not have the problem we are talking about here. 
we first condemned this usage of "content" in 2002. 
since then, tom chatfield recognized the same point in the guardian: content itself is beside the point—as the very use of words like content suggests. 
the moment you start labelling every single piece of writing in the world "content," you have conceded its interchangeability: its primary purpose as mere grist to the metrical mill. 
in other words, "content" reduces publications and writings to a sort of pap fit to be metered and piped through the "tubes" of the internet. 
later, peter bradshaw noticed it too. 
this is what happens when studios treat movies as pure, undifferentiated corporate "content," a gazprom pipeline of superhero mush which can be turned off when the accountants say that it makes sense to do so. 
martin scorsese condemned the attitude of "content" in regard to films. 
the attitude implied by "content" is illustrated pointedly in this critical description of the development path of platforms run by people who base their thinking on that concept. 
the article uses this word over and over, along with "consume" and "creators."
 perhaps that is meant to illustrate the way those people like to think. 
see also courtney love's open letter to steve case and search for "content provider" in that page. 
alas, ms. 
love is unaware that the term "intellectual property" is also biased and confusing. 
however, as long as other people use the term "content provider," political dissidents can well call themselves "malcontent providers."
 the term "content management" takes the prize for vacuity. 
"content" means "some sort of information," and "management" in this context means "doing something with it."
 so a "content management system" is a system for doing something to some sort of information. 
nearly all programs fit that description. 
in most cases, that term really refers to a system for updating pages on a web site. 
for that, we recommend the term "web site revision system" or "website revision system" (wrs). 
"copyright owner". 
copyright is an artificial privilege, handed out by the state to achieve a public interest and lasting a period of time—not a natural right like owning a house or a shirt. 
lawyers used to recognize this by referring to the recipient of that privilege as a "copyright holder."
 a few decades ago, copyright holders began trying to reduce awareness of this point. 
in addition to citing frequently the bogus concept of "intellectual property," they also started calling themselves "copyright owners."
 please join us in resisting by using the traditional term "copyright holders" instead. 
"creative commons licensed". 
the most important licensing characteristic of a work is whether it is free. 
creative commons publishes seven licenses; three are free (cc by, cc by-sa and cc0) and the rest are nonfree. 
thus, to describe a work as "creative commons licensed" fails to say whether it is free, and suggests that the question is not important. 
the statement may be accurate, but the omission is harmful. 
to encourage people to pay attention to the most important distinction, always specify which creative commons license is used, as in "licensed under cc by-sa."
 if you don't know which license a certain work uses, find out and then make your statement. 
"creator". 
the term "creator" as applied to authors implicitly compares them to a deity ("the creator"). 
the term is used by publishers to elevate authors' moral standing above that of ordinary people in order to justify giving them increased copyright power, which the publishers can then exercise in their name. 
we recommend saying "author" instead. 
however, in many cases "copyright holder" is what you really mean. 
these two terms are not equivalent: often the copyright holder is not the author. 
"digital goods". 
the term "digital goods," as applied to copies of works of authorship, identifies them with physical goods—which cannot be copied, and which therefore have to be manufactured in quantity and sold. 
this metaphor encourages people to judge issues about software or other digital works based on their views and intuitions about physical goods. 
it also frames issues in terms of economics, whose shallow and limited values don't include freedom and community. 
"digital locks". 
"digital locks" is used to refer to digital restrictions management by some who criticize it. 
the problem with this term is that it fails to do justice to the badness of drm. 
the people who adopted that term did not think it through. 
locks are not necessarily oppressive or bad. 
you probably own several locks, and their keys or codes as well; you may find them useful or troublesome, but they don't oppress you, because you can open and close them. 
likewise, we find encryption invaluable for protecting our digital files. 
that too is a kind of digital lock that you have control over. 
drm is like a lock placed on you by someone else, who refuses to give you the key—in other words, like handcuffs. 
therefore, the proper metaphor for drm is "digital handcuffs," not "digital locks."
 a number of opposition campaigns have chosen the unwise term "digital locks"; to get things back on the right track, we must firmly insist on correcting this mistake. 
the fsf can support a campaign that opposes "digital locks" if we agree on the substance; however, when we state our support, we conspicuously replace the term with "digital handcuffs" and say why. 
"digital rights management". 
"digital rights management" (abbreviated "drm") refers to technical mechanisms designed to impose restrictions on computer users. 
the use of the word "rights" in this term is propaganda, designed to lead you unawares into seeing the issue from the viewpoint of the few that impose the restrictions, and ignoring that of the general public on whom these restrictions are imposed. 
good alternatives include "digital restrictions management," and "digital handcuffs."
 please sign up to support our campaign to abolish drm. 
"ecosystem". 
it is inadvisable to describe the free software community, or any human community, as an "ecosystem," because that word implies the absence of ethical judgment. 
the term "ecosystem" implicitly suggests an attitude of nonjudgmental observation: don't ask how what should happen, just study and understand what does happen. 
in an ecosystem, some organisms consume other organisms. 
in ecology, we do not ask whether it is right for an owl to eat a mouse or for a mouse to eat a seed, we only observe that they do so. 
species' populations grow or shrink according to the conditions; this is neither right nor wrong, merely an ecological phenomenon, even if it goes so far as the extinction of a species. 
by contrast, beings that adopt an ethical stance towards their surroundings can decide to preserve things that, without their intervention, might vanish—such as civil society, democracy, human rights, peace, public health, a stable climate, clean air and water, endangered species, traditional arts…and computer users' freedom. 
"floss". 
the term "floss," meaning "free/libre and open source software," was coined as a way to be neutral between free software and open source. 
if neutrality is your goal, "floss" is the best way to be neutral. 
but if you want to show you stand for freedom, don't use a neutral term. 
"for free". 
if you want to say that a program is free software, please don't say that it is available "for free."
 that term specifically means "for zero price."
 free software is a matter of freedom, not price. 
free software copies are often available for free—for example, by downloading via ftp. 
but free software copies are also available for a price on cd-roms; meanwhile, proprietary software copies are occasionally available for free in promotions, and some proprietary packages are normally available at no charge to certain users. 
to avoid confusion, you can say that the program is available "as free software."
 "foss". 
the term "foss," meaning "free and open source software," was coined as a way to be neutral between free software and open source, but it doesn't really do that. 
if neutrality is your goal, "floss" is better. 
but if you want to show you stand for freedom, don't use a neutral term. 
instead of foss, we say, free software or free (libre) software. 
"freely available". 
don't use "freely available software" as a synonym for "free software."
 the terms are not equivalent. 
software is "freely available" if anyone can easily get a copy. 
"free software" is defined in terms of the freedom of users that have a copy of it. 
these are answers to different questions. 
"freemium". 
the confusing term "freemium" is used in marketing to describe nonfree software whose standard version is gratis, with paid nonfree add-ons available. 
using this term works against the free software movement, because it leads people to think of "free" as meaning "zero price."
 "free-to-play". 
the confusing term "free-to-play" (acronym "f2p") is used in marketing to describe nonfree games which don't require a payment before a user starts to play. 
in many of these games, doing well in the game requires paying later, so the term "gratis-to-start" is a more accurate description. 
using this term works against the free software movement, because it leads people to think of "free" as meaning "zero price."
 "freeware". 
please don't use the term "freeware" as a synonym for "free software."
 the term "freeware" was used often in the 1980s for programs released only as executables, with source code not available. 
today it has no particular agreed-on definition. 
when using languages other than english, please avoid borrowing english terms such as "free software" or "freeware."
 it is better to translate the term "free software" into your language. 
by using a word in your own language, you show that you are really referring to freedom and not just parroting some mysterious foreign marketing concept. 
the reference to freedom may at first seem strange or disturbing to your compatriots, but once they see that it means exactly what it says, they will really understand what the issue is. 
"give away software". 
it's misleading to use the term "give away" to mean "distribute a program as free software."
 this locution has the same problem as "for free": it implies the issue is price, not freedom. 
one way to avoid the confusion is to say "release as free software."
 "google". 
please avoid using the term "google" as a verb, meaning to search for something on the internet. 
"google" is just the name of one particular search engine among others. 
we suggest to use the term "search the web" or (in some contexts) just "search."
 try to use a search engine that respects your privacy; for instance, duckduckgo claims not to track its users. 
(there is no way for outsiders to verify claims of that kind.) "hacker". 
a hacker is someone who enjoys playful cleverness—not necessarily with computers. 
the programmers in the old mit free software community of the 60s and 70s referred to themselves as hackers. 
around 1980, journalists who discovered the hacker community mistakenly took the term to mean "security breaker."
 please don't spread this mistake. 
people who break security are "crackers."
 "intellectual property". 
publishers and lawyers like to describe copyright as "intellectual property"—a term also applied to patents, trademarks, and other more obscure areas of law. 
these laws have so little in common, and differ so much, that it is ill-advised to generalize about them. 
it is best to talk specifically about "copyright," or about "patents," or about "trademarks."
 the term "intellectual property" carries a hidden assumption—that the way to think about all these disparate issues is based on an analogy with physical objects, and our conception of them as physical property. 
when it comes to copying, this analogy disregards the crucial difference between material objects and information: information can be copied and shared almost effortlessly, while material objects can't be. 
to avoid spreading unnecessary bias and confusion, it is best to adopt a firm policy not to speak or even think in terms of "intellectual property". 
the hypocrisy of calling these powers "rights" is starting to make the world "intellectual property" organization embarrassed. 
"internet of things". 
when companies decided to make computerized appliances that would connect over the internet to the manufacturer's server, and therefore could easily snoop on their users, they realized that this would not sound very nice. 
so they came up with a cute, appealing name: the "internet of things."
 experience shows that these products often do spy on their users. 
they are also tailor-made for giving people biased advice. 
in addition, the manufacturer can sabotage the product by turning off the server it depends on. 
we call them the "internet of stings."
 "lamp system". 
"lamp" stands for "linux, apache, mysql and php"—a common combination of software to use on a web server, except that "linux" in this context really refers to the gnu/linux system. 
so instead of "lamp" it should be "glamp": "gnu, linux, apache, mysql and php."
 "linux system". 
linux is the name of the kernel that linus torvalds developed starting in 1991. 
the operating system in which linux is used is basically gnu with linux added. 
to call the whole system "linux" is both unfair and confusing. 
please call the complete system gnu/linux, both to give the gnu project credit and to distinguish the whole system from the kernel alone. 
"market". 
it is misleading to describe the users of free software, or the software users in general, as a "market."
 this is not to say there is no room for markets in the free software community. 
if you have a free software support business, then you have clients, and you trade with them in a market. 
as long as you respect their freedom, we wish you success in your market. 
but the free software movement is a social movement, not a business, and the success it aims for is not a market success. 
we are trying to serve the public by giving it freedom—not competing to draw business away from a rival. 
to equate this campaign for freedom to a business's efforts for mere success is to deny the importance of freedom and legitimize proprietary software. 
"modern". 
the term "modern" makes sense from a descriptive perspective—for instance, solely to distinguish newer periods and ways from older ones. 
it becomes a problem when it carries the presumption that older ways are "old-fashioned"; that is, presumed to be worse. 
in technological fields where businesses make the choices and impose them on users, the reverse is often true. 
"monetize". 
the proper definition of "monetize" is "to use something as currency."
 for instance, human societies have monetized gold, silver, copper, printed paper, special kinds of seashells, and large rocks. 
however, we now see a tendency to use the word in another way, meaning "to use something as a basis for profit."
 that usage casts the profit as primary, and the thing used to get the profit as secondary. 
that attitude applied to a software project is objectionable because it would lead the developers to make the program proprietary, if they conclude that making it free/libre isn't sufficiently profitable. 
a productive and ethical business can make money, but if it subordinates all else to profit, it is not likely to remain ethical. 
"mp3 player". 
in the late 1990s it became feasible to make portable, solid-state digital audio players. 
most players supported the patented mp3 codec, and that is still the case. 
some players also supported the patent-free audio codecs ogg vorbis and flac, and a few couldn't play mp3-encoded files at all because their developers needed to protect themselves from the patents on mp3 format. 
using the term "mp3 players" for audio players in general has the effect of promoting the mp3 format and discouraging the other formats (some of which are technically superior as well). 
even though the mp3 patents have expired, it is still undesirable to do that. 
we suggest the term "digital audio player," or simply "audio player" when that's clear enough, instead of "mp3 player."
 "open". 
please avoid using the term "open" or "open source" as a substitute for "free software."
 those terms refer to a different set of views based on different values. 
the free software movement campaigns for your freedom in your computing, as a matter of justice. 
the open source non-movement does not campaign for anything in this way. 
when referring to the open source views, it's correct to use that name, but please do not use that term when talking about us, our software, or our views—that leads people to suppose our views are similar to theirs. 
instead of open source, we say, free software or free (libre) software. 
"opt out". 
when applied to any form of computational mistreatment, "opt out" implies the choice is a minor matter of convenience. 
we recommend "reject," "shun" or "escape from."
 "pc". 
it's ok to use the abbreviation "pc" to refer to a certain kind of computer hardware, but please don't use it with the implication that the computer is running microsoft windows. 
if you install gnu/linux on the same computer, it is still a pc. 
the term "wc" has been suggested for a computer running windows. 
"photoshop". 
please avoid using the term "photoshop" as a verb, meaning any kind of photo manipulation or image editing in general. 
photoshop is just the name of one particular image editing program, which should be avoided since it is proprietary. 
there are plenty of free programs for editing images, such as the gimp. 
"players" (said of businesses). 
to describe businesses as "players" presumes that they are motivated purely and simply by "winning" what they treat as a poker-like game—in effect, subordinating all else to profit. 
often businesses (and their executives) do act that way, but not always, and we often pressure them to respect other values as well. 
the moral cynicism of "players" resonates with a general condemnation of business, which to some extent business in general deserves; at the same time, it tends to dissuade the attempt to judge any business's acts or practices in moral terms. 
even to raise the question of whether a certain business treats people unjustly is dissuaded by the "players" metaphor's murmuring, in the background, "why bother asking?"
 let's avoid that metaphor. 
"piracy". 
publishers often refer to copying they don't approve of as "piracy."
 in this way, they imply that it is ethically equivalent to attacking ships on the high seas, kidnapping and murdering the people on them. 
based on such propaganda, they have procured laws in most of the world to forbid copying in most (or sometimes all) circumstances. 
(they are still pressuring to make these prohibitions more complete.) if you don't believe that copying not approved by the publisher is just like kidnapping and murder, you might prefer not to use the word "piracy" to describe it. 
neutral terms such as "unauthorized copying" (or "prohibited copying" for the situation where it is illegal) are available for use instead. 
some of us might even prefer to use a positive term such as "sharing information with your neighbor."
 a us judge, presiding over a trial for copyright infringement, recognized that "piracy" and "theft" are smear words. 
"powerpoint". 
please avoid using the term "powerpoint" to mean any kind of slide presentation. 
"powerpoint" is just the name of one particular proprietary program to make presentations. 
for your freedom's sake, you should use only free software to make your presentations—which means, not powerpoint. 
recommended options include latex's beamer class and libreoffice impress. 
"product". 
if you're talking about a product, by all means call it that. 
however, when referring to a service, please do not call it a "product."
 if a service provider calls the service a "product," please firmly insist on calling it a "service."
 if a service provider calls a package deal a "product," please firmly insist on calling it a "deal."
 "protection". 
publishers' lawyers love to use the term "protection" to describe copyright. 
this word carries the implication of preventing destruction or suffering; therefore, it encourages people to identify with the owner and publisher who benefit from copyright, rather than with the users who are restricted by it. 
it is easy to avoid "protection" and use neutral terms instead. 
for example, instead of saying, "copyright protection lasts a very long time," you can say, "copyright lasts a very long time."
 likewise, instead of saying, "protected by copyright," you can say, "covered by copyright" or just "copyrighted."
 if you want to criticize copyright rather than be neutral, you can use the term "copyright restrictions."
 thus, you can say, "copyright restrictions last a very long time."
 the term "protection" is also used to describe malicious features. 
for instance, "copy protection" is a feature that interferes with copying. 
from the user's point of view, this is obstruction. 
so we could call that malicious feature "copy obstruction."
 more often it is called digital restrictions management (drm)—see the defective by design campaign. 
"rand (reasonable and non-discriminatory)". 
standards bodies that promulgate patent-restricted standards that prohibit free software typically have a policy of obtaining patent licenses that require a fixed fee per copy of a conforming program. 
they often refer to such licenses by the term "rand," which stands for "reasonable and non-discriminatory."
 that term whitewashes a class of patent licenses that are normally neither reasonable nor nondiscriminatory. 
it is true that these licenses do not discriminate against any specific person, but they do discriminate against the free software community, and that makes them unreasonable. 
thus, half of the term "rand" is deceptive and the other half is prejudiced. 
standards bodies should recognize that these licenses are discriminatory, and drop the use of the term "reasonable and non-discriminatory" or "rand" to describe them. 
until they do so, writers who do not wish to join in the whitewashing would do well to reject that term. 
to accept and use it merely because patent-wielding companies have made it widespread is to let those companies dictate the views you express. 
we suggest the term "uniform fee only," or "ufo" for short, as a replacement. 
it is accurate because the only condition in these licenses is a uniform royalty fee. 
"saas" or "software as a service". 
we used to say that saas (short for "software as a service") is an injustice, but then we found that there was a lot of variation in people's understanding of which activities count as saas. 
so we switched to a new term, "service as a software substitute" or "saass."
 this term has two advantages: it wasn't used before, so our definition is the only one, and it explains what the injustice consists of. 
see who does that server really serve? 
for discussion of this issue. 
in spanish we continue to use the term "software como servicio" because the joke of "software como ser vicio" ("software, as being pernicious") is too good to give up. 
"sell software". 
the term "sell software" is ambiguous. 
strictly speaking, exchanging a copy of a free program for a sum of money is selling the program, and there is nothing wrong with doing that. 
however, people usually associate the term "selling software" with proprietary restrictions on the subsequent use of the software. 
you can be clear, and prevent confusion, by saying either "distributing copies of a program for a fee" or "imposing proprietary restrictions on the use of a program."
 see selling free software for further discussion of this issue. 
"sharing (personal data)". 
when companies manipulate or lure people into revealing personal data and thus ceding their privacy, please don't refer to this as "sharing."
 we use the term "sharing" to refer to noncommercial cooperation, including noncommercial redistribution of exact copies of published works, and we say this is good. 
please don't apply that word to a practice which is harmful and dangerous. 
when one company redistributes collected personal data to another company, that is even less deserving of the term "sharing."
 "sharing economy". 
the term "sharing economy" is not a good way to refer to services such as uber and airbnb that arrange business transactions between people. 
we use the term "sharing" to refer to noncommercial cooperation, including noncommercial redistribution of exact copies of published works. 
stretching the word "sharing" to include these transactions undermines its meaning, so we don't use it in this context. 
a more suitable term for businesses like uber is the "piecework service economy" or "gig economy."
 "skype". 
please avoid using the term "skype" as a verb, meaning any kind of video communication or telephony over the internet in general. 
"skype" is just the name of one particular proprietary program, one that spies on its users. 
if you want to make video and voice calls over the internet in a way that respects both your freedom and your privacy, try one of the numerous free skype replacements. 
"software industry". 
the term "software industry" encourages people to imagine that software is always developed by a sort of factory and then delivered to "consumers."
 the free software community shows this is not the case. 
software businesses exist, and various businesses develop free and/or nonfree software, but those that develop free software are not run like factories. 
the term "industry" is being used as propaganda by advocates of software patents. 
they call software development "industry" and then try to argue that this means it should be subject to patent monopolies. 
the european parliament, rejecting software patents in 2003, voted to define "industry" as "automated production of material goods."
 "source model". 
wikipedia uses the term "source model" in a confused and ambiguous way. 
ostensibly it refers to how a program's source is distributed, but the text confuses this with the development methodology. 
it distinguishes "open source" and "shared source" as answers, but they overlap—microsoft uses the latter as a marketing term to cover a range of practices, some of which are "open source."
 thus, this term really conveys no coherent information, but it provides an opportunity to say "open source" in pages describing free software programs. 
"theft". 
the supporters of a too-strict, repressive form of copyright often use words like "stolen" and "theft" to refer to copyright infringement. 
this is spin, but they would like you to take it for objective truth. 
under the us legal system, copyright infringement is not theft. 
laws about theft are not applicable to copyright infringement. 
the supporters of repressive copyright are making an appeal to authority—and misrepresenting what authority says. 
to refute them, you can point to this real case which shows what can properly be described as "copyright theft."
 unauthorized copying is forbidden by copyright law in many circumstances (not all!), but being forbidden doesn't make it wrong. 
in general, laws don't define right and wrong. 
laws, at their best, attempt to implement justice. 
if the laws (the implementation) don't fit our ideas of right and wrong (the spec), the laws are what should change. 
a us judge, presiding over a trial for copyright infringement, recognized that "piracy" and "theft" are smear-words. 
"trusted computing". 
"trusted computing" is the proponents' name for a scheme to redesign computers so that application developers can trust your computer to obey them instead of you. 
from their point of view, it is "trusted"; from your point of view, it is "treacherous."
 "vendor". 
please don't use the term "vendor" to refer generally to anyone that develops or packages software. 
many programs are developed in order to sell copies, and their developers are therefore their vendors; this even includes some free software packages. 
however, many programs are developed by volunteers or organizations which do not intend to sell copies. 
these developers are not vendors. 
likewise, only some of the packagers of gnu/linux distributions are vendors. 
we recommend the general term "supplier" instead. 
this essay is published in free software, free society: the selected essays of richard m. stallman. 
world summit on the information society. 
stallman at wsis, in a climate of suppression of dissent, the score is 0-0. 
the world summit on the information society is supposed to formulate plans to end the "digital divide" and make the internet accessible to everyone on earth. 
the negotiations were completed in november, so the big official meeting in geneva last week was more of a trade show and conference than a real summit meeting. 
the summit procedures were designed so that non-governmental organizations (mainly those that promote human rights and equality, and work to reduce poverty) could attend, see the discussions, and comment. 
however, the actual declaration paid little attention to the comments and recommendations that these organizations made. 
in effect, civil society was offered the chance to speak to a dead mike. 
the summit's declaration includes little that is bold or new. 
when it comes to the question of what people will be free to do with the internet, it responds to demands made by various governments to impose restrictions on citizens of cyberspace. 
part of the digital divide comes from artificial obstacles to the sharing of information. 
this includes the licenses of nonfree software, and harmfully restrictive copyright laws. 
the brazilian declaration sought measures to promote free software, but the us delegation was firmly against it (remember that the bush campaign got money from microsoft). 
the outcome was a sort of draw, with the final declaration presenting free software, open source, and proprietary software as equally legitimate. 
the us also insisted on praising so-called "intellectual property rights."
 (that biased term promotes simplistic over-generalization; for the sake of clear thinking about the issues of copyright law, and about the very different issues of patent law, that term should always be avoided.) the declaration calls on governments to ensure unhindered access to the public domain, but says nothing about whether any additional works should ever enter the public domain. 
human rights were given lip service, but the proposal for a "right to communicate" (not merely to access information) using the internet was shot down by many of the countries. 
the summit has been criticized for situating its 2005 meeting in tunisia, which is a prime example of what the information society must not do. 
people have been imprisoned in tunisia for using the internet to criticize the government. 
suppression of criticism has been evident here at the summit too. 
a counter-summit, actually a series of talks and discussions, was planned for last tuesday, but it was shut down by the geneva police who clearly were searching for an excuse to do so. 
first they claimed that the landlord did not approve use of the space, but the tenant who has a long-term lease for the space then arrived and said he had authorized the event. 
so the police cited a fire code violation which i'm told is applicable to most buildings in geneva—in effect, an all-purpose excuse to shut down anything. 
press coverage of this maneuver eventually forced the city to allow the counter-summit to proceed on wednesday in a different location. 
in a more minor act of suppression, the moderator of the official round table in which i spoke told me "your time is up" well before the three minutes each participant was supposed to have. 
she later did the same thing to the epic representative. 
i later learned that she works for the international chamber of commerce—no wonder she silenced us. 
and how telling that the summit would put a representative of the icc at the throttle when we spoke. 
suppression was also visible in the exclusion of certain ngos from the summit because their focus on human rights might embarrass the governments that trample them. 
for instance, the summit refused to accredit human rights in china, a group that criticizes the chinese government for (among other things) censorship of the internet. 
reporters without borders was also excluded from the summit. 
to raise awareness of their exclusion, and of the censorship of the internet in various countries, they set up an unauthorized radio station in nearby france and handed out mini-radios, so that summit attendees could hear what the organization had been blocked from saying at the summit itself. 
the summit may have a few useful side effects. 
for instance, several people came together to plan an organization to help organizations in africa switch to gnu/linux. 
but the summit did nothing to support this activity beyond providing an occasion for us to meet. 
nor, i believe, was it intended to support any such thing. 
the overall attitude of the summit can be seen in its having invited microsoft to speak alongside, and before, most of the various participating governments—as if to accord that criminal corporation the standing of a state. 
originally published on newsforge. 
speech at wsis, 16 july 2003. 
stallman the benefit of computers is that it's easier to copy and manipulate information. 
corporations are using two kinds of imposed monopolies to deny you this benefit. 
software patents restrict how you use your computer. 
they restrict developing software. 
a big program combines dozens or hundreds of ideas. 
when each idea can be patented, only ibms and microsofts can safely write software. 
bye bye to any independent local software industry. 
software patents must be rejected. 
copyrights restrict using and sharing information—exactly what your computer is for. 
it was fine to trade away the freedom to copy when only publishers could copy; the public lost nothing. 
today peer-to-peer sharing must be legal. 
wsis should not teach people that sharing is wrong. 
copyrights block access to scientific publications. 
every university should be free to make an open-access mirror for any journal, so no one is excluded from access. 
then there's the economic effect. 
when companies have power over you, they bleed you dry. 
copyrights and software patents increase the digital divide and concentrate wealth. 
we have too much scarcity in the world; let's not create more. 
trips is bad enough, but software patents and the wipo copyright treaty go beyond trips, and wsis should reject them. 
computer users need software that respects their freedom. 
we call it "free (libre) software," meaning freedom, not gratis. 
you have the freedom to run it, study it, change it, and redistribute it. 
free software means you control your computing. 
with nonfree software, the software owners control it. 
they put in spy features, back doors, restrictions. 
with free software, you can make the program do what you want. 
"you" could mean an individual programmer, a company, or a group of users with similar needs. 
non-programmers can convince or pay programmers to make changes for you. 
with free software, you're free to make it handle your language. 
free to adapt it for your disability. 
software owners deliberately make programs incompatible. 
with free software, users can make it follow standards. 
you need free software to train master programmers. 
nonfree software is a secret, so nobody can learn from it. 
free software gives talented young people in africa the chance to learn how to work on real software. 
school should also teach students the spirit of cooperation. 
all schools should use free software. 
free software is necessary for sustainable development. 
if everyone in your country uses a program that's secret and controlled by a single company, that's not development, that's electronic colonization. 
the wwworst app store. 
picture the most abusive app store. 
programs in it are meant to run on your own computer. 
however, you have to be online to run them. 
every time you start them, they contact the app store. 
if there is an updated version, it's installed automatically, no questions asked. 
you'd rather run the earlier version? 
tough. 
if the app store decides you're no longer welcome, the program won't start any more. 
if the app store servers are offline, or if you are, it won't start either. 
programs in this app store must also hold your data in the app store's servers. 
if the program won't start, you can't get to the data on the servers any more. 
you may have downloaded backups of your data, but you'd have to figure out how to decode them without the program. 
sounds like a nightmare? 
it is. 
but it's also very real. 
well-known app stores are approaching this level of nastiness. 
but they are just catching up with the real thing. 
the most abusive app store is the business-driven perversion of the old user-empowering distributed hypertext system called "the web."
 users have been encouraged to adopt "web apps" for much of their computing, paving the way for other app stores to follow suit. 
"web apps" are most often distributed as javascript (though java and flash have served similar purposes), automatically installed and executed on your browser. 
but the problem is not that they're in javascript, or that it's your browser that runs them. 
it's that: you don't have control over what the program does; you don't have control over when you can run it; you don't have control over your own data. 
the app store owner takes all that control away from you, thereby gaining control over you. 
you lose when the javascript code is nonfree software. 
https://www.gnu.org/philosophy/javascript-trap.html but you also lose when it is (nominally) free software! 
when the app / web site has so much control over what runs on your computer, the effect "is equivalent to using a nonfree program with surveillance features and a universal back door."
 https://www.gnu.org/philosophy/network-services-arent-free-or-nonfree.html https://www.gnu.org/philosophy/who-does-that-server-really-serve.html the owner gets all the freedom, and you, the user, get none. 
that's not a self-respectful way to do your computing. 
it invades your privacy, it keeps you and your data hostage, it takes away your agency and your freedom when it comes to your digital life. 
the web used to be a wonderful way to share information. 
web apps and mandatory javascript have turned it into the worst app store. 
it is time to separate the wwwonderful from the wwworst practices. 
here are some ways to help: request web sites that require javascript execution to offer either: alternate means of access to information they publish, or alternate means of delivery for their apps; promote free browser extensions that control javascript execution; https://www.gnu.org/software/librejs/ beware of apps that are mere front ends for saass; https://www.gnu.org/philosophy/who-does-that-server-really-serve.html demand software you use to be delivered in freedom-respecting ways; promote hypertext systems that do not grant servers control over users. 
https://en.wikipedia.org/wiki/gemini_(protocol) https://en.wikipedia.org/wiki/gopher_(protocol) more generally: as a self-respecting user, reject the abusive practices whenever you can; https://gnu.org/philosophy/saying-no-even-once.html discourage automatic execution of downloaded code; https://www.fsfla.org/blogs/lxo/pub/who-is-afraid-of-spectre-and-meltdown.en.html as a network service operator, set a user-respecting example; https://www.gnu.org/philosophy/network-services-arent-free-or-nonfree.html spread awareness of the problem, and advice on solving and avoiding it. 
https://www.gnu.org/help/help-javascript.html now, if you wish your site to give its users a taste of how the wwworst app store feels to us, add to web pages you control the following javascriptlet: document.body.textcontent = 'please disable javascript to view this site.'
 if you wish, make "disable javascript" a link to this article. 
thanks to richard stallman for the inspiration to write about this issue, and for the encouragement to publish it. 
2021-04-01 update:  thanks to ke0vvt for letting me know that textcontent can't have links; you need innerhtml for that. 
the x window system trap. 
to copyleft or not to copyleft? 
that is one of the major controversies in the free software community. 
the idea of copyleft is that we should fight fire with fire—that we should use copyright to make sure our code stays free. 
the gnu general public license (gnu gpl) is one example of a copyleft license. 
some free software developers prefer noncopyleft distribution. 
noncopyleft licenses such as the xfree86 and bsd licenses are based on the idea of never saying no to anyone—not even to someone who seeks to use your work as the basis for restricting other people. 
noncopyleft licensing does nothing wrong, but it misses the opportunity to actively protect our freedom to change and redistribute software. 
for that, we need copyleft. 
for many years, the x consortium was the chief opponent of copyleft. 
it exerted both moral suasion and pressure to discourage free software developers from copylefting their programs. 
it used moral suasion by suggesting that it is not nice to say no. 
it used pressure through its rule that copylefted software could not be in the x distribution. 
why did the x consortium adopt this policy? 
it had to do with their conception of success. 
the x consortium defined success as popularity—specifically, getting computer companies to use the x window system. 
this definition put the computer companies in the driver's seat: whatever they wanted, the x consortium had to help them get it. 
computer companies normally distribute proprietary software. 
they wanted free software developers to donate their work for such use. 
if they had asked for this directly, people would have laughed. 
but the x consortium, fronting for them, could present this request as an unselfish one. 
"join us in donating our work to proprietary software developers," they said, suggesting that this is a noble form of self-sacrifice. 
"join us in achieving popularity," they said, suggesting that it was not even a sacrifice. 
but self-sacrifice is not the issue: tossing away the defense that copyleft provides, which protects the freedom of the whole community, is sacrificing more than yourself. 
those who granted the x consortium's request entrusted the community's future to the goodwill of the x consortium. 
this trust was misplaced. 
in its last year, the x consortium made a plan to restrict the forthcoming x11r6.4 release so that it would not be free software. 
they decided to start saying no, not only to proprietary software developers, but to our community as well. 
there is an irony here. 
if you said yes when the x consortium asked you not to use copyleft, you put the x consortium in a position to license and restrict its version of your program, along with the code for the core of x. the x consortium did not carry out this plan. 
instead it closed down and transferred x development to the open group, whose staff are now carrying out a similar plan. 
to give them credit, when i asked them to release x11r6.4 under the gnu gpl in parallel with their planned restrictive license, they were willing to consider the idea. 
(they were firmly against staying with the old x11 distribution terms.) before they said yes or no to this proposal, it had already failed for another reason: the xfree86 group followed the x consortium's old policy, and will not accept copylefted software. 
in september 1998, several months after x11r6.4 was released with nonfree distribution terms, the open group reversed its decision and rereleased it under the same noncopyleft free software license that was used for x11r6.3. 
thus, the open group therefore eventually did what was right, but that does not alter the general issue. 
even if the x consortium and the open group had never planned to restrict x, someone else could have done it. 
noncopylefted software is vulnerable from all directions; it lets anyone make a nonfree version dominant, if he will invest sufficient resources to add significantly important features using proprietary code. 
users who choose software based on technical characteristics, rather than on freedom, could easily be lured to the nonfree version for short-term convenience. 
the x consortium and open group can no longer exert moral suasion by saying that it is wrong to say no. 
this will make it easier to decide to copyleft your x-related software. 
when you work on the core of x, on programs such as the x server, xlib, and xt, there is a practical reason not to use copyleft. 
the x.org group does an important job for the community in maintaining these programs, and the benefit of copylefting our changes would be less than the harm done by a fork in development. 
so it is better to work with them, and not copyleft our changes on these programs. 
likewise for utilities such as xset and xrdb, which are close to the core of x and do not need major improvements. 
at least we know that the x.org group has a firm commitment to developing these programs as free software. 
the issue is different for programs outside the core of x: applications, window managers, and additional libraries and widgets. 
there is no reason not to copyleft them, and we should copyleft them. 
in case anyone feels the pressure exerted by the criteria for inclusion in the x distributions, the gnu project will undertake to publicize copylefted packages that work with x. if you would like to copyleft something, and you worry that its omission from the x distribution will impede its popularity, please ask us to help. 
at the same time, it is better if we do not feel too much need for popularity. 
when a businessman tempts you with "more popularity," he may try to convince you that his use of your program is crucial to its success. 
don't believe it! 
if your program is good, it will find many users anyway; you don't need to feel desperate for any particular users, and you will be stronger if you do not. 
you can get an indescribable sense of joy and freedom by responding, "take it or leave it—that's no skin off my back."
 often the businessman will turn around and accept the program with copyleft, once you call the bluff. 
friends, free software developers, don't repeat old mistakes! 
if we do not copyleft our software, we put its future at the mercy of anyone equipped with more resources than scruples. 
with copyleft, we can defend freedom, not just for ourselves, but for our whole community. 
you, the problem tpm2 solves. 
id="hung-rev" href="#hung">[*] 1. trust: to give or to earn?. 
microsoft wants you to believe that you can give trust to tpm2 for better security. 
tpm2 is made a mandatory prerequisite, not an option for windows 11. 
that does not square with how we understand "trust" to work. 
in truth, tpm2 is not about enhancing the security of the users. 
it is about solving the problem of the untrustworthy computer users in areas such as digital restrictions management, game anti-cheating, and exam proctoring. 
all these applications have failed so far because users have total control over their physical properties, the computers. 
that control allows them to run drm&#8209;stripping software on video/audio/text files, plugins to cheat in games, and video intercepting software to cheat in the exam, among many possibilities. 
to discipline the users against their possible ill wills, such software has to do way more than minding their own businesses. 
they have to take the highest level of operating system privilege and prevent users from switching to other applications or even running, in the background, any potentially cheating-aiding software such as audio/video recorder. 
that's why these classes of software all behave exactly like rootkit malware. 
microsoft has long been consistent in its complicit approval of sony's rootkit and its insistence on content protection since the miserable failure that was vista. 
with the help of tpm2 and the assurance of mathematics, however, microsoft can finally enforce it. 
you have to earn their trust by letting tpm2 remotely attest to microsoft and other software vendors about who you really are, and "swear" in cryptographic terms that you are not running anything against their software. 
2. the biometrics of cpus. 
fingerprints are usernames, not passwords. 
they facilitate surveillance from governments or corporations over individuals way better than they help individuals protect secrets and privacy. 
for example, it is encryption passwords (and the underlying mathematics), not fingerprints, that can protect the secrets of a temporarily unconscious or even a deceased person. 
in general biometrics are suitable for surveillance and not suitable for computer security because of their uniqueness, the difficulty for the owner to forge, and the difficulty for the owner to refuse to reveal. 
(think of the gait analysis technology so well developed in china.) the public portions of the endorsement key (ek), attestation identity key (aik), and other keys in a tpm2 chip have properties similar to the biometrics of a person. 
it is unique just like the serial number of the engine in a car, and the manufacturers keep track of all those numbers in their products. 
with a physically carved serial number, it is easy for the user to share with his friends in a fake report in case the remote corporate lords demand the knowledge or the photo of that number. 
in the tpm2 situation, however, knowledge of the public keys alone is not sufficient to carry out the attestations. 
cryptographic properties ensure that it is impossible for the user to attest without the physical presence of the tpm since the private part of those keys are sealed tight in the chip, protected even (mainly) against the computer owner. 
this renders the old trick of sharing netflix password, for example, invalid. 
for security experts or computer owners who disapprove of rootkit malware taking control of their computers, virtual machines are indispensable. 
tpm2 will render vm technologies useless in their fight against those classes of rootkit malware coming from the corporations. 
the identity under which most vm's attest to the remote lords will necessarily be different from any manufacturer-certified identities and they will most likely be crippled or even outright banned by the windows os. 
3. the train of prison. 
suppose an engineer has to design a luxurious prison made of a train. 
it is not enough to ensure that each railcar is locked. 
one also has to ensure that there is no exit in each gangway between adjacent railcars. 
a drm-enforcing computer is a luxurious prison made of a train. 
tpm2 is the locomotive and provides the root of trust, followed by the uefi firmware, followed by the operating system, possibly followed by one or more levels of virtual machines, and finally followed by the drm application. 
in addition, there may be several intervening railcars which represent the various trustworthy device drivers and/or services started by the host and each level of guest operating system. 
if the user somehow inserts a virtual machine or service of her own design somewhere along the way, she may then escape from the prison even if all the other railcars are trustworthy. 
the platform configuration registers pcr in a tpm2 chip are designed in such a curious way as to allow only resetting and extending values but not storing arbitrary values. 
that's a cryptographic way of ensuring the gangways are sealed tightly. 
4. closing in the dragnet. 
if the dragnet is big enough, few fish swimming inside it will feel restricted. 
if there are several holes on the dragnet, fish may be persuaded that what surrounds them is not a dragnet. 
if the holes grow smaller slowly enough, hardly any fish will care about it. 
when the main exit of the dragnet is taken care of, the small holes can be sealed and all fish can finally be trusted to behave inside the dragnet. 
the following is a list of things likely to happen as tpm2 becomes pervasive. 
the less controversial measures and those affecting only a small population are more likely to happen earlier. 
free firmware such as libreboot is not trusted. 
vm hypervisors are trusted only if their emulated tpm2 bear certain public keys. 
only the microsoft version, possibly plus a small number of major distributions, of the gnu/linux operating system are trusted. 
applications are trusted only if they come from the windows store. 
applications are de-listed from the windows store if they are found to circumvent drm, etc. 
software protecting user privacy and freedom against microsoft telemetry and control are de-listed from the windows store. 
software competing with microsoft products are de-listed from the windows store. 
ever fewer windows configuration settings remain modifiable if the system is to remain trusted. 
container technology might slightly mitigate the problem. 
meanwhile, applications in such areas as drm, game-anticheating, exam proctoring, and chat message revocation will be among the first to enforce remote attestation. 
for it is relatively easy for the corporate lords to persuade the population to give up their control of their own physical properties in exchange for the delusion of "fairness" (among the peasants) in these application areas. 
in each of the above, microsoft may leave alone the older versions of the mentioned software/firmware so as to minimize commotion and resistance. 
time will take care of the small group of old-school die-hard population. 
eventually microsoft and its corporate partners will have total remote control over computers of the entire population, who will finally earn the lords' trust. 
* * * * * to escape from this dragnet, one can wean oneself from unnecessary cloud computing software starting today. 
gabriel sieben summarizes the situation very well: old copy protection systems tried to control what your pc could do, and were always defeated. 
remote attestation by itself permits your pc to do almost anything you want, but ensures your pc can't talk to any services requiring attestation if they don't like what your pc is doing or not doing. 
richard m. stallman's warning about service as a software substitute 10 years ago is refreshingly worth heeding again today. 
for communicating with friends and colleagues, use a completely decentralized protocol or community-run service. 
there are, however, some cloud services (e.g. 
games) that many people find hard to resist. 
it is therefore important to bring awareness and discussion of this issue to a wider population if we believe that physical property right should never be stolen by the "intellectual property right" propaganda. 
[*] chao-kuei hung is an associate professor at the chaoyang university of technology and a member of the software liberty association, taiwan. 
your freedom needs free software. 
many of us know that governments can threaten the human rights of software users through censorship and surveillance of the internet. 
many do not realize that the software they run on their home or work computers can be an even worse threat. 
thinking of software as "just a tool," they suppose that it obeys them, when in fact it often obeys others instead. 
the software running in most computers is nonfree, proprietary software: controlled by software companies, not by its users. 
users can't check what these programs do, nor prevent them from doing what they don't want. 
most people accept this because they have seen no other way, but it is simply wrong to give developers power over the users' computer. 
this unjust power, as usual, tempts its wielders to further misdeeds. 
if a computer talks to a network, and you don't control the software in it, it can easily spy on you. 
microsoft windows spies on users; for instance, it reports what words a user searches for in her own files, and what other programs are installed. 
realplayer spies too; it reports what the user plays. 
cell phones are full of nonfree software, which spies. 
cell phones send out localizing signals even when "off," many can send out your precise gps location whether you wish or not, and some models can be switched on remotely as listening devices. 
users can't fix these malicious features because they don't have control. 
some proprietary software is designed to restrict and attack its users. 
windows vista was a big advance in this field; the reason it required replacement of old hardware is that the new models were designed to support unbreakable restrictions. 
microsoft thus required users to pay for shiny new shackles. 
vista was also designed to permit forced updating by corporate authority. 
hence the bad vista campaign, which urged windows users not to "upgrade" to vista. 
for later windows versions, which are even more malicious, we now have upgrade from windows. 
mac os also contains features designed to restrict its users. 
microsoft has installed back doors for the us government's use in the past (reported on heise.de). 
we cannot check whether they have successors today. 
other proprietary programs may or may not have back doors, but since we cannot check them, we cannot trust them. 
the only way to assure that your software is working for you is to insist on free/libre software. 
this means users get the source code, are free to study and change it, and are free to redistribute it with or without changes. 
the gnu/linux system, developed specifically for users' freedom, includes office applications, multimedia, games, and everything you really need to run a computer. 
see our list of totally free/libre versions of gnu/linux. 
a special problem occurs when activists for social change use proprietary software, because its developers, who control it, may be companies they wish to protest—or that work hand in glove with the states whose policies they oppose. 
control of our software by a proprietary software company, whether it be microsoft, apple, adobe or skype, means control of what we can say, and to whom. 
this threatens our freedom in all areas of life. 
there is also danger in using a company's server to do your word processing or email—and not just if you are in china, as us lawyer michael springmann discovered. 
in 2003, aol not only handed over to the police his confidential discussions with clients, it also made his email and his address list disappear, and didn't admit this was intentional until one of its staff made a slip. 
springmann gave up on getting his data back. 
the us is not the only state that doesn't respect human rights, so keep your data on your own computer, and your backups under your own custody—and run your computer with free/libre software. 
